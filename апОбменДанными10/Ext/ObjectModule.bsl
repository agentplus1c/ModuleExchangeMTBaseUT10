Перем мМассивБыстрыеОтборы;
Перем удал;
Перем ПапкаТреков;
Перем НеЗагруженнаяКонтактнаяИнформация;

// ПЕРЕМЕННЫЕ МОДУЛЯ 

Перем гОтражатьВБухгалтерскомУчете; //vd_180904 Добавлена - Булево - Требуется для загрузки документов, для заполнения реквизита ОтражатьВБухгалтерскомУчете
Перем гОтражатьВНалоговомУчете;     //vd_180904 Добавлена - Булево - Требуется для загрузки документов, для заполнения реквизита ОтражатьВНалоговомУчете   
 
Перем СохраненнаяНастройка;
Перем Имена Экспорт;					// содержит строковые имена переменных, используемых в работе обработки; тип: массив

Перем ПользовательАгентПлюс;			// пользователь, с которым ассоциируются все настройки обработки, тип: элемент справочника "Пользователи"

Перем ДопустимыеФайлы;					// массив имён файлов (без полного пути, с расширением), которые обрабатываются    
Перем ДниНедели Экспорт;

//(( sk_190116 Исключено использование внешней компоненты APPlus.dll (MOD-224)
Перем МУОбъект Экспорт; 
Перем КомпонентаЗагружена;
//)) sk_190116 	     

Перем ТабЛогОбмена;
Перем ТабЛогОбработки;

Перем стрПустойИдентификатор Экспорт;
Перем ПустойИдентификатор Экспорт;
Перем Т_;
Перем СтрДопустимыеСимволы;
Перем ТаблЗначКонстанты	Экспорт;

Перем ТипКонстанты Экспорт;				// "перечисление", определяет возвможные типы констант, тип: Структура
Перем ТипыЛогов Экспорт;				// "перечисление", определяет возвможные типы логов ("Обмен", "Обработка"), тип: Структура

Перем СоответствиеСпр;
Перем СоответствиеДок;
Перем СоответствиеПеречислений;
Перем СоответствиеСписковЗначений Экспорт;

Перем НастройкиМУПоУмолчанию Экспорт;
Перем НастройкиАгентаПоУмолчанию Экспорт;
Перем НастройкиОбработкиПоУмолчанию Экспорт;
Перем НастройкиАгентаМУПоУмолчанию Экспорт;            

Перем НастройкиПланированиеАгентовПоУмолчанию Экспорт;

Перем МаксИнтервалОчищаемыхДокументов Экспорт;	// количество дней (до текущего дня), за которые будет производиться поиск для очищаемых документов
Перем КоличествоПопыток;   	    		// количество попыток для проведения операции создания или записи объекта
Перем ПаузаМеждуПопытками; 		 		// пауза в секундах между попытками    
Перем мВалютаРегламентированногоУчета;
Перем ПользовательСеанса;
Перем ДатаЛога;
Перем СимволРазделительМТ Экспорт;
Перем СтрИдКонстантыИдентификаторАгента;
Перем СтрИдКонстантыКодЗапроса;
Перем ПодключениеFTP;

Перем МаксимальныйРазмерФайлаВложения;
Перем АдресТехПоддержки;
Перем НаименованиеКонфигурации Экспорт;
Перем текНаименованиеКонфигурации;
Перем гВерсияКонфигурации; // sk_181010 Добавлена - Строка - версия конфигурации
Перем гЗапросМУ;   		   // sk_190110 Добавлена - Соответствие - запрос мобильных устройств
Перем гОбработаноЗаписей;  // sk_190118 Добавлена - Число - нумератор обработки записей при загрузке данных

////////////////////////////////////////////////////////////////////
//////////////////КОНСТАНТЫ ФАЙЛА ОБМЕНА ДАННЫМИ////////////////////

Перем эл_Данные; 								   //DATA
Перем эл_Константы;                                //CONSTANTS
Перем эл_Справочники;                              //CATALOGS
Перем эл_Справочник;                               //CATALOG
Перем эл_Документы;                                //DOCUMENTS
Перем эл_Документ;                                 //DOCUMENT
Перем эл_Элементы;                                 //ELEMENTS
Перем эл_Элемент;                                  //ITEM
Перем эл_Группы;                                   //GROUPS
Перем эл_Группа;                                   //GROUP
Перем эл_ТабличныеЧасти;                           //TABLES
Перем эл_ТабличнаяЧасть;                           //TABLE
Перем эл_Удалить;                                  //KILLEDS 
Перем эл_Подтвердить;                              //CONFIRMATIONS 
Перем эл_Картинки;								   //PICTURES
Перем эл_Нумераторы;							   //NUMERATORS

Перем ат_Гуид;                                     //GUID
Перем ат_Значение;                                 //Value
Перем ат_Дата;                                     //NUMERTIME
Перем ат_ПометкаУдаления;                          //IsDeleted
Перем ат_Код;                                      //Code
Перем ат_Наименование;                             //Name
Перем ат_Проведен;                                 //IsPost
Перем ат_ПрефиксДокумента;                         //DocNumberPrefix
Перем ат_НомерДокумента;                           //DocNumber
Перем ат_ДатаДокумента;                            //dt
Перем ат_ИдетификаторДокумента;                    //DocId
Перем ат_ОчиститьПередЗагрузкой;                   //KILLALL
Перем ат_ГруппаРодитель; 		                   //ParId
//Перем ат_ТчСправочникРодитель;				   //CtlgId (устарело)
Перем ат_ТчДокументРодитель;					   //DOCID	
Перем ат_ИмяФайла;								   //FileName
Перем ат_Формат;								   //Format
Перем ат_Описание;								   //Description
Перем ат_Комментарий;							   //Comment

//(( sk_190116 Исключено использование внешней компоненты APPlus.dll (MOD-224) 
Перем МУОбъектServer Экспорт;
Перем МУОбъектZip    Экспорт;
Перем МУОбъектCrypto Экспорт;
//)) sk_190116

//////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ ///////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////

Процедура ИнициализироватьПеременные()
	
	мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	
	Т_ = Символы.Таб;
	
	МаксИнтервалОчищаемыхДокументов = 31;
	
    // в зависимости от того файловый это вариант БД или нет немного по-разному путь в БД формируется
	стрЗнач = СтрокаСоединенияИнформационнойБазы();
	//этоФайловаяБаза = Найти(Врег(), "FILE=");
	соотвЗнач = ИзСтрокиВМассив(ВРег(стрЗнач), ";", "Соответствие");
	стрЗнач = соотвЗнач.Получить("FILE");
	этоФайловаяБаза = ?(стрЗнач = Неопределено, Ложь, Истина);
	Если этоФайловаяБаза Тогда
		стрЗнач = СтрЗаменить(стрЗнач, """", "");
		каталогПоУмолчанию = стрЗнач;
	Иначе
		каталогПоУмолчанию = КаталогПрограммы();
	КонецЕсли;

	//путьПоУмолчанию = ?(;	
	
	Имена = Новый Соответствие();
	Имена.Вставить("АгентПлюсСОД", НСтр("ru='Агент Плюс СОД'"));
	Имена.Вставить("ПользовательАгентПлюс",  НСтр("ru='Агент Плюс'"));
	Имена.Вставить("ГруппаАгентПлюс",  НСтр("ru='Агент Плюс: Агенты'"));	
	Имена.Вставить("ПрефиксКодаПользователя",  НСтр("ru='Моб. сотр. '"));
	//---------
	имяСвойства = "Категория";
	Имена.Вставить("СвойствоОбъекта_" 				+ имяСвойства, НСтр("ru='Агент Плюс: Категория документа'"));		
	Имена.Вставить("ИдентификаторСвойстваОбъекта_" 	+ имяСвойства, Новый УникальныйИдентификатор("8a13ae35-d349-11de-9c3b-001d923fc78e"));		
	массивТипов = Новый Массив;
	массивТипов.Добавить(Тип("СправочникСсылка.ЗначенияСвойствОбъектов"));
	текОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
	Имена.Вставить("ТипЗначения_" 					+ имяСвойства, текОписаниеТипов);	
	Имена.Вставить("НазначениеСвойства_" 			+ имяСвойства, ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документы);	
	//---------
	имяСвойства = "СтатусКонтрагента";
	Имена.Вставить("СвойствоОбъекта_" 				+ имяСвойства, НСтр("ru='Агент Плюс: Статус контрагента'"));		
	Имена.Вставить("ИдентификаторСвойстваОбъекта_" 	+ имяСвойства, Новый УникальныйИдентификатор("16ddb2b2-38d5-4f5f-a574-d105ddee5062"));		
	массивТипов = Новый Массив;
	массивТипов.Добавить(Тип("СправочникСсылка.ЗначенияСвойствОбъектов"));
	текОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
	Имена.Вставить("ТипЗначения_" 					+ имяСвойства, текОписаниеТипов);
	Имена.Вставить("НазначениеСвойства_" 			+ имяСвойства, ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты);	
	//---------
	имяСвойства = "GPS";
	Имена.Вставить("СвойствоОбъекта_" 				+ имяСвойства, НСтр("ru='Агент Плюс: GPS координаты'"));	
	Имена.Вставить("ИдентификаторСвойстваОбъекта_" 	+ имяСвойства, Новый УникальныйИдентификатор("fca6ba36-c1f6-4174-b728-a2f4d891372d"));	
	массивТипов = Новый Массив;
	массивТипов.Добавить(Тип("Строка"));
	текОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
	Имена.Вставить("ТипЗначения_" 					+ имяСвойства, текОписаниеТипов);		
	Имена.Вставить("НазначениеСвойства_" 			+ имяСвойства, ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документы);
	//---------
	имяСвойства = "ДатаСозданияВМУ";
	Имена.Вставить("СвойствоОбъекта_" 				+ имяСвойства, НСтр("ru='Агент Плюс: Дата создания в мобильном устройстве'"));	
	Имена.Вставить("ИдентификаторСвойстваОбъекта_"	+ имяСвойства, Новый УникальныйИдентификатор("a0c7484c-6fae-4e0f-8262-45838a019114"));
	массивТипов = Новый Массив;
	массивТипов.Добавить(Тип("Дата"));
	текОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
	Имена.Вставить("ТипЗначения_" 					+ имяСвойства, текОписаниеТипов);	
	Имена.Вставить("НазначениеСвойства_" 			+ имяСвойства, ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документы);
	//---------
	имяСвойства = "СозданВМУ";
	Имена.Вставить("КатегорияОбъекта_" 				+ имяСвойства, НСтр("ru='Агент Плюс: Создан в мобильном устройстве'"));	
	Имена.Вставить("ИдентификаторКатегорияОбъекта_" + имяСвойства, Новый УникальныйИдентификатор("da9c697f-6e45-4a9f-9869-e063d3706b6c"));		
	Имена.Вставить("НазначениеКатегории_" 			+ имяСвойства, ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документы);
	//---------
	Имена.Вставить("СимволРазделительGPS", ";");	
	
	Имена.Вставить("ФайлВыгрузки", "FromCDB");
	Имена.Вставить("ФайлЗагрузки", "ToCDB");
	Имена.Вставить("АрхивВыгрузки", "From1C");
	Имена.Вставить("АрхивЗагрузки", "To1C");
	
	Имена.Вставить("ФайлТрек", "gpstrack");
	Имена.Вставить("ФайлМанифест", "manifest");
	Имена.Вставить("ПапкаКартинки", "pictures");
	Имена.Вставить("АрхивВыгрузкиКартинки", "GoodsPhotosFromCDB");
	Имена.Вставить("АрхивЗагрузкиКартинки", "PhotosToCDB");
	Имена.Вставить("РасширениеZIP", ".zip");
	Имена.Вставить("РасширениеXML", ".xml");
	Имена.Вставить("РасширениеTXT", ".txt");
	Имена.Вставить("РасширениеJPG", ".jpg");
	Имена.Вставить("РасширениеТрекСлужбы", ".clt");

	// в данном разделе необходимо прописать заголовки соответствующих форм
	Имена.Вставить("ОсновнаяФорма", 				НСтр("ru='Обмен данными с мобильными устройствами, версия " + ВерсияМодуля +  "'"));
	Имена.Вставить("НастройкиОбработки", 			НСтр("ru='Настройка модуля обмена'"));
	Имена.Вставить("НастройкиПараметровОбработки", 	НСтр("ru='" + Имена["НастройкиОбработки"] + """ закладка ""Настройка параметров обмена'"));
	Имена.Вставить("НастройкиМУ", 					НСтр("ru='" + Имена["НастройкиОбработки"] + """ закладка ""Настройка мобильных устройств'"));
	Имена.Вставить("НастройкиАгентов", 				НСтр("ru='" + Имена["НастройкиОбработки"] + """ закладка ""Настройка агентов'"));		
	Имена.Вставить("СведенияКонтрагентов", 			НСтр("ru='Сведения контрагентов'"));
	Имена.Вставить("КатегорииДокументов", 			НСтр("ru='Категории документов'"));
	Имена.Вставить("КатегорияДокумента", 			НСтр("ru='Категория документа'"));
	Имена.Вставить("Запросы", 						НСтр("ru='Запросы'"));
	Имена.Вставить("СтатусыКонтрагентов", 			НСтр("ru='Статусы контрагентов'"));
	Имена.Вставить("ДопНастройки", 					НСтр("ru='Дополнительные настройки агентов'"));	
	Имена.Вставить("НастройкиАгента", 				НСтр("ru='Настройки агента'"));
	Имена.Вставить("ВыборАгента", 					НСтр("ru='Выбор агента'"));
	Имена.Вставить("ПланированиеАгентов", 			НСтр("ru='Документы Планирование для агентов'"));
	Имена.Вставить("НастройкиТрекинга", 			НСтр("ru='Настройки трекинга'"));
	//---------------------------------------------------
	
	Имена.Вставить("ИдентификаторГруппаСобытияМаршрут", Новый УникальныйИдентификатор("4a319e42-9a8f-11dd-8f92-001d923fc78e"));		
	Имена.Вставить("ГруппаСобытияМаршрут", "Маршрут");
	Имена.Вставить("ИдентификаторГруппаСобытияЦиклическийМаршрут", Новый УникальныйИдентификатор("5a329e12-928f-11dd-8f92-001d923fc78e"));		
	Имена.Вставить("ГруппаСобытияЦиклическийМаршрут", "ЦиклическийМаршрут");
	Имена.Вставить("ИмяОтчета_ЖурналОбмена", 					"апЖурналРегистрации");
	Имена.Вставить("ИмяОтчета_ЗагруженныеДокументы", 			"апЗагруженныеДокументы");
	Имена.Вставить("ИмяОтчета_ВыполнениеПланаПосещений", 		"апВыполнениеПланаПосещений");
	Имена.Вставить("ИмяОбработкаКонтрольПередвиженийАгентов", 	"апКонтрольПередвиженийАгентов");
	
	Имена.Вставить("Обработка", 			НСтр("ru='апОбменДанными'"));
	Имена.Вставить("ЛогОбмена", 			НСтр("ru='Обмен данными'"));
	Имена.Вставить("ЛогОбработки", 			НСтр("ru='Регистрация событий'"));
	
	ДопустимыеФайлыЗагрузки = Новый Соответствие;
	ДопустимыеФайлыЗагрузки.Вставить("ФайлЗагрузки", 		Имена["ФайлЗагрузки"] + Имена["РасширениеXML"]);    			// файл обмена XML
	ДопустимыеФайлыЗагрузки.Вставить("АрхивКартинки", 		Имена["АрхивЗагрузкиКартинки"] + Имена["РасширениеZIP"]);   	// архив с картинками
	ДопустимыеФайлыЗагрузки.Вставить("ФайлТрек", 			Имена["ФайлТрек"] + Имена["РасширениеTXT"]); 					// файл трека
	ДопустимыеФайлыЗагрузки.Вставить("ФайлТрекСлужба",	 	Имена["ФайлТрек"] + Имена["РасширениеTXT"] + Имена["РасширениеТрекСлужбы"]); 	// файл фоновый трек
	
	стрПустойИдентификатор = "00000000-0000-0000-0000-000000000000";
	ПустойИдентификатор = Новый УникальныйИдентификатор(стрПустойИдентификатор);
	СтрДопустимыеСимволы = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_1234567890";
			
	ТипКонстанты = Новый Структура;
	ТипКонстанты.Вставить("МУ", 1);
	ТипКонстанты.Вставить("Пользователь", 2);
	ТипКонстанты.Вставить("Обработка", 3);
	ТипКонстанты.Вставить("Типовая", 4);
	ТипКонстанты.Вставить("АгентМУ", 5);
	
	ДниНедели = Новый Соответствие;
	ДниНедели[1] = НСтр("ru='пн'");
	ДниНедели[2] = НСтр("ru='вт'");
	ДниНедели[3] = НСтр("ru='ср'");
	ДниНедели[4] = НСтр("ru='чт'");
	ДниНедели[5] = НСтр("ru='пт'");
	ДниНедели[6] = НСтр("ru='СБ'");
	ДниНедели[7] = НСтр("ru='ВС'");
	
	////////////////////////////////////////////////////////////////////
	эл_Данные	  	    = "DATA";
  	эл_Константы  	    = "CONSTANTS";
	эл_Справочники 	    = "CATALOGS";
	эл_Справочник  	    = "CATALOG";
  	эл_Документы   	    = "DOCUMENTS";
	эл_Документ   	    = "DOCUMENT";
	эл_Картинки			= "PICTURES";
	эл_Нумераторы		= "NUMERATORS";

  	эл_Элементы         = "ELEMENTS";
	эл_Элемент 	        = "ITEM";
	эл_Группы 	        = "GROUPS";
	эл_Группа 	        = "GROUP";
	эл_ТабличныеЧасти   = "TABLES";
 	эл_ТабличнаяЧасть   = "TABLE";
	эл_Удалить 		    = "KILLEDS";
	эл_Подтвердить      = "CONFIRMATIONS";
	
	ат_Гуид 		    	= "GUID";
 	ат_Значение 	   		= "Value";
	ат_Дата 		    	= "NUMERTIME";
    ат_ПометкаУдаления 		= "IsDeleted";
    ат_Код 			    	= "Code";
    ат_Наименование     	= "Name";
	ат_Проведен		    	= "IsPost";
	ат_ИдетификаторДокумента = "DocId";
	ат_ПрефиксДокумента		= "DocNumberPrefix";
	ат_НомерДокумента   	= "DocNumber";
	ат_ДатаДокумента    	= "dt";
	ат_ОчиститьПередЗагрузкой = "KILLALL";
	ат_ГруппаРодитель		= "ParId";
	//ат_ТчСправочникРодитель = "CtlgId";
	ат_ТчДокументРодитель 	= "DocId";
	ат_ИмяФайла				= "FileName";
	ат_Формат				= "Format";
	ат_Описание				= "Description";
	
	ат_Комментарий			= "Comment";
	
	СимволРазделительМТ = ",";
	
	////////////////////////////////////////////////////////////////////	
	// соответствие реквизитов справочников
	СоответствиеСпр = Новый Соответствие();
	
	// Организации
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ИспользоватьНДС", "A02");
	СтруктураРеквизитов.Вставить("ЮрАдрес", "A03");
	СтруктураРеквизитов.Вставить("Телефон", "A04");
	СтруктураРеквизитов.Вставить("ИНН", "A05");
	СтруктураРеквизитов.Вставить("КПП", "A06");
	СтруктураРеквизитов.Вставить("ОГРН", "A07");
	СтруктураРеквизитов.Вставить("ФактАдрес", "A09");
	СтруктураРеквизитов.Вставить("Префикс", "A010");	
	СтруктураРеквизитов.Вставить("БанкНаименование", "A011");	
	СтруктураРеквизитов.Вставить("НомерСчета", "A012");	
	СтруктураРеквизитов.Вставить("КоррСчет", "A013");	
	СтруктураРеквизитов.Вставить("Руководитель", "A014");	
	СтруктураРеквизитов.Вставить("Бухгалтер", "A015");
	СтруктураРеквизитов.Вставить("БИК", "A016");	
	СтруктураРеквизитов.Вставить("НаименованиеПолное", "A017");
	
	СтруктураРеквизитов.Вставить("_Представление", НСтр("ru='Организации'"));
	СтруктураРеквизитов.Вставить("_ИмяСправочника", "Организации");
	СтруктураРеквизитов.Вставить("_Загружать", Ложь);
	
	СоответствиеСпр.Вставить("0e3cbaea-5467-45cd-8c86-fb1777da435b", СтруктураРеквизитов);
	СоответствиеСпр.Вставить("Организации", "0e3cbaea-5467-45cd-8c86-fb1777da435b");
	
	//Контрагенты
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Родитель", "A02");	
	СтруктураРеквизитов.Вставить("Скидка", "A05");
	СтруктураРеквизитов.Вставить("СтатусКонтрагента", "A06");	
	СтруктураРеквизитов.Вставить("ОсновнойДоговор", "A08");		
	СтруктураРеквизитов.Вставить("ТипЦены", "A09");
	//%
	СтруктураРеквизитов.Вставить("Комментарий", "A023");
	СтруктураРеквизитов.Вставить("_Представление", НСтр("ru='Контрагенты'"));
	СтруктураРеквизитов.Вставить("_ИмяСправочника", "Контрагенты");
	СтруктураРеквизитов.Вставить("_Загружать", Истина);
	
	СоответствиеСпр.Вставить("9450980f-fb59-47e3-bae2-aa3c58441b1a", СтруктураРеквизитов);
	СоответствиеСпр.Вставить("Контрагенты", "9450980f-fb59-47e3-bae2-aa3c58441b1a");
	
	СоответствиеСпр.Вставить("1e18c8db-08f6-47da-874b-100d6e109ab8", Новый Структура);
	СоответствиеСпр.Вставить("ГрГруппы_Контрагенты", "1e18c8db-08f6-47da-874b-100d6e109ab8");
	
	//ДоговорыКонтрагентов
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Контрагент", "A02");	
	СтруктураРеквизитов.Вставить("Дата", "A03");
	СтруктураРеквизитов.Вставить("СрокДействия", "A04");	
	СтруктураРеквизитов.Вставить("Организация", "A05");	
	СтруктураРеквизитов.Вставить("ТипЦен", "A06");				
	СтруктураРеквизитов.Вставить("_Представление", НСтр("ru='Договоры контрагентов'"));
	СтруктураРеквизитов.Вставить("_ИмяСправочника", "ДоговорыКонтрагентов");
	СтруктураРеквизитов.Вставить("_Загружать", Истина);
	
	СоответствиеСпр.Вставить("735a9ce5-dcc1-4d1a-8f8d-643a50a6befc", СтруктураРеквизитов);
	СоответствиеСпр.Вставить("ДоговорыКонтрагентов", "735a9ce5-dcc1-4d1a-8f8d-643a50a6befc");
	
	//ТорговыеТочки
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Контрагент", "A02");			
	СтруктураРеквизитов.Вставить("Комментарий", "A07");			
	СтруктураРеквизитов.Вставить("ТипЦены", "A08");			
	СтруктураРеквизитов.Вставить("_Представление", НСтр("ru='ТорговыеТочки'"));	
	СтруктураРеквизитов.Вставить("_ИмяСправочника", "Контрагенты");				//загружается в справочник "Контрагенты"
	СтруктураРеквизитов.Вставить("_Загружать", Истина);
	
	СоответствиеСпр.Вставить("d3dbb02e-681e-4fc2-ad0e-8ef1234e9f48", СтруктураРеквизитов);
	СоответствиеСпр.Вставить("ТорговыеТочки", "d3dbb02e-681e-4fc2-ad0e-8ef1234e9f48");
	
	//КонтактныеЛицаКонтрагентов
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ДатаРождения", "A02");		
	СтруктураРеквизитов.Вставить("Контрагент", "A03");
	СтруктураРеквизитов.Вставить("ТорговаяТочка", "A04");
	СтруктураРеквизитов.Вставить("Комментарий", "A05");	
	СтруктураРеквизитов.Вставить("_Представление", НСтр("ru='Контактные лица контрагентов'"));	
	СтруктураРеквизитов.Вставить("_ИмяСправочника", "КонтактныеЛицаКонтрагентов");
	СтруктураРеквизитов.Вставить("_Загружать", Истина);
	
	СоответствиеСпр.Вставить("cf387a58-4655-41b5-a460-85884d1f20d0", СтруктураРеквизитов);
	СоответствиеСпр.Вставить("КонтактныеЛицаКонтрагентов", "cf387a58-4655-41b5-a460-85884d1f20d0");	
	
	//ВидыКонтактнойИнформации
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Тип", "A02");
	СтруктураРеквизитов.Вставить("ТипОбъекта", "A03");
	СтруктураРеквизитов.Вставить("_Представление", НСтр("ru='Виды контактной информации'"));	
	СтруктураРеквизитов.Вставить("_ИмяСправочника", "ВидыКонтактнойИнформации");
	СтруктураРеквизитов.Вставить("_Загружать", Ложь);
	
	СоответствиеСпр.Вставить("564e0eca-c498-4d28-83d7-4bdeaec558e2", СтруктураРеквизитов);
	СоответствиеСпр.Вставить("ВидыКонтактнойИнформации", "564e0eca-c498-4d28-83d7-4bdeaec558e2");		
	
	//КонтактнаяИнформация  
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Контрагент", "A01");		
	СтруктураРеквизитов.Вставить("ТорговаяТочка", "A02");
	СтруктураРеквизитов.Вставить("КонтактноеЛицоКонтрагента", "A03");
	СтруктураРеквизитов.Вставить("Тип", "A04");
	СтруктураРеквизитов.Вставить("Вид", "A05");
	СтруктураРеквизитов.Вставить("Значение", "A06");
	СтруктураРеквизитов.Вставить("_Представление", НСтр("ru='Контактная информация'"));	
	СтруктураРеквизитов.Вставить("_ИмяСправочника", "КонтактнаяИнформация");
	СтруктураРеквизитов.Вставить("_Загружать", Истина);
	
	СоответствиеСпр.Вставить("85b62882-0156-4881-85ba-b8fef05c867b", СтруктураРеквизитов);
	СоответствиеСпр.Вставить("КонтактнаяИнформация", "85b62882-0156-4881-85ba-b8fef05c867b");	
	
	//ВидыДоставки  Альфия 26.05.2017 Справочник  !!!!!
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("GUID", "GUID");	
	СтруктураРеквизитов.Вставить("Наименование", "Name");	
	СтруктураРеквизитов.Вставить("_Представление", НСтр("ru='Виды доставки'"));	
	СтруктураРеквизитов.Вставить("_ИмяСправочника", "ВидыДоставки");
	СоответствиеСпр.Вставить("e4623b4e-2f19-47ab-b158-ee0e021d3911", СтруктураРеквизитов);
	СоответствиеСпр.Вставить("ВидыДоставки", "e4623b4e-2f19-47ab-b158-ee0e021d3911");	
	// Альфия 26.05.2017
	
	//НОМЕНКЛАТУРА
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Код", "Code");
	СтруктураРеквизитов.Вставить("СтавкаНДС", "A04");
	СтруктураРеквизитов.Вставить("БазоваяЕдиница", "A06");
	СтруктураРеквизитов.Вставить("ВестиУчетПоХарактеристикам", "A08");
	СтруктураРеквизитов.Вставить("СвободныйОстаток", "A011");
	СтруктураРеквизитов.Вставить("ЕдиницаХраненияОстатков", "A013");
	СтруктураРеквизитов.Вставить("Весовой", "A014");
	СтруктураРеквизитов.Вставить("Услуга", "A015");
	СтруктураРеквизитов.Вставить("НаименованиеПолное", "A035");
	СтруктураРеквизитов.Вставить("ЕстьОстатки", "A037");
	СтруктураРеквизитов.Вставить("МинимальнаяЦена", "A040");
	СтруктураРеквизитов.Вставить("ОстатокНаБорту", "A041");//vd_180809
	СтруктураРеквизитов.Вставить("ДополнительноеОписаниеНоменклатуры", "A042");
	СтруктураРеквизитов.Вставить("ОсновноеИзображение", "A043");	
	СтруктураРеквизитов.Вставить("ПорядокВФайлеВыгрузки", "A044");	
	СтруктураРеквизитов.Вставить("ЕдиницаЦены", "A050");//++Ratmir 2018-04-24
	СтруктураРеквизитов.Вставить("ЕстьОстаткиНаБорту", "A052");//vd_180809	
	СтруктураРеквизитов.Вставить("_Представление", НСтр("ru='Номенклатура'"));	
	СтруктураРеквизитов.Вставить("_ИмяСправочника", "Номенклатура");
	СтруктураРеквизитов.Вставить("_Загружать", Ложь);
	СоответствиеСпр.Вставить("d6d52ada-0f38-4112-af3c-2f1e425a43d1", СтруктураРеквизитов);
	СоответствиеСпр.Вставить("Номенклатура", "d6d52ada-0f38-4112-af3c-2f1e425a43d1");
	// группа Родитель
	СоответствиеСпр.Вставить("8e502a85-8dd4-41cf-a7a4-17ab50872d36", Новый Структура);
	СоответствиеСпр.Вставить("ГрРодитель_Номенклатура", "8e502a85-8dd4-41cf-a7a4-17ab50872d36");
	// группа Категория
	СоответствиеСпр.Вставить("e42da5b9-e29b-43e1-b7e3-9b500879d6b7", Новый Структура);
	СоответствиеСпр.Вставить("ГрКатегория_Номенклатура", "e42da5b9-e29b-43e1-b7e3-9b500879d6b7");	
	// табличная часть "Остатки"
	СтруктураТЧ = Новый Структура;
	СтруктураТЧ.Вставить("Идентификатор", "A06");		
	СоответствиеСпр.Вставить("af0a6972-4bca-4652-a3cf-8ebc1ed1ee0d", СтруктураТЧ);
	СоответствиеСпр.Вставить("ТчОстатки_Номенклатура", "af0a6972-4bca-4652-a3cf-8ebc1ed1ee0d");	
	// табличная часть "Цены"
	СтруктураТЧ = Новый Структура;
	СтруктураТЧ.Вставить("Идентификатор", "A011");
	СоответствиеСпр.Вставить("ТчЦены_Номенклатура", "7f72aed2-94f7-4165-b112-c7a69fea70cc");
	СоответствиеСпр.Вставить("7f72aed2-94f7-4165-b112-c7a69fea70cc", СтруктураТЧ);
		
	//Характеристики номенклатуры	
	СтруктураРеквизитов = Новый Соответствие;
	
	СтруктураРеквизитов.Вставить("Владелец", "A02");
	СтруктураРеквизитов.Вставить("СвободныйОстаток", "A04");
	СтруктураРеквизитов.Вставить("ЕстьОстатки", "A037");
	СтруктураРеквизитов.Вставить("Акция", "A038");
	СтруктураРеквизитов.Вставить("_Представление", "Характеристики номенклатуры");	
	СтруктураРеквизитов.Вставить("_ИмяСправочника", "ХарактеристикиНоменклатуры");
	СтруктураРеквизитов.Вставить("_Загружать", Ложь);
	
	СоответствиеСпр.Вставить("cc552c31-f7de-4259-a6e3-66ef765d3b43", СтруктураРеквизитов);
	СоответствиеСпр.Вставить("ХарактеристикиНоменклатуры", "cc552c31-f7de-4259-a6e3-66ef765d3b43");
	
		// табличная часть "Остатки"
		СтруктураТЧ = Новый Структура;
		СтруктураТЧ.Вставить("Идентификатор", "A06");		
		
		СоответствиеСпр.Вставить("19481e88-8575-4720-80e6-222816c754e4", СтруктураТЧ);
		СоответствиеСпр.Вставить("ТчОстатки_ХарактеристикиНоменклатуры", "19481e88-8575-4720-80e6-222816c754e4");	
		
		// табличная часть "Остатки"
		СтруктураТЧ = Новый Структура;
		СтруктураТЧ.Вставить("Идентификатор", "A011");		
		
		СоответствиеСпр.Вставить("d91732e1-d4d8-4566-9f4f-bb1b0a043e6f", СтруктураТЧ);
		СоответствиеСпр.Вставить("ТчЦены_ХарактеристикиНоменклатуры", "d91732e1-d4d8-4566-9f4f-bb1b0a043e6f");	
			
	//ЕдиницыИзмерения
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Коэффициент", "A02");		
	СтруктураРеквизитов.Вставить("Владелец", "A03");
	СтруктураРеквизитов.Вставить("Вес", "A04");
	СтруктураРеквизитов.Вставить("_Представление", НСтр("ru='Единицы измерения'"));	
	СтруктураРеквизитов.Вставить("_ИмяСправочника", "ЕдиницыИзмерения");
	СтруктураРеквизитов.Вставить("_Загружать", Ложь);
	
	СоответствиеСпр.Вставить("80452c60-b442-4da9-a048-42f63270ca14", СтруктураРеквизитов);
	СоответствиеСпр.Вставить("ЕдиницыИзмерения", "80452c60-b442-4da9-a048-42f63270ca14");
	
	//ТипыЦен
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ЦенаВключаетНДС", "A02");			
	СтруктураРеквизитов.Вставить("_Представление", НСтр("ru='Типы цен номенклатуры'"));	
	СтруктураРеквизитов.Вставить("_ИмяСправочника", "ТипыЦен");
	СтруктураРеквизитов.Вставить("_Загружать", Ложь);
	
	СоответствиеСпр.Вставить("00f1ffe7-e16e-4ff4-9ef1-b8d0c54bdf59", СтруктураРеквизитов);
	СоответствиеСпр.Вставить("ТипыЦен", "00f1ffe7-e16e-4ff4-9ef1-b8d0c54bdf59");
	
	//Склады
	СтруктураРеквизитов = Новый Структура;		
	СтруктураРеквизитов.Вставить("_Представление", НСтр("ru='Склады'"));
	СтруктураРеквизитов.Вставить("_ИмяСправочника", "Склады");
	СтруктураРеквизитов.Вставить("_Загружать", Ложь);
	
	СоответствиеСпр.Вставить("2516ffce-f46f-4326-be00-438ef0871d30", СтруктураРеквизитов);
	СоответствиеСпр.Вставить("Склады", "2516ffce-f46f-4326-be00-438ef0871d30");
	
	//КатегорииДокументов
	СтруктураРеквизитов = Новый Структура;		
	СтруктураРеквизитов.Вставить("Наименование", ат_Наименование);		
	СтруктураРеквизитов.Вставить("Цвет", "A02");			
	СтруктураРеквизитов.Вставить("ВидыДокументов", "A03");			
	СтруктураРеквизитов.Вставить("_Представление", НСтр("ru='Категории документов'"));	
	СтруктураРеквизитов.Вставить("_ИмяСправочника", "КатегорииДокументов");
	СтруктураРеквизитов.Вставить("_Загружать", Ложь);
	
	СоответствиеСпр.Вставить("f997f837-8721-4896-8fe8-3497c6c38206", СтруктураРеквизитов);
	СоответствиеСпр.Вставить("КатегорииДокументов", "f997f837-8721-4896-8fe8-3497c6c38206");

	//НоменклатурныеГруппы
	СтруктураРеквизитов = Новый Структура;		
	СтруктураРеквизитов.Вставить("_Представление", НСтр("ru='Номенклатурные группы'"));	
	СтруктураРеквизитов.Вставить("_ИмяСправочника", "НоменклатурныеГруппы");
	СтруктураРеквизитов.Вставить("_Загружать", Ложь);
	
	СоответствиеСпр.Вставить("41598c02-f788-48a7-a039-645ef74bd57f", СтруктураРеквизитов);
	СоответствиеСпр.Вставить("НоменклатурныеГруппы", "41598c02-f788-48a7-a039-645ef74bd57f");
	
	//СтатусыКонтрагентов	
	СтруктураРеквизитов = Новый Структура;		
	СтруктураРеквизитов.Вставить("Наименование", ат_Наименование);		
	СтруктураРеквизитов.Вставить("Предупреждение", "A02");		
	СтруктураРеквизитов.Вставить("Цвет", "A03");	
	СтруктураРеквизитов.Вставить("_Представление", НСтр("ru='Статусы контрагентов'"));	
	СтруктураРеквизитов.Вставить("_ИмяСправочника", "СтатусыКонтрагентов");
	СтруктураРеквизитов.Вставить("_Загружать", Ложь);
	
	СоответствиеСпр.Вставить("74046d94-b25d-4f3a-b553-27b7fdd3c60c", СтруктураРеквизитов);
	СоответствиеСпр.Вставить("СтатусыКонтрагентов", "74046d94-b25d-4f3a-b553-27b7fdd3c60c");
	
	//Запросы	
	СтруктураРеквизитов = Новый Структура;		
	СтруктураРеквизитов.Вставить("УникальныйИдентификатор", ат_Код);
	СтруктураРеквизитов.Вставить("Наименование", ат_Наименование);	
	СтруктураРеквизитов.Вставить("_Представление", НСтр("ru='Запросы'"));	
	СтруктураРеквизитов.Вставить("_ИмяСправочника", "Запросы");
	СтруктураРеквизитов.Вставить("_Загружать", Ложь);
	
	СоответствиеСпр.Вставить("cc458719-5078-4dc8-9a0c-fa19e3904f39", СтруктураРеквизитов);
	СоответствиеСпр.Вставить("Запросы", "cc458719-5078-4dc8-9a0c-fa19e3904f39");
	
	// История продаж
	СтруктураРеквизитов = Новый Соответствие;		
	
	СтруктураРеквизитов.Вставить("Контрагент", "A02");
	СтруктураРеквизитов.Вставить("Номенклатура", "A04");
	СтруктураРеквизитов.Вставить("Количество", "A07");
	СтруктураРеквизитов.Вставить("Сумма", "A08");
	СтруктураРеквизитов.Вставить("_Представление", НСтр("ru='История продаж'"));
	СтруктураРеквизитов.Вставить("_ИмяСправочника", "ИсторияПродаж");
	СтруктураРеквизитов.Вставить("_Загружать", Ложь);
		
	СоответствиеСпр.Вставить("af9faa26-9638-41c5-bfce-9514e670ef2e", СтруктураРеквизитов);
	СоответствиеСпр.Вставить("ИсторияПродаж", "af9faa26-9638-41c5-bfce-9514e670ef2e");
	
	// ФотоДокументов
	СтруктураРеквизитов = Новый Соответствие;		
	
	СтруктураРеквизитов.Вставить("Заказ", "A01");
	СтруктураРеквизитов.Вставить("Касса", "A02");
	СтруктураРеквизитов.Вставить("Фото", "A04");
	СтруктураРеквизитов.Вставить("ДатаСоздания", "A05");
	СтруктураРеквизитов.Вставить("_Представление", НСтр("ru='Фотографии документов'"));
	СтруктураРеквизитов.Вставить("_ИмяСправочника", "ФотоДокументов");
	СтруктураРеквизитов.Вставить("_Загружать", Истина);
		
	СоответствиеСпр.Вставить("05ea7926-febb-4d82-97fc-19294dd5dd29", СтруктураРеквизитов);
	СоответствиеСпр.Вставить("ФотоДокументов", "05ea7926-febb-4d82-97fc-19294dd5dd29");
	
	// ФотоСправочников
	СтруктураРеквизитов = Новый Соответствие;		
	
	СтруктураРеквизитов.Вставить("Фото", "A01");
	СтруктураРеквизитов.Вставить("Номенклатура", "A02");
	СтруктураРеквизитов.Вставить("Контрагент", "A03");
	СтруктураРеквизитов.Вставить("ТорговаяТочка", "A04");
	СтруктураРеквизитов.Вставить("_Представление", НСтр("ru='Фотографии справочников'"));
	СтруктураРеквизитов.Вставить("_ИмяСправочника", "ФотоСправочников");
	СтруктураРеквизитов.Вставить("_Загружать", Истина);
	
	СоответствиеСпр.Вставить("e01cf3a3-6765-4fd3-801c-ccdbf85c78fc", СтруктураРеквизитов);
	СоответствиеСпр.Вставить("ФотоСправочников", "e01cf3a3-6765-4fd3-801c-ccdbf85c78fc");
	
	// Штрихкоды
	СтруктураРеквизитов = Новый Соответствие;		
	
	СтруктураРеквизитов.Вставить("Штрихкод", ат_Наименование);
	СтруктураРеквизитов.Вставить("Владелец", "A01");
	СтруктураРеквизитов.Вставить("ЕдиницаИзмерения", "A02");
	СтруктураРеквизитов.Вставить("_Представление", НСтр("ru='Штрихкоды товаров'"));
	СтруктураРеквизитов.Вставить("_ИмяСправочника", "Штрихкоды");
	СтруктураРеквизитов.Вставить("_Загружать", Ложь);
	
	СоответствиеСпр.Вставить("c156cc98-8b92-444e-b8c2-e3de51106b66", СтруктураРеквизитов);
	СоответствиеСпр.Вставить("Штрихкоды", "c156cc98-8b92-444e-b8c2-e3de51106b66");
	
	////////////////////////////////////////////////////////////////////	
	//соответствие реквизитов документов
	СоответствиеДок = Новый Соответствие();
	
	// ЗАКАЗЫ покупателей	
	СтруктураРеквизитов = Новый Соответствие;
	СтруктураТЧ = Новый Структура; //табличная часть "Остатки"
	СтруктураТЧ.Вставить("Номенклатура", "A01");
	СтруктураТЧ.Вставить("ХарактеристикаНоменклатуры", "A02");
	СтруктураТЧ.Вставить("ЕдиницаИзмерения", "A03");
	СтруктураТЧ.Вставить("Количество", "A04");
	СтруктураТЧ.Вставить("Цена", "A05");
	СтруктураТЧ.Вставить("Сумма", "A06");
	СтруктураТЧ.Вставить("СуммаНДС", "A07");
	СтруктураТЧ.Вставить("Вес", "A08");
	СтруктураТЧ.Вставить("ПроцентСкидкиНаценки", "A09");
	СтруктураТЧ.Вставить("СтавкаНДС", "A010");
	СтруктураТЧ.Вставить("Размещение", "A011");
	СтруктураТЧ.Вставить("СуммаСкидки", "A012"); // sk_190516 Добавлено в рамках (MOD-520)

	СтруктураРеквизитов.Вставить("ТчТовары", "0738e61b-f06f-464a-8483-4249e0254819");
	СтруктураРеквизитов.Вставить("0738e61b-f06f-464a-8483-4249e0254819", СтруктураТЧ);
	СтруктураРеквизитов.Вставить("Организация", "A02");
	СтруктураРеквизитов.Вставить("Контрагент", "A03");
	СтруктураРеквизитов.Вставить("ТорговаяТочка", "A04");
	СтруктураРеквизитов.Вставить("ДоговорКонтрагента", "A05");
	СтруктураРеквизитов.Вставить("Скидка", "A06");
	СтруктураРеквизитов.Вставить("ТипЦен", "A07");
	СтруктураРеквизитов.Вставить("СуммаДокумента", "A08");
	СтруктураРеквизитов.Вставить("ОбщийВес", "A09");
	СтруктураРеквизитов.Вставить("ДатаОтгрузки", "A010");	
	СтруктураРеквизитов.Вставить("Комментарий", "A011");	
	СтруктураРеквизитов.Вставить("Категория", "A012");	
	СтруктураРеквизитов.Вставить("Широта", "A014");
	СтруктураРеквизитов.Вставить("Долгота", "A015");
	СтруктураРеквизитов.Вставить("ВидыДоставки", "A020");  // Альфия 26.05.2017
	СтруктураРеквизитов.Вставить("Склад", "A023");
	СтруктураРеквизитов.Вставить("_ИмяДокумента", "ЗаказПокупателя");
	СтруктураРеквизитов.Вставить("_Представление", Документы.ЗаказПокупателя.ПолучитьСсылку().Метаданные().Представление());
	СтруктураРеквизитов.Вставить("_Загружать", Истина);
	СоответствиеДок.Вставить("e01e1f5c-d6e4-46e8-b923-3758b0d79bde", СтруктураРеквизитов);
	СоответствиеДок.Вставить("ЗаказПокупателя", "e01e1f5c-d6e4-46e8-b923-3758b0d79bde");
	
	// РЕАЛИЗАЦИЯ товаров и услуг
	СтруктураРеквизитов = Новый Соответствие;
	СтруктураТЧ = Новый Структура;	// табличная часть "Товары
	СтруктураТЧ.Вставить("Номенклатура", "A01");
	СтруктураТЧ.Вставить("ХарактеристикаНоменклатуры", "A02");
	СтруктураТЧ.Вставить("ЕдиницаИзмерения", "A03");
	СтруктураТЧ.Вставить("Количество", "A04");	
	СтруктураТЧ.Вставить("Цена", "A05");	
	СтруктураТЧ.Вставить("Сумма", "A06");	
	СтруктураТЧ.Вставить("СуммаНДС", "A07");	
	СтруктураТЧ.Вставить("Вес", "A08");	
	СтруктураТЧ.Вставить("ПроцентСкидкиНаценки", "A09");
	СтруктураТЧ.Вставить("СтавкаНДС", "A010");
	СтруктураТЧ.Вставить("Склад", "A011");
	СтруктураТЧ.Вставить("СуммаСкидки", "A012");
	СтруктураРеквизитов.Вставить("ТчТовары", "e4d61e0a-1d62-48d7-b70c-bcba935d377a");
	СтруктураРеквизитов.Вставить("e4d61e0a-1d62-48d7-b70c-bcba935d377a", СтруктураТЧ);
	СтруктураРеквизитов.Вставить("Организация", "A01");
	СтруктураРеквизитов.Вставить("Контрагент", "A02");
	СтруктураРеквизитов.Вставить("ТорговаяТочка", "A03");
	СтруктураРеквизитов.Вставить("ДоговорКонтрагента", "A04");
	СтруктураРеквизитов.Вставить("ТипЦен", "A06");
	СтруктураРеквизитов.Вставить("СуммаДокумента", "A07");
	СтруктураРеквизитов.Вставить("ОбщийВес", "A08");
	СтруктураРеквизитов.Вставить("Комментарий", "A09");
	СтруктураРеквизитов.Вставить("Категория", "A010");
	СтруктураРеквизитов.Вставить("Сделка", "A011");
	СтруктураРеквизитов.Вставить("_ИмяДокумента", "РеализацияТоваровУслуг");
	СтруктураРеквизитов.Вставить("_Представление", Документы.РеализацияТоваровУслуг.ПолучитьСсылку().Метаданные().Представление());
	СтруктураРеквизитов.Вставить("_Загружать", Истина);
	СоответствиеДок.Вставить("7ffb418c-73c9-4883-91c5-827fa5145a3a", СтруктураРеквизитов);
	СоответствиеДок.Вставить("РеализацияТоваровУслуг", "7ffb418c-73c9-4883-91c5-827fa5145a3a");

	// ДОЛГ	
	СтруктураРеквизитов = Новый Соответствие;
	СтруктураРеквизитов.Вставить("Категория", "A01");
	СтруктураРеквизитов.Вставить("Организация", "A02");
	СтруктураРеквизитов.Вставить("Контрагент", "A03");
	СтруктураРеквизитов.Вставить("ТорговаяТочка", "A04");
	СтруктураРеквизитов.Вставить("Договор", "A05");
	СтруктураРеквизитов.Вставить("ДатаОплаты", "A06");
	СтруктураРеквизитов.Вставить("Сумма", "A07");
	СтруктураРеквизитов.Вставить("Комментарий", "A08");
	СтруктураРеквизитов.Вставить("ДокументОснование", "A011");
	СтруктураРеквизитов.Вставить("Выделять", "A014");	
	СтруктураРеквизитов.Вставить("Представление", "A015");	
	СтруктураРеквизитов.Вставить("_ИмяДокумента", "Долг");
	СтруктураРеквизитов.Вставить("_Представление", НСтр("ru='Долг'"));
	СтруктураРеквизитов.Вставить("_Загружать", Ложь);
	СоответствиеДок.Вставить("a93aadfa-2a35-40fe-b88a-3768825cdd31", СтруктураРеквизитов);
	СоответствиеДок.Вставить("Долг", "a93aadfa-2a35-40fe-b88a-3768825cdd31");
	
	// Маршрут
	СтруктураРеквизитов = Новый Соответствие;
	СтруктураТЧ = Новый Структура;	// Табличная часть "ТочкиМаршрута"
	СтруктураТЧ.Вставить("Контрагент", 	  "A01");
	СтруктураТЧ.Вставить("ТорговаяТочка", "A02");
	СтруктураТЧ.Вставить("Время", 		  "A03");
	СтруктураТЧ.Вставить("Комментарий",   "A04");
	СтруктураТЧ.Вставить("Порядок", 	  "A05"); // sk_190306 Добавлено в рамках (MOD-280)
	СтруктураРеквизитов.Вставить("ТчТочкиМаршрута", "ed832712-a167-4b9e-87f1-5127e6f70814");
	СтруктураРеквизитов.Вставить("ed832712-a167-4b9e-87f1-5127e6f70814", СтруктураТЧ);				
	СтруктураРеквизитов.Вставить("_ИмяДокумента", "Маршрут");
	СтруктураРеквизитов.Вставить("_Представление", НСтр("ru='Маршрут'"));
	СтруктураРеквизитов.Вставить("_Загружать", Ложь);
	СоответствиеДок.Вставить("43920fa1-745d-4499-84af-7000672ceeff", СтруктураРеквизитов);
	СоответствиеДок.Вставить("Маршрут", "43920fa1-745d-4499-84af-7000672ceeff");
	
	// ПКО		
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Организация", "A01");
	СтруктураРеквизитов.Вставить("Контрагент", "A02");
	СтруктураРеквизитов.Вставить("ТорговаяТочка", "A03");
	СтруктураРеквизитов.Вставить("ДоговорКонтрагента", "A04");
	СтруктураРеквизитов.Вставить("Комментарий", "A06");
	СтруктураРеквизитов.Вставить("СуммаДокумента", "A07");
	СтруктураРеквизитов.Вставить("ДокументОснование", "A09");
	СтруктураРеквизитов.Вставить("КатегорияДокумента", "A011");
	СтруктураРеквизитов.Вставить("Широта", "A012");
	СтруктураРеквизитов.Вставить("Долгота", "A013");
	СтруктураРеквизитов.Вставить("_ИмяДокумента", "ПриходныйКассовыйОрдер");
	СтруктураРеквизитов.Вставить("_Представление", НСтр("ru='Приходный кассовый ордер'"));
	СтруктураРеквизитов.Вставить("_Загружать", Истина);
	СоответствиеДок.Вставить("749be2e0-9b00-4d7b-9d4d-88ca53327511", СтруктураРеквизитов);
	СоответствиеДок.Вставить("ПриходныйКассовыйОрдер", "749be2e0-9b00-4d7b-9d4d-88ca53327511");
	
	// РКО		
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Организация", "A01");
	СтруктураРеквизитов.Вставить("Контрагент", "A02");
	СтруктураРеквизитов.Вставить("ТорговаяТочка", "A03");
	СтруктураРеквизитов.Вставить("ДоговорКонтрагента", "A04");
	СтруктураРеквизитов.Вставить("Комментарий", "A06");
	СтруктураРеквизитов.Вставить("СуммаДокумента", "A07");
	СтруктураРеквизитов.Вставить("Расход", "A08");
	СтруктураРеквизитов.Вставить("ДокументОснование", "A09");
	СтруктураРеквизитов.Вставить("КатегорияДокумента", "A011");
	СтруктураРеквизитов.Вставить("Широта", "A012");
	СтруктураРеквизитов.Вставить("Долгота", "A013");
	СтруктураРеквизитов.Вставить("_ИмяДокумента", "РасходныйКассовыйОрдер");
	СтруктураРеквизитов.Вставить("_Представление", НСтр("ru='Расходный кассовый ордер'"));
	СтруктураРеквизитов.Вставить("_Загружать", Истина);
	СоответствиеДок.Вставить("3890d435-96ba-4481-abc0-23782e15b32f", СтруктураРеквизитов);
	СоответствиеДок.Вставить("РасходныйКассовыйОрдер", "3890d435-96ba-4481-abc0-23782e15b32f");
			
	// ВОЗВРАТ
	СтруктураРеквизитов = Новый Соответствие;
	СтруктураТЧ = Новый Структура;	// табличная часть "Товары
	СтруктураТЧ.Вставить("Номенклатура", "A01");
	СтруктураТЧ.Вставить("ХарактеристикаНоменклатуры", "A02");
	СтруктураТЧ.Вставить("ЕдиницаИзмерения", "A03");
	СтруктураТЧ.Вставить("Количество", "A04");	
	СтруктураТЧ.Вставить("Цена", "A05");	
	СтруктураТЧ.Вставить("Сумма", "A06");	
	СтруктураТЧ.Вставить("СуммаНДС", "A07");	
	СтруктураТЧ.Вставить("Вес", "A08");	
	СтруктураТЧ.Вставить("ПроцентСкидкиНаценки", "A09");
	СтруктураТЧ.Вставить("СтавкаНДС", "A010");
	СтруктураТЧ.Вставить("СуммаСкидки", "A011");
	СтруктураРеквизитов.Вставить("ТчТовары", "235dc1ea-5963-4dcd-95e1-e8cef487a2ae");
	СтруктураРеквизитов.Вставить("235dc1ea-5963-4dcd-95e1-e8cef487a2ae", СтруктураТЧ);
	СтруктураРеквизитов.Вставить("Организация", "A01");
	СтруктураРеквизитов.Вставить("Контрагент", "A02");
	СтруктураРеквизитов.Вставить("ТорговаяТочка", "A03");
	СтруктураРеквизитов.Вставить("ДоговорКонтрагента", "A04");
	СтруктураРеквизитов.Вставить("ТипЦен", "A06");
	СтруктураРеквизитов.Вставить("СуммаДокумента", "A07");
	СтруктураРеквизитов.Вставить("ОбщийВес", "A08");
	СтруктураРеквизитов.Вставить("Комментарий", "A09");
	СтруктураРеквизитов.Вставить("Категория", "A010");
	СтруктураРеквизитов.Вставить("Основание", "A011");
	СтруктураРеквизитов.Вставить("Широта", "A013");
	СтруктураРеквизитов.Вставить("Долгота", "A014");
	СтруктураРеквизитов.Вставить("Склад", "A016");
	СтруктураРеквизитов.Вставить("_ИмяДокумента", "ВозвратТоваровОтПокупателя");
	СтруктураРеквизитов.Вставить("_Представление", Документы.ВозвратТоваровОтПокупателя.ПолучитьСсылку().Метаданные().Представление());
	СтруктураРеквизитов.Вставить("_Загружать", Истина);
	СоответствиеДок.Вставить("4971b041-beab-4fa6-b1e8-10138f04fe44", СтруктураРеквизитов);
	СоответствиеДок.Вставить("ВозвратТоваровОтПокупателя", "4971b041-beab-4fa6-b1e8-10138f04fe44");
	
	// ПОСТУПЛЕНИЕ (vd_180821 Добавлено описание)
	СтруктураРеквизитов = Новый Соответствие;  	
	СтруктураТЧ = Новый Структура;	// табличная часть "Товары
	СтруктураТЧ.Вставить("Номенклатура", "A01");
	СтруктураТЧ.Вставить("ХарактеристикаНоменклатуры", "A02");
	СтруктураТЧ.Вставить("ЕдиницаИзмерения", "A03");
	СтруктураТЧ.Вставить("Количество", "A04");	
	СтруктураТЧ.Вставить("Цена", "A05");	
	СтруктураТЧ.Вставить("Сумма", "A06");	
	СтруктураТЧ.Вставить("СуммаНДС", "A07");	
	СтруктураТЧ.Вставить("Вес", "A08");	
	СтруктураТЧ.Вставить("ПроцентСкидкиНаценки", "A09");
	СтруктураТЧ.Вставить("СтавкаНДС", "A010");
	СтруктураТЧ.Вставить("СуммаСкидки", "A011");
	СтруктураРеквизитов.Вставить("ТчТовары", "a10221fa-5ac6-4e8c-80d8-d40d8dfc7779");
	СтруктураРеквизитов.Вставить("a10221fa-5ac6-4e8c-80d8-d40d8dfc7779", СтруктураТЧ);
	СтруктураРеквизитов.Вставить("Организация", "A01");
	СтруктураРеквизитов.Вставить("Контрагент", "A02");
	СтруктураРеквизитов.Вставить("ТорговаяТочка", "A03");
	СтруктураРеквизитов.Вставить("ДоговорКонтрагента", "A04");
	СтруктураРеквизитов.Вставить("Скидка", "A05");
	СтруктураРеквизитов.Вставить("ТипЦен", "A06");
	СтруктураРеквизитов.Вставить("СуммаДокумента", "A07");
	СтруктураРеквизитов.Вставить("ОбщийВес", "A08");
	СтруктураРеквизитов.Вставить("Комментарий", "A09");
	СтруктураРеквизитов.Вставить("Категория", "A010");
	СтруктураРеквизитов.Вставить("Основание", "A011");
	СтруктураРеквизитов.Вставить("ЕстьПодчиненные", "A012");
	СтруктураРеквизитов.Вставить("Широта", "A013");
	СтруктураРеквизитов.Вставить("Долгота", "A014");
	СтруктураРеквизитов.Вставить("Склад", "A016");
	СтруктураРеквизитов.Вставить("_ИмяДокумента", "ПоступлениеТоваровУслуг");
	СтруктураРеквизитов.Вставить("_Представление", Документы.ПоступлениеТоваровУслуг.ПолучитьСсылку().Метаданные().Представление());
	СтруктураРеквизитов.Вставить("_Загружать", Истина);
	СоответствиеДок.Вставить("c9850d61-bc15-445a-8b1a-e328cc45ddae", СтруктураРеквизитов);
	СоответствиеДок.Вставить("ПоступлениеТоваровУслуг", "c9850d61-bc15-445a-8b1a-e328cc45ddae");

	
	// ПЕРЕМЕЩЕНИЕ (vd_180821 Добавлено описание )
	СтруктураРеквизитов = Новый Соответствие;
	СтруктураТЧ = Новый Структура;	// табличная часть "Товары
	СтруктураТЧ.Вставить("Номенклатура", "A01");
	СтруктураТЧ.Вставить("ХарактеристикаНоменклатуры", "A02");
	СтруктураТЧ.Вставить("ЕдиницаИзмерения", "A03");
	СтруктураТЧ.Вставить("Количество", "A04");	
	СтруктураТЧ.Вставить("Цена", "A05");	
	СтруктураТЧ.Вставить("Сумма", "A06");	
	СтруктураРеквизитов.Вставить("ТчТовары", "3097f10a-bee6-4a76-ad7a-d4663c9b73ec");
	СтруктураРеквизитов.Вставить("3097f10a-bee6-4a76-ad7a-d4663c9b73ec", СтруктураТЧ);
	СтруктураРеквизитов.Вставить("Организация", "A01");
	СтруктураРеквизитов.Вставить("Категория", "A02");
	СтруктураРеквизитов.Вставить("СкладОтправитель", "A03");
	СтруктураРеквизитов.Вставить("СкладПолучатель", "A04");
	СтруктураРеквизитов.Вставить("Сумма", "A05");
	СтруктураРеквизитов.Вставить("Комментарий", "A06");
	СтруктураРеквизитов.Вставить("Широта", "A07");
	СтруктураРеквизитов.Вставить("Долгота", "A08");
	СтруктураРеквизитов.Вставить("ТипЦены", "A09");
	СтруктураРеквизитов.Вставить("ДатаНачала", "A010");
	СтруктураРеквизитов.Вставить("ДатаОкончания", "A011");
	СтруктураРеквизитов.Вставить("ДатаТочкиТрека", "A012");
	СтруктураРеквизитов.Вставить("Склад", "A016");
	СтруктураРеквизитов.Вставить("_ИмяДокумента", "ПеремещениеТоваров");
	СтруктураРеквизитов.Вставить("_Представление", Документы.ПеремещениеТоваров.ПолучитьСсылку().Метаданные().Представление());
	СтруктураРеквизитов.Вставить("_Загружать", Истина);
	СоответствиеДок.Вставить("77525c87-cb2f-405e-a92e-6f373edeece7", СтруктураРеквизитов);
	СоответствиеДок.Вставить("ПеремещениеТоваров", "77525c87-cb2f-405e-a92e-6f373edeece7");
	
	// МЕРЧЕНДАЙЗИНГ
	//(( sk_190628
	ствРеквизиты = Новый Соответствие;
	ствРеквизиты.Вставить("_ИмяДокумента", "Мерчендайзинг");
	ствРеквизиты.Вставить("_Представление", НСтр("ru='Мерчендайзинг'"));
	ствРеквизиты.Вставить("_Загружать", Истина);

	СоответствиеДок.Вставить("61dee5fe-d0a8-4842-a6af-a8d33f298845", ствРеквизиты);
	СоответствиеДок.Вставить("Мерчендайзинг", "61dee5fe-d0a8-4842-a6af-a8d33f298845");
	//)) sk_190628


	///////////////////////////////////////////////////////////////////
	
	//ПЕРЕЧИСЛЕНИЯ  
	СоответствиеПеречислений = Новый Соответствие();
	 //ТипыКонтактнойИнформации
	СтруктураПеречисления = Новый Соответствие;
	СтруктураПеречисления.Вставить("a4d0f540-64ed-4f3e-b2bb-818da38f5ab2", Перечисления.ТипыКонтактнойИнформации.Адрес);
	СтруктураПеречисления.Вставить(Перечисления.ТипыКонтактнойИнформации.Адрес, "a4d0f540-64ed-4f3e-b2bb-818da38f5ab2");		
	СтруктураПеречисления.Вставить("52477200-af54-405b-9888-14b8bded0e19", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	СтруктураПеречисления.Вставить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, "52477200-af54-405b-9888-14b8bded0e19");
	СтруктураПеречисления.Вставить("2c2cfc86-e2a0-414d-a116-5acadac53437", Перечисления.ТипыКонтактнойИнформации.ВебСтраница);
	СтруктураПеречисления.Вставить(Перечисления.ТипыКонтактнойИнформации.ВебСтраница, "2c2cfc86-e2a0-414d-a116-5acadac53437");
	СтруктураПеречисления.Вставить("e45419b3-0cfd-47ce-8b24-7037a1e86aed", Перечисления.ТипыКонтактнойИнформации.Другое);
	СтруктураПеречисления.Вставить(Перечисления.ТипыКонтактнойИнформации.Другое, "e45419b3-0cfd-47ce-8b24-7037a1e86aed");
	СтруктураПеречисления.Вставить("8fc8f351-14f0-48eb-952a-38bb313b28d5", Перечисления.ТипыКонтактнойИнформации.Телефон);
	СтруктураПеречисления.Вставить(Перечисления.ТипыКонтактнойИнформации.Телефон, "8fc8f351-14f0-48eb-952a-38bb313b28d5");
	
	СоответствиеПеречислений.Вставить("ТипыКонтактнойИнформации", СтруктураПеречисления);
	
	//ПЕРЕЧИСЛЕНИЯ ВИРТУАЛЬНЫЕ ОБЪЕКТЫ 
	//(( sk_190418
	//vd_190422 Изменен тип значения из строки на ГУИД
	//ВОВидОбъекта = Новый Структура;
	//ВОВидОбъекта.Вставить("Справочник",    Новый УникальныйИдентификатор("70742c9f-0b52-4b7e-878c-98fbb6230f86"));
	//ВОВидОбъекта.Вставить("Документ", 	   Новый УникальныйИдентификатор("39491778-33b0-46d9-82b0-47c27c4a93c4"));
	
	ВОТипОбъекта =  Новый Структура;
	ВОТипОбъекта.Вставить("ВидЗадачи", 	   Новый УникальныйИдентификатор("a00b7107-5700-4e02-97f6-c577e707e21f"));
	ВОТипОбъекта.Вставить("ТипЗадачи",     Новый УникальныйИдентификатор("d2ab085a-44f1-4653-9792-8b7e2bd2564d"));
	ВОТипОбъекта.Вставить("Мерчендайзинг", Новый УникальныйИдентификатор("61dee5fe-d0a8-4842-a6af-a8d33f298845"));
	ВОТипОбъекта.Вставить("Посещение", 	   Новый УникальныйИдентификатор("9f147c59-5ee8-4550-8289-12ecfe5d0617"));
	ВОТипОбъекта.Вставить("Задание", 	   Новый УникальныйИдентификатор("b49074d6-3c0c-4361-b71d-bbf446ab02b6"));    
	//)) sk_190418
	
	//  Альфия 26.05.2017
	 //ВидДоставки значения
	СтруктураВидДоставки = Новый Соответствие;
	СтруктураВидДоставки.Вставить("d48fabce-eee2-4d05-a39b-11c01a00b51e", "Самовывоз");
	СтруктураВидДоставки.Вставить("Самовывоз", "d48fabce-eee2-4d05-a39b-11c01a00b51e");	
	СтруктураВидДоставки.Вставить("До клиента", "5e2ac82f-cf7b-4545-a631-fa2715b9332b");		
	СтруктураВидДоставки.Вставить("5e2ac82f-cf7b-4545-a631-fa2715b9332b", "До клиента");
	СоответствиеСпр.Вставить("Значения_ВидыДоставки", СтруктураВидДоставки);		
	//  Альфия 26.05.2017
	
	//ВариантыУказанияСкладовВТабличнойЧастиДокументов
	СтруктураПеречисления = Новый Соответствие;
	СтруктураПеречисления.Вставить(Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.НеИспользовать, 0);		
	СтруктураПеречисления.Вставить(Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступления, 0);		
	СтруктураПеречисления.Вставить(Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации, 1);		
	СтруктураПеречисления.Вставить(Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовРеализации, 1);		
	
	СоответствиеПеречислений.Вставить("ВариантыУказанияСкладовВТабличнойЧастиДокументов", СтруктураПеречисления);	
	
	////////////////////////////////////////////////////////////////////
	/////////// ТАБЛИЦА ЗНАЧЕНИЙ КОНСТАНТ ОБМЕНА////////////////////////
	
	НастройкиАгентаПоУмолчанию = Новый Соответствие;
	НастройкиОбработкиПоУмолчанию = Новый Соответствие;
	НастройкиМУПоУмолчанию = Новый Соответствие;
	НастройкиАгентаМУПоУмолчанию = Новый Соответствие;
	
	СоответствиеСписковЗначений = Новый Соответствие;
	
	списокЗнач = Новый Соответствие;
	структураВидЗапроса = Новый Структура;
	структураВидЗапроса.Вставить("ВидЗапроса", НСтр("ru='Полный'"));
	структураВидЗапроса.Вставить("Наименование", НСтр("ru='Обновить все'"));
	списокЗнач.Вставить(Новый УникальныйИдентификатор("b386dacd-d56f-48b4-a076-083b7e013369"), структураВидЗапроса);
	структураВидЗапроса = Новый Структура;
	структураВидЗапроса.Вставить("ВидЗапроса", НСтр("ru='Взаиморасчеты'"));
	структураВидЗапроса.Вставить("Наименование", НСтр("ru='Обновить взаиморасчеты'"));
	списокЗнач.Вставить(Новый УникальныйИдентификатор("67f3e7c2-0711-4555-b816-d214e81ca840"), структураВидЗапроса);	
	структураВидЗапроса = Новый Структура;
	структураВидЗапроса.Вставить("ВидЗапроса", НСтр("ru='История продаж'"));
	структураВидЗапроса.Вставить("Наименование", НСтр("ru='Обновить историю продаж'"));
	списокЗнач.Вставить(Новый УникальныйИдентификатор("00d68c63-a1d0-4e9d-bf25-43f0d8480cfa"), структураВидЗапроса);		
	структураВидЗапроса = Новый Структура;
	структураВидЗапроса.Вставить("ВидЗапроса", НСтр("ru='Маршруты'"));
	структураВидЗапроса.Вставить("Наименование", НСтр("ru='Обновить маршруты'"));
	списокЗнач.Вставить(Новый УникальныйИдентификатор("361e8f8f-ec4c-4e38-a3bd-8ccf97b692b6"), структураВидЗапроса);	
	структураВидЗапроса = Новый Структура;
	структураВидЗапроса.Вставить("ВидЗапроса", НСтр("ru='Номенклатура'"));
	структураВидЗапроса.Вставить("Наименование", НСтр("ru='Обновить остатки'"));
	списокЗнач.Вставить(Новый УникальныйИдентификатор("b3d7b609-0d2e-4059-8878-41afd160a5e5"), структураВидЗапроса);	
	СоответствиеСписковЗначений.Вставить("ВидыЗапросов", списокЗнач);	
	
	списокЗнач = Новый СписокЗначений();
	списокЗнач.Добавить(0, НСтр("ru='Прямое подключение'"));
	списокЗнач.Добавить(1, НСтр("ru='Агент Плюс СОД'"));	
	списокЗнач.Добавить(2, НСтр("ru='FTP-сервер'"));	
	СоответствиеСписковЗначений.Вставить("СпособОбмена", списокЗнач);
	
	списокЗнач = Новый СписокЗначений();
	списокЗнач.Добавить(0, НСтр("ru='Все данные (с расчетом истории продаж)'"));
	списокЗнач.Добавить(1, НСтр("ru='Только история продаж'"));	
	списокЗнач.Добавить(2, НСтр("ru='Все данные (без истории продаж)'"));	
	СоответствиеСписковЗначений.Вставить("ВидВыгрузки", списокЗнач);
	
	списокЗнач = Новый СписокЗначений();
	списокЗнач.Добавить(0, НСтр("ru='Обычный способ загрузки'"));
	списокЗнач.Добавить(1, НСтр("ru='Создавать на основании заявки реализацию (метод ""Ввод на основании"")'"));	
	//списокЗнач.Добавить(2, НСтр("ru='Перенос содержимого заявки в реализацию'"));		
	СоответствиеСписковЗначений.Вставить("РеализацияПоЗаявкам", списокЗнач);
	
	// Режим загрузки скидок
	//(( sk_190516 В рамках (MOD-520)
	сзСписокВыбора = Новый СписокЗначений;
	сзСписокВыбора.Добавить(0, НСтр("ru='В колонку ""Автоматическая скидка""'"));
	сзСписокВыбора.Добавить(1, НСтр("ru='В колонку ""Ручная скидка""'"));
	сзСписокВыбора.Добавить(2, НСтр("ru='Определить учетной системой'"));
	сзСписокВыбора.Добавить(3, НСтр("ru='Рекомендуемый'"));
	СоответствиеСписковЗначений.Вставить("РежимЗагрузкиСкидок", сзСписокВыбора);
	//)) sk_190516
	
	//Общие
	списокЗнач = Новый СписокЗначений;
	списокЗнач.Добавить(0, НСтр("ru='Из плана посещений'"));
	списокЗнач.Добавить(1, НСтр("ru='Из настроек отбора выгружаемых данных для агента'")); // списокЗнач.Добавить(1, НСтр("ru='Из списка контрагентов для агента'")); sk_190611 Настройка переименована в рамках (MOD-365)
	списокЗнач.Добавить(2, НСтр("ru='Выгружать всех контрагентов'"));
	СоответствиеСписковЗначений.Вставить("РежимВыгрузкиКонтрагентов", списокЗнач);
	
	//списокЗнач = Новый СписокЗначений();
	//списокЗнач.Добавить(0, НСтр("ru='Не учитывать разрез'"));
	//списокЗнач.Добавить(1, НСтр("ru='В разрезе характеристик'"));				
	//СоответствиеСписковЗначений.Вставить("РежимВыгрузкиНоменклатуры", списокЗнач);	
	//	
	//списокЗнач = Новый СписокЗначений();
	//списокЗнач.Добавить(0, НСтр("ru='По взаиморасчетам с контрагентами'"));
	//списокЗнач.Добавить(1, НСтр("ru='В разрезе документов расчетов с контрагентами'"));			
	//СоответствиеСписковЗначений.Вставить("РежимВыгрузкиДолгов", списокЗнач);
	
	списокЗнач = Новый СписокЗначений();
	списокЗнач.Добавить(0, НСтр("ru='По количеству'"));
	списокЗнач.Добавить(1, НСтр("ru='По сумме'"));	
	списокЗнач.Добавить(2, НСтр("ru='Обоими способами'"));		
	СоответствиеСписковЗначений.Вставить("РежимПланированияПродаж", списокЗнач);	
	
	списокЗнач = Новый СписокЗначений();
	списокЗнач.Добавить("Заказ", НСтр("ru='Заказы'"));
	списокЗнач.Добавить("Реализация", НСтр("ru='Реализация'"));
	списокЗнач.Добавить("Долги", НСтр("ru='Долги'"));	
	списокЗнач.Добавить("ПКО", НСтр("ru='Касса'"));	
	списокЗнач.Добавить("Поступление", НСтр("ru='Поступления/Возвраты'")); //vd_180808 Было: //списокЗнач.Добавить("Поступление", НСтр("ru='Возврат'"));	
	списокЗнач.Добавить("Перемещение", НСтр("ru='Перемещение'"));     //vd_180808 
	списокЗнач.Добавить("Мерчендайзинг", НСтр("ru='Мерчендайзинг'")); //vd_180808
	списокЗнач.Добавить("Посещение", НСтр("ru='Посещение'")); //Альфия 18.05.2017
	
	
	СоответствиеСписковЗначений.Вставить("СписокЗакладокЖурнала", списокЗнач);	
		
	//-------------------------------------------------------
	
	// Заполняем список удаляемых справочников                                             	
	списокЗнач = Новый СписокЗначений();
	списокЗнач.Добавить(СоответствиеСпр["ДоговорыКонтрагентов"],		НСтр("ru='Договоры'"));
	списокЗнач.Добавить(СоответствиеСпр["ЕдиницыИзмерения"],			НСтр("ru='Единицы измерения'"));
	списокЗнач.Добавить(СоответствиеСпр["Запросы"],						НСтр("ru='Запросы'"));
	списокЗнач.Добавить(СоответствиеСпр["ФотоСправочников"],			НСтр("ru='Картинки'"));
	списокЗнач.Добавить(СоответствиеСпр["КонтактныеЛицаКонтрагентов"],  НСтр("ru='Контактные лица'"));
	списокЗнач.Добавить(СоответствиеСпр["Контрагенты"],					НСтр("ru='Контрагенты'"));	
	списокЗнач.Добавить(СоответствиеСпр["Номенклатура"],				НСтр("ru='Номенклатура'"));
	списокЗнач.Добавить(СоответствиеСпр["Организации"],					НСтр("ru='Организации'"));
	списокЗнач.Добавить(СоответствиеСпр["Склады"],						НСтр("ru='Склады'"));
	списокЗнач.Добавить(СоответствиеСпр["ВидыДоставки"],				НСтр("ru='Виды доставки'"));  //Альфия 26.05.2017
	списокЗнач.Добавить(СоответствиеСпр["ТипыЦен"],						НСтр("ru='Типы цен'"));
	списокЗнач.Добавить(СоответствиеСпр["ТорговыеТочки"],				НСтр("ru='Торговые точки'"));
	списокЗнач.Добавить(СоответствиеСпр["ХарактеристикиНоменклатуры"],	НСтр("ru='Характеристики номенклатуры'"));
	списокЗнач.Добавить(СоответствиеСпр["Штрихкоды"],					НСтр("ru='Штрих-коды'"));
	
	СоответствиеСписковЗначений.Вставить("СписокУдаляемыхСправочников", списокЗнач);	
	//-------------------------------------------------------
	имяДокЗаказ 		= Документы.ЗаказПокупателя.ПолучитьСсылку().Метаданные().Имя;
	имяДокРеализация	= Документы.РеализацияТоваровУслуг.ПолучитьСсылку().Метаданные().Имя;
	имяДокКасса			= "ПКО";
	имяДокВозврат		= Документы.ВозвратТоваровОтПокупателя.ПолучитьСсылку().Метаданные().Имя;
	
	списокЗнач = Новый СписокЗначений();
	списокЗнач.Добавить("Заказ", 				НСтр("ru='Заказы'"));
	списокЗнач.Добавить("Реализация",	 		НСтр("ru='Реализация'"));
	списокЗнач.Добавить("ПКО", 					НСтр("ru='Касса'"));	
	списокЗнач.Добавить("Поступление", 			НСтр("ru='Возврат'"));		
	СоответствиеСписковЗначений.Вставить("СписокВидыДокументов", списокЗнач);	
	
	списокЗнач = Новый СписокЗначений();
	списокЗнач.Добавить(1, НСтр("ru='Удалять все документы указанных типов'"));
	списокЗнач.Добавить(2, НСтр("ru='Не удалять документы за последние'"));
	СоответствиеСписковЗначений.Вставить("ВидОчисткиДокументов", списокЗнач);
	
	// соотвествие значений предыдущих 2-х списков именам документов в 1С
	списокЗнач = Новый Соответствие;
	списокЗнач.Вставить("Заказ", 			имяДокЗаказ);
	списокЗнач.Вставить("Реализация", 		имяДокРеализация);
	текМассив = Новый Массив;
	текМассив.Добавить(Документы.ПриходныйКассовыйОрдер.ПолучитьСсылку().Метаданные().Имя);
	текМассив.Добавить(Документы.РасходныйКассовыйОрдер.ПолучитьСсылку().Метаданные().Имя);
	списокЗнач.Вставить("ПКО", 				текМассив);
	списокЗнач.Вставить("Поступление", 		имяДокВозврат);
	СоответствиеСписковЗначений.Вставить("СоответствиеДокументов", списокЗнач);
	//-------------------------------------------------------
	
	списокЗнач = Новый СписокЗначений();
	списокЗнач.Добавить("ПоДоговору", НСтр("ru='По договору'"));
	списокЗнач.Добавить("ИзУказанногоЗначения", НСтр("ru='Из указанного значения'"));
	СоответствиеСписковЗначений.Вставить("СпособыРасчетаПросроченныхДолгов", списокЗнач);
	
	списокЗнач = Новый СписокЗначений();
	списокЗнач.Добавить(Перечисления.ВидыДенежныхСредств.Безналичные, Строка(Перечисления.ВидыДенежныхСредств.Безналичные));
	списокЗнач.Добавить(Перечисления.ВидыДенежныхСредств.Наличные, Строка(Перечисления.ВидыДенежныхСредств.Наличные));
	СоответствиеСписковЗначений.Вставить("ВидОплатыПоУмолчанию", списокЗнач);

	//%!
	списокЗнач = Новый СписокЗначений();
	списокЗнач.Добавить("Код");
	списокЗнач.Добавить("Наименование");
	списокЗнач.Добавить("Остаток");
	списокЗнач.Добавить("ПорядокВФайлеВыгрузки");
	списокЗнач.Добавить("Рейтинг");
	СоответствиеСписковЗначений.Вставить("РежимСортировки", списокЗнач);
	
	МассивТиповСтр = Новый Массив;
	МассивТиповСтр.Добавить(Тип("Строка"));
	квСтрокиИд = Новый КвалификаторыСтроки(36);
	квСтрокиИмя = Новый КвалификаторыСтроки(0);
	квСтрокиИерархия = Новый КвалификаторыСтроки(255);
	
	МассивТиповЧисло = Новый Массив;
	МассивТиповЧисло.Добавить(Тип("Число"));
	
	квЧислоТипКонстанты = Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный);
	
	МассивТиповБул = Новый Массив;
	МассивТиповБул.Добавить(Тип("Булево"));

	стрТипГуид = Новый ОписаниеТипов(МассивТиповСтр, , квСтрокиИд);
	стрТипИмя = Новый ОписаниеТипов(МассивТиповСтр, , квСтрокиИмя);	
	стрТипБул = Новый ОписаниеТипов(МассивТиповБул);
	числоТипКонстанты = Новый ОписаниеТипов(МассивТиповЧисло, квЧислоТипКонстанты);
	стрТипИерархия = Новый ОписаниеТипов(МассивТиповСтр, , квСтрокиИерархия);
	МассивТиповМассив = Новый Массив;
	МассивТиповМассив.Добавить(Тип("Массив"));
	стрТипМассив = Новый ОписаниеТипов(МассивТиповМассив);
	
	ТаблЗначКонстанты = Новый ТаблицаЗначений;
	ТаблЗначКонстанты.Колонки.Добавить("Ид", стрТипГуид);	
	ТаблЗначКонстанты.Колонки.Добавить("Имя", стрТипИмя);
	ТаблЗначКонстанты.Колонки.Добавить("Представление", стрТипИмя);
	ТаблЗначКонстанты.Колонки.Добавить("Описание", стрТипИерархия);
	ТаблЗначКонстанты.Колонки.Добавить("Показывать", стрТипБул);	
	ТаблЗначКонстанты.Колонки.Добавить("Тип", числоТипКонстанты);
	ТаблЗначКонстанты.Колонки.Добавить("ТолькоПросмотр", стрТипБул);
	ТаблЗначКонстанты.Колонки.Добавить("Иерархия", стрТипИерархия);
	ТаблЗначКонстанты.Колонки.Добавить("Выгружать", стрТипБул);	
	ТаблЗначКонстанты.Колонки.Добавить("ТипЗначения", стрТипИмя);
	ТаблЗначКонстанты.Колонки.Добавить("СписокГлавныхНастроек", стрТипМассив);
	ТаблЗначКонстанты.Колонки.Добавить("СписокПодчиненныхНастроек", стрТипМассив);
	//ТаблЗначКонстанты.Колонки.Добавить("БыстрыйДоступ", стрТипБул);	
	
	/////////////МОБИЛЬНОЕ УСТРОЙСТВО///////////////////////
	
	эл = ТаблЗначКонстанты.Добавить();		
	эл["Имя"] = "ИдентификаторМУ";
	НастройкиМУПоУмолчанию["ИдентификаторМУ"] = стрПустойИдентификатор;
	НастройкиМУПоУмолчанию["УникальныйИдентификатор"] = ПустойИдентификатор;
	НастройкиАгентаПоУмолчанию["УникальныйИдентификатор"] = ПустойИдентификатор;
	НастройкиАгентаПоУмолчанию["Пользователь"] = Справочники.Пользователи.ПустаяСсылка();
	эл["Представление"] = НСтр("ru='Идентификатор'");
	эл["Описание"] = НСтр("ru='Идентификатор МУ (мобильного устройства). Значение идентификатора в МУ не устанавливается'");
	эл["Показывать"] = Истина;
	эл["Тип"] = ТипКонстанты["МУ"];	
	эл["Иерархия"] = НСтр("ru=''");
	эл["Выгружать"] = Ложь;
	
	эл = ТаблЗначКонстанты.Добавить();		
	эл["Имя"] = "Псевдоним";
	НастройкиМУПоУмолчанию["Псевдоним"] = "";
	эл["Представление"] = НСтр("ru='Псевдоним'");
	эл["Описание"] = НСтр("ru='Наименование мобильного устройства'");
	эл["Показывать"] = Истина;
	эл["Тип"] = ТипКонстанты["МУ"];	
	эл["Иерархия"] = НСтр("ru=''");
	эл["Выгружать"] = Ложь;	
	
	эл = ТаблЗначКонстанты.Добавить();  		
	эл["Имя"] = "ПапкаСОД";
	НастройкиМУПоУмолчанию["ПапкаСОД"] = "";
	эл["Представление"] = НСтр("ru='Папка обмена " + Имена["АгентПлюсСОД"] + "'");
	эл["Описание"] = НСтр("ru='Папка обмена данными мобильного устройства через службу обмена данными "+ Имена["АгентПлюсСОД"] + "'");
	эл["Показывать"] = Истина;
	эл["Тип"] = ТипКонстанты["МУ"];	
	эл["Иерархия"] = НСтр("ru=''");
	эл["Выгружать"] = Ложь;
	
	эл = ТаблЗначКонстанты.Добавить();	
	эл["Имя"] = "ПарольАрхива";
	НастройкиМУПоУмолчанию["ПарольАрхива"] = "";
	эл["Представление"] = НСтр("ru='Пароль zip-архива'");
	эл["Описание"] = НСтр("ru='Пароль, устанавливаемый на zip-архив обмена данными'");
	эл["Показывать"] = Истина;
	эл["Тип"] = ТипКонстанты["МУ"];
	эл["Иерархия"] = НСтр("ru=''");
	эл["Выгружать"] = Ложь;
	
	эл = ТаблЗначКонстанты.Добавить();	
	эл["Имя"] = "ПапкаFTP";
	НастройкиМУПоУмолчанию["ПапкаFTP"] = "";
	эл["Представление"] = НСтр("ru='Папка обмена FTP'");
	эл["Описание"] = НСтр("ru='Папка агента на FTP-сервере (необходимо указывать при обмене через FTP-сервер).'");
	эл["Показывать"] = Истина;
	эл["Тип"] = ТипКонстанты["МУ"];
	эл["Иерархия"] = НСтр("ru=''");
	эл["Выгружать"] = Ложь;

		
	//////////////////НАСТРОЙКИ АГЕНТА///////////////////////////////
	
	эл = ТаблЗначКонстанты.Добавить();	
	эл["Имя"] = "ФизЛицо";
	НастройкиАгентаПоУмолчанию["ФизЛицо"] = Справочники.ФизическиеЛица.ПустаяСсылка();
	эл["Представление"] = НСтр("ru='Физ. лицо'");
	эл["Описание"] = НСтр("ru='Физ. лицо торгового агента'");
	эл["Показывать"] = Истина;
	эл["Тип"] = ТипКонстанты["Пользователь"];
	эл["Иерархия"] = НСтр("ru='Основные'");
	эл["Выгружать"] = Ложь;	
	
	//{{vd_180808
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ТорговляСКолес";
	НастройкиАгентаПоУмолчанию["ТорговляСКолес"] = Ложь;	
	эл["Ид"] = "72889bff-cc95-4c2e-9c4e-0d28e2efbf7c";
	эл["Представление"] = НСтр("ru='Торговля с колес'");
	эл["Описание"] = НСтр("ru='Включает возможность реализации товаров в мобильной приложении с использованием мобильного склада.'");
	эл["Показывать"] = Истина;
	эл["Тип"] = ТипКонстанты["Пользователь"];	
	эл["Иерархия"] = НСтр("ru='Основные'");
	эл["ТолькоПросмотр"] = Ложь;	
	эл["Выгружать"] = Истина;	
	//}}180808

	
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ОсновнойСклад";
	НастройкиАгентаПоУмолчанию["ОсновнойСклад"] = Справочники.Склады.ПустаяСсылка();	
	эл["Ид"] = "86ba5dad-16d0-46b8-9d8d-3eab2cf08685";
	эл["Представление"] = НСтр("ru='Основной склад'");
	эл["Описание"] = НСтр("ru='Основной склад агента'");
	эл["Показывать"] = Истина;
	эл["Тип"] = ТипКонстанты["Пользователь"];	
	эл["Иерархия"] = НСтр("ru='Основные'");
	эл["ТолькоПросмотр"] = Ложь;	
	эл["Выгружать"] = Истина;	
	
	//{{vd_180808
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "МобильныйСклад";
	НастройкиАгентаПоУмолчанию["МобильныйСклад"] = Справочники.Склады.ПустаяСсылка();	
	эл["Ид"] = "448b6fab-5e21-479c-9a9a-63e8eced59b9";
	эл["Представление"] = НСтр("ru='Мобильный склад'");
	эл["Описание"] = НСтр("ru='Мобильный склад агента'");
	эл["Показывать"] = Истина;
	эл["Тип"] = ТипКонстанты["Пользователь"];	
	эл["Иерархия"] = НСтр("ru='Основные'");
	эл["ТолькоПросмотр"] = Ложь;	
	эл["Выгружать"] = Истина;	
	//}}180808
	
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ОсновнаяОрганизация";
	НастройкиАгентаПоУмолчанию["ОсновнаяОрганизация"] = Справочники.Организации.ПустаяСсылка();			
	эл["Ид"] = "13faf2a0-3d1e-469e-bc53-cdada6ac1375";
	эл["Представление"] = НСтр("ru='Основная организация'");
	эл["Описание"] = НСтр("ru='Основная организация агента'");
	эл["Показывать"] = Истина;
	эл["Тип"] = ТипКонстанты["Пользователь"];	
	эл["Иерархия"] = НСтр("ru='Основные'");
	эл["Выгружать"] = Истина;
	
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ОсновнойТипЦены";
	НастройкиАгентаПоУмолчанию["ОсновнойТипЦены"] = Справочники.ТипыЦенНоменклатуры.ПустаяСсылка();	
	эл["Ид"] = "7bc85296-f536-411e-aaa9-74ad5c7adea2";
	эл["Представление"] = НСтр("ru='Основной тип цены'");
	эл["Описание"] = НСтр("ru='Основной тип цены агента'");
	эл["Показывать"] = Истина;
	эл["Тип"] = ТипКонстанты["Пользователь"];	
	эл["Иерархия"] = НСтр("ru='Основные'");
	эл["Выгружать"] = Истина;	
	
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "МинимальныйТипЦены";
	НастройкиАгентаПоУмолчанию["МинимальныйТипЦены"] = Справочники.ТипыЦенНоменклатуры.ПустаяСсылка();	
	эл["Ид"] = "0a253e8b-9043-414b-8026-0c9369f781ad";
	эл["Представление"] = НСтр("ru='Минимальный тип цены'");
	эл["Описание"] = НСтр("ru='Минимальный тип цены'");
	эл["Показывать"] = Истина;
	эл["Тип"] = ТипКонстанты["Пользователь"];	
	эл["Иерархия"] = НСтр("ru='Основные'");
	эл["Выгружать"] = Истина;
		
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ВидимостьЗакладокЖурнала";
	НастройкиАгентаПоУмолчанию["ВидимостьЗакладокЖурнала"] = ИзМассиваВСтроку(СоответствиеСписковЗначений["СписокЗакладокЖурнала"]);	
	эл["Ид"] = "61a474b1-21d0-4047-b2d5-7213a7294050";
	эл["Представление"] = НСтр("ru='Список вкладок журнала'");
	эл["Описание"] = НСтр("ru='Список отображаемых вкладок журнала в мобильном приложении'");
	эл["Показывать"] = Истина;	
	эл["Тип"] = ТипКонстанты["Пользователь"];	
	эл["Иерархия"] = НСтр("ru='Основные'");
	эл["ТипЗначения"] = "СписокЗначений";
	эл["Выгружать"] = Истина;	
	
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ВидОплатыПоУмолчанию";
	НастройкиАгентаПоУмолчанию["ВидОплатыПоУмолчанию"] = Перечисления.ВидыДенежныхСредств.ПустаяСсылка();
	эл["Представление"] = НСтр("ru='Вид оплаты'");
	эл["Описание"] = НСтр("ru='Вид оплаты по умолчанию'");
	эл["Показывать"] = Истина;
	эл["Тип"] = ТипКонстанты["Пользователь"];	
	эл["Иерархия"] = НСтр("ru='Основные'");
	эл["ТипЗначения"] = "СписокЗначений";
	эл["Выгружать"] = Ложь;
	
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ОсновнаяКасса";
	НастройкиАгентаПоУмолчанию["ОсновнаяКасса"] = Справочники.Кассы.ПустаяСсылка();
	эл["Представление"] = НСтр("ru='Касса'");
	эл["Описание"] = НСтр("ru='Касса, используемая по умолчанию для заполнения документов розничных продаж, загружаемых из МУ'");
	эл["Показывать"] = Истина;
	эл["Тип"] = ТипКонстанты["Пользователь"];	
	эл["Иерархия"] = НСтр("ru='Основные'");
	эл["Выгружать"] = Ложь;
	
	//эл = ТаблЗначКонстанты.Добавить();	
	//эл["Имя"] = "ИспользоватьПечать";
	//НастройкиАгентаПоУмолчанию["ИспользоватьПечать"] = Истина;
	//эл["Ид"] = "b1945151-4055-4bc4-a9a0-9e1d39babe99";
	//эл["Представление"] = НСтр("ru='Использовать печать'");
	//эл["Описание"] = НСтр("ru='Использовать печать документов в мобильном устройстве'");
	//эл["Показывать"] = Истина;
	//эл["Тип"] = ТипКонстанты["Пользователь"];
	//эл["Иерархия"] = НСтр("ru='Основные'");
	//эл["Выгружать"] = Истина;

	эл = ТаблЗначКонстанты.Добавить();	
	эл["Имя"] = "ИспользоватьСканирование";
	НастройкиАгентаПоУмолчанию["ИспользоватьСканирование"] = Истина;
	эл["Ид"] = "ed0274e1-3b90-4db9-951f-3037260b80ac";
	эл["Представление"] = НСтр("ru='Использовать сканирование'");
	эл["Описание"] = НСтр("ru='Использовать сканирование штрих-кодов номенклатуры в мобильном устройстве'");
	эл["Показывать"] = Истина;
	эл["Тип"] = ТипКонстанты["Пользователь"];
	эл["Иерархия"] = НСтр("ru='Основные'");
	эл["Выгружать"] = Истина;
	
	эл = ТаблЗначКонстанты.Добавить();	
	эл["Имя"] = "ПарольДоступаКНастройкам";
	НастройкиАгентаПоУмолчанию["ПарольДоступаКНастройкам"] = "";
	эл["Ид"] = "ddedce5e-7a69-4858-bc89-f48e3e44a8ef";
	эл["Представление"] = НСтр("ru='Пароль доступа к настройкам'");
	эл["Описание"] = НСтр("ru='Пароль доступа к настройкам в мобильном устройстве'");
	эл["Показывать"] = Истина;
	эл["Тип"] = ТипКонстанты["Пользователь"];
	эл["Иерархия"] = НСтр("ru='Основные'");
	эл["Выгружать"] = Истина;
	
	эл = ТаблЗначКонстанты.Добавить();	
	эл["Имя"] = "ПапкаКартинки";
	НастройкиАгентаПоУмолчанию["ПапкаКартинки"] = "/sdcard/AgentPlusPictures/";
	эл["Ид"] = "344436bc-3e1b-42d7-b453-496d61eae2d8";
	эл["Представление"] = НСтр("ru='Папка картинок'");
	эл["Описание"] = НСтр("ru='Папка хранения картинок и фотографий в мобильном устройстве. По умолчанию """ + НастройкиАгентаПоУмолчанию["ПапкаКартинки"] + """'");
	эл["Показывать"] = Истина;
	эл["Тип"] = ТипКонстанты["Пользователь"];
	эл["Иерархия"] = НСтр("ru='Обмен данными'");
	эл["Выгружать"] = Истина;	
	
	//++Ratmir 2018-04-13
	эл = ТаблЗначКонстанты.Добавить();	
	эл["Имя"] = "МаксимальныйРазмерФотографии";
	НастройкиАгентаПоУмолчанию["МаксимальныйРазмерФотографии"] = "10000";
	эл["Ид"] = "33DC91C8-0C7F-4067-8146-E600EE3B1830";
	эл["Представление"] = НСтр("ru='Максимальный размер фотографии'");
	эл["Описание"] = НСтр("ru='Указывается размер фотографии в Кб, при превышении которого пользователю будет выводиться предупреждение.'");
	эл["Показывать"] = Истина;
	эл["Тип"] = ТипКонстанты["Пользователь"];
	эл["Иерархия"] = НСтр("ru='Обмен данными'");
	эл["Выгружать"] = Истина;	
	
	эл = ТаблЗначКонстанты.Добавить();	
	эл["Имя"] = "МаксимальнаяШиринаФотографии";
	НастройкиАгентаПоУмолчанию["МаксимальнаяШиринаФотографии"] = "5000";
	эл["Ид"] = "4C08CCDF-066E-415D-99F0-04062FA96CA4";
	эл["Представление"] = НСтр("ru='Максимальная ширина фотографии'");
	эл["Описание"] = НСтр("ru='Указывается максимальная ширина фотографии в пикселях, согласно которой будут изменяться пропорции фотографии. В случае если ширина фотографии меньше указанного значения, изменение пропорций фотографии не происходит.'");
	эл["Показывать"] = Истина;
	эл["Тип"] = ТипКонстанты["Пользователь"];
	эл["Иерархия"] = НСтр("ru='Обмен данными'");
	эл["Выгружать"] = Истина;	
	
	эл = ТаблЗначКонстанты.Добавить();	
	эл["Имя"] = "ВыводитьВодянойЗнак";
	НастройкиАгентаПоУмолчанию["ВыводитьВодянойЗнак"] = Ложь;
	эл["Ид"] = "9BB8C128-DBE4-4596-A02A-EC0854D38F43";
	эл["Представление"] = НСтр("ru='Выводить водяной знак'");
	эл["Описание"] = НСтр("ru='Признак, определяющий будет ли выводиться на фотографии наименование торговой точки, в которой была сделана фотография.'");
	эл["Показывать"] = Истина;
	эл["Тип"] = ТипКонстанты["Пользователь"];
	эл["Иерархия"] = НСтр("ru='Обмен данными'");
	эл["Выгружать"] = Истина;	
	
	эл = ТаблЗначКонстанты.Добавить();	
	эл["Имя"] = "ВыводитьДатуВремя";
	НастройкиАгентаПоУмолчанию["ВыводитьДатуВремя"] = Ложь;
	эл["Ид"] = "C99A4519-7886-4BA3-9B44-734507287DE6";
	эл["Представление"] = НСтр("ru='Выводить дату/время'");
	эл["Описание"] = НСтр("ru='Признак, определяющий будут ли на сделанной фотографии отображаться дата и время ее создания.'");
	эл["Показывать"] = Истина;
	эл["Тип"] = ТипКонстанты["Пользователь"];
	эл["Иерархия"] = НСтр("ru='Обмен данными'");
	эл["Выгружать"] = Истина;	
	
	эл = ТаблЗначКонстанты.Добавить();	
	эл["Имя"] = "ВыводитьКоординаты";
	НастройкиАгентаПоУмолчанию["ВыводитьКоординаты"] = Ложь;
	эл["Ид"] = "22A08AD8-B86E-49DE-B794-190A4E888A49";
	эл["Представление"] = НСтр("ru='Выводить дату/время'");
	эл["Описание"] = НСтр("ru='Признак, определяющий будут ли на фотографии отображаться координаты. Для вывода на фото используются последние зафиксированные в треке координаты.'");
	эл["Показывать"] = Истина;
	эл["Тип"] = ТипКонстанты["Пользователь"];
	эл["Иерархия"] = НСтр("ru='Обмен данными'");
	эл["Выгружать"] = Истина;	
	//--Ratmir 2018-04-13
	
	эл = ТаблЗначКонстанты.Добавить();	
	эл["Имя"] = "ОтображатьАртикулы";
	НастройкиАгентаПоУмолчанию["ОтображатьАртикулы"] = Ложь;
	эл["Ид"] = "d902c64a-9a7a-40d1-8067-e4bb6b309534";
	эл["Представление"] = НСтр("ru='Отображение артикулов товаров'");
	эл["Описание"] = НСтр("ru='Режим отображения артикулов товаров'");
	эл["Показывать"] = Истина;
	эл["Тип"] = ТипКонстанты["Пользователь"];
	эл["Иерархия"] = НСтр("ru='Справочники|Каталог товаров'");
	эл["Выгружать"] = Истина;	
		
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "СоздаватьКонтрагентов";
	НастройкиАгентаПоУмолчанию["СоздаватьКонтрагентов"] = Ложь;
	эл["Ид"] = "73355324-f463-428a-91d2-2868dd35a168";
	эл["Представление"] = НСтр("ru='Разрешить создание клиентов'");
	эл["Описание"] = НСтр("ru='Разрешить агенту создавать новых клиентов'");
	эл["Показывать"] = Истина;
	эл["Тип"] = ТипКонстанты["Пользователь"];
	эл["Иерархия"] = НСтр("ru='Справочники|Клиенты, торговые точки'");
	эл["Выгружать"] = Истина;		
		
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "РедактироватьКонтрагентов";
	НастройкиАгентаПоУмолчанию["РедактироватьКонтрагентов"] = Ложь;
	эл["Ид"] = "5616d1e9-bfa3-40fc-baba-852d16b5e774";
	эл["Представление"] = НСтр("ru='Разрешить редактирование клиентов'");
	эл["Описание"] = НСтр("ru='Разрешить агенту редактировать клиентов'");
	эл["Показывать"] = Истина;
	эл["Тип"] = ТипКонстанты["Пользователь"];
	эл["Иерархия"] = НСтр("ru='Справочники|Клиенты, торговые точки'");
	эл["Выгружать"] = Истина;		
		
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "СоздаватьТорговыеТочки";
	НастройкиАгентаПоУмолчанию["СоздаватьТорговыеТочки"] = Ложь;
	эл["Ид"] = "b69ec9a6-565f-4e3e-844f-0060c5975fed";
	эл["Представление"] = НСтр("ru='Разрешить создание торговых точек'");
	эл["Описание"] = НСтр("ru='Разрешить агенту создавать новые торговые точки'");
	эл["Показывать"] = Истина;
	эл["Тип"] = ТипКонстанты["Пользователь"];	
	эл["Иерархия"] = НСтр("ru='Справочники|Клиенты, торговые точки'");
	эл["Выгружать"] = Истина;		
		
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "РедактироватьТорговыеТочки";
	НастройкиАгентаПоУмолчанию["РедактироватьТорговыеТочки"] = Ложь;
	эл["Ид"] = "f52e3c06-48d6-4809-ae16-13c61e78eabd";
	эл["Представление"] = НСтр("ru='Разрешить редактирование торговых точек'");
	эл["Описание"] = НСтр("ru='Разрешить агенту редактировать торговые точки'");
	эл["Показывать"] = Истина;
	эл["Тип"] = ТипКонстанты["Пользователь"];		
	эл["Иерархия"] = НСтр("ru='Справочники|Клиенты, торговые точки'");
	эл["Выгружать"] = Истина;	
		
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "СоздаватьДоговоры";
	НастройкиАгентаПоУмолчанию["СоздаватьДоговоры"] = Ложь;	
	эл["Ид"] = "abc5b73a-f477-406b-89c5-e9aab3b4f1e1";
	эл["Представление"] = НСтр("ru='Разрешить создание договоров'");
	эл["Описание"] = НСтр("ru='Разрешить агенту создавать новые договоры'");
	эл["Показывать"] = Истина;
	эл["Тип"] = ТипКонстанты["Пользователь"];
	эл["Иерархия"] = НСтр("ru='Справочники|Клиенты, торговые точки'");
	эл["Выгружать"] = Истина;	
		
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "РедактироватьДоговоры";
	НастройкиАгентаПоУмолчанию["РедактироватьДоговоры"] = Ложь;
	эл["Ид"] = "36767a2e-4df5-43b5-9813-893bf6f65a7f";
	эл["Представление"] = НСтр("ru='Разрешить редактирование договоров'");
	эл["Описание"] = НСтр("ru='Разрешить агенту редактировать договоры'");
	эл["Показывать"] = Истина;
	эл["Тип"] = ТипКонстанты["Пользователь"];
	эл["Иерархия"] = НСтр("ru='Справочники|Клиенты, торговые точки'");
	эл["Выгружать"] = Истина;	
	
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ЗаказыРедактироватьЦены";
	НастройкиАгентаПоУмолчанию["ЗаказыРедактироватьЦены"] = Ложь;
	эл["Ид"] = "690b5736-e1b9-41ef-a132-807acad31687";
	эл["Представление"] = НСтр("ru='Разрешить редактирование цен'");
	эл["Описание"] = НСтр("ru='Разрешить агенту редактировать цены'");
	эл["Показывать"] = Истина;
	эл["Тип"] = ТипКонстанты["Пользователь"];
	эл["Иерархия"] = НСтр("ru='Документы|Заказ'");
	эл["Выгружать"] = Истина;
	
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ЗаказыРедактироватьСкидки";
	НастройкиАгентаПоУмолчанию["ЗаказыРедактироватьСкидки"] = Ложь;
	эл["Ид"] = "4a6b2c4c-445b-4985-a509-10fb1a2d57ce";
	эл["Представление"] = НСтр("ru='Разрешить изменение скидки'");
	эл["Описание"] = НСтр("ru='Разрешить агенту изменять скидки'");
	эл["Показывать"] = Истина;
	эл["Тип"] = ТипКонстанты["Пользователь"];
	эл["Иерархия"] = НСтр("ru='Документы|Заказ'");
	эл["Выгружать"] = Истина;	
	
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ЗаказыРедактироватьОстатки";
	НастройкиАгентаПоУмолчанию["ЗаказыРедактироватьОстатки"] = Ложь;
	эл["Ид"] = "072ec906-bd0b-4b75-afa8-bece1434f1eb";
	эл["Представление"] = НСтр("ru='Не изменять остатки'");
	эл["Описание"] = НСтр("ru='При проведении/отмене проведения документа не изменять остатки товаров в мобильном устройстве'");
	эл["Показывать"] = Истина;
	эл["Тип"] = ТипКонстанты["Пользователь"];
	эл["Иерархия"] = НСтр("ru='Документы|Заказ'");
	эл["Выгружать"] = Истина;	
	
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ЗаказыОтрицательныеОстатки";
	НастройкиАгентаПоУмолчанию["ЗаказыОтрицательныеОстатки"] = Ложь;
	эл["Ид"] = "711587ed-1589-4e69-a7f7-09ade3fb5888";
	эл["Представление"] = НСтр("ru='Запретить отрицательные остатки'");
	эл["Описание"] = НСтр("ru='Запретить отрицательные остатки при проведении заказов в мобильном устройстве'");
	эл["Показывать"] = Истина;
	эл["Тип"] = ТипКонстанты["Пользователь"];
	эл["Иерархия"] = НСтр("ru='Документы|Заказ'");
	эл["Выгружать"] = Истина;	
	
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ЗаказыОтсрочкаДоставки";
	НастройкиАгентаПоУмолчанию["ЗаказыОтсрочкаДоставки"] = 0;
	эл["Ид"] = "b0fddb94-caf7-4003-b2fd-df15bd2f1f1b";
	эл["Представление"] = НСтр("ru='Отсрочка доставки'");
	эл["Описание"] = НСтр("ru='Количество дней отсрочки заказа'");
	эл["Показывать"] = Истина;
	эл["Тип"] = ТипКонстанты["Пользователь"];
	эл["Иерархия"] = НСтр("ru='Документы|Заказ'");
	эл["Выгружать"] = Истина;	
		
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ЖурналОтображатьВес";
	НастройкиАгентаПоУмолчанию["ЖурналОтображатьВес"] = Истина;
	эл["Ид"] = "0de4a49f-691b-4910-95bf-6f25a281d9e1";
	эл["Представление"] = НСтр("ru='Отображать вес в журнале документов'");
	эл["Описание"] = НСтр("ru='Отображать колонку ""вес"" в журнале документов мобильного приложения'");
	эл["Показывать"] = Истина;
	эл["Тип"] = ТипКонстанты["Пользователь"];
	эл["Иерархия"] = НСтр("ru='Документы|Заказ'");
	эл["Выгружать"] = Истина;
	
	//Альфия 26.05.2017   Константа
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ЗаказыВидыДоставки";
	НастройкиАгентаПоУмолчанию["ЗаказыВидыДоставки"] = Истина;
	эл["Ид"] = "ea614964-30b8-4065-bd65-940e38db1f31";
	эл["Представление"] = НСтр("ru='Виды доставки'");
	эл["Описание"] = НСтр("ru='возможность использования видов доставки в документе ""Заказ""'");
	эл["Показывать"] = Истина;
	эл["Тип"] = ТипКонстанты["Пользователь"];
	эл["Иерархия"] = НСтр("ru='Документы|Заказ'");
	эл["Выгружать"] = Истина;	
	//Альфия 26.05.2017
	
	//(( sk_190628 Добавляем настройки для документа "Мерчендайзинг" в рамках (MOD-466)
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ЗапрашиватьКоличествоВМерчендайзинге";
	НастройкиАгентаПоУмолчанию["ЗапрашиватьКоличествоВМерчендайзинге"] = Ложь;
	эл["Ид"] = "ec1c050f-9183-4cf8-9a40-8546c8617ebb";
	эл["Представление"] = НСтр("ru='Запрашивать количество'");
	эл["Описание"] = НСтр("ru='Запрашивать при подборе товара числовое количество.'");
	эл["Показывать"] = Истина;
	эл["Тип"] = ТипКонстанты["Пользователь"];
	эл["Иерархия"] = НСтр("ru='Документы|Мерчендайзинг'");
	эл["Выгружать"] = Истина;
	
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ЗапрашиватьЦенуВМерчендайзинге";
	НастройкиАгентаПоУмолчанию["ЗапрашиватьЦенуВМерчендайзинге"] = Ложь;
	эл["Ид"] = "aeddb719-eb7a-493e-b80e-ee2d63e76fe5";
	эл["Представление"] = НСтр("ru='Запрашивать цену'");
	эл["Описание"] = НСтр("ru='Запрашивать при подборе товара цену.'");
	эл["Показывать"] = Истина;
	эл["Тип"] = ТипКонстанты["Пользователь"];
	эл["Иерархия"] = НСтр("ru='Документы|Мерчендайзинг'");
	эл["Выгружать"] = Истина;
	
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ИзменятьРежимПодбораВМерчендайзинге";
	НастройкиАгентаПоУмолчанию["ИзменятьРежимПодбораВМерчендайзинге"] = Ложь;
	эл["Ид"] = "68524bcf-b992-4896-8a91-44ee31498831";
	эл["Представление"] = НСтр("ru='Изменять режим подбора'");
	эл["Описание"] = НСтр("ru='Разрешить изменять режим подбора.'");
	эл["Показывать"] = Истина;
	эл["Тип"] = ТипКонстанты["Пользователь"];
	эл["Иерархия"] = НСтр("ru='Документы|Мерчендайзинг'");
	эл["Выгружать"] = Истина;
	//)) sk_190628

	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ПКОУказыватьДокументОплаты";
	НастройкиАгентаПоУмолчанию["ПКОУказыватьДокументОплаты"] = Ложь;
	эл["Ид"] = "ccd3f25e-a29b-419f-b8a2-d58e380efae2";
	эл["Представление"] = НСтр("ru='Указывать документ оплаты'");
	эл["Описание"] = НСтр("ru='Запретить создавать документ без указания документа оплаты'");
	эл["Показывать"] = Истина;
	эл["Тип"] = ТипКонстанты["Пользователь"];
	эл["Иерархия"] = НСтр("ru='Документы|Приходный кассовый ордер'");
	эл["Выгружать"] = Истина;	
	
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ПКОПроверятьСуммуОплаты";
	НастройкиАгентаПоУмолчанию["ПКОПроверятьСуммуОплаты"] = Ложь;
	эл["Ид"] = "ef7c73d2-d745-4e04-a5f1-afcbbcb72f05";
	эл["Представление"] = НСтр("ru='Проверять сумму оплаты'");
	эл["Описание"] = НСтр("ru='Сверять сумму оплаты с суммой оплачиваемого документа: если сумма оплаты превысит сумму документа оплаты, то документ записан не будет'");
	эл["Показывать"] = Истина;
	эл["Тип"] = ТипКонстанты["Пользователь"];
	эл["Иерархия"] = НСтр("ru='Документы|Приходный кассовый ордер'");
	эл["Выгружать"] = Истина;	
		
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ПродажаУказыватьСкидкиВТЧ";
	НастройкиАгентаПоУмолчанию["ПродажаУказыватьСкидкиВТЧ"] = Ложь;
	эл["Ид"] = "4838f24a-ffaa-48f3-98f8-7863125944c8";
	эл["Представление"] = НСтр("ru='Указывать скидки в табличной части'");
	эл["Описание"] = НСтр("ru='Указывать скидки в табличной части документов продаж'");
	эл["Показывать"] = Истина;
	эл["Тип"] = ТипКонстанты["Пользователь"];
	эл["Иерархия"] = НСтр("ru='Документы|Настройки для документов продаж'");
	эл["Выгружать"] = Истина;
	
	//%
	
	//++Ratmir 2018-04-24
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ПродажаИзменятьРежимПодбора";
	НастройкиАгентаПоУмолчанию["ПродажаИзменятьРежимПодбора"] = Ложь;
	эл["Ид"] = "c64dac8a-2fbc-40bf-bf49-143398aaac9a";
	эл["Представление"] = НСтр("ru='Изменение режима подбора'");
	эл["Описание"] = НСтр("ru='Разрешить агенту изменять режим подбора в документе'");
	эл["Показывать"] = Истина;
	эл["Тип"] = ТипКонстанты["Пользователь"];
	эл["Иерархия"] = НСтр("ru='Документы|Настройки для документов продаж'");
	эл["Выгружать"] = Истина;	
	//--Ratmir 2018-04-24
	
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ИспользоватьРасширеннуюФормуВводаКоличества";
	НастройкиАгентаПоУмолчанию["ИспользоватьРасширеннуюФормуВводаКоличества"] = Ложь;
	эл["Ид"] = "619d132f-4a21-4db6-99cb-240f254e218d";
	эл["Представление"] = НСтр("ru='Использовать подробную форму ввода количества'");
	эл["Описание"] = НСтр("ru='Использовать подробную форму ввода количества при подборе номенклатуры'");
	эл["Показывать"] = Истина;
	эл["Тип"] = ТипКонстанты["Пользователь"];
	эл["Иерархия"] = НСтр("ru='Документы|Заказ'");
	эл["Выгружать"] = Истина;
	
	//++Ratmir 2018-04-20
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ОтображатьЕдИзмОстатков";
	НастройкиАгентаПоУмолчанию["ОтображатьЕдИзмОстатков"] = Ложь;
	эл["Ид"] = "BC87AA0F-17C7-45E1-9838-5089FF44D809";
	эл["Представление"] = НСтр("ru='Признак отображения единицы измерения остатка товара.'");
	эл["Описание"] = НСтр("ru='Признак отображения единицы измерения остатка товара в колонке _Остаток_ окна подбора товаров.'");
	эл["Показывать"] = Истина;
	эл["Тип"] = ТипКонстанты["Пользователь"];
	эл["Иерархия"] = НСтр("ru='Документы|Заказ'");
	эл["Выгружать"] = Истина;
	//--Ratmir 2018-04-20
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ПроверятьОстатокПриПодборе";
	НастройкиАгентаПоУмолчанию["ПроверятьОстатокПриПодборе"] = Ложь;
	эл["Ид"] = "dda65c97-9c4f-4639-ad91-daaea74f84a7";
	эл["Представление"] = НСтр("ru='Проверять остаток при подборе'");
	эл["Описание"] = НСтр("ru='Проверять остаток при подборе товара в документ'");
	эл["Показывать"] = Истина;
	эл["Тип"] = ТипКонстанты["Пользователь"];
	эл["Иерархия"] = НСтр("ru='Документы|Заказ'");
	эл["Выгружать"] = Истина;
	
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ПапкаБД";
	НастройкиАгентаПоУмолчанию["ПапкаБД"] = "";
	эл["Ид"] = "393ced2e-3f54-44bb-b753-478eb60a16d2";
	эл["Представление"] = НСтр("ru='Папка БД'");
	эл["Описание"] = НСтр("ru='Папка хранения файлов базы данных.'");
	эл["Показывать"] = Истина;
	эл["Тип"] = ТипКонстанты["Пользователь"];
	эл["Иерархия"] = НСтр("ru='Обмен данными'");
	эл["Выгружать"] = Истина;
	
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ПапкаРезервныхКопий";
	НастройкиАгентаПоУмолчанию["ПапкаРезервныхКопий"] = "";
	эл["Ид"] = "60a12916-08c0-4abf-86d2-7f508282bab8";
	эл["Представление"] = НСтр("ru='Папка резервных копий'");
	эл["Описание"] = НСтр("ru='Папка хранения резервных копий'");
	эл["Показывать"] = Истина;
	эл["Тип"] = ТипКонстанты["Пользователь"];
	эл["Иерархия"] = НСтр("ru='Обмен данными'");
	эл["Выгружать"] = Истина;
	
	// фиксированное значение константы, в случае необходимости добавить в дерево для возможности редактирования
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ТипыРезервныхКопий";
	НастройкиАгентаПоУмолчанию["ТипыРезервныхКопий"] = "100";
	эл["Ид"] = "23ae51b7-55de-46a0-9ecc-a796eb5035d2";
	эл["Представление"] = НСтр("ru='Типы резервных копий'");
	эл["Описание"] = НСтр("ru='Типы используемых резервных копий.'");
	эл["Показывать"] = Ложь;
	эл["Тип"] = ТипКонстанты["Пользователь"];
	эл["Иерархия"] = НСтр("ru='Обмен данными'");
	эл["Выгружать"] = Истина;
	
	
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "КоординатыДокументаИзТочкиТрека";
	НастройкиАгентаПоУмолчанию["КоординатыДокументаИзТочкиТрека"] = Ложь;
	эл["Ид"] = "45523fc3-a600-4497-a15b-43c90d2cb54f";
	эл["Представление"] = НСтр("ru='Брать GPS-координаты документа из трека'");
	эл["Описание"] = НСтр("ru='Получать GPS-координаты документа из трека'");
	эл["Показывать"] = Истина;
	эл["Тип"] = ТипКонстанты["Пользователь"];
	эл["Иерархия"] = НСтр("ru='GPS'");
	эл["Выгружать"] = Истина;
	
	
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "РежимСортировки";
	НастройкиАгентаПоУмолчанию["РежимСортировки"] = "Наименование";
	эл["Ид"] = "f24da797-1374-410d-a8e2-28645772b81c";
	эл["Представление"] = НСтр("ru='Поле сортировки товаров'");
	эл["Описание"] = НСтр("ru='Наименование реквизита, по которому производится сортировка товаров в окне подбора товара или справочнике ""Номенклатура""'");
	эл["Показывать"] = Истина;
	эл["Тип"] = ТипКонстанты["Пользователь"];
	эл["Иерархия"] = НСтр("ru='Справочники|Каталог товаров'");
	эл["Выгружать"] = Истина;
	эл["ТипЗначения"] = "СписокЗначений";
	
    
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ПоказыватьРекомендованныйЗаказ";
	НастройкиАгентаПоУмолчанию["ПоказыватьРекомендованныйЗаказ"] = Ложь;
	эл["Ид"] = "e4d51f85-cc81-402c-9f14-a8eaa07b945f";
	эл["Представление"] = НСтр("ru='Показывать рекомендованный заказ'");
	эл["Описание"] = НСтр("ru='В окне ввода количества товара отображается рекомендованное количество для заказа (согласно выбранному алгоритму расчета рекомендованного количества)'");
	эл["Показывать"] = Истина;
	эл["Тип"] = ТипКонстанты["Пользователь"];
	эл["Иерархия"] = НСтр("ru='Документы|Настройки для документов продаж'");
	эл["Выгружать"] = Истина;

	//%--
	
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ПродажаИзменениеТипаЦены";
	НастройкиАгентаПоУмолчанию["ПродажаИзменениеТипаЦены"] = Ложь;
	эл["Ид"] = "0deef076-ff1f-4e4d-acb5-8344be0281a1";
	эл["Представление"] = НСтр("ru='Запретить изменение типа цены в документе'");
	эл["Описание"] = НСтр("ru='Запретить агенту изменять тип цены в документе'");
	эл["Показывать"] = Истина;
	эл["Тип"] = ТипКонстанты["Пользователь"];
	эл["Иерархия"] = НСтр("ru='Документы|Настройки для документов продаж'");
	эл["Выгружать"] = Истина;	
	
	эл = ТаблЗначКонстанты.Добавить();		
	эл["Имя"] = "УказаниеСкладовВТабличнойЧастиДокументов";
	НастройкиАгентаПоУмолчанию["УказаниеСкладовВТабличнойЧастиДокументов"] = Истина; 
	эл["Ид"] = "63b7d515-ce1d-4f91-b65e-1293495a07e1";
	эл["Представление"] = НСтр("ru='Многоскладской учет'"); 
	эл["Описание"] = НСтр("ru='Указание складов в табличной части документов'");
	эл["Показывать"] = Истина;    
	эл["Тип"] = ТипКонстанты["Пользователь"];
	эл["Иерархия"] = НСтр("ru='Документы|Настройки для документов продаж'"); 
	эл["Выгружать"] = Истина;
		
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ДокументыЗаполнениеОрганизации";
	НастройкиАгентаПоУмолчанию["ДокументыЗаполнениеОрганизации"] = Ложь;
	эл["Ид"] = "dc63708b-9257-48dc-9f16-d9846ac7d5fe";
	эл["Представление"] = НСтр("ru='Проверять заполнение организации'");
	эл["Описание"] = НСтр("ru='Не проводить документы, у которых не выбрана организация'");
	эл["Показывать"] = Истина;
	эл["Тип"] = ТипКонстанты["Пользователь"];
	эл["Иерархия"] = НСтр("ru='Документы'");
	эл["Выгружать"] = Истина;	
	
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ДокументыЗаполнениеКлиента";
	НастройкиАгентаПоУмолчанию["ДокументыЗаполнениеКлиента"] = Ложь;
	эл["Ид"] = "b8396958-7d13-4633-a6c3-c8d639cbf9e6";
	эл["Представление"] = НСтр("ru='Проверять заполнение клиента'");
	эл["Описание"] = НСтр("ru='Не проводить документы, у которых не выбран клиент'");
	эл["Показывать"] = Истина;
	эл["Тип"] = ТипКонстанты["Пользователь"];
	эл["Иерархия"] = НСтр("ru='Документы'");
	эл["Выгружать"] = Истина;	
	
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ДокументыЗаполнениеТорговойТочки";
	НастройкиАгентаПоУмолчанию["ДокументыЗаполнениеТорговойТочки"] = Ложь;
	эл["Ид"] = "f984e263-b838-489e-a1d4-f775db7ede98";
	эл["Представление"] = НСтр("ru='Проверять заполнение торговой точки'");
	эл["Описание"] = НСтр("ru='Не проводить документы, у которых не выбрана торговая точка'");
	эл["Показывать"] = Истина;
	эл["Тип"] = ТипКонстанты["Пользователь"];
	эл["Иерархия"] = НСтр("ru='Документы'");
	эл["Выгружать"] = Истина;	
	
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ДокументыВыборДоговора";
	НастройкиАгентаПоУмолчанию["ДокументыВыборДоговора"] = Ложь;
	эл["Ид"] = "56649629-21e4-4116-aec6-e794f12c62fe";
	эл["Представление"] = НСтр("ru='Проверять выбор договора'");
	эл["Описание"] = НСтр("ru='Не проводить документы, у которых не выбран договор'");
	эл["Показывать"] = Истина;
	эл["Тип"] = ТипКонстанты["Пользователь"];
	эл["Иерархия"] = НСтр("ru='Документы'");
	эл["Выгружать"] = Истина;	
	
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ДокументыРедактироватьПодтвержденные";
	НастройкиАгентаПоУмолчанию["ДокументыРедактироватьПодтвержденные"] = Ложь;
	эл["Ид"] = "8deb5086-fb67-436e-a5f7-5118ce0dc09e";
	эл["Представление"] = НСтр("ru='Редактировать подтвержденные документы'");
	эл["Описание"] = НСтр("ru='Разрешить агенту редактировать документы, подтвержденные из ЦБД'");
	эл["Показывать"] = Истина;
	эл["Тип"] = ТипКонстанты["Пользователь"];
	эл["Иерархия"] = НСтр("ru='Документы'");
	эл["Выгружать"] = Истина;	
	
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ДокументыКомментарийФотографий";
	НастройкиАгентаПоУмолчанию["ДокументыКомментарийФотографий"] = Ложь;
	эл["Ид"] = "16d90b81-6ba0-4e72-a471-4350213b934e";
	эл["Представление"] = НСтр("ru='Запрашивать комментарий к фотографиям'");
	эл["Описание"] = НСтр("ru='Запрашивать комментарий к фотографиям'");
	эл["Показывать"] = Истина;
	эл["Тип"] = ТипКонстанты["Пользователь"];
	эл["Иерархия"] = НСтр("ru='Документы'");
	эл["Выгружать"] = Истина;	
	
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ДокументыИзменениеДаты";
	НастройкиАгентаПоУмолчанию["ДокументыИзменениеДаты"] = Ложь;
	эл["Ид"] = "faf41508-ab25-4e1b-9bbd-f80634a3d264";
	эл["Представление"] = НСтр("ru='Разрешить изменение даты документов'");
	эл["Описание"] = НСтр("ru='Разрешить агенту изменять дату документов'");
	эл["Показывать"] = Истина;
	эл["Тип"] = ТипКонстанты["Пользователь"];
	эл["Иерархия"] = НСтр("ru='Документы'");
	эл["Выгружать"] = Истина;	
	
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ДокументыПересчетЦен";
	НастройкиАгентаПоУмолчанию["ДокументыПересчетЦен"] = Ложь;
	эл["Ид"] = "6d4c184b-810d-4c23-ba6e-fb7e03b48812";
	эл["Представление"] = НСтр("ru='Запрашивать пересчет цен'");
	эл["Описание"] = НСтр("ru='Запрашивать агента о необходимости пересчета цен документа при изменении типа цены'");
	эл["Показывать"] = Истина;
	эл["Тип"] = ТипКонстанты["Пользователь"];
	эл["Иерархия"] = НСтр("ru='Документы'");
	эл["Выгружать"] = Истина;	
	
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ДокументыОтображатьСписокСкладок";
	НастройкиАгентаПоУмолчанию["ДокументыОтображатьСписокСкладок"] = Ложь;
	эл["Ид"] = "018dd98c-d617-4d35-b5c0-efdabf6b37a2";
	эл["Представление"] = НСтр("ru='Скрывать список складов при вводе количества'");
	эл["Описание"] = НСтр("ru='Скрывать таблицу с остатками в разрезе складов в окне ввода количества товара при подборе номенклатуры в заказ
								|Доступно только при использовании многоскладского учёта'");
	эл["Показывать"] = Истина;
	эл["Тип"] = ТипКонстанты["Пользователь"];
	эл["Иерархия"] = НСтр("ru='Документы'");
	эл["Выгружать"] = Истина;	
	
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ПрефиксТорговогоАгента";
	НастройкиАгентаПоУмолчанию["ПрефиксТорговогоАгента"] = "";
	эл["Ид"] = "c21ed754-43d4-423d-bdb6-8d2f36b9f8d1";
	эл["Представление"] = НСтр("ru='Префикс нумерации'");
	эл["Описание"] = НСтр("ru='Префикс нумерации документов в мобильном устройстве'");
	эл["Показывать"] = Истина;
	эл["Тип"] = ТипКонстанты["Пользователь"];
	эл["Иерархия"] = НСтр("ru='Документы'");
	эл["Выгружать"] = Истина;	
		
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "РаботаСМаршрутами";
	НастройкиАгентаПоУмолчанию["РаботаСМаршрутами"] = Ложь;
	эл["Ид"] = "99eeeef3-015a-4727-8166-65f2dcceab29";
	эл["Представление"] = НСтр("ru='Работа с маршрутами'");
	эл["Описание"] = НСтр("ru='Включить закладку маршруты в окне выбора клиентов'");
	эл["Показывать"] = Истина;
	эл["Тип"] = ТипКонстанты["Пользователь"];
	эл["Иерархия"] = НСтр("ru='Маршруты'");
	эл["ТолькоПросмотр"] = Ложь;
	эл["Выгружать"] = Истина;	
	массивПодчиненныхНастроек = Новый Массив;
	массивПодчиненныхНастроек.Добавить("ПриоритетПоМаршрутам");
	эл["СписокПодчиненныхНастроек"] = массивПодчиненныхНастроек;
	
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ПриоритетПоМаршрутам";
	НастройкиАгентаПоУмолчанию["ПриоритетПоМаршрутам"] = Ложь;	
	эл["Ид"] = "8e0a70a1-476c-4c7b-a8a7-0c9ce334fc68";
	эл["Представление"] = НСтр("ru='При выборе клиентов приоритет по маршрутам'");
	эл["Описание"] = НСтр("ru='При выборе клиентов приоритет по маршрутам'");
	эл["Показывать"] = Истина;
	эл["Тип"] = ТипКонстанты["Пользователь"];
	эл["Иерархия"] = НСтр("ru='Маршруты'");
	эл["Выгружать"] = Истина;	
	массивГлавныхНастроек = Новый Массив;
	массивГлавныхНастроек.Добавить("РаботаСМаршрутами");
	эл["СписокГлавныхНастроек"] = массивГлавныхНастроек;

	
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ИспользоватьGPS";
	НастройкиАгентаПоУмолчанию["ИспользоватьGPS"] = Ложь;	
	эл["Ид"] = "e8dca437-fa0d-4f92-b7b8-4a7a162638c5";
	эл["Представление"] = НСтр("ru='Использовать GPS'");
	эл["Описание"] = НСтр("ru='Использовать GPS'");
	эл["Показывать"] = Истина;
	эл["Тип"] = ТипКонстанты["Пользователь"];
	эл["Иерархия"] = НСтр("ru='GPS'");
	эл["Выгружать"] = Истина;
	массивПодчиненныхНастроек = Новый Массив;
	массивПодчиненныхНастроек.Добавить("GPSЗаписыватьТрек");
	массивПодчиненныхНастроек.Добавить("GPSФоноваяПередача");
	массивПодчиненныхНастроек.Добавить("GPSИнтервалПередачи");
	массивПодчиненныхНастроек.Добавить("ИспользоватьДатуGPS");
	массивПодчиненныхНастроек.Добавить("GPSРасписание");	                                 
	эл["СписокПодчиненныхНастроек"] = массивПодчиненныхНастроек;
	
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "GPSЗаписыватьТрек";
	НастройкиАгентаПоУмолчанию["GPSЗаписыватьТрек"] = Ложь;
	эл["Ид"] = "6e7183cc-abf6-4b18-af75-f4d851551fd4";
	эл["Представление"] = НСтр("ru='Записывать трек'");
	эл["Описание"] = НСтр("ru='Записывать трек перемещения'");
	эл["Показывать"] = Истина;	
	эл["Тип"] = ТипКонстанты["Пользователь"];	
	эл["Иерархия"] = НСтр("ru='GPS|Настройки для трекинга'");
	эл["Выгружать"] = Истина;	
	массивПодчиненныхНастроек = Новый Массив;
	массивПодчиненныхНастроек.Добавить("GPSФоноваяПередача");
	массивПодчиненныхНастроек.Добавить("GPSИнтервалПередачи");
	массивПодчиненныхНастроек.Добавить("ИспользоватьДатуGPS");
	массивПодчиненныхНастроек.Добавить("GPSРасписание");	                                 
	эл["СписокПодчиненныхНастроек"] = массивПодчиненныхНастроек;
	массивГлавныхНастроек = Новый Массив;
	массивГлавныхНастроек.Добавить("ИспользоватьGPS");
	эл["СписокГлавныхНастроек"] = массивГлавныхНастроек;
	
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "GPSФоноваяПередача";
	НастройкиАгентаПоУмолчанию["GPSФоноваяПередача"] = Ложь;
	эл["Ид"] = "6517da49-a145-43a7-8730-a3e9978e437b";
	эл["Представление"] = НСтр("ru='Фоновая передача'");
	эл["Описание"] = НСтр("ru='Фоновая передача координат через службу """ + Имена["АгентПлюсСОД"] + """'");
	эл["Показывать"] = Истина;	
	эл["Тип"] = ТипКонстанты["Пользователь"];
	эл["Иерархия"] = НСтр("ru='GPS|Настройки для трекинга'");
	эл["Выгружать"] = Истина;
	массивПодчиненныхНастроек = Новый Массив;
	массивПодчиненныхНастроек.Добавить("GPSИнтервалПередачи");
	эл["СписокПодчиненныхНастроек"] = массивПодчиненныхНастроек;
	массивГлавныхНастроек = Новый Массив;
	массивГлавныхНастроек.Добавить("ИспользоватьGPS");
	массивГлавныхНастроек.Добавить("GPSЗаписыватьТрек");
	эл["СписокГлавныхНастроек"] = массивГлавныхНастроек;

	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "GPSИнтервалПередачи";
	НастройкиАгентаПоУмолчанию["GPSИнтервалПередачи"] = 300;
	эл["Ид"] = "54e2a0b0-4f94-499d-875a-9d2ee7634da9";
	эл["Представление"] = НСтр("ru='Интервал передачи'");
	эл["Описание"] = НСтр("ru='Интервал при фоновой передачи, в секундах'");
	эл["Показывать"] = Истина;	
	эл["Тип"] = ТипКонстанты["Пользователь"];	
	эл["Иерархия"] = НСтр("ru='GPS|Настройки для трекинга'");
	эл["Выгружать"] = Истина;
	массивГлавныхНастроек = Новый Массив;
	массивГлавныхНастроек.Добавить("ИспользоватьGPS");
	массивГлавныхНастроек.Добавить("GPSЗаписыватьТрек");
	массивГлавныхНастроек.Добавить("GPSФоноваяПередача");
	эл["СписокГлавныхНастроек"] = массивГлавныхНастроек;
	
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ИспользоватьДатуGPS";
	НастройкиАгентаПоУмолчанию["ИспользоватьДатуGPS"] = Ложь;
	эл["Ид"] = "c6b9563f-947a-46c2-82dd-d375e103317d";
	эл["Представление"] = НСтр("ru='Использовать дату GPS'");
	эл["Описание"] = НСтр("ru='Синхронизировать системное время в мобильном устройстве с полученными GPS-данными'");
	эл["Показывать"] = Истина;	
	эл["Тип"] = ТипКонстанты["Пользователь"];	
	эл["Иерархия"] = НСтр("ru='GPS|Настройки для трекинга'");
	эл["Выгружать"] = Истина;	
	массивГлавныхНастроек = Новый Массив;
	массивГлавныхНастроек.Добавить("ИспользоватьGPS");
	массивГлавныхНастроек.Добавить("GPSЗаписыватьТрек");
	эл["СписокГлавныхНастроек"] = массивГлавныхНастроек;
	
	эл = ТаблЗначКонстанты.Добавить();		
	эл["Имя"] = "GPSРасписание";
	НастройкиАгентаПоУмолчанию["GPSРасписание"] = ПустойИдентификатор;
	эл["Представление"] = НСтр("ru='Расписание'");
	эл["Описание"] = НСтр("ru='Расписание работы режима записи трека в мобильном устройстве'");
	эл["Показывать"] = Истина;
	эл["Тип"] = ТипКонстанты["Пользователь"];	
	эл["Иерархия"] = НСтр("ru='GPS|Настройки для трекинга'");
	эл["ТипЗначения"] = "СписокЗначений";
	эл["Выгружать"] = Ложь;
	массивГлавныхНастроек = Новый Массив;
	массивГлавныхНастроек.Добавить("ИспользоватьGPS");
	массивГлавныхНастроек.Добавить("GPSЗаписыватьТрек");
	эл["СписокГлавныхНастроек"] = массивГлавныхНастроек;
	
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "GPSПериодЗаписиТрека";
	НастройкиАгентаПоУмолчанию["GPSПериодЗаписиТрека"] = "";
	эл["Ид"] = "e38fe34e-f36a-44c9-9dbd-a29f7c925940";
	эл["Показывать"] = Ложь;	
	эл["Тип"] = ТипКонстанты["Пользователь"];	
	эл["Выгружать"] = Истина;
	
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "GPSРабочееВремя";
	НастройкиАгентаПоУмолчанию["GPSРабочееВремя"] = "";
	эл["Ид"] = "1de1dae1-a088-4c5b-a68e-4d233b49683a";
	эл["Показывать"] = Ложь;	
	эл["Тип"] = ТипКонстанты["Пользователь"];	
	эл["Выгружать"] = Истина;

	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "GPSРабочиеДни";
	НастройкиАгентаПоУмолчанию["GPSРабочиеДни"] = "";
	эл["Ид"] = "428f867c-0bf1-45b2-b812-ef1d284d3e3f";
	эл["Показывать"] = Ложь;	
	эл["Тип"] = ТипКонстанты["Пользователь"];	
	эл["Выгружать"] = Истина;
	
	//Посещение
	СтруктураРеквизитов = Новый Структура;
	
	СтруктураРеквизитов.Вставить("Широта","A07");
	СтруктураРеквизитов.Вставить("Долгота","A08");
	СтруктураРеквизитов.Вставить("ДатаСоздания","A09");
	СтруктураРеквизитов.Вставить("ДатаИзменения","A010");	
	СтруктураРеквизитов.Вставить("_ИмяДокумента", "Посещение");
	СтруктураРеквизитов.Вставить("_Представление", НСтр("ru='Посещение'"));
	СтруктураРеквизитов.Вставить("_Загружать", Истина);
	
	СоответствиеДок.Вставить("9f147c59-5ee8-4550-8289-12ecfe5d0617", СтруктураРеквизитов);
	
	СоответствиеДок.Вставить("Посещение","9f147c59-5ee8-4550-8289-12ecfe5d0617");   //Альфия 18.05.2017

	
		//// Запретить редактирование периода записи трека, если выключен флажок записывать трек
		//УстановитьДоступностьПоляВЗависимостиОтФлажка(ОформлениеСтроки, ДанныеСтроки, "TrackPeriod", "WriteTrack");
		//
		//// Запретить редактирование интервал передачи, если выключен флажок
		//// использования фоновой передачи     	
		//УстановитьДоступностьПоляВЗависимостиОтФлажка(ОформлениеСтроки, ДанныеСтроки, "AutoSendInterval", "AutoSend");
		//
		//// Запретить редактирование флажка приоритета для маршрутов, если выключен флажок
		//// использование маршрутов    	
		//УстановитьДоступностьПоляВЗависимостиОтФлажка(ОформлениеСтроки, ДанныеСтроки, "FlagsPriority", "FlagsUseRoutes");
		//
		//// Запретить редактирование рабочие дни, если включен флажок использование дни из маршрута    	
		//УстановитьДоступностьПоляВЗависимостиОтФлажка(ОформлениеСтроки, ДанныеСтроки, "WorkDays", "DaysFromRoute", Истина);
		//
		//// Запретить редактирование настроек трекинга, если выключен флажок
		//// использовать GPS
		//УстановитьДоступностьПоляВЗависимостиОтФлажка(ОформлениеСтроки, ДанныеСтроки, "WriteTrack",    "UseGPS");	
		//УстановитьДоступностьПоляВЗависимостиОтФлажка(ОформлениеСтроки, ДанныеСтроки, "Schedule",      "UseGPS");	
		//УстановитьДоступностьПоляВЗависимостиОтФлажка(ОформлениеСтроки, ДанныеСтроки, "UseSyncTimeMT", "UseGPS");	
		//
		//// Запретить редактирование расписания, если включен флажок записи трека    	
		//УстановитьДоступностьПоляВЗависимостиОтФлажка(ОформлениеСтроки, ДанныеСтроки, "Schedule", "WriteTrack");
		//
		//// Запретить редактирование синхронизации времени, если включен флажок записи трека    	
		//УстановитьДоступностьПоляВЗависимостиОтФлажка(ОформлениеСтроки, ДанныеСтроки, "UseSyncTimeMT", "WriteTrack");		
	
		
	//////////////////НЕОТОБРАЖАЕМЫЕ КОНСТАНТЫ ОБМЕНА///////////////////
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ИдентификаторАгента";
	НастройкиАгентаПоУмолчанию["ИдентификаторАгента"] = ПустойИдентификатор;	
	эл["Ид"] = "79c698db-3c55-465e-acfe-4741acdd5655";
	эл["Представление"] = "";
	эл["Показывать"] = Ложь;
	эл["Тип"] = ТипКонстанты["Пользователь"];
	эл["Выгружать"] = Истина;	
			
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "НаименованиеАгента";
	НастройкиАгентаПоУмолчанию["НаименованиеАгента"] = "";
	эл["Ид"] = "a2e1cc68-0624-45a6-8057-efd35259b9fe";
	эл["Представление"] = НСтр("ru='Наименование агента'");
	эл["Показывать"] = Ложь;
	эл["Тип"] = ТипКонстанты["Пользователь"];	
	эл["Выгружать"] = Истина;	
	
   	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ВалютаРегламентированногоУчета";
	эл["Ид"] = "d2b5508c-7453-4a52-b803-a846992a485d";
	эл["Описание"] = НСтр("ru='Валюта регламентированного учёта'");
	эл["Показывать"] = Ложь;	
	эл["Тип"] = ТипКонстанты["Типовая"];
	эл["Выгружать"] = Истина;
	
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ЕдиницаИзмеренияВеса";
	эл["Ид"] = "13af34a5-664d-4aad-a29c-eefc04fefca9";
	эл["Представление"] = НСтр("ru='Единица измерения веса'");
	эл["Показывать"] = Ложь;
	эл["Тип"] = ТипКонстанты["Типовая"];
	эл["Выгружать"] = Истина;
	
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ИдентификаторФактическогоАдреса";		
	НастройкиОбработкиПоУмолчанию["ИдентификаторФактическогоАдреса"] = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента.Ссылка.УникальныйИдентификатор();	
	эл["Ид"] = "1b3d41b2-eb00-4f25-a476-6a668c5e69f0";
	эл["Показывать"] = Ложь;
	эл["Тип"] = ТипКонстанты["Обработка"];		
	эл["Выгружать"] = Истина;
	
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ТочностьКоличества";
	НастройкиАгентаПоУмолчанию["ТочностьКоличества"] = 2;
	эл["Ид"] = "27952ab3-1365-4b56-a0ef-34ec0133e5d3";
	эл["Описание"] = НСтр("ru='Количество дробных знаков поля ""количество"" в мобильном приложении'");
	эл["Показывать"] = Ложь;	
	эл["Тип"] = ТипКонстанты["Пользователь"];	
	эл["Выгружать"] = Истина;	
	
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ТочностьЦены";
	НастройкиАгентаПоУмолчанию["ТочностьЦены"] = 2;	
	эл["Ид"] = "5d54ed85-fdea-4027-8ecd-129c27bdbf64";
	эл["Описание"] = НСтр("ru='Количество дробных знаков поля ""цена"" в мобильном приложении'");
	эл["Показывать"] = Ложь;	
	эл["Тип"] = ТипКонстанты["Пользователь"];	
	эл["Выгружать"] = Истина;	
	
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ТочностьСкидки";
	НастройкиАгентаПоУмолчанию["ТочностьСкидки"] = 2;
	эл["Ид"] = "a978f039-3f17-4705-b7f6-16c580c9ac5f";
	эл["Описание"] = НСтр("ru='Количество дробных знаков поля ""скидка"" в мобильном приложении'");
	эл["Показывать"] = Ложь;	
	эл["Тип"] = ТипКонстанты["Пользователь"];	
	эл["Выгружать"] = Истина;	
	
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ИспользоватьХарактеристикиНоменклатуры";
	эл["Ид"] = "6e9470db-c618-4bf8-b510-d1e39e2217f6";
	эл["Описание"] = НСтр("ru='Признак использования характеристик номенклатуры'");
	эл["Показывать"] = Истина;
	эл["Тип"] = ТипКонстанты["Обработка"];
	эл["Выгружать"] = Истина;	
		
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ВыделятьЦветомПросроченныеДолги";
	НастройкиОбработкиПоУмолчанию["ВыделятьЦветомПросроченныеДолги"] = Ложь;
	эл["Описание"] = НСтр("ru='Выделять цветом просроченные долги'");
	эл["Тип"] = ТипКонстанты["Обработка"];
	эл["Выгружать"] = Ложь;
	
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ЦветПросроченныхДолгов";
	эл["Ид"] = "9c60a778-7db0-4b3a-89d5-ebe6b56b1d7f";	
	НастройкиОбработкиПоУмолчанию["ЦветПросроченныхДолгов"] = Новый ХранилищеЗначения(Неопределено);
	эл["Описание"] = НСтр("ru='Цвет выделения просроченных долгов в мобильном устройстве. Если указан флажок, то долги в МУ будут выделяться указанным цветом.Если цвет не выбран, то цвет выделения долгов - красный.'");	
	эл["Тип"] = ТипКонстанты["Обработка"];
	эл["Выгружать"] = Истина;
	
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ВыгружатьТолькоПросроченныеДолги";
	НастройкиОбработкиПоУмолчанию["ВыгружатьТолькоПросроченныеДолги"] = Ложь;
	эл["Описание"] = НСтр("ru='Выгружать только просроченные долги'");
	эл["Тип"] = ТипКонстанты["Обработка"];
	эл["Выгружать"] = Ложь;
	
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "СпособРасчетаПросроченныхДолгов";
	НастройкиОбработкиПоУмолчанию["СпособРасчетаПросроченныхДолгов"] = "ПоДоговору";
	эл["Описание"] = НСтр("ru='Способ расчета просроченных долгов'");
	эл["Тип"] = ТипКонстанты["Обработка"];
	эл["Выгружать"] = Ложь;

    эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ИнтервалПросроченныхДолгов";
	НастройкиОбработкиПоУмолчанию["ИнтервалПросроченныхДолгов"] = 0;
	эл["Описание"] = НСтр("ru='Интервал выгрузки просроченных долгов (дней)'");
	эл["Тип"] = ТипКонстанты["Обработка"];
	эл["Выгружать"] = Ложь;
	
	//эл = ТаблЗначКонстанты.Добавить();
	//эл["Имя"] = "ПродажаМерчендайзингЗапросКоличества";
	//НастройкиАгентаПоУмолчанию["ПродажаМерчендайзингЗапросКоличества"] = Ложь;
	//эл["Ид"] = "32cd846c-cafa-4006-bc05-ef2cd135e2ea";
	//эл["Описание"] = НСтр("ru='Запрашивать количество мерчендайзинга в окне подбора товаров (только если документ продажи ссылается на документ мерчендайзинга)'");
	//эл["Показывать"] = Ложь;	
	//эл["Тип"] = ТипКонстанты["Пользователь"];	
	//эл["Выгружать"] = Истина;
	
	//эл = ТаблЗначКонстанты.Добавить();
	//эл["Имя"] = "ПродажаМерчендайзингКоличествоВОдномОкне";
	//НастройкиАгентаПоУмолчанию["ПродажаМерчендайзингКоличествоВОдномОкне"] = Ложь;
	//эл["Ид"] = "138f9a6c-7f96-4136-9fbc-0663476bc094";
	//эл["Описание"] = НСтр("ru='В окне ввода количества товара мобильного приложения запрашивать количество мерчендайзинга'");
	//эл["Показывать"] = Ложь;	
	//эл["Тип"] = ТипКонстанты["Пользователь"];	
	//эл["Выгружать"] = Истина;
	
	//эл = ТаблЗначКонстанты.Добавить();
	//эл["Имя"] = "ОграничениеСкидки";
	//НастройкиАгентаПоУмолчанию["ОграничениеСкидки"] = Ложь;
	//эл["Ид"] = "5c0be27d-7b90-4e9c-89fd-1d1e5c42c944";
	//эл["Описание"] = НСтр("ru='Использовать ограничение скидки для агента'");
	//эл["Показывать"] = Ложь;	
	//эл["Тип"] = ТипКонстанты["Пользователь"];	
	//эл["Выгружать"] = Ложь;
	//
	//эл = ТаблЗначКонстанты.Добавить();
	//эл["Имя"] = "МерчендайзингЗапросКоличества";
	//НастройкиАгентаПоУмолчанию["МерчендайзингЗапросКоличества"] = Ложь;
	//эл["Ид"] = "ec1c050f-9183-4cf8-9a40-8546c8617ebb";
	//эл["Описание"] = НСтр("ru='Запрашивать при подборе количество товара'");
	//эл["Показывать"] = Ложь;	
	//эл["Тип"] = ТипКонстанты["Пользователь"];	
	//эл["Выгружать"] = Истина;

	//эл = ТаблЗначКонстанты.Добавить();
	//эл["Имя"] = "МерчендайзингЗапросЦены";
	//НастройкиАгентаПоУмолчанию["МерчендайзингЗапросЦены"] = Ложь;
	//эл["Ид"] = "aeddb719-eb7a-493e-b80e-ee2d63e76fe5";
	//эл["Описание"] = НСтр("ru='Запрашивать при подборе цену товара'");
	//эл["Показывать"] = Ложь;	
	//эл["Тип"] = ТипКонстанты["Пользователь"];	
	//эл["Выгружать"] = Истина;
	//
	//эл = ТаблЗначКонстанты.Добавить();
	//эл["Имя"] = "МерчендайзингИзменятьРежимПодбора";
	//НастройкиАгентаПоУмолчанию["МерчендайзингИзменятьРежимПодбора"] = Ложь;
	//эл["Ид"] = "68524bcf-b992-4896-8a91-44ee31498831";
	//эл["Описание"] = НСтр("ru='Разрешить агенту изменять режим подбора'");
	//эл["Показывать"] = Ложь;	
	//эл["Тип"] = ТипКонстанты["Пользователь"];	
	//эл["Выгружать"] = Истина;
	//
	//эл = ТаблЗначКонстанты.Добавить();
	//эл["Имя"] = "МерчендайзингРедактируемый";
	//НастройкиАгентаПоУмолчанию["МерчендайзингРедактируемый"] = Ложь;
	//эл["Ид"] = "d2dd4509-e164-4e6c-a0b2-c46b5ca0397d";
	//эл["Описание"] = НСтр("ru='При подборе товаров в документы, ссылающиеся на документ Мерчендайзинг, колонка Мерчендайзинг в окне подбора становится редактируемой, т.е. подбор производится одновременно в два документа'");
	//эл["Показывать"] = Ложь;	
	//эл["Тип"] = ТипКонстанты["Пользователь"];	
	//эл["Выгружать"] = Истина;
	//
	//эл = ТаблЗначКонстанты.Добавить();
	//эл["Имя"] = "МерчендайзингСоздаватьАвтоматически";
	//НастройкиАгентаПоУмолчанию["МерчендайзингСоздаватьАвтоматически"] = Ложь;
	//эл["Ид"] = "a86959b3-ed83-44d8-b457-df8dfea9efdd";
	//эл["Описание"] = НСтр("ru='Создавать автоматически документ мерчендайзинга на основании других документов'");
	//эл["Показывать"] = Ложь;	
	//эл["Тип"] = ТипКонстанты["Пользователь"];	
	//эл["Выгружать"] = Истина;		

	/////////////////НАСТРОЙКИ ОБРАБОТКИ///////////////////////////
	//---------------Основные-------------------
	//
	
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "РежимВыгрузкиКонтрагентов";
	НастройкиОбработкиПоУмолчанию["РежимВыгрузкиКонтрагентов"] = 2;     	//выгружать всех контрагентов
	эл["Описание"] = НСтр("ru='Режим выгрузки контрагентов'");
	эл["Тип"] = ТипКонстанты["Обработка"];
	эл["Выгружать"] = Ложь;
	
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ВыгружатьХарактеристики";
	НастройкиОбработкиПоУмолчанию["ВыгружатьХарактеристики"] = Ложь;     	//Не учитывать разрез
	эл["Описание"] = НСтр("ru='Выгружать характеристики'");
	эл["Тип"] = ТипКонстанты["Обработка"];
	эл["Выгружать"] = Ложь;
	
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "РеализацияПоЗаявкам";
	НастройкиОбработкиПоУмолчанию["РеализацияПоЗаявкам"] = 0;     			// Обычный способ загрузки
	эл["Описание"] = НСтр("ru='Способ загрузки документов ""Заказ""'");
	эл["Тип"] = ТипКонстанты["Обработка"];
	эл["Выгружать"] = Ложь;
	
	//(( sk_190516 В рамках (MOD-520)
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "РежимЗагрузкиСкидок";
	НастройкиОбработкиПоУмолчанию["РежимЗагрузкиСкидок"] = 3;               // Режим загрузки скидок "Рекомендованный"
	эл["Описание"] = НСтр("ru='Режим загрузки скидок'");
	эл["Тип"] = ТипКонстанты["Обработка"];
	эл["Выгружать"] = Ложь;
	//)) sk_190516
	
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ИспользоватьТорговыеТочки";
	НастройкиОбработкиПоУмолчанию["ИспользоватьТорговыеТочки"] = Ложь;
	эл["Ид"] = "8c52bbbf-8bbb-447d-b18b-06860d372818";
	эл["Описание"] = НСтр("ru='Признак использования торговых точек в мобильном приложении'");
	эл["Тип"] = ТипКонстанты["Обработка"];
	эл["Выгружать"] = Истина;		
		
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ИспользоватьДоговоры";
	НастройкиОбработкиПоУмолчанию["ИспользоватьДоговоры"] = Ложь;
	эл["Ид"] = "b201164e-e265-4c1d-b3d0-0579bcd1fda6";
	эл["Описание"] = НСтр("ru='Признак использования договоров в мобильном приложении'");
	эл["Тип"] = ТипКонстанты["Обработка"];	
	эл["Выгружать"] = Истина;	
	
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ИспользоватьИсториюПродаж";
	НастройкиОбработкиПоУмолчанию["ИспользоватьИсториюПродаж"] = Ложь;
	эл["Ид"] = "0270b3d5-4213-419b-9e3a-48cba4caec04";
	эл["Описание"] = НСтр("ru='Признак использования истории продаж в мобильном устройстве'");
	эл["Тип"] = ТипКонстанты["Обработка"];
	эл["Выгружать"] = Истина;	
	
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ГлубинаИсторииПродаж";
	НастройкиОбработкиПоУмолчанию["ГлубинаИсторииПродаж"] = 0;
	эл["Описание"] = НСтр("ru='Глубина анализа данных для составления истории продаж (в днях)'");
	эл["Тип"] = ТипКонстанты["Обработка"];
	эл["Выгружать"] = Ложь;		
	
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "КоличествоИнтерваловИстории";
	НастройкиОбработкиПоУмолчанию["КоличествоИнтерваловИстории"] = 0;		
	эл["Описание"] = НСтр("ru='Количество интревало разбиения истории продаж'");
	эл["Тип"] = ТипКонстанты["Обработка"];
	эл["Выгружать"] = Ложь;		
		
	//Дополнительно
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ИнтервалПланирования";
	НастройкиОбработкиПоУмолчанию["ИнтервалПланирования"] 		= 7;       			//дней
	эл["Представление"] = НСтр("ru='Интервал планирования'");
	эл["Описание"] = НСтр("ru='Количество дней интервала'");
	эл["Тип"] = ТипКонстанты["Обработка"];
	эл["Выгружать"] = Ложь;

	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ИнтервалПодтверждений";
	НастройкиОбработкиПоУмолчанию["ИнтервалПодтверждений"] 		= 7;       				//дней
	эл["Представление"] = НСтр("ru='Интервал подтверждений'");
	эл["Описание"] = НСтр("ru='Глубина выгрузки подтверждений (в днях) на созданные в мобильном устройстве документы'");
	эл["Тип"] = ТипКонстанты["Обработка"];
	эл["Выгружать"] = Ложь;

	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "РабочаяПапка";	
	НастройкиОбработкиПоУмолчанию["РабочаяПапка"] 				= каталогПоУмолчанию;
	ДополнитьСлешВПуть(НастройкиОбработкиПоУмолчанию["РабочаяПапка"]);
	эл["Описание"] = НСтр("ru='Каталог дополнительной информации'");
	эл["Тип"] = ТипКонстанты["Обработка"];
	эл["Выгружать"] = Ложь;
	
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ПапкаТреки";
	НастройкиОбработкиПоУмолчанию["ПапкаТреки"] 				= каталогПоУмолчанию;
	ДополнитьСлешВПуть(НастройкиОбработкиПоУмолчанию["ПапкаТреки"]);
	эл["Описание"] = НСтр("ru='Каталог хранения теков'");
	эл["Тип"] = ТипКонстанты["Обработка"];
	эл["Выгружать"] = Ложь;
	
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ИнтервалВыгрузкиЗаказов";
	НастройкиОбработкиПоУмолчанию["ИнтервалВыгрузкиЗаказов"] 	= 3;					//дней
	эл["Представление"] = НСтр("ru='Интервал выгрузки заказов'");
	эл["Описание"] = НСтр("ru='Интервал выгрузки документов ""Заказ"" в мобильные устройства'");
	эл["Тип"] = ТипКонстанты["Обработка"];
	эл["Выгружать"] = Ложь;
	
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ОбновлятьДокументыПриЗагрузке";
	НастройкиОбработкиПоУмолчанию["ОбновлятьДокументыПриЗагрузке"] 	= Ложь;
	эл["Описание"] = НСтр("ru='Обновлять документы при загрузке, если они уже были загружены ранее'");
	эл["Тип"] = ТипКонстанты["Обработка"];
	эл["Выгружать"] = Ложь;
	
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ПроводитьДокументыПриЗагрузке";
	НастройкиОбработкиПоУмолчанию["ПроводитьДокументыПриЗагрузке"] 	= Ложь;
	эл["Описание"] = НСтр("ru='Проводить загружаемые документы'");
	эл["Тип"] = ТипКонстанты["Обработка"];
	эл["Выгружать"] = Ложь;

	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ВыгружатьКартинки";
	НастройкиОбработкиПоУмолчанию["ВыгружатьКартинки"] 	= Ложь;
	эл["Описание"] = НСтр("ru='Выгружать картинки товаров в мобильное устройство, существующие  в ЦБД'");
	эл["Тип"] = ТипКонстанты["Обработка"];
	эл["Выгружать"] = Ложь;

    эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ОчищатьСправочникиПередЗагрузкой";
	НастройкиОбработкиПоУмолчанию["ОчищатьСправочникиПередЗагрузкой"] 	= Ложь;
	эл["Описание"] = НСтр("ru='Выполнять очистку основных справочников перед загрузкой файла обмена в мобильное устройство'");
	эл["Тип"] = ТипКонстанты["Обработка"];
	эл["Выгружать"] = Ложь;
	
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ОчищатьСправочникиПередЗагрузкой";
	НастройкиОбработкиПоУмолчанию["ОчищатьСправочникиПередЗагрузкой"] 	= Ложь;
	эл["Описание"] = НСтр("ru='Выполнять очистку основных справочников перед загрузкой файла обмена в мобильное устройство'");
	эл["Тип"] = ТипКонстанты["Обработка"];
	эл["Выгружать"] = Ложь;
	
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ОчищатьДокументыПередЗагрузкой";
	НастройкиОбработкиПоУмолчанию["ОчищатьДокументыПередЗагрузкой"] 	= Ложь;
	эл["Описание"] = НСтр("ru='Очищать документы в мобильном устройстве'");
	эл["Тип"] = ТипКонстанты["Обработка"];
	эл["Выгружать"] = Ложь;

	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "СписокОчищаемыхДокументов";
	НастройкиОбработкиПоУмолчанию["СписокОчищаемыхДокументов"] 			= СоответствиеСписковЗначений["СписокВидыДокументов"];					//Прямое подключение			
	эл["Описание"] = НСтр("ru='Список очищаемых типов документов'");
	эл["Тип"] = ТипКонстанты["Обработка"];
	эл["Выгружать"] = Ложь;
	
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ВидОчисткиДокументов";
	НастройкиОбработкиПоУмолчанию["ВидОчисткиДокументов"] 		= 1;	// Не удалять документы за последние
	эл["Описание"] = НСтр("ru='Не удалять документы в мобильном устройстве за последнее количество дней'");
	эл["Тип"] = ТипКонстанты["Обработка"];
	эл["Выгружать"] = Ложь;
	
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ИнтервалСохранностиДокументов";
	НастройкиОбработкиПоУмолчанию["ИнтервалСохранностиДокументов"] 		= 30;
	эл["Представление"] = НСтр("ru='Количество дней, за которые документы не будут удаляться'");
	эл["Описание"] = НСтр("ru='Не удалять документы в мобильном устройстве за последнее количество дней'");
	эл["Тип"] = ТипКонстанты["Обработка"];
	эл["Выгружать"] = Ложь;
	
	//Обмен данными
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "СпособОбмена";
	НастройкиОбработкиПоУмолчанию["СпособОбмена"] 						= 0;		//Прямое подключение
	эл["Описание"] = НСтр("ru='Способ обмена данными с мобильными устройствами'");
	эл["Тип"] = ТипКонстанты["Обработка"];
	эл["Выгружать"] = Ложь;
	
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ПользовательФоновогоРежима";
	НастройкиОбработкиПоУмолчанию["ПользовательФоновогоРежима"] = Справочники.Пользователи.ПустаяСсылка();
	эл["Описание"] = НСтр("ru='Пользователь, от имени которого будет выполняться обмен данными в фоновом режиме'");
	эл["Тип"] = ТипКонстанты["Обработка"];
	эл["Выгружать"] = Ложь;

	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ИспользоватьZipАрхивы";
	НастройкиОбработкиПоУмолчанию["ИспользоватьZipАрхивы"]		= Истина;	
	эл["Описание"] = НСтр("ru='Осуществлять обмен данными с использованием zip-архивов'");
	эл["Тип"] = ТипКонстанты["Обработка"];
	эл["Выгружать"] = Ложь;
	
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "АдресАгентСОД";
	НастройкиОбработкиПоУмолчанию["АдресАгентСОД"]				= "";
	эл["Описание"] = НСтр("ru='IP адрес компьютера, на котором запущена служба """ + Имена["АгентПлюсСОД"] + """ (напр., 127.0.0.1)'");
	эл["Тип"] = ТипКонстанты["Обработка"];
	эл["Выгружать"] = Ложь;
	
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ПортАгентСОД";
	НастройкиОбработкиПоУмолчанию["ПортАгентСОД"]				= 5555;
	эл["Описание"] = НСтр("ru='Используемый службой обмена данными """ + Имена["АгентПлюсСОД"] + """ порт'");
	эл["Тип"] = ТипКонстанты["Обработка"];
	эл["Выгружать"] = Ложь;
	
    эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "АвтоОбменАгентСОД";
	НастройкиОбработкиПоУмолчанию["АвтоОбменАгентСОД"]			= Ложь;
	эл["Описание"] = НСтр("ru='Использовать автоматический обмен " + Символы.ПС + "через службу обмена данными """ + Имена["АгентПлюсСОД"] + """'");
	эл["Тип"] = ТипКонстанты["Обработка"];
	эл["Выгружать"] = Ложь;
	
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ПапкаАгентСОД";
	НастройкиОбработкиПоУмолчанию["ПапкаАгентСОД"]				= "C:\APlusSrvRoot\";	
	// Альфия 16.05.2017
	// Папка обмена, которая устанавливается по умолчанию при установке службы Агент+ СОД	
	эл["Описание"] = НСтр("ru='Каталог для обмена данными через службу """ + Имена["АгентПлюсСОД"] + """'");
	эл["Тип"] = ТипКонстанты["Обработка"];
	эл["Выгружать"] = Ложь;
	
	эл = ТаблЗначКонстанты.Добавить();  		
	эл["Имя"] = "FtpСервер";
	НастройкиОбработкиПоУмолчанию["FtpСервер"] = "";
	эл["Представление"] = НСтр("ru='Папка обмена FTP-cервера'");
	эл["Описание"] = НСтр("ru='Адерс FTP-cервера для мобильного обмена данными.'");
	эл["Тип"] = ТипКонстанты["Обработка"];	
	эл["Выгружать"] = Ложь;	
	
	эл = ТаблЗначКонстанты.Добавить();  		
	эл["Имя"] = "FtpПользователь";
	НастройкиОбработкиПоУмолчанию["FtpПользователь"] = "";
	эл["Представление"] = НСтр("ru='Имя FTP-пользователя'");
	эл["Описание"] = НСтр("ru='Имя FTP-пользователя для мобильного обмена данными.'");
	эл["Тип"] = ТипКонстанты["Обработка"];	
	эл["Выгружать"] = Ложь;	
	
	эл = ТаблЗначКонстанты.Добавить();  		
	эл["Имя"] = "FtpПароль";
	НастройкиОбработкиПоУмолчанию["FtpПароль"] = "";
	эл["Представление"] = НСтр("ru='FTP-пароль'");
	эл["Описание"] = НСтр("ru='FTP пароль для мобильного обмена данными.'");
	эл["Тип"] = ТипКонстанты["Обработка"];	
	эл["Выгружать"] = Ложь;	
	
	//Альфия 16.05.2017
	эл = ТаблЗначКонстанты.Добавить();  		
	эл["Имя"] = "АвтоОбменFTP";
	НастройкиОбработкиПоУмолчанию["АвтоОбменFTP"]			= Ложь;
	эл["Описание"] = НСтр("ru='Использовать автоматический обмен " + Символы.ПС + "через " + Имена["FTP сервер"] + """'");
	эл["Тип"] = ТипКонстанты["Обработка"];
	эл["Выгружать"] = Ложь;
	
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ИнтервалОбменаFTP";
	НастройкиОбработкиПоУмолчанию["ИнтервалОбменаFTP"] = 300;
	эл["Описание"] = НСтр("ru='Интервал выполнения обмена данными через FTP сервер'");
	эл["Тип"] = ТипКонстанты["Обработка"];
	эл["Выгружать"] = Ложь;
	//Альфия 16.05.2017
		
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ВидВыгрузки";
	НастройкиОбработкиПоУмолчанию["ВидВыгрузки"]				= 0;									//Все данные (с учетом истории продаж)
	эл["Описание"] = НСтр("ru='Вид выгружаемых данных'");
	эл["Тип"] = ТипКонстанты["Обработка"];
	эл["Выгружать"] = Ложь;			
		
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ИспользоватьАвтонумерациюДокументовВЦБД";
	НастройкиОбработкиПоУмолчанию["ИспользоватьАвтонумерациюДокументовВЦБД"]= Истина;	
	эл["Описание"] = НСтр("ru='Использовать автонумерацию документов в ЦБД'");
	эл["Тип"] = ТипКонстанты["Обработка"];
	эл["Выгружать"] = Ложь;

	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "РезервироватьЗаказы";
	НастройкиОбработкиПоУмолчанию["РезервироватьЗаказы"]		= Истина;
	эл["Описание"] = НСтр("ru='Выполнять резервирование при загрузке заказов из мобильных устройств'");
	эл["Тип"] = ТипКонстанты["Обработка"];
	эл["Выгружать"] = Ложь;
	
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "УчитыватьРезервы";
	НастройкиОбработкиПоУмолчанию["УчитыватьРезервы"] 			= Ложь;
	эл["Описание"] = НСтр("ru='Учитывать резервы при выгрузке остатков'");
	эл["Тип"] = ТипКонстанты["Обработка"];
	эл["Выгружать"] = Ложь;

	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ВыгружатьТоварыСНулевымОстатком";
	НастройкиОбработкиПоУмолчанию["ВыгружатьТоварыСНулевымОстатком"] = Ложь;
	эл["Описание"] = НСтр("ru='Выгружать номенклатуру с нулевымим остатками'");
	эл["Тип"] = ТипКонстанты["Обработка"];
	эл["Выгружать"] = Ложь;
	
	// АДМИНИСТРИРОВАНИЕ
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ПериодХраненияЛогов";
	НастройкиОбработкиПоУмолчанию["ПериодХраненияЛогов"] = 7;
	эл["Описание"] = НСтр("ru='Период, в течение которого хранятся лог обработки и лог обмена данными'");
	эл["Тип"] = ТипКонстанты["Обработка"];
	эл["Выгружать"] = Ложь;
	
	эл = ТаблЗначКонстанты.Добавить();
	эл["Имя"] = "ПериодХраненияМаршрутов";
	НастройкиОбработкиПоУмолчанию["ПериодХраненияМаршрутов"] = 30;
	эл["Описание"] = НСтр("ru='Период, в течение которого хранятся маршруты агентов'");
	эл["Тип"] = ТипКонстанты["Обработка"];
	эл["Выгружать"] = Ложь;
	
	НастройкиОбработкиПоУмолчанию["Отбор"] = Новый Соответствие;
	
	//////////////////////////////////////////////////
	
	НастройкиАгентаМУПоУмолчанию["УникальныйИдентификаторМУ"] = ПустойИдентификатор;
	НастройкиАгентаМУПоУмолчанию["УникальныйИдентификаторАгента"] = ПустойИдентификатор;
	НастройкиАгентаМУПоУмолчанию["Основной"] = Ложь;
	
	//////////////////////////////////////////////////
	// НАСТРОЙКИ ПЛАНА ПОСЕЩЕНИЯ 
	
	НастройкиПланированиеАгентовПоУмолчанию = Новый Соответствие;
	НастройкиПланированиеАгентовПоУмолчанию["Номер"]					= 1;
	НастройкиПланированиеАгентовПоУмолчанию["Дата"] 					= Дата('00010101');	
	НастройкиПланированиеАгентовПоУмолчанию["Агент"] 					= Справочники.Пользователи.ПустаяСсылка();
	НастройкиПланированиеАгентовПоУмолчанию["ПометкаУдаления"] 			= Ложь;
	НастройкиПланированиеАгентовПоУмолчанию["ИспользоватьКомментарий"] 	= Ложь;
	НастройкиПланированиеАгентовПоУмолчанию["ИспользоватьВремя"] 		= Ложь;
	НастройкиПланированиеАгентовПоУмолчанию["ИспользоватьПорядок"]		= Ложь;
	НастройкиПланированиеАгентовПоУмолчанию["ИнтервалПланирования"] 	= 7;
	НастройкиПланированиеАгентовПоУмолчанию["Циклический"] 				= Ложь;
	
	//////////////////////////////////////////////////
	
	СтрИдКонстантыИдентификаторАгента = ТаблЗначКонстанты.Найти("ИдентификаторАгента", "Имя")["Ид"];
	СтрИдКонстантыКодЗапроса = "cf41ba05-a4ee-4492-9a2c-c96394c4864a";

КонецПроцедуры

//vd_180821 Добавлена. Функция возвращает структуру, используемую для запоминания загруженных объектов(документов, элементов справочников) из XML-файла, полученного от МТ.
Функция ЗагруженныеОбъектыИзФайла() 
	
	стррРезультат = Новый Структура;
	
	ОписаниеТипаСтрока        = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки());
	ОписаниеТипаИдентификатор = Новый ОписаниеТипов("УникальныйИдентификатор"); 
	ОписаниеТипаДата  		  = Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)); 
	ОписаниеТипаБулево 		  = Новый ОписаниеТипов("Булево"); 	      
	
	//++ тзДокументыРеализаций
	тзДокументы = Новый ТаблицаЗначений; 
	тзДокументы.Колонки.Добавить("Документ", Новый ОписаниеТипов("ДокументОбъект.РеализацияТоваровУслуг")); 	
	тзДокументы.Колонки.Добавить("стррПараметры"); // значения дополнительных реквизитов документа, СоздатьСтруктуруПараметровЗагрузкиДокумента()
	тзДокументы.Колонки.Добавить("ИдОснования", ОписаниеТипаСтрока);
	стррРезультат.Вставить("тзДокументыРеализаций", тзДокументы);
	//-- тзДокументыРеализаций 
	
	//++ тзДокументыПоступлений
	тзДокументы = Новый ТаблицаЗначений; 
	тзДокументы.Колонки.Добавить("Документ", Новый ОписаниеТипов("ДокументОбъект.ПоступлениеТоваровУслуг")); 	
	тзДокументы.Колонки.Добавить("стррПараметры"); // значения дополнительных реквизитов документа, СоздатьСтруктуруПараметровЗагрузкиДокумента()
	тзДокументы.Колонки.Добавить("ИдОснования", ОписаниеТипаСтрока);
	стррРезультат.Вставить("тзДокументыПоступлений", тзДокументы);
	//-- тзДокументыПоступлений
	
	//++ тзДокументыВозвратов
	тзДокументы = Новый ТаблицаЗначений; 
	тзДокументы.Колонки.Добавить("Документ", Новый ОписаниеТипов("ДокументОбъект.ВозвратТоваровОтПокупателя")); 	
	тзДокументы.Колонки.Добавить("стррПараметры"); // значения дополнительных реквизитов документа, СоздатьСтруктуруПараметровЗагрузкиДокумента()
	тзДокументы.Колонки.Добавить("ИдОснования", ОписаниеТипаСтрока);
	стррРезультат.Вставить("тзДокументыВозвратов", тзДокументы);
	//-- тзДокументыВозвратов
	
	//++ тзДокументыПКО
	тзДокументы = Новый ТаблицаЗначений; 
	тзДокументы.Колонки.Добавить("Документ", Новый ОписаниеТипов("ДокументОбъект.ПриходныйКассовыйОрдер")); 	
	тзДокументы.Колонки.Добавить("стррПараметры"); // значения дополнительных реквизитов документа, СоздатьСтруктуруПараметровЗагрузкиДокумента()
	тзДокументы.Колонки.Добавить("ИдОснования", ОписаниеТипаСтрока);
	стррРезультат.Вставить("тзДокументыПКО", тзДокументы);
	//-- тзДокументыПКО
	
	//++ тзДокументыРКО
	тзДокументы = Новый ТаблицаЗначений; 
	тзДокументы.Колонки.Добавить("Документ", Новый ОписаниеТипов("ДокументОбъект.РасходныйКассовыйОрдер")); 	
	тзДокументы.Колонки.Добавить("стррПараметры"); // значения дополнительных реквизитов документа, СоздатьСтруктуруПараметровЗагрузкиДокумента()
	тзДокументы.Колонки.Добавить("ИдОснования", ОписаниеТипаСтрока);
	стррРезультат.Вставить("тзДокументыРКО", тзДокументы);
	//-- тзДокументыРКО
	

	//++ ТаблицаКасс
	//Это вспомогательная таблица, нужна для загрузки документов "Ордер" (ПКО,РКО) Заполняется в процедуре ЗагрузитьДокументы()
	стррРезультат.Вставить("ТаблицаКасс", Неопределено);
	//-- ТаблицаКасс

	Возврат стррРезультат;
	
КонецФункции

// Функция корректирует (добавляет/удаляет) колонки таблицы значений настроек в соответствии с текущими настройками,
// параметры: ТипКонстанты["Пользователь"] или ТипКонстанты["МУ"] Или ТипКонстанты["АгентМУ"]
// возвращает Истина, если таблица значений была изменена, иначе - Ложь
//
Функция ИсправитьТаблицуНастроек(типНастройки)
	Перем текТабНастроек, текНастройкиПоУмолчанию, массивУдаляемыхСтрок;
	
	естьИзменения = Ложь;
	
	массивКолонок = Новый Массив;				//содержит массив колонок, к которым будет приводится таблица значений настройки, прочитанная из БД

	Если типНастройки = ТипКонстанты["Пользователь"] Тогда
		текТабНастроек = ТабНастройкиАгентов;
		текНастройкиПоУмолчанию = НастройкиАгентаПоУмолчанию;
		Если текТабНастроек.Колонки.Найти("УникальныйИдентификатор") <> Неопределено Тогда    // при первом запуске колонки может не быть
			массивУдаляемыхСтрок = текТабНастроек.НайтиСтроки(Новый Структура("УникальныйИдентификатор", ПустойИдентификатор));
		КонецЕсли;
	ИначеЕсли типНастройки = ТипКонстанты["МУ"] Тогда 
		текТабНастроек = ТабМобильныеУстройства;		 
		текНастройкиПоУмолчанию = НастройкиМУПоУмолчанию;
		Если текТабНастроек.Колонки.Найти("УникальныйИдентификатор") <> Неопределено Тогда    // при первом запуске колонки может не быть
			массивУдаляемыхСтрок = текТабНастроек.НайтиСтроки(Новый Структура("УникальныйИдентификатор", ПустойИдентификатор));
		КонецЕсли;
	ИначеЕсли типНастройки = ТипКонстанты["АгентМУ"] Тогда 
		текТабНастроек = ТабАгентыМУ;		 
		текНастройкиПоУмолчанию = НастройкиАгентаМУПоУмолчанию;
		
		Если текТабНастроек.Колонки.Найти("УникальныйИдентификаторМУ") <> Неопределено Тогда   // при первом запуске колонки может не быть
			массивУдаляемыхСтрок = текТабНастроек.НайтиСтроки(Новый Структура("УникальныйИдентификаторМУ", ПустойИдентификатор));
			Для Каждого текСтрока Из массивУдаляемыхСтрок Цикл   			// удаляем записи с пустыми идентификаторами
				текТабНастроек.Удалить(текСтрока);
			КонецЦикла;		
		
			массивУдаляемыхСтрок = текТабНастроек.НайтиСтроки(Новый Структура("УникальныйИдентификаторАгента", ПустойИдентификатор));			
		КонецЕсли;	

	КонецЕсли;
	
	естьИзменения = ИсправитьСписокЗначений(текТабНастроек, текНастройкиПоУмолчанию, текНастройкиПоУмолчанию) Или естьИзменения;	
	
	Если массивУдаляемыхСтрок <> Неопределено Тогда
		Для Каждого текСтрока Из массивУдаляемыхСтрок Цикл					// удаляем записи с пустыми идентификаторами
			текТабНастроек.Удалить(текСтрока);
		КонецЦикла;
	КонецЕсли;
			
	Возврат естьИзменения;	
КонецФункции

// Функция удаляет лишние и добавляет колонки, которых не было, в ТаблЗначенийИсходная и возвращает признак - изменилась исходная 
// СписокКолонок - таблица значений с актуальным списком колонок 
// ЗначенияКолонокПоУмолчанию - соответствие/структура, где ключ - имя колонки, значение - значение колонки по умолчанию
//
Функция ИсправитьСписокЗначений(ТаблЗначенийИсходная, СписокКолонок, ЗначенияКолонокПоУмолчанию = Неопределено)
	
	естьИзменения = Ложь;
	
	массивУстаревшихКолонок = Новый Массив;
	массивНовыхКолонок = Новый Массив;
	Если ЗначенияКолонокПоУмолчанию = Неопределено Тогда
		ЗначенияКолонокПоУмолчанию = Новый Соответствие;
	КонецЕсли;
	
	типСписокКолонок = ТипЗнч(СписокКолонок);
	Если типСписокКолонок = Тип("ТаблицаЗначений") Тогда
		
		//добавляем в массив колонки, которые надо удалить (которых в данной версии уже нет)
		Для Каждого текКолонка Из ТаблЗначенийИсходная.Колонки Цикл
			Если СписокКолонок.Колонки.Найти(текКолонка.Имя) = Неопределено Тогда
				массивУстаревшихКолонок.Добавить(текКолонка);
			КонецЕсли;
		КонецЦикла;		
		
		//добавляем в массив колонки, которых надо добавить
		Для Каждого текКолонка Из СписокКолонок Цикл			
			имяКолонки = текКолонка.Имя;
			флДобавитьКолонку = Ложь;
			Если ТаблЗначенийИсходная.Колонки.Найти(имяКолонки) = Неопределено Тогда
				флДобавитьКолонку = Истина;
			Иначе				
				значПоУмолчанию = ЗначенияКолонокПоУмолчанию[имяКолонки];
				Если значПоУмолчанию <> Неопределено Тогда
					Если Не ТаблЗначенийИсходная.Колонки[имяКолонки].ТипЗначения.СодержитТип(ТипЗнч(значПоУмолчанию)) Тогда
						массивУстаревшихКолонок.Добавить(текКолонка);
						массивНовыхКолонок.Добавить(имяКолонки);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;			
		КонецЦикла;	
		
	ИначеЕсли типСписокКолонок = Тип("Соответствие") Тогда
		
		// добавляем в массив колонки, которые надо удалить (которых в данной версии уже нет)
		Для Каждого текКолонка Из ТаблЗначенийИсходная.Колонки Цикл
			Если СписокКолонок[текКолонка.Имя] = Неопределено Тогда
				массивУстаревшихКолонок.Добавить(текКолонка);
			КонецЕсли;
		КонецЦикла;		
		
		// добавляем в массив колонки, которых надо добавить
		Для Каждого текКлючЗнач Из СписокКолонок Цикл			
			имяКолонки = текКлючЗнач.Ключ;
			флДобавитьКолонку = Ложь;
			Если ТаблЗначенийИсходная.Колонки.Найти(имяКолонки) = Неопределено Тогда
				массивНовыхКолонок.Добавить(имяКолонки);
			Иначе				
				значПоУмолчанию = ЗначенияКолонокПоУмолчанию[имяКолонки];
				Если значПоУмолчанию <> Неопределено Тогда
					Если Не ТаблЗначенийИсходная.Колонки[имяКолонки].ТипЗначения.СодержитТип(ТипЗнч(значПоУмолчанию)) Тогда
						массивУстаревшихКолонок.Добавить(текКолонка);
						массивНовыхКолонок.Добавить(имяКолонки);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;			
		КонецЦикла;
		
	КонецЕсли;
	
	// удаляем колонки
	Для Каждого текКолонка Из массивУстаревшихКолонок Цикл	
		ТаблЗначенийИсходная.Колонки.Удалить(текКолонка);
		естьИзменения = Истина;
	КонецЦикла;

	// добавляем новые колонки
	Для Каждого имяКолонки Из массивНовыхКолонок Цикл	
		
		значПоУмолчанию = ЗначенияКолонокПоУмолчанию[имяКолонки];
		Если значПоУмолчанию <> Неопределено Тогда
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(ТипЗнч(значПоУмолчанию));
			ДопустимыеТипы = Новый ОписаниеТипов(МассивТипов);
			новаяКолонка = ТаблЗначенийИсходная.Колонки.Найти(имяКолонки);
			Если новаяКолонка <> Неопределено Тогда
				ТаблЗначенийИсходная.Колонки.Удалить(новаяКолонка);
			КонецЕсли;
			ТаблЗначенийИсходная.Колонки.Добавить(имяКолонки, ДопустимыеТипы);
			ТаблЗначенийИсходная.ЗаполнитьЗначения(значПоУмолчанию, имяКолонки);						
		Иначе
			ТаблЗначенийИсходная.Колонки.Добавить(имяКолонки);
		КонецЕсли;
		
		естьИзменения = Истина;
		
	КонецЦикла;
	
	Возврат естьИзменения;
КонецФункции

Функция ПроверитьИмяБД(имяБД, ТекстОшибки) Экспорт
	
	естьОшибки = Ложь;
	
	Латиница = "abcdefghijklmnopqrstuvwxyz.";
	
	стрЗнач = Строка(имяБД);
	Для Сч = 1 По СтрДлина(стрЗнач) Цикл
		Симв = Сред(стрЗнач, Сч, 1);
		Если Найти(Латиница, НРег(Симв)) = 0 Тогда
			//Предупреждение("Нельзя использовать не латинские буквы в именах БД!", 60);
			естьОшибки = Истина;
			Если ТекстОшибки <> "" Тогда
				ТекстОшибки = ТекстОшибки + Символы.ПС;
			КонецЕсли;			
			ТекстОшибки = ТекстОшибки + НСтр("ru='В имени базы данных используются нелатинские символы (""" + имяБД + """)!'");
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат естьОшибки;	
КонецФункции

Функция ИсправитьДопНастройкиАгента(текДопНастройкиАгента) Экспорт
	
	естьИзменения = Ложь;
	ТекстОшибки = "";
	
	Если текДопНастройкиАгента = Неопределено Тогда
		текДопНастройкиАгента = СоздатьДопНастройкиАгентаПоУмолчанию();
		естьИзменения = Истина;
	Иначе
		
		текСписокБД = текДопНастройкиАгента["СписокБД"];
		Если текСписокБД = Неопределено Тогда
			текДопНастройкиАгента["СписокБД"] = СоздатьСписокБазПоУмолчанию();
			естьИзменения = Истина;
		Иначе
			массивУдаляемыхСтрок = Новый Массив;
			естьДублирующиесяЗначения = Ложь;
			естьНекорретныеЗначения = Ложь;
			списЗначБД = Новый СписокЗначений;
			Для Каждого текСтрока Из текСписокБД Цикл
				имяБД = текСтрока["ИмяБД"];
				Если ПроверитьИмяБД(имяБД, ТекстОшибки) Тогда  		// если есть ошибки					
					естьНекорретныеЗначения = Истина;
					массивУдаляемыхСтрок.Добавить(текСтрока);
				Иначе
					Если списЗначБД.НайтиПоЗначению(имяБД) = Неопределено Тогда
						списЗначБД.Добавить(имяБД);
					Иначе
						естьДублирующиесяЗначения = Истина;
						массивУдаляемыхСтрок.Добавить(текСтрока);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если массивУдаляемыхСтрок.Количество() > 0 Тогда
				естьИзменения = Истина;
				Если ЗначениеЗаполнено(ТекстОшибки) Тогда
					ОповеститьОСобытии("ru='" + ТекстОшибки + "'", ТипыЛогов["Обмен"], СтатусСообщения.Внимание);				
				КонецЕсли;
				
				Для Каждого текСтрока Из массивУдаляемыхСтрок Цикл      // удаляем некорректные строки из СпискаБД
					текСписокБД.Удалить(текСтрока);
				КонецЦикла;
				Если естьНекорретныеЗначения Тогда
					ОповеститьОСобытии("ru='Некорректные имена баз данных удалены!'", ТипыЛогов["Обмен"], СтатусСообщения.Внимание);
				КонецЕсли;
				Если естьДублирующиесяЗначения Тогда
					ОповеститьОСобытии("ru='Дублирующиеся имена баз данных удалены!'", ТипыЛогов["Обмен"], СтатусСообщения.Внимание);
				КонецЕсли;
			КонецЕсли;
				
		КонецЕсли;
	КонецЕсли;
	
	Возврат естьИзменения;
КонецФункции

// Проверяет: изменяет пометку удаления у переданного элемента, предварительно задав вопрос
// возвращает тип булево - новое значение пометки удаления
//
Функция ПередУдалениемЭлемента(элемент) Экспорт
	
	Если элемент["ПометкаУдаления"] Тогда
		Если Вопрос(НСтр("ru='Снять с элемента пометку на удаление?'"), РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да) = КодВозвратаДиалога.Да Тогда
			Возврат Ложь;		 
		КонецЕсли;
	Иначе
		Если Вопрос(НСтр("ru='Пометить элемент на удаление?'"), РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да) = КодВозвратаДиалога.Да Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;	
	
	Возврат элемент["ПометкаУдаления"];
	
КонецФункции

//vd_180914 Переименована УстройствоОчистить()
Процедура ОчиститьАгентаИУстройство() Экспорт 
	
	ВыбАгент = Справочники.Пользователи.ПустаяСсылка();
	ВыбНастройкиАгента = Неопределено;
	ВыбМобильноеУстройство = Неопределено;
	ВыбИмяМобильноеУстройство = "";
	ВыбДопНастройкиАгента = Неопределено;
		
КонецПроцедуры

// sk_190116 Процедура не используется
//
Процедура ИзменитьВыбранногоАгента_OLD(уникальныйИдентификаторАгента, уникальныйИдентификаторМУ)
	
	//vd_180914 Переимен
	найденнаяСтрокаАгент = ТабНастройкиАгентов.Найти(уникальныйИдентификаторАгента, "УникальныйИдентификатор");
	найденнаяСтрокаМУ = ТабМобильныеУстройства.Найти(уникальныйИдентификаторМУ, "УникальныйИдентификатор");
	
	
	Если найденнаяСтрокаАгент <> Неопределено Тогда
		//И найденнаяСтрокаМУ <> Неопределено Тогда
		
		ВыбАгент = найденнаяСтрокаАгент["Пользователь"]; 
		ВыбНастройкиАгента = найденнаяСтрокаАгент;		
		ВыбДопНастройкиАгента = ДопНастройкиАгентов[уникальныйИдентификаторАгента];
		
		Если СпособОбмена = 1 Тогда    					// Агент Плюс СОД
			Если найденнаяСтрокаМУ  = Неопределено Тогда
				ОчиститьАгентаИУстройство();
			Иначе
				ВыбМобильноеУстройство = найденнаяСтрокаМУ;	
				ВыбИмяМобильноеУстройство = ВыбМобильноеУстройство["Псевдоним"];
			КонецЕсли;
		Иначе
			ВыбМобильноеУстройство = найденнаяСтрокаМУ;
			ВыбИмяМобильноеУстройство = ВыбМобильноеУстройство["Псевдоним"];
		КонецЕсли;					
		
	Иначе
		
		ОчиститьАгентаИУстройство();
		
	КонецЕсли;
	
КонецПроцедуры

//vd_180914 Изменена.
Процедура ИзменитьВыбранногоАгента(гуидАгента, гуидМУ) Экспорт
	
	ОчиститьАгентаИУстройство();
	
	стзТабНастройкиАгентов    = ТабНастройкиАгентов.Найти(гуидАгента, "УникальныйИдентификатор");
	стзТабМобильныеУстройства = ТабМобильныеУстройства.Найти(гуидМУ,  "УникальныйИдентификатор");
	
	Если НЕ стзТабНастройкиАгентов = Неопределено Тогда
		
		ВыбАгент 			  = стзТабНастройкиАгентов.Пользователь; 
		ВыбНастройкиАгента    = стзТабНастройкиАгентов;		
		ВыбДопНастройкиАгента = ДопНастройкиАгентов[гуидАгента];              
		
		Если НЕ стзТабМобильныеУстройства = Неопределено Тогда
			ВыбМобильноеУстройство 	  = стзТабМобильныеУстройства;	
			ВыбИмяМобильноеУстройство = ВыбМобильноеУстройство.Псевдоним;
	    КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция преобразует строку в массив/список/соответствие значений, 
// если типРезультата="Соответствие", то формат строки: "Ключ1=Значение1;Ключ2=Значение2;Ключ3=Значение3..."
// формат возвращаемого массива: Массив[КЛЮЧ1]=ЗНАЧЕНИЕ1; Массив[КЛЮЧ2]=ЗНАЧЕНИЕ2; ...
//
Функция ИзСтрокиВМассив(Знач прСтрока, _СимволРазделитель = "|", типРезультата = "Массив", типЗначений = "Строка", _СтрокаРазделительЗначения = "=") Экспорт	
	Перем списокВозврат, лкПоз;
	
	текСимволРазделитель = _СимволРазделитель;
	
	Если типРезультата = "Массив" Тогда
		списокВозврат = Новый Массив;
	ИначеЕсли типРезультата = "СписокЗначений" Тогда
		списокВозврат = Новый СписокЗначений;
	ИначеЕсли типРезультата = "Соответствие" Тогда
		списокВозврат = Новый Соответствие;
	КонецЕсли;
	
	Если прСтрока = Неопределено Тогда
		Возврат списокВозврат;
	КонецЕсли;
	
	Если типРезультата = "Соответствие" Тогда
		
		Пока Не(ПустаяСтрока(прСтрока)) Цикл
		
			лкПоз = Найти(прСтрока, текСимволРазделитель);
			Если лкПоз > 0 Тогда
				стрПараметр = Лев(прСтрока, лкПоз - 1);
				прСтрока = Сред(прСтрока, лкПоз + 1);
			Иначе
				стрПараметр = Сред(прСтрока, 1, СтрДлина(прСтрока));
				прСтрока = "";
			КонецЕсли;
			
			индексЗнач = Найти(стрПараметр, _СтрокаРазделительЗначения);
			Если индексЗнач <> 0 Тогда
				стрКлюч = ВРег(СокрЛП(Лев(стрПараметр, индексЗнач - 1)));
				стрЗнач = ТРег(СокрЛП(Прав(стрПараметр, СтрДлина(стрПараметр) - индексЗнач)));
			КонецЕсли;
			
			списокВозврат.Вставить(стрКлюч, стрЗнач);

		КонецЦикла;
		
	Иначе
	
		Пока Не(ПустаяСтрока(прСтрока)) Цикл
			лкПоз = Найти(прСтрока, текСимволРазделитель);
			Если (лкПоз > 0) Тогда
				текЗнач = Лев(прСтрока, лкПоз - 1);
				Если типЗначений = "Число" Тогда
					Попытка текЗнач = Число(текЗнач); Исключение текЗнач = ""; КонецПопытки;
				КонецЕсли;
				списокВозврат.Добавить(текЗнач);
				прСтрока = Сред(прСтрока, лкПоз + СтрДлина(текСимволРазделитель));
			Иначе
				текЗнач = Сред(прСтрока, 1, СтрДлина(прСтрока));
				Если типЗначений = "Число" Тогда
					Попытка текЗнач = Число(текЗнач); Исключение текЗнач = ""; КонецПопытки;
				КонецЕсли;
				списокВозврат.Добавить(текЗнач);
				прСтрока = "";
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;

	Возврат списокВозврат;	
КонецФункции //ИзСтрокиВМассив()

// sk_190116 Функция не используется
// ИзМассиваЗначенийВМассивПредставлений()
//
Функция ИзМассиваЗначенийВМассивПредставлений_OLD(МассивЗначений, ИмяСписка) Экспорт
	
	резМассив = Новый Массив;
	Если МассивЗначений <> Неопределено Тогда
		списЗнач = СоответствиеСписковЗначений[ИмяСписка];
		Для Каждого текЗнач Из МассивЗначений Цикл
			текЭлСписка = списЗнач.НайтиПоЗначению(текЗнач);
			Если текЭлСписка <> Неопределено Тогда
				резМассив.Добавить(текЭлСписка.Представление);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат резМассив;	
КонецФункции //ИзМассиваЗначенийВМассивПредставлений_OLD()

Функция ИзМассиваВСтроку(списокЭлементов, символРазделитель = Неопределено)  Экспорт
	
	РезСтрока = "";
	символРазделитель = ?(символРазделитель = Неопределено, СимволРазделительМТ, символРазделитель);
	
	Если списокЭлементов <> Неопределено Тогда
		
		Если ТипЗнч(списокЭлементов) = Тип("Массив") Тогда
			Для Каждого текЭл Из списокЭлементов Цикл
				РезСтрока = РезСтрока + Строка(текЭл) + символРазделитель;
			КонецЦикла;
		ИначеЕсли ТипЗнч(списокЭлементов) = Тип("СписокЗначений") Тогда
			Для Каждого текЭл Из списокЭлементов Цикл
				РезСтрока = РезСтрока + Строка(текЭл.Значение) + символРазделитель;
			КонецЦикла;
		КонецЕсли;
		
		Если Не ПустаяСтрока(РезСтрока) Тогда
			РезСтрока = Лев(РезСтрока, СтрДлина(РезСтрока) - СтрДлина(символРазделитель));
		КонецЕсли;
	КонецЕсли;

	Возврат РезСтрока;		
КонецФункции

// sk_190116 Функция не используется
// ИзСпискаЗначенияВСтрокуПредставление()
//
Функция ИзСпискаЗначенияВСтрокуПредставление_OLD(списокЭлементов, символРазделитель = Неопределено)  Экспорт
	
	РезСтрока = "";
	символРазделитель = ?(символРазделитель = Неопределено, СимволРазделительМТ, символРазделитель);
	
	Если списокЭлементов <> Неопределено Тогда
		
		Если ТипЗнч(списокЭлементов) = Тип("СписокЗначений") Тогда
			Для Каждого текЭл Из списокЭлементов Цикл
				РезСтрока = РезСтрока + Строка(текЭл.Представление) + символРазделитель;
			КонецЦикла;
		КонецЕсли;
		
		Если Не ПустаяСтрока(РезСтрока) Тогда
			РезСтрока = Лев(РезСтрока, СтрДлина(РезСтрока) - СтрДлина(символРазделитель));
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезСтрока;	
	
КонецФункции // ИзСпискаЗначенияВСтрокуПредставление_OLD()

// Функция проверяет переданное значение идентификатора на пустой
//
// Параметры:
//  ИД - идентификатор
//
//Возвращаемое значение:
//  Булево
//
Функция ЭтоПустойИдентификатор(ИД) Экспорт
	Если (СокрЛП(ИД) = "00000000-0000-0000-0000-000000000000") ИЛИ (СокрЛП(ИД) = "") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции //ЭтоПустойИдентификатор()

Функция ПреобразоватьЗначениеВСтрокуДляXML(Значение, ИмяПоля = Неопределено)
	
	Перем ПреобразованноеЗначение;
	
	типЗнач = ТипЗнч(Значение);
	
	Если типЗнач = Тип("ХранилищеЗначения") Тогда
		Значение = Значение.Получить();
		типЗнач = ТипЗнч(Значение);
	КонецЕсли;
	
	Если типЗнач = Тип("Строка") Тогда
		ПреобразованноеЗначение = XMLСтрока(Значение);
	ИначеЕсли типЗнач = Тип("Число") Или  ТипЗнч(Значение) = Тип("Булево") Тогда
		ПреобразованноеЗначение = XMLСтрока(Формат(Значение, "ЧРД=.; ЧН=0; ЧГ=; БЛ=0; БИ=1"));
	ИначеЕсли типЗнач = Тип("Дата") Тогда
		ПреобразованноеЗначение = XMLСтрока(ДатаВремяВФорматXMLИз1СМТ(Значение));
	ИначеЕсли типЗнач = Тип("УникальныйИдентификатор") Тогда
		ПреобразованноеЗначение = XMLСтрока(Значение);
	ИначеЕсли типЗнач = Тип("СписокЗначений") Тогда
		ПреобразованноеЗначение = "";
		Для Каждого текЭл Из Значение Цикл
			 ПреобразованноеЗначение = ПреобразованноеЗначение +  XMLСтрока(текЭл) + ",";
		КонецЦикла;
		длина = СтрДлина(ПреобразованноеЗначение);
		Если длина > 0 Тогда
		 	ПреобразованноеЗначение = Лев(ПреобразованноеЗначение, длина - 1);
		Иначе
			ПреобразованноеЗначение = "";
		КонецЕсли;
	ИначеЕсли типЗнач = Тип("Цвет") Тогда
		Если ИмяПоля = "ЦветПросроченныхДолгов" Тогда		
			Если Значение = Неопределено Тогда
				// Если не указан для агента опредленный цвет, то по умолчанию выделяем красным
				ПреобразованноеЗначение = "255,0,0";
			Иначе
				ПреобразованноеЗначение = ПреобразоватьЦветИзRGBВШестнадцатиричнуюСистему(Значение, Истина);
			КонецЕсли;                                                    		
		Иначе
			ПреобразованноеЗначение = ПреобразоватьЦветИзRGBВШестнадцатиричнуюСистему(Значение, Истина);
		КонецЕсли;
	ИначеЕсли Не ЗначениеЗаполнено(Значение) Тогда
		ПреобразованноеЗначение = "";
	ИначеЕсли ЗначениеЗаполнено(Значение) Тогда
		ОбъектМетаданных = Метаданные.НайтиПоТипу(типЗнач);
		Если Метаданные.Справочники.Содержит(ОбъектМетаданных) Или Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
			ПреобразованноеЗначение = XMLСтрока(Значение.Ссылка.УникальныйИдентификатор());
		ИначеЕсли Метаданные.Перечисления.Содержит(ОбъектМетаданных) Тогда
			СтруктураПеречисления = СоответствиеПеречислений[ОбъектМетаданных.Имя];
			ПреобразованноеЗначение = СтруктураПеречисления[Значение]
		КонецЕсли;			
	Иначе
		ПреобразованноеЗначение = XMLСтрока(Значение);
	КонецЕсли;
	
	Возврат ПреобразованноеЗначение;	
КонецФункции //ПреобразоватьЗначениеВСтрокуДляXML()

Функция ДатаВремяВФорматXMLИз1СМТ(лДатаВремя = Неопределено, Тип = "ДатаВремя") Экспорт
	
	ДатаВремя = ?(лДатаВремя = Неопределено, ТекущаяДата(), лДатаВремя);
		
	НужнаяДата = Формат(ДатаВремя, "ДФ=""гггг-ММ-дд""");
	
	НужноеВремя = Формат(ДатаВремя, "ДФ=""ЧЧ:мм:сс""");
	
	Если Тип = "Дата" Тогда		
		НужноеЗначение = НужнаяДата;
	ИначеЕсли Тип = "Время" Тогда			
		НужноеЗначение = НужноеВремя;
	Иначе	
		Если ПустаяСтрока(НужнаяДата) или  ПустаяСтрока(НужноеВремя) Тогда
			Возврат "";
		КонецЕсли;	
		НужноеЗначение = НужнаяДата + "T" + НужноеВремя;
	КонецЕсли;
	
	Возврат НужноеЗначение;
	
КонецФункции //ДатаВремяВФорматXMLИз1СМТ()  

// sk_190116 Функция не используется
// ИзвлечьZipАрхивОбмена()
//
//функция извлекает файлы обмена
//и помещает возможные файлы в массив СписокИзвлеченныхФайлов
//возвращает 	Истина, если есть ошибки
//				Ложь, если ошибок нет
Функция ИзвлечьZipАрхивОбмена_OLD(ИмяФайлаАрхива, ДанныеАгента, данныеМУ, СписокИзвлеченныхФайлов)
	
	естьОшибки = Ложь;
	// СписокИзвлеченныхФайлов = Новый Соответствие; sk_181219 Исключаем из функции параметр "СписокИзвлеченныхФайлов"  
	
	списокДопустимыхФайлов = Новый Соответствие;
	списокДопустимыхФайлов.Вставить("ФайлЗагрузки", 			Имена["ФайлЗагрузки"] + Имена["РасширениеXML"]);    			// файл обмена XML
	списокДопустимыхФайлов.Вставить("ФайлАрхивКартинки", 		Имена["АрхивЗагрузкиКартинки"] + Имена["РасширениеZIP"]);   	// архив с картинками
	списокДопустимыхФайлов.Вставить("ФайлТрек", 				Имена["ФайлТрек"] + Имена["РасширениеTXT"]); 					// архив с треками
	
	// СписокИзвлеченныхФайлов = Новый Соответствие; sk_181219 Исключаем из функции параметр "СписокИзвлеченныхФайлов"	 
	
	Пароль = данныеМУ["ПарольАрхива"];
	ЗипАрхив = Новый ЧтениеZipФайла(ИмяФайлаАрхива, Пароль); 			
	
	//ФайлАрхива = Новый ЭлементZipФайла();	
	Для Каждого текКлючЗначение Из списокДопустимыхФайлов Цикл
		ключ = текКлючЗначение.Ключ;
		имяФайла = текКлючЗначение.Значение;
		ЭлементZipАрхива = ЗипАрхив.Элементы.Найти(имяФайла);
		Если ЭлементZipАрхива <> Неопределено Тогда		
			Попытка				
				ЗипАрхив.Извлечь(ЭлементZipАрхива, РабочаяПапка);
				СписокИзвлеченныхФайлов.Вставить(ключ, Новый Структура("Каталог, ИмяФайла", РабочаяПапка, имяФайла));
			Исключение
				ОповеститьОСобытии("ru='Не удалось извлечь файл """ + имяФайла + """ из архива. " + СтрЗаменить(ОписаниеОшибки(), "'", """") + "'", ТипыЛогов["Обмен"], СтатусСообщения.Внимание, ДанныеАгента["Пользователь"]);
			КонецПопытки		
		КонецЕсли;
	КонецЦикла;
	
	Возврат естьОшибки;
	
КонецФункции // ИзвлечьZipАрхивОбмена_OLD()

Процедура АП_УдалитьФайлы(ТипЛога, Агент = Неопределено,  Путь, Маска = Неопределено)
	
	Если НайтиФайлы(Путь, Маска, Ложь).Количество() > 0 Тогда
		Попытка
			УдалитьФайлы(Путь, Маска);
		Исключение
			ТекстСообщения = "ru='Не удалось удалить файлы """ + (Путь + ?(Маска = Неопределено, "", Маска)) + """" + 
							 "Причина: " + СтрЗаменить(ОписаниеОшибки(), "'", """") + "'";
			ОповеститьОСобытии(ТекстСообщения, ТипЛога, СтатусСообщения.Внимание, Агент);
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

// sk_190116 Функция не используется
// ИзвлечьZipАрхивТрек()
//
//функция извлекает файл трека
//и помещает информацию о извлечённом файле в соответствие СписокФайлов
//возвращает 	Истина, если есть ошибки
//				Ложь, если ошибок нет
Функция ИзвлечьZipАрхивТрек_OLD(ИмяФайлаАрхива, ДанныеАгента, СписокФайлов)
	
	естьОшибки = Ложь;
		
	ЗипАрхив = Новый ЧтениеZipФайла(ИмяФайлаАрхива);
	
	имяФайла = Имена["ФайлТрек"] + Имена["РасширениеTXT"];
	ЭлементZipАрхива = ЗипАрхив.Элементы.Найти(имяФайла);
	Если ЭлементZipАрхива <> Неопределено Тогда		
		ПапкаТреков = НастройкиОбработки["ПапкаТреки"];
		Попытка				
			ЗипАрхив.Извлечь(ЭлементZipАрхива, ПапкаТреков);	
			СписокФайлов.Вставить("ФайлТрек", Новый Структура("Каталог, ИмяФайла", ПапкаТреков, имяФайла));
		Исключение
			ОповеститьОСобытии("ru='Не удалось извлечь файл """ + имяФайла + """ из архива. " + СтрЗаменить(ОписаниеОшибки(), "'", """") + "'", ТипыЛогов["Обмен"], СтатусСообщения.Внимание, ДанныеАгента["Пользователь"]);
		КонецПопытки		
	КонецЕсли;
	
	Возврат естьОшибки;
	
КонецФункции // ИзвлечьZipАрхивТрек_OLD()

// sk_190116 Функция не используется
// ИзвлечьZipАрхивКартинки()
//
//функция извлекает папку с картинками
//и помещает информацию о извлечённой папке в соответствие СписокФайлов
//возвращает 	Истина, если есть ошибки
//				Ложь, если ошибок нет
Функция ИзвлечьZipАрхивКартинки_OLD(ИмяФайлаАрхива, ДанныеАгента, СписокФайлов)
	
	естьОшибки = Ложь;
		
	ЗипАрхив = Новый ЧтениеZipФайла(ИмяФайлаАрхива);
	
	папкаСКартинками = РабочаяПапка + Имена["ПапкаКартинки"] + "\";
	Для Каждого ЭлементZipАрхива Из ЗипАрхив.Элементы Цикл
		//Попытка				
			ЗипАрхив.Извлечь(ЭлементZipАрхива, папкаСКартинками);	
			СписокФайлов.Вставить("ПапкаКартинки", Новый Структура("Каталог, ИмяФайла", папкаСКартинками, ЭлементZipАрхива.Имя));
		//Исключение
		//	ОповеститьОСобытии("ru='Не удалось извлечь папку """ + имяФайла + """ из архива. " + ОписаниеОшибки() + "'", ТипыЛогов["Обмен"], СтатусСообщения.Внимание, ДанныеАгента["Пользователь"]);
		//КонецПопытки		
	КонецЦикла;
	
	Возврат естьОшибки;
	
КонецФункции // ИзвлечьZipАрхивКартинки_OLD()

Функция ПолучитьПутьОбмена()
	
	путьОбмена = "";
	
	Если СпособОбмена = 0 Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Вопрос(НСтр("ru='Вы хотите сохранить файл выгрузки в каталог?'"), Режим, 0);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			путьОбмена = Неопределено;
		Иначе
			Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
			ДиалогСохраненияФайла = Новый ДиалогВыбораФайла(Режим);
			ДиалогСохраненияФайла.Каталог = ВосстановитьЗначение("КаталогСохраненияФайловДляМУ");			
			ДиалогСохраненияФайла.Заголовок = НСтр("ru='Укажите каталог сохранения файла выгрузки'");
			Если ДиалогСохраненияФайла.Выбрать() Тогда
				ВыбКаталог = ДиалогСохраненияФайла.Каталог;
				каталог = Новый Файл(ВыбКаталог);
				Если каталог.Существует() Тогда
					путьОбмена = ВыбКаталог;
					СохранитьЗначение("КаталогСохраненияФайловДляМУ", ВыбКаталог);
				Иначе
					Предупреждение(НСтр("ru='Каталог не существует!'"));
					путьОбмена = Неопределено;
				КонецЕсли;
			Иначе
				Предупреждение(НСтр("ru='Каталог не выбран!'"));
				путьОбмена = Неопределено;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли СпособОбмена = 1 Тогда
		
		Если Не ЗначениеЗаполнено(НастройкиОбработки["ПапкаАгентСОД"]) Тогда
			Предупреждение(НСтр("ru='Не заполнено поле ""Папка обмена"" в форме """ +  Имена["НастройкиПараметровОбработки"] + """'!"));
			путьОбмена = Неопределено;
		Иначе 
			путьОбмена = НастройкиОбработки["ПапкаАгентСОД"];
		КонецЕсли;
				
	Иначе
		 путьОбмена = РабочаяПапка;		
	КонецЕсли;
	
	Если путьОбмена <> Неопределено Тогда
		
		ДополнитьСлешВПуть(путьОбмена);
		//путьОбмена = НастройкиОбработки["ПапкаАгентСОД"];		
		Файл = Новый Файл(путьОбмена);
		Если Не Файл.Существует() Тогда
			ОповеститьОСобытии("ru='Каталог обмена (""" + путьОбмена + """) не существует!'", ТипыЛогов["Обмен"], СтатусСообщения.Внимание);
		КонецЕсли;
		
	КонецЕсли;		
	
	Возврат путьОбмена;	
КонецФункции

//Функция возвращает настройку таблицы значений ТабМобильныеУстройства, если найдено активное мобильное устройство по уникальныйИдентификаторАгента
//если мобильное устройство не найдено, возвращается Неопределено, а в параметр ТекстОшибки возвращается текст ошибки
//
Функция ПолучитьНастройкиМобильногоУстройстваПоАгенту(СсылкаПользователь, ТекстОшибки, ДанныеМУ = Неопределено, текНастройкиАгентов = Неопределено, текТабАгентыМУ = Неопределено, текТабМобильныеУстройства = Неопределено) Экспорт
	
	резМУ = Неопределено;	
	ТекстОшибки = "";
	
	Если Не ЗначениеЗаполнено(СсылкаПользователь) Тогда
		
		ТекстОшибки = "ru='Не определено значение параметра ""Агент""'";
		
	Иначе			
		
		текНастройкиАгентов = ?(текНастройкиАгентов = Неопределено, ТабНастройкиАгентов, текНастройкиАгентов);
		текТабАгентыМУ = ?(текТабАгентыМУ = Неопределено, ТабАгентыМУ, текТабАгентыМУ);
		текТабМобильныеУстройства = ?(текТабМобильныеУстройства = Неопределено, ТабМобильныеУстройства, текТабМобильныеУстройства);
		
		ИдАгента = СсылкаПользователь.Ссылка.УникальныйИдентификатор();
		стрНастройкиАгента = текНастройкиАгентов.Найти(СсылкаПользователь, "Пользователь");	
		уникальныйИдентификаторАгента = стрНастройкиАгента["УникальныйИдентификатор"];
		
		// если агент закреплен за переданным устройством ДанныеМУ, то оставляем его,
		// если основных устройст несколько - предлагаем выбрать одно,
		// если устройство одно, то возвращаем его
		Если ДанныеМУ <> Неопределено Тогда
			идМУ = ДанныеМУ["УникальныйИдентификатор"];
			массивСтрок = текТабАгентыМУ.НайтиСтроки(Новый Структура("УникальныйИдентификаторМУ, УникальныйИдентификаторАгента", идМУ, уникальныйИдентификаторАгента));
			Если массивСтрок.Количество() = 1 Тогда
				Возврат текТабМобильныеУстройства.Найти(идМУ, "УникальныйИдентификатор");
			КонецЕсли;
		КонецЕсли;		
		
		массивСтрок = текТабАгентыМУ.НайтиСтроки(Новый Структура("УникальныйИдентификаторАгента", уникальныйИдентификаторАгента));
		колСтрок = массивСтрок.Количество();
		Если колСтрок = 0 Тогда
			
			ТекстОшибки = "ru='Агент """ + СсылкаПользователь + """ не закреплен ни за одним мобильным устройством!'";
			
		Иначе
			
			идОсновноеМУ = Неопределено;			
			списокУстройств = Новый СписокЗначений;
			
			Для Каждого текЭл Из массивСтрок Цикл
				текИдМУ = текЭл["УникальныйИдентификаторМУ"];
				Если Не списокУстройств.НайтиПоЗначению(текИдМУ) Тогда
					списокУстройств.Добавить(текИдМУ, списокУстройств["Псевдоним"]);
				КонецЕсли;
				
				Если текЭл["Основной"] = Истина Тогда
					идОсновноеМУ = текИдМУ;
				КонецЕсли;
					
			КонецЦикла;
			
			Если списокУстройств.Количество() = 0 Тогда				
				ТекстОшибки = "ru='Агент """ + СсылкаПользователь + """ не закреплен ни за одним мобильным устройством!'";				
			Иначе
				списокУстройств.СортироватьПоПредставлению();
				ВыбЭлемент = списокУстройств.НайтиПоЗначению(идОсновноеМУ);
				резМУ = списокУстройств.ВыбратьЭлемент(НСтр("ru='Выберите устройство'"), ВыбЭлемент);
			КонецЕсли;
		КонецЕсли;
				
	КонецЕсли;
	
	Возврат резМУ;
	
КонецФункции

// sk_190114 Процедура исключена в рамках (MOD-207)
// ПриИзмененииСпособаОбмена()
//
Процедура ПриИзмененииСпособаОбмена_OLD() Экспорт
	
	Если СпособОбмена = 1 Тогда
		
		НастроитьАвтообменСАгентСОД_OLD(); // НастроитьАвтообменСАгентСОД sk_190114 
				
	КонецЕсли;
	
	//Альфия 16.05.2017
	//Если СпособОбмена = 2 Тогда
	//	
	//	//НастроитьАвтообменFTP();	
	//			
	//КонецЕсли;
	//Альфия 16.05.2017
	
КонецПроцедуры

// sk_190116 Функция не используется
// ПолучитьМаксимальноеЗначение()
//
Функция ПолучитьМаксимальноеЗначение_OLD(списокЗначений, имяРеквизита) Экспорт
	
	максЗначение = - Pow(10, 38);
	Для Каждого текЗначение Из списокЗначений Цикл
		Если текЗначение[имяРеквизита] > максЗначение Тогда
			максЗначение = текЗначение[имяРеквизита];
		КонецЕсли;
	КонецЦикла;
	
	Возврат максЗначение;
	
КонецФункции // ПолучитьМаксимальноеЗначение_OLD()

Функция ПроверитьСуществованиеКаталога(ИмяКаталога, ВопросСоздания = Ложь) Экспорт
	
	// каталогСоздан = Ложь; sk_190117
	КаталогНаДиске = Новый Файл(ИмяКаталога);
	Если КаталогНаДиске.Существует() Тогда
		Возврат Истина;
	Иначе
		Если ВопросСоздания Тогда
			#Если Клиент Тогда
				Ответ = Вопрос(НСтр("ru='Каталог """ + ИмяКаталога + """ не существует. Создать его?'"), РежимДиалогаВопрос.ДаНет);
				Если Ответ = КодВозвратаДиалога.Да Тогда				
				Иначе  				
					Возврат Ложь;
				КонецЕсли;
			#Иначе
				Возврат Ложь;
			#КонецЕсли
		Иначе
			СоздатьКаталог(ИмяКаталога);			
		КонецЕсли;
	КонецЕсли;
	
	//(( sk_190117
	//КаталогНаДиске = Новый Файл(ИмяКаталога);
	//Если КаталогНаДиске.Существует() Тогда
	//	ТекстСообщения = "ru='Создан каталог """ + ИмяКаталога + """.'";
	//	текСтатус = СтатусСообщения.Обычное;
	//	каталогСоздан = Истина;
	//Иначе
	//	ТекстСообщения = "ru='Не удалось создать каталог """ + ИмяКаталога + """.'";
	//	текСтатус = СтатусСообщения.Внимание;
	//	каталогСоздан = Ложь;
	//КонецЕсли;
	// ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обработка"], текСтатус); sk_190117
	//Возврат каталогСоздан;
	Возврат КаталогНаДиске.Существует();
	//)) sk_190117 
	
КонецФункции // ПроверитьСуществованиеКаталога()

// sk_190116 Функция не используется
// ПереместитьФайлыЗагрузкиВРабочуюПапку()
//
Функция ПереместитьФайлыЗагрузкиВРабочуюПапку_OLD(ДанныеАгента, ДанныеМУ, ФайлЗагрузки = Неопределено, СписокФайлов = Неопределено)
	
	текАгент = ?(ДанныеАгента = Неопределено, Неопределено, ДанныеАгента["Пользователь"]);
	естьОшибки = Ложь;
	
	СписокФайлов = Новый Соответствие;
	//Расширение = НРег(ФайлЗагрузки.Расширение);
	//Если Расширение = Имена["РасширениеZIP"] Тогда
	Если СпособОбмена = 0 Тогда								// Прямое подключение
		
		каталогФайла = ФайлЗагрузки.Путь;
		
		расширениеФайла = НРег(ФайлЗагрузки.Расширение);
		Если расширениеФайла = Имена["РасширениеZIP"] Тогда			
			
			// архив загрузки ZIP
			имяФайла = Имена["АрхивЗагрузки"] + Имена["РасширениеZIP"];
			текФайлЗагрузки = Новый Файл(каталогФайла + имяФайла);
			Если текФайлЗагрузки.Существует() Тогда			
				Попытка
					ПереместитьФайл(текФайлЗагрузки.ПолноеИмя, РабочаяПапка + текФайлЗагрузки.Имя);					
					СписокФайлов.Вставить("ФайлАрхивЗагрузки", Новый Структура("Каталог, ИмяФайла", РабочаяПапка, текФайлЗагрузки.Имя));
				Исключение
					ОповеститьОСобытии("ru='" + СтрЗаменить(ОписаниеОшибки(), "'", """") + "'", ТипыЛогов["Обмен"], СтатусСообщения.Внимание);		
				КонецПопытки;
			КонецЕсли;	
			
		ИначеЕсли расширениеФайла = Имена["РасширениеXML"] Тогда
			
			// файл загрузки XML
			имяФайла = Имена["ФайлЗагрузки"] + Имена["РасширениеXML"];
			текФайлЗагрузки = Новый Файл(каталогФайла + имяФайла);
			Если текФайлЗагрузки.Существует() Тогда			
				Попытка
					ПереместитьФайл(текФайлЗагрузки.ПолноеИмя, РабочаяПапка + текФайлЗагрузки.Имя);
					СписокФайлов.Вставить("ФайлЗагрузки", Новый Структура("Каталог, ИмяФайла", РабочаяПапка, текФайлЗагрузки.Имя));			
				Исключение
					ОповеститьОСобытии("ru='" + СтрЗаменить(ОписаниеОшибки(), "'", """") + "'", ТипыЛогов["Обмен"], СтатусСообщения.Внимание);		
				КонецПопытки;

			КонецЕсли;	
			
			// архив с картинками
			имяФайла = Имена["АрхивЗагрузкиКартинки"] + Имена["РасширениеZIP"];
			текФайлЗагрузки = Новый Файл(каталогФайла + имяФайла);
			Если текФайлЗагрузки.Существует() Тогда			
				Попытка
					ПереместитьФайл(текФайлЗагрузки.ПолноеИмя, РабочаяПапка + текФайлЗагрузки.Имя);
					СписокФайлов.Вставить("ФайлАрхивКартинки", Новый Структура("Каталог, ИмяФайла", РабочаяПапка, текФайлЗагрузки.Имя));
				Исключение
					ОповеститьОСобытии("ru='" + СтрЗаменить(ОписаниеОшибки(), "'", """") + "'", ТипыЛогов["Обмен"], СтатусСообщения.Внимание);		
				КонецПопытки;				
			КонецЕсли;
			
		КонецЕсли;		
					
		// файл трека
		имяФайла =  Имена["ФайлТрек"] + Имена["РасширениеTXT"];
		текФайлЗагрузки = Новый Файл(каталогФайла + имяФайла);		
		Если текФайлЗагрузки.Существует() Тогда
			Попытка
				ПереместитьФайл(текФайлЗагрузки.ПолноеИмя, РабочаяПапка + имяФайла);
				СписокФайлов.Вставить("ФайлТрек", Новый Структура("Каталог, ИмяФайла", РабочаяПапка, имяФайла));
				Исключение
				ОповеститьОСобытии("ru='" + СтрЗаменить(ОписаниеОшибки(), "'", """") + "'", ТипыЛогов["Обмен"], СтатусСообщения.Внимание);		
			КонецПопытки;				
		КонецЕсли;
		
		// файл трека службы
		имяФайла =  Имена["ФайлТрек"] + Имена["РасширениеTXT"] + Имена["РасширениеТрекСлужбы"];
		текФайлЗагрузки = Новый Файл(каталогФайла + имяФайла);		
		Если текФайлЗагрузки.Существует() Тогда
			Попытка
				ПереместитьФайл(текФайлЗагрузки.ПолноеИмя, РабочаяПапка + имяФайла);
				СписокФайлов.Вставить("ФайлТрекСлужба", Новый Структура("Каталог, ИмяФайла", РабочаяПапка, имяФайла));
			Исключение
				ОповеститьОСобытии("ru='" + СтрЗаменить(ОписаниеОшибки(), "'", """") + "'", ТипыЛогов["Обмен"], СтатусСообщения.Внимание);		
			КонецПопытки;				
		КонецЕсли;

	ИначеЕсли СпособОбмена = 1 Тогда						// Агент Плюс СОД
		
		Если ИспользоватьZipАрхивы И ЗначениеЗаполнено(ДанныеМУ) Тогда
			
			ПапкаОбмена = НастройкиОбработки["ПапкаАгентСОД"];
			каталогФайла = ПапкаОбмена + ДанныеМУ["ПапкаСОД"];	
			ДополнитьСлешВПуть(каталогФайла);
			
			естьФайлТрек = Ложь;
			
			// файл трека
			имяФайла =  Имена["ФайлТрек"] + Имена["РасширениеTXT"];
			текФайлЗагрузки = Новый Файл(каталогФайла + имяФайла);		
			Если текФайлЗагрузки.Существует() Тогда
				Попытка
					ПереместитьФайл(текФайлЗагрузки.ПолноеИмя, РабочаяПапка + имяФайла);
					СписокФайлов.Вставить("ФайлТрек", Новый Структура("Каталог, ИмяФайла", РабочаяПапка, имяФайла));
					естьФайлТрек = Истина;
				Исключение
					ОповеститьОСобытии("ru='" + СтрЗаменить(ОписаниеОшибки(), "'", """") + "'", ТипыЛогов["Обмен"], СтатусСообщения.Внимание);		
				КонецПопытки;				
			КонецЕсли;
			
			// файл трека службы
			имяФайла =  Имена["ФайлТрек"] + Имена["РасширениеTXT"] + Имена["РасширениеТрекСлужбы"];
			текФайлЗагрузки = Новый Файл(каталогФайла + имяФайла);		
			Если текФайлЗагрузки.Существует() Тогда
				Попытка
					ПереместитьФайл(текФайлЗагрузки.ПолноеИмя, РабочаяПапка + имяФайла);
					СписокФайлов.Вставить("ФайлТрекСлужба", Новый Структура("Каталог, ИмяФайла", РабочаяПапка, имяФайла));
					естьФайлТрек = Истина;
				Исключение
					ОповеститьОСобытии("ru='" + СтрЗаменить(ОписаниеОшибки(), "'", """") + "'", ТипыЛогов["Обмен"], СтатусСообщения.Внимание);		
				КонецПопытки;				
			КонецЕсли;
			
			флАрхивПеремещен = Ложь;
			Если ЗначениеЗаполнено(ДанныеМУ) Тогда	
				ДополнитьСлешВПуть(каталогФайла);
				имяФайла = Имена["АрхивЗагрузки"] + Имена["РасширениеZIP"];		
				текФайлЗагрузки = Новый Файл(каталогФайла + имяФайла);

				Если текФайлЗагрузки.Существует() Тогда
					Попытка
						ПереместитьФайл(текФайлЗагрузки.ПолноеИмя, РабочаяПапка + текФайлЗагрузки.Имя);
						флАрхивПеремещен = Истина;
						СписокФайлов.Вставить("ФайлАрхивЗагрузки", Новый Структура("Каталог, ИмяФайла", РабочаяПапка, текФайлЗагрузки.Имя));
					Исключение
						текОшибка = СтрЗаменить(ОписаниеОшибки(), "'", """");
						ОповеститьОСобытии("ru='" + текОшибка + "'", ТипыЛогов["Обмен"], СтатусСообщения.Внимание);		
					КонецПопытки;					
				КонецЕсли;
			ИначеЕсли ФайлЗагрузки <> Неопределено Тогда
				текФайлЗагрузки = ФайлЗагрузки;
				каталогФайла = ФайлЗагрузки.Путь;
				Попытка
					ПереместитьФайл(текФайлЗагрузки.ПолноеИмя, РабочаяПапка + текФайлЗагрузки.Имя);
					флАрхивПеремещен = Истина;
				Исключение
					ОповеститьОСобытии("ru='" + СтрЗаменить(ОписаниеОшибки(), "'", """") + "'", ТипыЛогов["Обмен"], СтатусСообщения.Внимание);		
				КонецПопытки;					
			КонецЕсли;

			Если флАрхивПеремещен Тогда
				ОповеститьОСобытии("ru='Архив обмена """ + текФайлЗагрузки.Имя + """ перемещён в папку """ + РабочаяПапка + """'", ТипыЛогов["Обмен"], СтатусСообщения.Обычное);		
			Иначе
				Если Не естьФайлТрек Тогда
					ОповеститьОСобытии("ru='Архив обмена не найден!'", ТипыЛогов["Обмен"], СтатусСообщения.Важное);		
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;

	ИначеЕсли СпособОбмена = 2 Тогда				// FTP-сервер
		
		текПодключениеFTP = СоздатьПодключениеFTP_OLD();
		Если текПодключениеFTP <> Неопределено Тогда
			Если ДанныеМУ <> Неопределено Тогда
				FtpПапка = Строка(ДанныеМУ["ПапкаFTP"]);
		
				Если Не ЗначениеЗаполнено(FtpПапка) Тогда		
					ТекстСообщения = "ru='У агента """ + текАгент.Наименование + """ не указана папка обмена на FTP-сервере!'";
					ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обмен"], СтатусСообщения.Внимание, текАгент);
					Возврат Истина;
				КонецЕсли;
				
				Если (Прав(FtpПапка, 1) <> "\") Или (Прав(FtpПапка, 1) <> "/") Тогда
					FtpПапка = FtpПапка + "/";
				КонецЕсли;
				
				МассивУдаляемыхФайлов = Новый Массив;
				Если ИспользоватьZipАрхивы Тогда
					имяФайла = Имена["АрхивЗагрузки"] + Имена["РасширениеZIP"];
					имяФайлаЛокальный = РабочаяПапка + имяФайла;
					Если текПодключениеFTP.НайтиФайлы(FtpПапка, имяФайла).Количество() = 0 Тогда
						ТекстСообщения = "ru='Нет данных на FTP-сервере!'";
						ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обмен"], СтатусСообщения.Внимание, текАгент);
						Возврат Истина;			
					Иначе
						текИмяФайла = FtpПапка + имяФайла;
						МассивУдаляемыхФайлов.Добавить(текИмяФайла);
						текПодключениеFTP.Получить(FtpПапка + имяФайла, имяФайлаЛокальный);				
						//++2017-12-20 Ratmir
						СохранитьФайлДляУД(текАгент, РабочаяПапка, имяФайла);
						//--2017-12-20 Ratmir
						СписокФайлов.Вставить("ФайлАрхивЗагрузки", Новый Структура("Каталог, ИмяФайла", РабочаяПапка, имяФайла));
					КонецЕсли;
				Иначе
					// файл обмена XML
					имяФайла = Имена["ФайлЗагрузки"] + Имена["РасширениеXML"];
					имяФайлаЛокальный = РабочаяПапка + имяФайла;
					Если текПодключениеFTP.НайтиФайлы(FtpПапка, имяФайла).Количество() = 0 Тогда
						ТекстСообщения = "ru='Нет данных на FTP-сервере!'";
						ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обмен"], СтатусСообщения.Внимание, текАгент);
						Возврат Истина;
					Иначе
						текИмяФайла = FtpПапка + имяФайла;
						МассивУдаляемыхФайлов.Добавить(текИмяФайла);
						текПодключениеFTP.Получить(FtpПапка + имяФайла, имяФайлаЛокальный);				
						//++2017-12-20 Ratmir
						СохранитьФайлДляУД(текАгент, РабочаяПапка, имяФайла);
						//--2017-12-20 Ratmir

						СписокФайлов.Вставить("ФайлАрхивЗагрузки", Новый Структура("Каталог, ИмяФайла", РабочаяПапка, имяФайла));
					КонецЕсли;				
					
					// архив с картинками
					имяФайла = Имена["АрхивЗагрузкиКартинки"] + Имена["РасширениеZIP"];
					имяФайлаЛокальный = РабочаяПапка + имяФайла;
					Если текПодключениеFTP.НайтиФайлы(FtpПапка, имяФайла).Количество() > 0 Тогда
						текИмяФайла = FtpПапка + имяФайла;
						МассивУдаляемыхФайлов.Добавить(текИмяФайла);
						текПодключениеFTP.Получить(FtpПапка + имяФайла, имяФайлаЛокальный);				
						СписокФайлов.Вставить("ФайлАрхивКартинки", Новый Структура("Каталог, ИмяФайла", РабочаяПапка, имяФайла));
					КонецЕсли;	
					
					// файл архив треков
					имяФайла = Имена["ФайлТрек"] + Имена["РасширениеZIP"];
					Если текПодключениеFTP.НайтиФайлы(FtpПапка, имяФайла).Количество() > 0 Тогда
						текИмяФайла = FtpПапка + имяФайла;
						МассивУдаляемыхФайлов.Добавить(текИмяФайла);
						текПодключениеFTP.Получить(FtpПапка + имяФайла, РабочаяПапка + имяФайлаЛокальный);				
						СписокФайлов.Вставить("ФайлАрхивТреки", Новый Структура("Каталог, ИмяФайла", РабочаяПапка, имяФайла));
							
					КонецЕсли;	
					
				КонецЕсли;
				
				// файл трека
				имяФайла =  Имена["ФайлТрек"] + Имена["РасширениеTXT"];
				Если текПодключениеFTP.НайтиФайлы(FtpПапка, имяФайла).Количество() > 0 Тогда
					текИмяФайла = FtpПапка + имяФайла;
					МассивУдаляемыхФайлов.Добавить(текИмяФайла);
					текПодключениеFTP.Получить(FtpПапка + имяФайла, РабочаяПапка + имяФайла); // текПодключениеFTP.Получить(FtpПапка + имяФайла, РабочаяПапка + имяФайлаЛокальный); sk_181219 Изменено имея выходного файла 				
					СписокФайлов.Вставить("ФайлТрек", Новый Структура("Каталог, ИмяФайла", РабочаяПапка, имяФайла));			
					
				КонецЕсли;
				
				// файл трека службы
				имяФайла =  Имена["ФайлТрек"] + Имена["РасширениеTXT"] + Имена["РасширениеТрекСлужбы"];
				Если текПодключениеFTP.НайтиФайлы(FtpПапка, имяФайла).Количество() > 0 Тогда
					текИмяФайла = FtpПапка + имяФайла;
					МассивУдаляемыхФайлов.Добавить(текИмяФайла);
					текПодключениеFTP.Получить(FtpПапка + имяФайла, РабочаяПапка + имяФайлаЛокальный);				
					СписокФайлов.Вставить("ФайлТрек", Новый Структура("Каталог, ИмяФайла", РабочаяПапка, имяФайла));			
				
				КонецЕсли;
				
				Для Каждого текИмяФайла Из МассивУдаляемыхФайлов Цикл
					
					Попытка
						//текПодключениеFTP.Удалить(FtpПапка, текИмяФайла);
						текПодключениеFTP.Удалить(текИмяФайла);  //Альфия !!!!!!!!!!!!!!!!!!
					Исключение
						ТекстСообщения = "ru='Не удалось удалить файл """ + текИмяФайла + """ на FTP-сервере!" + 
										 "Причина: " + СтрЗаменить(ОписаниеОшибки(), "'", """") + "'";
						ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обмен"], СтатусСообщения.Внимание, текАгент);

					КонецПопытки;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
			
	Возврат естьОшибки;
	
КонецФункции // ПереместитьФайлыЗагрузкиВРабочуюПапку_OLD()

// sk_190116 Функция не используется
// ЕстьДанныеДляЗагрузки()
//
Функция ЕстьДанныеДляЗагрузки_OLD(ДанныеАгента, ДанныеМУ, ФайлЗагрузки = Неопределено)
	
	текАгент = ?(ДанныеАгента = Неопределено, Неопределено, ДанныеАгента["Пользователь"]);
	
	Если СпособОбмена = 0 Тогда								// Прямое подключение
		
		каталогФайла = ФайлЗагрузки.Путь;
		
		расширениеФайла = НРег(ФайлЗагрузки.Расширение);
		Если расширениеФайла = Имена["РасширениеZIP"] Тогда			
			
			// архив загрузки ZIP
			имяФайла = Имена["АрхивЗагрузки"] + Имена["РасширениеZIP"];
			текФайлЗагрузки = Новый Файл(каталогФайла + имяФайла);
			Если текФайлЗагрузки.Существует() Тогда			
				Возврат Истина;
			КонецЕсли;	
			
		ИначеЕсли расширениеФайла = Имена["РасширениеXML"] Тогда
			
			// файл загрузки XML
			имяФайла = Имена["ФайлЗагрузки"] + Имена["РасширениеXML"];
			текФайлЗагрузки = Новый Файл(каталогФайла + имяФайла);
			Если текФайлЗагрузки.Существует() Тогда			
				Возврат Истина;
			КонецЕсли;	
			
		КонецЕсли;	
		
		// файл фонового трека
		имяФайла = Имена["ФайлТрек"] + Имена["РасширениеTXT"] + Имена["РасширениеФоновыйТрек"];
		текФайлЗагрузки = Новый Файл(каталогФайла + имяФайла);		
		Если текФайлЗагрузки.Существует() Тогда
			Возврат Истина;
		КонецЕсли;	

	ИначеЕсли СпособОбмена = 1 Тогда						// Агент Плюс СОД
		
		Если ИспользоватьZipАрхивы Тогда
			
			ПапкаОбмена = НастройкиОбработки["ПапкаАгентСОД"];
			каталогФайла = ПапкаОбмена + ДанныеМУ["ПапкаСОД"];		
			ДополнитьСлешВПуть(каталогФайла);
			имяФайла = Имена["АрхивЗагрузки"] + Имена["РасширениеZIP"];		
			текФайлЗагрузки = Новый Файл(каталогФайла + имяФайла);

			Если текФайлЗагрузки.Существует() Тогда
				Возврат Истина;
			КонецЕсли;

		КонецЕсли;
		
		// файл фонового трека
		имяФайла = Имена["ФайлТрек"] + Имена["РасширениеTXT"] + Имена["РасширениеФоновыйТрек"];
		текФайлЗагрузки = Новый Файл(каталогФайла + имяФайла);		
		Если текФайлЗагрузки.Существует() Тогда
			Возврат Истина;
		КонецЕсли;	

	ИначеЕсли СпособОбмена = 2 Тогда				// FTP-сервер
		
		текПодключениеFTP = СоздатьПодключениеFTP_OLD();
		Если текПодключениеFTP <> Неопределено Тогда
			
			FtpПапка = Строка(ДанныеМУ["ПапкаFTP"]);
	
			Если Не ЗначениеЗаполнено(FtpПапка) Тогда		
				ТекстСообщения = "ru='У агента """ + текАгент.Наименование + """ не указана папка обмена на FTP-сервере!'";
				ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обмен"], СтатусСообщения.Внимание, текАгент);
				Возврат Ложь;
			КонецЕсли;
			
			Если (Прав(FtpПапка, 1) <> "\") Или (Прав(FtpПапка, 1) <> "/") Тогда
				FtpПапка = FtpПапка + "/";
			КонецЕсли;
			
			Если ИспользоватьZipАрхивы Тогда
				имяФайла = Имена["АрхивЗагрузки"] + Имена["РасширениеZIP"];
				Попытка
					Если текПодключениеFTP.НайтиФайлы(FtpПапка, имяФайла).Количество() <> 0 Тогда
						Возврат Истина;
					КонецЕсли;
				Исключение
				КонецПопытки;
			Иначе
				// файл обмена XML
				имяФайла = Имена["ФайлЗагрузки"] + Имена["РасширениеXML"];
				Если текПодключениеFTP.НайтиФайлы(FtpПапка, имяФайла).Количество() <> 0 Тогда
					Возврат Истина;
				КонецЕсли;				
								
			КонецЕсли;
			
			// файл фонового трека
			имяФайла = Имена["ФайлТрек"] + Имена["РасширениеTXT"] + Имена["РасширениеФоновыйТрек"];
			Если текПодключениеFTP.НайтиФайлы(FtpПапка, имяФайла).Количество() > 0 Тогда
				Возврат Истина;
			КонецЕсли;	
			
		КонецЕсли;
	КонецЕсли;
			
	Возврат Ложь;
	
КонецФункции // ЕстьДанныеДляЗагрузки_OLD()

// sk_190116 Процедура не используется
// ЗаполнитьОтборКомпоновкиИзСтруктуры()
// Заполняет указанный отбор на основании структуры, содержащей данные отбора
//
// Параметры:
//  Отбор - отбор компоновки данных, который надо заполнить
//  Структура отбора - структура, содержащая данные для заполнения отбора
//
Процедура ЗаполнитьОтборКомпоновкиИзСтруктуры_OLD(Отбор, СтруктураОтбора) Экспорт
	
	Отбор.Элементы.Очистить();
	
	Для Каждого ЭлементСтруктурыОтбора из СтруктураОтбора Цикл
		
		ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		
		СтруктураЭлементаОтбора = ЭлементСтруктурыОтбора.Значение;
		
		Для Каждого Элемент из СтруктураЭлементаОтбора Цикл
			Если Элемент.Ключ = "ЛевоеЗначение" Тогда
				ЭлементОтбора[Элемент.Ключ] =  Новый ПолеКомпоновкиДанных(Элемент.Значение);
			Иначе
				ЭлементОтбора[Элемент.Ключ] = Элемент.Значение;
			КонецЕсли;
		КонецЦикла;	
		
	КонецЦикла;
	
КонецПроцедуры

// sk_190116 Функция не используется
// ПолучитьСтруктуруОтбораКомпоновкиДанных()
// Формирует и возвращает структуру на основе переданного отбора компоновки данных
//
// Параметры:
//  Отбор - отбор компоновки данных
//
// Возвращаемое значение:
//  Структура, содержащая данные отбора
// 
Функция ПолучитьСтруктуруОтбораКомпоновкиДанных_OLD(Отбор) Экспорт
	
	СтруктураОтбора = Новый Структура();
	
	Для Каждого ЭлементОтбора Из Отбор.Элементы Цикл
		
		// Заполним структуру элемента отбора
		СтруктураЭлементаОтбора = Новый Структура();
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			
			СтруктураЭлементаОтбора.Вставить("ВидСравнения",ЭлементОтбора.ВидСравнения);
			СтруктураЭлементаОтбора.Вставить("ИдентификаторПользовательскойНастройки",ЭлементОтбора.ИдентификаторПользовательскойНастройки);
			СтруктураЭлементаОтбора.Вставить("Использование",ЭлементОтбора.Использование);
			СтруктураЭлементаОтбора.Вставить("ЛевоеЗначение",ЭлементОтбора.ЛевоеЗначение);
			СтруктураЭлементаОтбора.Вставить("ПравоеЗначение",ЭлементОтбора.ПравоеЗначение);
			СтруктураЭлементаОтбора.Вставить("Представление",ЭлементОтбора.Представление);
			СтруктураЭлементаОтбора.Вставить("ПредставлениеПользовательскойНастройки",ЭлементОтбора.ПредставлениеПользовательскойНастройки);
			СтруктураЭлементаОтбора.Вставить("Применение",ЭлементОтбора.Применение);
			СтруктураЭлементаОтбора.Вставить("РежимОтображения",ЭлементОтбора.РежимОтображения);
			
			// Структуру элемента отбора поместим в структуру отбора
			СтруктураОтбора.Вставить(ЭлементОтбора.ЛевоеЗначение, СтруктураЭлементаОтбора);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураОтбора;
	
КонецФункции // ПолучитьСтруктуруОтбораКомпоновкиДанных_OLD()

// sk_190116 Процедура не используется
// ПолеОбработкаВыбора()
//
Процедура ПолеОбработкаВыбора_OLD(ПостроительОтчета, Элемент, Выбор, ЭлементФормыТабличноеПоле, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если Выбор = Неопределено ИЛИ Выбор.Количество() = 0 Тогда
		
		ЭлементФормыТабличноеПоле.ЗакончитьРедактированиеСтроки(Истина);
		Возврат;
		
	КонецЕсли;
	
	Если Выбор.Количество() = 1 И ТипЗнч(Выбор[0].ПутьКДанным) <> Тип("Массив") Тогда
		
		Элемент.Значение = Выбор[0].ПутьКДанным;
		
	Иначе
		
		Для каждого ВыбранноеЗначение из Выбор Цикл
			
			Если ТипЗнч(ВыбранноеЗначение.ПутьКДанным) = Тип("Массив") Тогда
				
				Для каждого ПутьКДанным из ВыбранноеЗначение.ПутьКДанным Цикл
										
					Если ЭлементФормыТабличноеПоле.Данные = "ПостроительОтчета.Отбор" Тогда
						
						ДобавитьОтбор(ПутьКДанным,,,,,, Ложь);
											
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
			
				Если ЭлементФормыТабличноеПоле.Данные = "ПостроительОтчета.Отбор" Тогда
						
					ДобавитьОтбор(ВыбранноеЗначение.ПутьКДанным,,,,,, Ложь);
										
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДобавитьОтбор(ПостроительОтчета, ПутьКДанным, Использование = Неопределено, ВидСравнения = Неопределено, Значение = Неопределено, ЗначениеС = Неопределено, ЗначениеПо = Неопределено, ИспользоватьВБыстрыхОтборах = Истина) Экспорт
	
	ДобавляемыйЭлементОтбора = Неопределено;
	
	Для каждого ЭлементОтбора из ПостроительОтчета.Отбор Цикл
		
		Если ЭлементОтбора.ПутьКДанным = ПутьКДанным Тогда
			
			ДобавляемыйЭлементОтбора = ЭлементОтбора;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДобавляемыйЭлементОтбора = Неопределено Тогда
		
		Попытка
			
			ДобавляемыйЭлементОтбора = ПостроительОтчета.Отбор.Добавить(ПутьКДанным);
			
		Исключение
			
			Возврат Ложь;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Если ИспользоватьВБыстрыхОтборах Тогда
				
		Если мМассивБыстрыеОтборы = Неопределено Тогда
					
			мМассивБыстрыеОтборы = Новый Массив;
					
		КонецЕсли;
				
		Если мМассивБыстрыеОтборы.Найти(ДобавляемыйЭлементОтбора) = Неопределено Тогда
			
			мМассивБыстрыеОтборы.Добавить(ДобавляемыйЭлементОтбора);
			
		КонецЕсли;
				
	КонецЕсли;
	
	Если Использование <> Неопределено Тогда
		
		ДобавляемыйЭлементОтбора.Использование = Использование;
		
	КонецЕсли;
	
	Если ВидСравнения <> Неопределено Тогда
		
		ДобавляемыйЭлементОтбора.ВидСравнения = ВидСравнения;
		
	КонецЕсли;
	
	Если Значение <> Неопределено Тогда
		
		ДобавляемыйЭлементОтбора.Значение = Значение;
		
	КонецЕсли;
	
	Если ЗначениеС <> Неопределено Тогда
		
		ДобавляемыйЭлементОтбора.ЗначениеС = ЗначениеС;
		
	КонецЕсли;
	
	Если ЗначениеПо <> Неопределено Тогда
		
		ДобавляемыйЭлементОтбора.ЗначениеПо = ЗначениеПо;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ДобавитьОтбор()

Функция ПолучитьСтруктуруЗагружаемыхРеквизитов(структураВыгружаемыхРеквизитов)
	
	рез = Новый Соответствие;
	типСтрока = Тип("Строка");
	
	Для Каждого текРеквизит Из структураВыгружаемыхРеквизитов Цикл
		Если Лев(текРеквизит.Ключ, 1) <> "_" И ТипЗнч(текРеквизит.Значение) = типСтрока Тогда
			рез.Вставить(текРеквизит.Значение, текРеквизит.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат рез;
КонецФункции

Функция ПолучитьСтруктуруВыгружаемыхРеквизитов(структураЗагружаемыхРеквизитов)
	
	рез = Новый Соответствие;
	типСтрока = Тип("Строка");
	
	Для Каждого текРеквизит Из структураЗагружаемыхРеквизитов Цикл
		Если Лев(текРеквизит.Ключ, 1) <> "_" И ТипЗнч(текРеквизит.Значение) = типСтрока Тогда
			рез.Вставить(текРеквизит.Ключ, текРеквизит.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат рез;
КонецФункции

Процедура УстановитьНастройкиОбработкиПоУмолчанию() Экспорт
	
	Если НастройкиОбработки = Неопределено Тогда
		НастройкиОбработки = Новый Соответствие;
	КонецЕсли;
	
	Для Каждого текКлючИЗнач Из НастройкиОбработкиПоУмолчанию Цикл
		Если НастройкиОбработки[текКлючИЗнач.Ключ] = Неопределено Тогда
			НастройкиОбработки[текКлючИЗнач.Ключ] = текКлючИЗнач.Значение;
		КонецЕсли;
	КонецЦикла;
            
КонецПроцедуры

Функция ПолучитьМассивИдУдаляемыхСпр(текСписЗначУдаляемыхСпр) Экспорт
	
	массивУдаляемыхСпр = Новый Массив;
	Для Каждого текЭлСпискаЗнач Из текСписЗначУдаляемыхСпр Цикл
		Если текЭлСпискаЗнач.Пометка Тогда
			массивУдаляемыхСпр.Добавить(текЭлСпискаЗнач.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат массивУдаляемыхСпр;
КонецФункции

Процедура УстановитьНастройкиПриложенияПоУмолчанию(строка) Экспорт
	
	типЗначПараметра = ТипЗнч(строка);
	Если типЗначПараметра = Тип("СтрокаТаблицыЗначений") Тогда
		Для Каждого текКлючИЗнач Из НастройкиМУПоУмолчанию Цикл
			строка[текКлючИЗнач.Ключ] = текКлючИЗнач.Значение;
		КонецЦикла;	
	Иначе
		Для Каждого текКлючИЗнач Из НастройкиМУПоУмолчанию Цикл
			строка.Вставить(текКлючИЗнач.Ключ, текКлючИЗнач.Значение);
		КонецЦикла;		
	КонецЕсли;
		
КонецПроцедуры

Процедура УстановитьНастройкиАгентаПоУмолчанию(строка) Экспорт
			
	Для Каждого текКлючИЗнач Из НастройкиАгентаПоУмолчанию Цикл
		строка[текКлючИЗнач.Ключ] = текКлючИЗнач.Значение;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьНастройкиМУ(стрИдМУ) Экспорт
	
	Возврат ТабМобильныеУстройства.Найти(стрИдМУ, "ИдентификаторМУ");
	
КонецФункции

// sk_190116 Функция не используется
// ПолучитьТаблицуКонтрагентов()
//
Функция ПолучитьТаблицуКонтрагентов_OLD(Пользователь) Экспорт
	
	результат = Неопределено;
	Если Пользователь = Неопределено Тогда Возврат результат; КонецЕсли;
	стрИдПользователя = Строка(Пользователь.Ссылка.УникальныйИдентификатор());
	допНастройкиПользователя = ДопНастройкиАгентов[стрИдПользователя];
	результат = допНастройкиПользователя["СписокКонтрагентов"];
	
	Возврат результат;
	
КонецФункции // ПолучитьТаблицуКонтрагентов_OLD()

// sk_190116 Исключено использование внешней компоненты APPlus.dll (MOD-224)
// ЗагрузитьКомпонентуAPPlus()
//
// Параметры:
//   МУОбъект - переменная, куда следует поместить
//               загруженный объект компоненты
// Описание:
//   Загружает внешнюю компоненту ПО Агент Плюс
//   
Функция ЗагрузитьКомпонентуAPPlus_OLD()
	
	Если КомпонентаЗагружена Тогда
		Возврат Истина;
	КонецЕсли;
	
	#Если Клиент Тогда
		ИмяФайлаКомп = "APPlus.dll";
		
		Попытка
			// Если библиотека находится в каталоге запуска 1С
			ЗагрузитьВнешнююКомпоненту("APPlus.dll"); 
			МУОбъект = Новый("AddIn.CeDataExch");	
			Результат = МУОбъект.CeGuestOnly(-1);
			
			Если Результат <> 1 Тогда                                     
				МУОбъект.CeGuestOnly(1);            
			КонецЕсли;
			
		Исключение  
			КомпонентаЗагружена = Ложь;
			Сообщить(НСтр("ru='Не удалось загрузить компоненту " + ИмяФайлаКомп + "!'"), СтатусСообщения.Важное);					
			Сообщить(НСтр("ru='1. Проверьте, все ли файлы компоненты скопированы в каталог " + КаталогПрограммы() + "'"), СтатусСообщения.Внимание);
			Сообщить(НСтр("ru='2. Проверьте, не установлен ли на компьютере Firewall, блокирующий загрузку компоненты!'"), СтатусСообщения.Внимание);          		
			Возврат Ложь;
		КонецПопытки;   
			
	#ИначеЕсли Сервер Тогда
		
		Попытка
			МУОбъектServer = Новый COMОбъект("AgentPlus.ApServer");
			МУОбъектZip 	= Новый COMОбъект("AgentPlus.Zip");		
			МУОбъектCrypto = Новый COMОбъект("AgentPlus.Crypto");			
		Исключение
			КомпонентаЗагружена = Ложь;
			ТекстСообщения = "ru='Не удалось создать объекты внешней компоненты APPlusCOM.dll. Причина: " + СтрЗаменить(ОписаниеОшибки(), "'", """") + 
							 ". Возможно компонента APPlusCOM.dll не зарегистрирована на сервере'";
							 
			ЗаписьЖурналаРегистрации(НСтр(ТекстСообщения), УровеньЖурналаРегистрации.Ошибка, , , НСтр("ru='Загрузка объектов внешней компоненты'");
			ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обработка"], СтатусСообщения.Внимание);
			СохранитьТаблицуЛогаВНастройкахПользователя();			
			Возврат Ложь;
		КонецПопытки;  	
		
		ПользовательСеанса = НастройкиОбработки["ПользовательФоновогоРежима"];
		Если Не ЗначениеЗаполнено(ПользовательСеанса) Тогда 		
			ТекстСообщения = "ru='На заполнено значение константы ""Пользователь для фонового режима""! Выполнение команд будет производиться от имени пустого пользователя!'";						 		
			ЗаписьЖурналаРегистрации(НСтр(ТекстСообщения), УровеньЖурналаРегистрации.Ошибка, , , НСтр("ru='Выполнение команд в фоновом режиме'"));
			ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обработка"], СтатусСообщения.Внимание);
			СохранитьТаблицуЛогаВНастройкахПользователя();		
			Возврат Ложь;
		КонецЕсли;
		
	#КонецЕсли

	КомпонентаЗагружена = Истина;
	
	Возврат КомпонентаЗагружена;

КонецФункции // ЗагрузитьКомпонентуAPPlus_OLD()

Функция ГенерацияФайлаНастроек(текНастройкиОбработки = Неопределено, текМобильныеУстройства = Неопределено) Экспорт
	
	ЕстьОшибки = Ложь;
	
	текНастройкиОбработки = ?(текНастройкиОбработки = Неопределено, НастройкиОбработки, текНастройкиОбработки);
	текМобильныеУстройства = ?(текМобильныеУстройства = Неопределено, ТабМобильныеУстройства, текМобильныеУстройства);
	
	Если ПустаяСтрока(текНастройкиОбработки["ПапкаАгентСОД"]) Тогда		
		ЕстьОшибки = Истина;
		ОповеститьОСобытии("ru='Не указано значение константы ""Папка обмена""!'", ТипыЛогов["Обработка"], СтатусСообщения.Внимание);
	Иначе		
		Если Не ПроверитьСуществованиеКаталога(текНастройкиОбработки["ПапкаАгентСОД"], Истина) Тогда					
			ЕстьОшибки = Истина;
			ОповеститьОСобытии("ru='Не существует каталога, указанного в константе ""Папка обмена""!'", ТипыЛогов["Обработка"], СтатусСообщения.Внимание);
		КонецЕсли;   	
	КонецЕсли;
	
	Если текНастройкиОбработки["ПортАгентСОД"] = 0 Тогда
		ЕстьОшибки = Истина;
		ОповеститьОСобытии("ru='Не указано значение порта " + Имена["АгентПлюсСОД"] + "'", ТипыЛогов["Обработка"], СтатусСообщения.Внимание);
	КонецЕсли;
		
	// Создаем XML-файл через обычный объект "Текст". Получаем более компактный код.	
	Текст = Новый ТекстовыйДокумент;
	Текст.ДобавитьСтроку("<?xml version=""1.0"" encoding=""UTF-16""?>");
	Текст.ДобавитьСтроку("<APlusServer VERSION=""2.5"">");
	Текст.ДобавитьСтроку("<ServerConfig PortExternal=""" + Строка(Формат(текНастройкиОбработки["ПортАгентСОД"], "ЧГ=0")) + """ />");
	Текст.ДобавитьСтроку("<!-- PortExternal - номер порта для запросов от мобильного устройства -->");
	Текст.ДобавитьСтроку("<!-- Образец описания настроек для мобильного устройства: -->");
	Текст.ДобавитьСтроку("<!-- PPC DEVICE_ID=""00000000-0000-0000-0000-000000000000"" PSEUDONIM=""Agent1"" DIRECTORY=""PPC1"" -->");
	
	КолПользователей = 0;
	
	создаватьПапкиНаДиске = Ложь;
	кнопки = Новый СписокЗначений;
	кнопки.Добавить(0, НСтр("ru='Да, для всех'"));
	кнопки.Добавить(1, НСтр("ru='Да'"));
	кнопки.Добавить(2, НСтр("ru='Нет'"));
	
	ПутьОбмена = ПолучитьПутьОбмена();
	Если ПутьОбмена = Неопределено Тогда
		ЕстьОшибки = Истина;
	Иначе
		Для Каждого СтрУстройство Из текМобильныеУстройства Цикл
			
			Псевдоним = СтрУстройство["Псевдоним"];
			ПапкаУстройстваСОД = СтрУстройство["ПапкаСОД"];
			ИдМУ = СтрУстройство["ИдентификаторМУ"];
			
			Если ПустаяСтрока(ПапкаУстройстваСОД) Тогда
				ОповеститьОСобытии("ru='Не задана папка обмена через службу обмена данными """ + Имена["АгентПлюсСОД"] + """ " + Символы.ПС + "(мобильное устройство: " + Псевдоним + ", идентификатор: " + ИдМУ  + ")'", ТипыЛогов["Обработка"], СтатусСообщения.Внимание);
				Продолжить;
			КонецЕсли;		
			
			КаталогНаДиске = Новый Файл(ПутьОбмена + ПапкаУстройстваСОД);
			Если Не КаталогНаДиске.Существует() Тогда
				Если Не создаватьПапкиНаДиске Тогда
			        Ответ = Вопрос(НСтр("ru='Каталог обмена """ + ПапкаУстройстваСОД + """ для службы обмена данными """ + Имена["АгентПлюсСОД"] + """ не существует " + Символы.ПС + " (мобильное устройство: " + Псевдоним + ", идентификатор: " + ИдМУ  + "). Создать?'"), 
										кнопки, 60, 1);
					Если Ответ = 0 Тогда
						создаватьПапкиНаДиске = Истина;
			            СоздатьКаталог(ПутьОбмена + ПапкаУстройстваСОД);					
					ИначеЕсли Ответ = 1 Тогда
						СоздатьКаталог(ПутьОбмена + ПапкаУстройстваСОД);
					Иначе
						ОповеститьОСобытии("ru='При создании файла обмена для службы обмена данными """ + Имена["АгентПлюсСОД"] + """" + Символы.ПС + " пропущено мобильное устройство: " + Псевдоним + ", идентификатор: " + ИдМУ  + "'", ТипыЛогов["Обработка"], СтатусСообщения.Внимание);
						Продолжить;
					КонецЕсли;
				Иначе
					СоздатьКаталог(ПутьОбмена + ПапкаУстройстваСОД);
				КонецЕсли;
		    КонецЕсли;
			
			Текст.ДобавитьСтроку("<PPC DEVICE_ID=""" + ИдМУ + """ PSEUDONIM=""" + Лев(Псевдоним, 60) + """ DIRECTORY=""" + ПапкаУстройстваСОД + """ />");
			
			КолПользователей = КолПользователей + 1;		
					
		КонецЦикла;
			
		Если КолПользователей <> 0 И (Не ЕстьОшибки) Тогда
			Текст.ДобавитьСтроку("</APlusServer>");
			ИмяФайла = НастройкиОбработки["ПапкаАгентСОД"] + "\config.xml";
			Текст.Записать(ИмяФайла, КодировкаТекста.UTF16);								
			ОповеститьОСобытии("ru='Создан файл настроек службы обмена данными """ + Имена["АгентПлюсСОД"] + """'", ТипыЛогов["Обработка"], СтатусСообщения.Информация);
			ТекстВопроса = "ru='Необходимо перезапустить службу обмена данными """ + Имена["АгентПлюсСОД"] + """, если она была до этого запущена! Перезапустить сейчас?'"; 
			//Новые настройки вступят в силу после перезапуска службы """ + Имена["АгентПлюсСОД"] + """'"
			Если Вопрос(НСтр(ТекстВопроса), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда		
				Попытка
					КомандаСистемы("net stop ""Agent Plus Service""");
					КомандаСистемы("net start ""Agent Plus Service""");
					ОповеститьОСобытии("ru='Служба обмена данными """ + Имена["АгентПлюсСОД"] + """ была успешно перезапущена'", ТипыЛогов["Обработка"], СтатусСообщения.Информация);
				Исключение
					ОповеститьОСобытии("ru='Не удалось выполнить перезапуск службы!" + Символы.ПС + "Причина: " + СтрЗаменить(ОписаниеОшибки(), "'", """") + "'", ТипыЛогов["Обработка"], СтатусСообщения.Внимание);
				КонецПопытки;								
			КонецЕсли;	
		Иначе			
			ОповеститьОСобытии("ru='Ни одно устройство не добавлено в файл настроек службы обмена данными """ + НСтр(Имена["АгентПлюсСОД"]) + """!'", ТипыЛогов["Обработка"], СтатусСообщения.Внимание);	
			ОповеститьОСобытии("ru='Файл настроек службы обмена данными """ + Имена["АгентПлюсСОД"] + """ не создан!'", ТипыЛогов["Обработка"], СтатусСообщения.Важное);
			ЕстьОшибки = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЕстьОшибки;

КонецФункции //ГенерацияФайлаНастроек

Процедура УдалитьНастройкиДляНеНайденныхПользователей(пТабАгентыМУ, пТабНастройкиАгентов, пДопНастройкиАгентов)
	
	// удаление несуществующих в 1С пользователей
	массивСтрок = Новый Массив();
	Для Каждого текСтрока Из пТабНастройкиАгентов Цикл
		ссылкаПользователь = текСтрока["Пользователь"];
		Если ссылкаПользователь.ПолучитьОбъект() = Неопределено Тогда
			массивСтрок.Добавить(текСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого текЭл Из массивСтрок Цикл
		
		ИдАгента = текЭл["УникальныйИдентификатор"];
		
		массивСтрокАгентыМУ = Новый Массив();
		Отбор = Новый Структура;
		Отбор.Вставить("УникальныйИдентификаторАгента", ИдАгента);
		массивСтрокАгентыМУ = пТабАгентыМУ.НайтиСтроки(Отбор);
						
		Для Каждого текЭлМас Из массивСтрокАгентыМУ Цикл
			пТабАгентыМУ.Удалить(текЭлМас);
		КонецЦикла;
		
		пДопНастройкиАгентов[ИдАгента] = Неопределено;		
		
		пТабНастройкиАгентов.Удалить(текЭл);
		
	КонецЦикла;
	
	// удаление несуществующих агентов (несуществующих в ТабНастройкиАгентов) из ТабАгентыМУ
	массивУдаляемыхИдАгента = Новый Массив();
	проверенныеИд = Новый Соответствие;
	Для Каждого текСтрока Из пТабАгентыМУ Цикл
		идАгента = текСтрока["УникальныйИдентификаторАгента"];
		Если проверенныеИд[идАгента] <> Истина Тогда
			строкаТабНастройкиАгента = пТабНастройкиАгентов.Найти(идАгента, "УникальныйИдентификатор");
			Если строкаТабНастройкиАгента = Неопределено Тогда
				 массивУдаляемыхИдАгента.Добавить(идАгента);
				 проверенныеИд[идАгента] = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого текЭл Из массивУдаляемыхИдАгента Цикл
			
		массивСтрокАгентыМУ = Новый Массив();
		Отбор = Новый Структура;
		Отбор.Вставить("УникальныйИдентификаторАгента", ИдАгента);
		массивСтрокАгентыМУ = пТабАгентыМУ.НайтиСтроки(Отбор);
						
		Для Каждого текЭлМас Из массивСтрокАгентыМУ Цикл
			пТабАгентыМУ.Удалить(текЭлМас);
		КонецЦикла;
		
	КонецЦикла;	
	
КонецПроцедуры

Функция ПроверитьПравильностьПапкиОбменаАгентПлюсСОД(СтрМУ, папкаОбмена)
	
	имяНастройки = "ПапкаСОД";
	
	ЕстьОшибки = Ложь;
	Если ПустаяСтрока(папкаОбмена) Тогда
		ОповеститьОСобытии("ru='Не указана папка обмена для службы обмена данными """ + Имена["АгентПлюсСОД"] + """ (мобильное устройство: " + СтрМУ["Псевдоним"] + ", идентификатор: " + СтрМУ["ИдентификаторМУ"]  + ")'", ТипыЛогов["Обработка"], СтатусСообщения.Внимание);
		Возврат Истина;
	КонецЕсли;	
	
	сПапкаПользователя = папкаОбмена; 
	i = 1;
	колСимволов = СтрДлина(стрДопустимыеСимволы);
	Пока i <= колСимволов Цикл				
		текСимвол = Сред(стрДопустимыеСимволы, i, 1);
		сПапкаПользователя = СтрЗаменить(сПапкаПользователя, текСимвол, "");		//удаляем из строки допустимые символы
		i = i + 1;
	КонецЦикла;	
	
	Если Не ПустаяСтрока(сПапкаПользователя) Тогда
		описаниеПоля = ТаблЗначКонстанты.Найти(имяНастройки, "Имя")["Представление"];
		ОповеститьОСобытии("ru='Значение в поле """ + описаниеПоля + """ содержит недопустимые символы: """ + сПапкаПользователя + """ (мобильное устройство: " + СтрМУ["Псевдоним"] + ", идентификатор: " + СтрМУ["ИдентификаторМУ"]  + ")'", ТипыЛогов["Обработка"], СтатусСообщения.Внимание);
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

Функция ПроверитьНастройкиМобУУстройства(ТаблЗнач, СтрМУ) Экспорт
	
	ЕстьОшибки = Ложь;
	
	имяНастройки = "ИдентификаторМУ";
	СтрМУ[имяНастройки] = СокрЛП(СтрМУ[имяНастройки]);
	значение = СтрМУ[имяНастройки];	
	
	Попытка
		guid = Новый УникальныйИдентификатор(НРег(значение));
	Исключение
		описаниеПоля = ТаблЗначКонстанты.Найти(имяНастройки, "Имя")["Представление"];
		ОповеститьОСобытии("ru='Указано недопустимое значение """ + значение + """ в поле """ +  описаниеПоля + """. (Мобильное устройство: " + СтрМУ["Псевдоним"] + ", идентификатор: " + СтрМУ["ИдентификаторМУ"]  + ")'", ТипыЛогов["Обработка"], СтатусСообщения.Внимание);
		ЕстьОшибки = Истина;				
	КонецПопытки;
	
	Если значение = стрПустойИдентификатор Тогда
		описаниеПоля = ТаблЗначКонстанты.Найти(имяНастройки, "Имя")["Представление"];
		ОповеститьОСобытии("ru='Указано недопустимое значение """ + значение + """ в поле """ + описаниеПоля + """. (Мобильное устройство: " + СтрМУ["Псевдоним"] + ", идентификатор: " + СтрМУ["ИдентификаторМУ"]  + ")'", ТипыЛогов["Обработка"], СтатусСообщения.Внимание);
		ЕстьОшибки = Истина;	
	КонецЕсли;
	СтрМУ[имяНастройки] = НРег(СтрМУ[имяНастройки]);		
	
	Отбор = Новый Структура();
	Отбор.Вставить(имяНастройки, значение);
	Строки = ТаблЗнач.НайтиСтроки(Отбор);
	Если Строки.Количество() > 1 Тогда
		описаниеПоля = ТаблЗначКонстанты.Найти(имяНастройки, "Имя")["Представление"];
		ОповеститьОСобытии("ru='Значение """ + значение + """ поля """ + описаниеПоля + """ уже задано для другого устройства: " + Строки[0]["Псевдоним"] + " (" + Строки[0]["ИдентификаторМУ"] + "). (Мобильное устройство: " + СтрМУ["Псевдоним"] + ", идентификатор: " + СтрМУ["ИдентификаторМУ"]  + ")'", ТипыЛогов["Обработка"], СтатусСообщения.Внимание);
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	// Проверка наименования устройства
	имяНастройки = "Псевдоним";
	СтрМУ[имяНастройки] = СокрЛП(СтрМУ[имяНастройки]);
	значение = СтрМУ[имяНастройки];	
	Если Не ЗначениеЗаполнено(значение) Тогда
		описаниеПоля = ТаблЗначКонстанты.Найти(имяНастройки, "Имя")["Представление"];
		ОповеститьОСобытии("ru='Не заполнено поле """ + описаниеПоля + """" + ". (Мобильное устройство: " + СтрМУ["Псевдоним"] + ", идентификатор: " + СтрМУ["ИдентификаторМУ"]  + ")'", ТипыЛогов["Обработка"], СтатусСообщения.Внимание);
		ЕстьОшибки = Истина;
	КонецЕсли;	
	
	Отбор = Новый Структура();
	Отбор.Вставить(имяНастройки, значение);
	Строки = ТаблЗнач.НайтиСтроки(Отбор);
	Если Строки.Количество() > 1 Тогда
		описаниеПоля = ТаблЗначКонстанты.Найти(имяНастройки, "Имя")["Представление"];
		ОповеститьОСобытии("ru='Значение """ + значение + """ поля """ + описаниеПоля + """ уже задано для другого устройства: " + Строки[0]["Псевдоним"] + " (" + Строки[0]["ИдентификаторМУ"] + "). (Мобильное устройство: " + СтрМУ["Псевдоним"] + ", идентификатор: " + СтрМУ["ИдентификаторМУ"]  + ")'", ТипыЛогов["Обработка"], СтатусСообщения.Внимание);
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	// Проверка папки пользователя
	Если СпособОбмена = 1 Тогда		
				
		имяНастройки = "ПапкаСОД";
		СтрМУ[имяНастройки] = СокрЛП(СтрМУ[имяНастройки]);
		значение = СтрМУ[имяНастройки];
		Если ПроверитьПравильностьПапкиОбменаАгентПлюсСОД(СтрМУ, значение) Тогда
			ЕстьОшибки = Истина;
		Иначе		
					
			// Имя папки пользователя может содежать только символы из переменной стрДопустимыеСимволы					
			Отбор = Новый Структура();
			Отбор.Вставить(имяНастройки, значение);
			Строки = ТаблЗнач.НайтиСтроки(Отбор);
			Если Строки.Количество() > 1 Тогда
				описаниеПоля = ТаблЗначКонстанты.Найти(имяНастройки, "Имя")["Представление"];
				ОповеститьОСобытии("ru='Значение поля """ + описаниеПоля + """ уже задано для другого устройства: " + Строки[0]["Псевдоним"] + " (" + Строки[0]["ИдентификаторМУ"] + "). (Мобильное устройство: " + СтрМУ["Псевдоним"] + ", идентификатор: " + СтрМУ["ИдентификаторМУ"]  + ")'", ТипыЛогов["Обработка"], СтатусСообщения.Внимание);
				ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
					
	Возврат ЕстьОшибки;		
КонецФункции

Функция ПроверитьНастройкиМобУстройств(ТаблЗнач) Экспорт
	
	ОповеститьОСобытии("ru='Проверка настроек устройств ...'", ТипыЛогов["Обработка"], СтатусСообщения.БезСтатуса);
	
	ЕстьОшибки = Ложь;

	Для Каждого СтрМУ Из ТаблЗнач Цикл
		
		ЕстьОшибки = ЕстьОшибки Или ПроверитьНастройкиМобУУстройства(ТаблЗнач, СтрМУ);
				
	КонецЦикла;
	
	Если Не ЕстьОшибки Тогда
		ОповеститьОСобытии("ru='Проверка настроек устройств успешно завершена'", ТипыЛогов["Обработка"], СтатусСообщения.Обычное);
	КонецЕсли;
	
	Возврат ЕстьОшибки;	
КонецФункции

Функция ПроверитьНастройкиАгента(ТаблЗнач, СтрНастроек) Экспорт
	
	ЕстьОшибки = Ложь;
	
	списЭлПроверяемыхНаЗаполенность = Новый Массив;
	списЭлПроверяемыхНаЗаполенность.Добавить("ФизЛицо");
	списЭлПроверяемыхНаЗаполенность.Добавить("ВидимостьЗакладокЖурнала");
	
	//vd_180808
	Если СтрНастроек.ТорговляСКолес Тогда
		списЭлПроверяемыхНаЗаполенность.Добавить("МобильныйСклад");
	КонецЕсли;
	
	Для Каждого текИмяНастройки Из списЭлПроверяемыхНаЗаполенность Цикл
		
		значение = СтрНастроек[текИмяНастройки];	
		Если Не ЗначениеЗаполнено(значение) Тогда		
			описаниеПоля = ТаблЗначКонстанты.Найти(текИмяНастройки, "Имя")["Представление"];
			
			//vd_180808
			//ОповеститьОСобытии("ru='Не заполнено поле """ + описаниеПоля + """'", ТипыЛогов["Обработка"], СтатусСообщения.Внимание);
			ОповеститьОСобытии("ru='Не заполнено поле """ + описаниеПоля +  "" + ". Пользователь: " + СтрНастроек.Пользователь + "'", ТипыЛогов["Обработка"], СтатусСообщения.Внимание);
			
			ЕстьОшибки = Истина;	
		КонецЕсли;

	КонецЦикла;
	
	//Проверка на уникальность "Пользователя"
	имяНастройки = "Пользователь";
	значение = СтрНастроек[имяНастройки];	
	Отбор = Новый Структура();
	Отбор.Вставить(имяНастройки, значение);
	мСтроки = ТаблЗнач.НайтиСтроки(Отбор);
	Если мСтроки.Количество() > 1 Тогда
		ОповеститьОСобытии("ru='Значение """ + значение + """ поля """ + имяНастройки + """ уже задано для другого агента (идентификатор строки: " + СтрНастроек["УникальныйИдентификатор"]  + ")'", ТипыЛогов["Обработка"], СтатусСообщения.Внимание);
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	//vd_180808 Проверка на уникальность "Мобильный склад"
	Если СтрНастроек.ТорговляСКолес Тогда
		имяНастройки = "МобильныйСклад";
		значение = СтрНастроек[имяНастройки];	
		Отбор = Новый Структура();
		Отбор.Вставить(имяНастройки, значение);
		Отбор.Вставить("ТорговляСКолес", Истина);
		мСтроки = ТаблЗнач.НайтиСтроки(Отбор);
		Если мСтроки.Количество() > 1 Тогда
			стрАгентыКотрыеИспользуютНастройку = "";
			Для каждого Элемент Из мСтроки Цикл
				Если НЕ Элемент.Пользователь = СтрНастроек.Пользователь Тогда
					стрАгентыКотрыеИспользуютНастройку =  стрАгентыКотрыеИспользуютНастройку + ?(стрАгентыКотрыеИспользуютНастройку = "", "", ", ") + Элемент.Пользователь;
				КонецЕсли;
			КонецЦикла;
			ОповеститьОСобытии("ru='Значение """ + значение + """ поля """ + имяНастройки + """ Для пользователя: " + СтрНастроек.Пользователь + " уже задано для других пользователей: " + стрАгентыКотрыеИспользуютНастройку + ". Идентификатор строки: " + СтрНастроек["УникальныйИдентификатор"]  + ")'", ТипыЛогов["Обработка"], СтатусСообщения.Внимание);
			ЕстьОшибки = Истина;
		КонецЕсли;
	КонецЕсли;	

	Возврат ЕстьОшибки;	
КонецФункции

Функция ПроверитьНастройкиАгентов(пТабАгенты, пДопНастройкиАгентов, пСпособОбмена = Неопределено) Экспорт
	
	ОповеститьОСобытии("ru='Проверка настроек агентов ...'", ТипыЛогов["Обработка"], СтатусСообщения.БезСтатуса);
	
	ЕстьОшибки = Ложь;
	пСпособОбмена = ?(пСпособОбмена = Неопределено, СпособОбмена, пСпособОбмена);

	Для Каждого строкаАгент Из пТабАгенты Цикл
		
		ЕстьОшибки = ЕстьОшибки Или ПроверитьНастройкиАгента(пТабАгенты, строкаАгент);
		текДопНастройкиАгента = пДопНастройкиАгентов[строкаАгент["УникальныйИдентификатор"]];
		ИсправитьДопНастройкиАгента(текДопНастройкиАгента);
				
	КонецЦикла;
	
	Если Не ЕстьОшибки Тогда
		ОповеститьОСобытии("ru='Проверка настроек агентов успешно завершена'", ТипыЛогов["Обработка"], СтатусСообщения.Обычное);
	КонецЕсли;

	Возврат ЕстьОшибки;	
КонецФункции

// sk_190116 Функция не используется
// ПроверитьНастройкиАгентСервера()
//
Функция ПроверитьНастройкиАгентСервера_OLD(ПапкаОбмена, АдресСервера) Экспорт
	
	резАдресСервера = "";
	ЕстьОшибки = Ложь;
	
	Если ПустаяСтрока(АдресСервера) Тогда
		ЕстьОшибки = Истина;
		ОповеститьОСобытии("ru='Не указано значение поля ""Адрес сервера""!'", ТипыЛогов["Обработка"], СтатусСообщения.Внимание);
		Перейти ~Folder;
	КонецЕсли;
	
	текАдресСервера = СокрЛП(АдресСервера);
	
	Поз = 0;
	Для сч = 1 По 4 Цикл		
		
		Если сч <> 4  Тогда
			Поз = Найти(текАдресСервера, ".");
		Иначе
			Поз = СтрДлина(текАдресСервера) + 1;
		КонецЕсли;
		
		Если Поз = 0 И сч <> 4 Тогда
			ЕстьОшибки = Истина;
			ОповеститьОСобытии("ru='Недопустимое значение поля ""Адрес сервера""!'", ТипыЛогов["Обработка"], СтатусСообщения.Внимание);			
			Перейти ~Folder;
		Иначе
			стр = Лев(текАдресСервера, Поз - 1);
			стр = СокрЛП(стр);
			Попытка
				текЧисло = Число(стр);
				Если текЧисло < 0 Или текЧисло > 255 Тогда
					ЕстьОшибки = Истина;
					ОповеститьОСобытии("ru='Недопустимое значение поля ""Адрес сервера""!'", ТипыЛогов["Обработка"], СтатусСообщения.Внимание);
					Перейти ~Folder;
				КонецЕсли;
				резАдресСервера = резАдресСервера + Строка(текЧисло) + ".";
			Исключение
				ЕстьОшибки = Истина;
				ОповеститьОСобытии("ru='Недопустимое значение поля ""Адрес сервера""!'", ТипыЛогов["Обработка"], СтатусСообщения.Внимание);					
				Перейти ~Folder;
			КонецПопытки;
			текАдресСервера = Прав(текАдресСервера, СтрДлина(текАдресСервера) - Поз);
		КонецЕсли;
	КонецЦикла;
	
	резАдресСервера = Лев(резАдресСервера, СтрДлина(резАдресСервера) - 1);
	Если Не ПустаяСтрока(текАдресСервера) Тогда
		ЕстьОшибки = Истина;
		ОповеститьОСобытии("ru='Недопустимое значение поля ""Адрес сервера""!'", ТипыЛогов["Обработка"], СтатусСообщения.Внимание);
		Перейти ~Folder;
	КонецЕсли;
	
	~Folder:
	
	Если ПустаяСтрока(ПапкаОбмена) Тогда
		ЕстьОшибки = Истина;
		ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Не указано значение константы ""Папка обмена""!'"), , , СтатусСообщения.Внимание);
		Перейти ~Error;
	КонецЕсли; 	
	
	Если Прав(ПапкаОбмена, 1) = "\" Тогда
	    ПапкаОбмена = Лев(ПапкаОбмена, СтрДлина(ПапкаОбмена) - 1);
	КонецЕсли;
	
	КаталогОбмена = Новый Файл(ПапкаОбмена);
	Если НЕ КаталогОбмена.Существует() Тогда
		ЕстьОшибки = Истина;
		ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru='Не существует каталога, указанного в константе ""Папка обмена""!'"), , , СтатусСообщения.Внимание);
		Перейти ~Error;
	КонецЕсли;
	
	~Error:
	
	Если Не ЕстьОшибки Тогда
		АдресСервера = резАдресСервера;
	КонецЕсли;
	
	Возврат ЕстьОшибки;	
	
КонецФункции // ПроверитьНастройкиАгентСервера_OLD()

Процедура ЗаписатьНастройку(имяНастройки, значение) Экспорт
	
	менеджерЗаписи = РегистрыСведений.СохраненныеНастройки.СоздатьМенеджерЗаписи();
	
	менеджерЗаписи.Пользователь = ПользовательАгентПлюс;
	менеджерЗаписи.ИмяОбъекта = ЭтотОбъект;
	менеджерЗаписи.НаименованиеНастройки = имяНастройки;
	
	менеджерЗаписи.Прочитать();
	
	Если Не менеджерЗаписи.Выбран() Тогда
		менеджерЗаписи.Пользователь = ПользовательАгентПлюс;
		менеджерЗаписи.ИмяОбъекта = ЭтотОбъект;
		менеджерЗаписи.НаименованиеНастройки = имяНастройки;
	КонецЕсли;
		
	хранилищеНастроек = Новый ХранилищеЗначения(значение);
	
	менеджерЗаписи.СохраненнаяНастройка = хранилищеНастроек;	
    менеджерЗаписи.Записать();
	
	представлениеНастройки = ?(Имена[имяНастройки] <> Неопределено, Имена[имяНастройки], ""); 
	ОповеститьОСобытии("ru='""" + представлениеНастройки + """ были успешно сохранены'", ТипыЛогов["Обработка"], СтатусСообщения.Информация);
	
КонецПроцедуры

Функция ЗаписатьНастройкиОбработки(текНастройкиОбработки = Неопределено) Экспорт
	
	ЕстьОшибки = Ложь;
	генерироватьФайлАгентСОД = Ложь;
	
	текНастройкиОбработки = ?(текНастройкиОбработки = Неопределено, НастройкиОбработки, текНастройкиОбработки);
	
	Если СпособОбмена = 1 Тогда		
		генерироватьФайлАгентСОД = (текНастройкиОбработки["ПапкаАгентСОД"] <> НастройкиОбработки["ПапкаАгентСОД"])
								ИЛИ (текНастройкиОбработки["ПортАгентСОД"] <> НастройкиОбработки["ПортАгентСОД"]);				
	КонецЕсли;	
							
	НастройкиОбработки = текНастройкиОбработки;										//НастройкиОбработки должны быть присвоены до генерации файла Агент Плюс СОД
	Если  генерироватьФайлАгентСОД Тогда
		Если ГенерацияФайлаНастроек(текНастройкиОбработки, Неопределено) Тогда	
			ЕстьОшибки = Истина;
			Возврат ЕстьОшибки;	
		КонецЕсли;
	КонецЕсли;
	
	Если текНастройкиОбработки["ОчищатьДокументыПередЗагрузкой"] Тогда
		Если ВидОчисткиДокументов = 2 Тогда											// Не удалять документы за последние <...> дней
			Если текНастройкиОбработки["ИнтервалПодтверждений"] > текНастройкиОбработки["ИнтервалСохранностиДокументов"] Тогда
				ТекстСообщения = "ru='Поле """ + ТаблЗначКонстанты.Найти("ИнтервалПодтверждений", "Имя")["Представление"] + " превышает значение поля """ + ТаблЗначКонстанты.Найти("ИнтервалСохранностиДокументов", "Имя")["Представление"] + """'";
				ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обработка"], СтатусСообщения.Внимание);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПодключениеFTP = Неопределено;
	ЗаписатьНастройку("НастройкиОбработки", НастройкиОбработки);	
	
	ИнициализироватьРеквизитыОбработки();
 	
	Возврат ЕстьОшибки;
КонецФункции

Функция ЗаписатьНастройкиПользователей(текМобильныеУстройства = Неопределено, текПользователиМУ = Неопределено, текНастройкиПользователей = Неопределено, текДопНастройкиПользователей = Неопределено) Экспорт
	Перем уникальныйИдентификаторАгента, уникальныйИдентификаторМУ;
	
	ЕстьОшибки = Ложь;
	генерироватьФайлАгентСОД = Ложь;
	
	текМобильныеУстройства = ?(текМобильныеУстройства = Неопределено, ТабМобильныеУстройства.Скопировать(), текМобильныеУстройства);
	текПользователиМУ = ?(текПользователиМУ = Неопределено, ТабАгентыМУ.Скопировать(), текПользователиМУ);
	текНастройкиПользователей = ?(текНастройкиПользователей = Неопределено, ТабНастройкиАгентов.Скопировать(), текНастройкиПользователей);
	текДопНастройкиПользователей = ?(текДопНастройкиПользователей = Неопределено, ДопНастройкиАгентов, текДопНастройкиПользователей);
	 
	Если ПроверитьНастройкиМобУстройств(текМобильныеУстройства) Тогда
		ЕстьОшибки = Истина;
		//ОповеститьОСобытии("ru='Настройки обмена не сохранены!'", ТипыЛогов["Обработка"], СтатусСообщения.Важное);
	КонецЕсли;	 	 
	
	Если ПроверитьНастройкиАгентов(текНастройкиПользователей, текДопНастройкиПользователей) Тогда
		ЕстьОшибки = Истина;
		//ОповеститьОСобытии("ru='Настройки агентов не сохранены!'", ТипыЛогов["Обработка"], СтатусСообщения.Важное);
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		ОповеститьОСобытии("ru='Настройки модуля обмена не сохранены!'", ТипыЛогов["Обработка"], СтатусСообщения.Важное);
		Возврат ЕстьОшибки;
	КонецЕсли;
	
	// изменение имени и кода пользователя в сооветствии с ассоциированным физ. лицом
	Для Каждого текЭл Из текНастройкиПользователей Цикл
		Если текЭл["Пользователь"].Наименование <> текЭл["ФизЛицо"].Наименование Тогда
			объектПользователь = текЭл["Пользователь"].ПолучитьОбъект();
			объектПользователь.Код = Имена["ПрефиксКодаПользователя"] + текЭл["ФизЛицо"].Наименование;
			объектПользователь.Наименование = текЭл["ФизЛицо"].Наименование;
			ВыполнитьОперациюДляОбъекта(объектПользователь, "запись");
		КонецЕсли;
	КонецЦикла;
	//-------
	
	Если СпособОбмена = 1 Тогда
		
		генерироватьФайлАгентСОД = Ложь;
		
		колСтрок = ТабМобильныеУстройства.Количество();
		Если колСтрок <> текМобильныеУстройства.Количество() Тогда
			генерироватьФайлАгентСОД = Истина;
		Иначе
			колСтрок = колСтрок - 1;
			ТабМобильныеУстройства.Сортировать("ИдентификаторМУ Возр");
			текМобильныеУстройства.Сортировать("ИдентификаторМУ Возр");
			Для сч = 0 По колСтрок Цикл
				Если Не генерироватьФайлАгентСОД Тогда
					генерироватьФайлАгентСОД = (ТабМобильныеУстройства[сч]["ИдентификаторМУ"] <> текМобильныеУстройства[сч]["ИдентификаторМУ"])
												ИЛИ (ТабМобильныеУстройства[сч]["Псевдоним"] <> текМобильныеУстройства[сч]["Псевдоним"]) 
												ИЛИ (ТабМобильныеУстройства[сч]["ПапкаСОД"] <> текМобильныеУстройства[сч]["ПапкаСОД"]) 
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;		
	
	Если ЗначениеЗаполнено(ВыбАгент) Тогда		
		текстОшибки = "";
		текМУ = ПолучитьНастройкиМобильногоУстройстваПоАгенту(ВыбАгент, текстОшибки, ВыбМобильноеУстройство, текНастройкиПользователей, текПользователиМУ, текМобильныеУстройства);				
		текАгент = ТабНастройкиАгентов.Найти(ВыбАгент, "Пользователь");
		Если текАгент <> Неопределено Тогда
			Если текМУ <> Неопределено Тогда
				Если ЗначениеЗаполнено(текстОшибки) И СпособОбмена = 1 Тогда
					ОповеститьОСобытии(текстОшибки, ТипыЛогов["Обработка"], СтатусСообщения.Внимание);
				КонецЕсли;			
				уникальныйИдентификаторАгента = текАгент["УникальныйИдентификатор"];
				уникальныйИдентификаторМУ = текМУ["УникальныйИдентификатор"];
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//Настройки мобильных устройств должны быть присвоены до генерации файла Агент Плюс СОД
	ТабМобильныеУстройства = текМобильныеУстройства;
	Если  генерироватьФайлАгентСОД Тогда
		Если ГенерацияФайлаНастроек(Неопределено, текМобильныеУстройства) Тогда	
			ЕстьОшибки = Истина;
			Возврат ЕстьОшибки;	
		КонецЕсли;
	КонецЕсли;	
	
	ТабАгентыМУ = текПользователиМУ;	
	
	УдалитьНастройкиДляНеНайденныхПользователей(текПользователиМУ, текНастройкиПользователей, текДопНастройкиПользователей);
	
	ТабНастройкиАгентов = текНастройкиПользователей;	
	ДопНастройкиАгентов = текДопНастройкиПользователей;

	настройки = Новый Соответствие();
	настройки.Вставить("НастройкиАгентов", ТабНастройкиАгентов);
	настройки.Вставить("МобУстройства", ТабМобильныеУстройства);
	настройки.Вставить("АгентыМУ", ТабАгентыМУ);
	настройки.Вставить("НастройкиОбработки", НастройкиОбработки);
	настройки.Вставить("ДопНастройкиАгентов", ДопНастройкиАгентов);	
	
	ЗаписатьНастройку("НастройкиАгентов", настройки);		
	
	ИзменитьВыбранногоАгента(уникальныйИдентификаторАгента, уникальныйИдентификаторМУ);
	
	Возврат ЕстьОшибки;
КонецФункции

Функция СоздатьСписокБазПоУмолчанию()Экспорт
	
	таблЗнач = Новый ТаблицаЗначений;	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	ДопустимыеТипы = Новый ОписаниеТипов(МассивТипов);
	таблЗнач.Колонки.Добавить("ИмяБД", ДопустимыеТипы);
	
	Возврат таблЗнач;
КонецФункции

Функция СоздатьДопНастройкиАгентаПоУмолчанию() Экспорт
	
	новаяДопНастройка = Новый Соответствие;	
	
	текСписокБаз = СоздатьСписокБазПоУмолчанию();
	новаяДопНастройка.Вставить("СписокБД", текСписокБаз);
		
	Возврат новаяДопНастройка;	
	
КонецФункции                           

// sk_190116 Функция не используется
//  СоздатьДопНастройкиАгентовПоУмолчанию()
//
Функция СоздатьДопНастройкиАгентовПоУмолчанию_OLD() Экспорт
	
	новаяДопНастройка = Новый Соответствие;	
		
	Возврат новаяДопНастройка;
	
КонецФункции  // СоздатьДопНастройкиАгентовПоУмолчанию_OLD()

Функция СкопироватьОбъект(объект) Экспорт
	
	Если ТипЗнч(объект) = Тип("Соответствие") Тогда
        Рез = Новый Соответствие;
        Для Каждого Эл Из Объект Цикл
            Рез.Вставить(Эл.Ключ, СкопироватьОбъект(Эл.Значение));
        КонецЦикла;
	 ИначеЕсли ТипЗнч(объект) = Тип("Структура") Тогда
        Рез = Новый Структура();
        Для Каждого Эл Из Объект Цикл
            Рез.Вставить(Эл.Ключ, СкопироватьОбъект(Эл.Значение));
        КонецЦикла;
    ИначеЕсли ТипЗнч(Объект) = Тип("ТаблицаЗначений") Тогда
        Возврат Объект.Скопировать();
    ИначеЕсли ТипЗнч(Объект) = Тип("СписокЗначений") Тогда
        Рез = Новый СписокЗначений();
        Для Каждого Эл Из Объект Цикл
            Рез.Добавить(СкопироватьОбъект(Эл.Значение), Эл.Представление);
        КонецЦикла;
    Иначе
        Возврат Объект;
    КонецЕсли;
		
	Возврат Рез;	
КонецФункции

Функция ПолучитьГруппуАгентПлюс() Экспорт
	
	группаАгент = Справочники.Пользователи.НайтиПоКоду(Имена["ГруппаАгентПлюс"]);
	Если Не ЗначениеЗаполнено(группаАгент) Тогда
		группаАгент = Справочники.Пользователи.СоздатьГруппу();
		группаАгент.Код = Имена["ГруппаАгентПлюс"];
		группаАгент.Наименование = Имена["ГруппаАгентПлюс"];
		группаАгент.Записать();
	КонецЕсли;
	
	Если Не группаАгент.ЭтоГруппа Тогда
		группаАгент = Справочники.Пользователи.СоздатьГруппу();
		группаАгент.Код = Имена["ГруппаАгентПлюс"];
		группаАгент.Наименование = Имена["ГруппаАгентПлюс"];
		группаАгент.Записать();
	КонецЕсли;
	
	Возврат группаАгент.Ссылка;
КонецФункции

Функция ПолучитьЭлементГруппыПользователейАгентПлюс() Экспорт
	
	группаАгент = Справочники.ГруппыПользователей.НайтиПоНаименованию(Имена["ГруппаАгентПлюс"]);
	Если Не ЗначениеЗаполнено(группаАгент) Тогда
		группаАгент = Справочники.ГруппыПользователей.СоздатьЭлемент();
		группаАгент.Наименование = Имена["ГруппаАгентПлюс"];
		группаАгент.Записать();
	КонецЕсли;
	
	Возврат группаАгент.Ссылка;
КонецФункции

Функция ПолучитьГруппуСобытия(имяГруппы) Экспорт
	
	ссылкаГруппаПланирование = Справочники.ГруппыСобытий.ПолучитьСсылку(Имена["ИдентификаторГруппаСобытия" + имяГруппы]);
	
	ОбъектГруппаПланирование = ссылкаГруппаПланирование.ПолучитьОбъект();
	
	Если ОбъектГруппаПланирование = Неопределено Тогда
		ОбъектГруппаПланирование = Справочники.ГруппыСобытий.СоздатьЭлемент();
		ОбъектГруппаПланирование.УстановитьСсылкуНового(ссылкаГруппаПланирование);
        ОбъектГруппаПланирование.Наименование = Имена["ГруппаСобытия" + имяГруппы];
		ОбъектГруппаПланирование.Записать();
        Попытка
			ОбъектГруппаПланирование.Записать();
		Исключение
			ОповеститьОСобытии("ru='" + СтрЗаменить(ОписаниеОшибки(), "'", """") + "'", ТипыЛогов["Обработка"], СтатусСообщения.Внимание);
			Возврат Неопределено;
		КонецПопытки;
		ОповеститьОСобытии("ru='Добавлен элемент """ + ОбъектГруппаПланирование.Наименование + """ (справочник """ + ОбъектГруппаПланирование.Метаданные().Представление() + """)'", ТипыЛогов["Обработка"], , , ОбъектГруппаПланирование);
	КонецЕсли;

	Возврат ОбъектГруппаПланирование.Ссылка;
КонецФункции

Функция ДобавитьПользователя(ФизЛицо) Экспорт
	
	новыйПользователь = Неопределено;
	Если ЗначениеЗаполнено(ФизЛицо) Тогда
	    группаАП = ПолучитьГруппуАгентПлюс();
		элГрПользователейАП = ПолучитьЭлементГруппыПользователейАгентПлюс();
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	Пользователи.Ссылка
		               |ИЗ
		               |	Справочник.Пользователи КАК Пользователи
		               |ГДЕ
		               |	Пользователи.ФизЛицо = &ФизЛицо
		               |	И Пользователи.Родитель = &Родитель
					   | 	И Пользователи.Код = &Код";
		Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
		Запрос.УстановитьПараметр("Родитель", группаАП);
		Запрос.УстановитьПараметр("Код", Имена["ПрефиксКодаПользователя"] + ФизЛицо.Наименование);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			новыйПользователь = Выборка.Ссылка;
			Перейти ~М;
		КонецЦикла;

		новыйПользователь = Справочники.Пользователи.СоздатьЭлемент();
		новыйПользователь.Код = Имена["ПрефиксКодаПользователя"] + ФизЛицо.Наименование;
		новыйПользователь.Наименование = ФизЛицо.Наименование;
		новыйПользователь.ФизЛицо = ФизЛицо;
		новыйПользователь.Родитель = группаАП;
		новыйПользователь.Записать();
		новыйПользователь = новыйПользователь.Ссылка;
		
		~М:
		стрТабл = элГрПользователейАП.ПользователиГруппы.Найти(новыйПользователь, "Пользователь");
		Если Не ЗначениеЗаполнено(стрТабл) Тогда
			объектГруппаПользователи = элГрПользователейАП.ПолучитьОбъект();
			стрТабл = объектГруппаПользователи.ПользователиГруппы.Добавить();
			стрТабл.Пользователь = новыйПользователь;
			объектГруппаПользователи.Записать();
		КонецЕсли;

	КонецЕсли;				   
	
	Возврат новыйПользователь;
КонецФункции

Функция ПолучитьПользователя(стрИдФизЛицо)
	
	Попытка
		идФизЛицо = Новый УникальныйИдентификатор(стрИдФизЛицо);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	ссылкаФизЛицо = Справочники.ФизическиеЛица.ПолучитьСсылку(идФизЛицо);
	Если ссылкаФизЛицо.ПолучитьОбъект() = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
				   
	группаАП = ПолучитьГруппуАгентПлюс();
	элГрПользователейАП = ПолучитьЭлементГруппыПользователейАгентПлюс();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Пользователи.Ссылка
	               |ИЗ
	               |	Справочник.Пользователи КАК Пользователи
	               |ГДЕ
	               |	Пользователи.ФизЛицо = &ФизЛицо
	               |	И Пользователи.Родитель = &Родитель
				   | 	И Пользователи.Код = &Код";
	Запрос.УстановитьПараметр("ФизЛицо", ссылкаФизЛицо);
	Запрос.УстановитьПараметр("Родитель", группаАП);
	Запрос.УстановитьПараметр("Код", Имена["ПрефиксКодаПользователя"] + ссылкаФизЛицо.Наименование);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		текПользователь = Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Если текПользователь.ПолучитьОбъект() <> Неопределено Тогда		
		Возврат текПользователь;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПрочитатьНастройку(имяНастройки) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Пользователи.Ссылка
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Код = &ПользовательОбработки;
	|";
	
	Запрос.УстановитьПараметр("ПользовательОбработки", Имена["ПользовательАгентПлюс"]);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		элементСпр = Справочники.Пользователи.СоздатьЭлемент();
		элементСпр.Код = Имена["ПользовательАгентПлюс"];
		элементСпр.Наименование = Имена["ПользовательАгентПлюс"];		
		элементСпр.Записать();
		ПользовательАгентПлюс = элементСпр;
		ОповеститьОСобытии("ru='Добавлен пользователь " + элементСпр.Наименование + " (справочник """ + элементСпр.Метаданные().Представление() + """)'", ТипыЛогов["Обработка"], , , элементСпр);
		
		ПолучитьГруппуАгентПлюс();
		ПолучитьЭлементГруппыПользователейАгентПлюс();
		
	Иначе
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		ПользовательАгентПлюс = Выборка.Ссылка;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	НастройкиОбработки.СохраненнаяНастройка
		|ИЗ
		|	РегистрСведений.СохраненныеНастройки КАК НастройкиОбработки
		|ГДЕ
		|	НастройкиОбработки.Пользователь = &Пользователь
		|	И НастройкиОбработки.НаименованиеНастройки  = &НаименованиеНастройки";
		
		Запрос.УстановитьПараметр("Пользователь", ПользовательАгентПлюс);
		Запрос.УстановитьПараметр("НаименованиеНастройки", имяНастройки);
		
		Результат = Запрос.Выполнить();
		
	КонецЕсли;
	
	Возврат Результат;	
КонецФункции

Функция ПолучитьЗначениеНастройки(имяНастройки, имяТипа) Экспорт
	
	Результат = ПрочитатьНастройку(имяНастройки);	

	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();			
		
		СохраненнаяНастройка = Выборка.СохраненнаяНастройка.Получить();

		Если ТипЗнч(СохраненнаяНастройка) = Тип(имяТипа) Тогда
			Возврат СохраненнаяНастройка;			
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат Неопределено;	
КонецФункции

//Процедура записывает реквизиты обработки из Соответствия НастройкиОбработки в регистр СохраненныеНастройки
//(такие же реквизиты должны инициализироваться в процедуре ИнициализироватьРеквизитыОбработки())
//
Функция ЗаписатьРеквизитыОбработки(текНастройкиОбработки = Неопределено) Экспорт
	
	текНастройкиОбработки = ?(текНастройкиОбработки = Неопределено, НастройкиОбработки, текНастройкиОбработки);
		
	текНастройкиОбработки["СпособОбмена"] 					= СпособОбмена;
	текНастройкиОбработки["ИспользоватьZipАрхивы"]			= ИспользоватьZipАрхивы;
	текНастройкиОбработки["ВидВыгрузки"]					= ВидВыгрузки;
	текНастройкиОбработки["ОбновлятьДокументыПриЗагрузке"]	= флОбновлятьДокументыПриЗагрузке;	
	текНастройкиОбработки["ПроводитьДокументыПриЗагрузке"]	= флПроводитьДокументыПриЗагрузке;	
	текНастройкиОбработки["ВыгружатьКартинки"]				= флВыгружатьКартинки;
	текНастройкиОбработки["ОчищатьСправочникиПередЗагрузкой"] = флОчищатьСправочникиПередЗагрузкой;
	текНастройкиОбработки["АвтоОбменАгентСОД"]				= флАвтоОбменАгентСОД;
	текНастройкиОбработки["АвтоОбменFTP"]					= флАвтоОбменFTP; // Альфия 16.05.2017
	текНастройкиОбработки["ИнтервалОбменаFTP"]				= ИнтервалОбменаFTP; // Альфия 16.05.2017
	текНастройкиОбработки["РабочаяПапка"]					= РабочаяПапка;
	текНастройкиОбработки["ИспользоватьТорговыеТочки"]		= ИспользоватьТорговыеТочки;	
	текНастройкиОбработки["ВыгружатьТоварыСНулевымОстатком"] = флВыгружатьТоварыСНулевымОстатком;		
	текНастройкиОбработки["СписокОчищаемыхДокументов"]		= СписокОчищаемыхДокументов;	
	текНастройкиОбработки["ИнтервалСохранностиДокументов"]	= ИнтервалСохранностиДокументов;	
	текНастройкиОбработки["ОчищатьДокументыПередЗагрузкой"] = флОчищатьДокументыПередЗагрузкой;		
	текНастройкиОбработки["ВидОчисткиДокументов"]			= ВидОчисткиДокументов;
	текНастройкиОбработки["ПериодХраненияЛогов"]			= ПериодХраненияЛогов;
	текНастройкиОбработки["ПериодХраненияМаршрутов"]		= ПериодХраненияМаршрутов;
	текНастройкиОбработки["МассивИдУдаляемыхСправочников"]	= ПолучитьМассивИдУдаляемыхСпр(СписокУдаляемыхСпр);
		
	ДополнитьСлешВПуть(текНастройкиОбработки["РабочаяПапка"]);
	
	результат = ЗаписатьНастройкиОбработки(текНастройкиОбработки);
	
	Возврат результат;	
КонецФункции

Процедура УстановитьСписокУдаляемыхСправочников(массивИдентификаторовСпр)
	
	Если СписокУдаляемыхСпр.Количество() = 0 Тогда
		СписокУдаляемыхСпр = СоответствиеСписковЗначений["СписокУдаляемыхСправочников"].Скопировать();
	КонецЕсли;
	
	СписокУдаляемыхСпр.ЗаполнитьПометки(Ложь);
	Если ТипЗнч(массивИдентификаторовСпр) = Тип("Массив") Тогда
		Для Каждого текИдСпр Из массивИдентификаторовСпр Цикл
			 текЭлСпискаЗнач = СписокУдаляемыхСпр.НайтиПоЗначению(текИдСпр);
			 Если текЭлСпискаЗнач <> Неопределено Тогда
				 текЭлСпискаЗнач.Пометка = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

//Процедура устанавливает значения реквизитам обработки из Соответствия НастройкиОбработки
//(такие же реквизиты должны записываться в процедуре ЗаписатьРеквизитыОбработки())
//
Процедура ИнициализироватьРеквизитыОбработки()
	
	значНастройки = НастройкиОбработки["СпособОбмена"];
	значНастройки = ?(значНастройки = Неопределено, НастройкиОбработкиПоУмолчанию["СпособОбмена"], значНастройки);	
	СпособОбмена = значНастройки;	
	
	значНастройки = НастройкиОбработки["ИспользоватьZipАрхивы"];
	значНастройки = ?(значНастройки = Неопределено, НастройкиОбработкиПоУмолчанию["ИспользоватьZipАрхивы"], значНастройки);	
	ИспользоватьZipАрхивы = значНастройки;
	
	значНастройки = НастройкиОбработки["ВидВыгрузки"];
	значНастройки = ?(значНастройки = Неопределено, НастройкиОбработкиПоУмолчанию["ВидВыгрузки"], значНастройки);	
	ВидВыгрузки = значНастройки;
	
	значНастройки = НастройкиОбработки["ОбновлятьДокументыПриЗагрузке"];
	значНастройки = ?(значНастройки = Неопределено, НастройкиОбработкиПоУмолчанию["ОбновлятьДокументыПриЗагрузке"], значНастройки);	
	флОбновлятьДокументыПриЗагрузке = значНастройки;	
	
	значНастройки = НастройкиОбработки["ПроводитьДокументыПриЗагрузке"];
	значНастройки = ?(значНастройки = Неопределено, НастройкиОбработкиПоУмолчанию["ПроводитьДокументыПриЗагрузке"], значНастройки);	
	флПроводитьДокументыПриЗагрузке = значНастройки;
	
	значНастройки = НастройкиОбработки["ВыгружатьКартинки"];
	значНастройки = ?(значНастройки = Неопределено, НастройкиОбработкиПоУмолчанию["ВыгружатьКартинки"], значНастройки);	
	флВыгружатьКартинки = значНастройки;
	
	значНастройки = НастройкиОбработки["ОчищатьСправочникиПередЗагрузкой"];
	значНастройки = ?(значНастройки = Неопределено, НастройкиОбработкиПоУмолчанию["ОчищатьСправочникиПередЗагрузкой"], значНастройки);	
	флОчищатьСправочникиПередЗагрузкой = значНастройки;	
	
	значНастройки = НастройкиОбработки["АвтоОбменАгентСОД"];
	значНастройки = ?(значНастройки = Неопределено, НастройкиОбработкиПоУмолчанию["АвтоОбменАгентСОД"], значНастройки);	
	флАвтоОбменАгентСОД = значНастройки;
	
	// Альфия 16.05.2017
	значНастройки = НастройкиОбработки["АвтоОбменFTP"];
	значНастройки = ?(значНастройки = Неопределено, НастройкиОбработкиПоУмолчанию["АвтоОбменFTP"], значНастройки);	
	флАвтоОбменFTP = значНастройки;
	
	значНастройки = НастройкиОбработки["ИнтервалОбменаFTP"];
	значНастройки = ?(значНастройки = Неопределено, НастройкиОбработкиПоУмолчанию["ИнтервалОбменаFTP"], значНастройки);	
	ИнтервалОбменаFTP = значНастройки;
	// Альфия 16.05.2017
	
	значНастройки = НастройкиОбработки["РабочаяПапка"];
	значНастройки = ?(значНастройки = Неопределено, НастройкиОбработкиПоУмолчанию["РабочаяПапка"], значНастройки);	
	ДополнитьСлешВПуть(значНастройки);
	РабочаяПапка = значНастройки;
	Если ЗначениеЗаполнено(РабочаяПапка) Тогда
		ПроверитьСуществованиеКаталога(РабочаяПапка, Ложь);
	КонецЕсли;
	
	значНастройки = НастройкиОбработки["ПапкаТреки"];
	значНастройки = ?(значНастройки = Неопределено, НастройкиОбработкиПоУмолчанию["ПапкаТреки"], значНастройки);	
	ДополнитьСлешВПуть(значНастройки);
	ПапкаТреков = значНастройки;
		
 	значНастройки = НастройкиОбработки["ИспользоватьТорговыеТочки"];
	значНастройки = ?(значНастройки = Неопределено, НастройкиОбработкиПоУмолчанию["ИспользоватьТорговыеТочки"], значНастройки);	
	ИспользоватьТорговыеТочки = значНастройки;	
	
	значНастройки = НастройкиОбработки["ВыгружатьТоварыСНулевымОстатком"];
	значНастройки = ?(значНастройки = Неопределено, НастройкиОбработкиПоУмолчанию["ВыгружатьТоварыСНулевымОстатком"], значНастройки);	
	флВыгружатьТоварыСНулевымОстатком = значНастройки;	
	
	значНастройки = НастройкиОбработки["ОчищатьДокументыПередЗагрузкой"];
	значНастройки = ?(значНастройки = Неопределено, НастройкиОбработкиПоУмолчанию["ОчищатьДокументыПередЗагрузкой"], значНастройки);	
	флОчищатьДокументыПередЗагрузкой = значНастройки;
	
	значНастройки = НастройкиОбработки["СписокОчищаемыхДокументов"];
	значНастройки = ?(значНастройки = Неопределено, НастройкиОбработкиПоУмолчанию["СписокОчищаемыхДокументов"], значНастройки);	
	СписокОчищаемыхДокументов = значНастройки;	
	
	значНастройки = НастройкиОбработки["ИнтервалСохранностиДокументов"];
	значНастройки = ?(значНастройки = Неопределено, НастройкиОбработкиПоУмолчанию["ИнтервалСохранностиДокументов"], значНастройки);	
	ИнтервалСохранностиДокументов = значНастройки;	
	
	значНастройки = НастройкиОбработки["ВидОчисткиДокументов"];
	значНастройки = ?(значНастройки = Неопределено, НастройкиОбработкиПоУмолчанию["ВидОчисткиДокументов"], значНастройки);	
	ВидОчисткиДокументов = значНастройки;			
	
	значНастройки = НастройкиОбработки["ПериодХраненияЛогов"];
	значНастройки = ?(значНастройки = Неопределено, НастройкиОбработкиПоУмолчанию["ПериодХраненияЛогов"], значНастройки);	
	ПериодХраненияЛогов = значНастройки;	
	
	значНастройки = НастройкиОбработки["ПериодХраненияМаршрутов"];
	значНастройки = ?(значНастройки = Неопределено, НастройкиОбработкиПоУмолчанию["ПериодХраненияМаршрутов"], значНастройки);	
	ПериодХраненияМаршрутов = значНастройки;
	
	значНастройки = НастройкиОбработки["МассивИдУдаляемыхСправочников"];
	значНастройки = ?(значНастройки = Неопределено, Новый Массив, значНастройки);	
	УстановитьСписокУдаляемыхСправочников(значНастройки);
	
	// НастроитьАвтообменСАгентСОД_OLD(); sk_190114 Исключено использование процедура в рамках (MOD-207)
	
	//НастроитьАвтообменFTP(); //Альфия 16.05.2017
	
КонецПроцедуры

Процедура ПрочитатьНастройкиОбработки() Экспорт
	
	Результат = ПрочитатьНастройку("НастройкиОбработки");
	
	Если Результат.Пустой() Тогда
		
		УстановитьНастройкиОбработкиПоУмолчанию();
		ЗаписатьНастройкиОбработки(НастройкиОбработки);
		
	Иначе 
		Выборка = Результат.Выбрать();
		Выборка.Следующий();			
		
		СохраненнаяНастройка = Выборка.СохраненнаяНастройка.Получить();
		
		НастройкиОбработки = СохраненнаяНастройка;
		
		УстановитьНастройкиОбработкиПоУмолчанию();
		ИнициализироватьРеквизитыОбработки();		

	КонецЕсли; 		
		
КонецПроцедуры

Процедура ПрочитатьНастройкиПользователей() Экспорт
	
	 Результат = ПрочитатьНастройку("НастройкиАгентов");
		
	Если Результат.Пустой() Тогда		
		ИсправитьТаблицуНастроек(ТипКонстанты["Пользователь"]);
		ИсправитьТаблицуНастроек(ТипКонстанты["МУ"]);
		ИсправитьТаблицуНастроек(ТипКонстанты["АгентМУ"]);
		ДопНастройкиАгентов = Неопределено;
		ИсправитьДопНастройкиАгента(ДопНастройкиАгентов);
		ЗаписатьНастройкиПользователей();
	Иначе 
		Выборка = Результат.Выбрать();
		Выборка.Следующий();			
		
		СохраненнаяНастройка = Выборка.СохраненнаяНастройка.Получить();
		
		ТабНастройкиАгентов = СохраненнаяНастройка["НастройкиАгентов"];
		ТабМобильныеУстройства = СохраненнаяНастройка["МобУстройства"];
		ТабАгентыМУ = СохраненнаяНастройка["АгентыМУ"];
		ДопНастройкиАгентов = СохраненнаяНастройка["ДопНастройкиАгентов"];
		
		естьИзмененияТаблАгенты 	= ИсправитьТаблицуНастроек(ТипКонстанты["Пользователь"]);
		естьИзмененияТаблМУ 		= ИсправитьТаблицуНастроек(ТипКонстанты["МУ"]);
		естьИзмененияТаблАгентыМУ 	= ИсправитьТаблицуНастроек(ТипКонстанты["АгентМУ"]);
		естьИзмененияДопНастройки	= ИсправитьДопНастройкиАгента(ДопНастройкиАгентов);
		Если естьИзмененияТаблАгенты Или естьИзмененияТаблМУ  Или естьИзмененияТаблМУ Или естьИзмененияДопНастройки Тогда
			 ЗаписатьНастройкиПользователей();
		КонецЕсли;
		
		ТабНастройкиАгентов.Индексы.Добавить("УникальныйИдентификатор");
		ТабМобильныеУстройства.Индексы.Добавить("УникальныйИдентификатор");
		ТабАгентыМУ.Индексы.Добавить("УникальныйИдентификаторМУ, УникальныйИдентификаторАгента");

	КонецЕсли; 
	
КонецПроцедуры

// sk_190116 Процедура не используется
// ПометитьНаУдалениеЛишниеЭлементы()
// Помечает на удаление все элементы из источника, которые не входят в СписокРабочихЭлементов
//
Процедура ПометитьНаУдалениеЛишниеЭлементы_OLD(Источник, ИмяРеквизита = Неопределено, СписокРабочихЭлементов = Неопределено, СтруктураДопУсловие = Неопределено)
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Источник.Ссылка
		|ИЗ
		|	" + Источник + " КАК Источник
		|ГДЕ
		|	Источник.ПометкаУдаления = ЛОЖЬ ";

	Если ИмяРеквизита <> Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + "И (НЕ (Источник." + ИмяРеквизита + " В(&Список)))";	
		Запрос.УстановитьПараметр("Список", СписокРабочихЭлементов);
	КонецЕсли;	
	
	Если СтруктураДопУсловие <> Неопределено Тогда
		Для Каждого текЗнач Из СтруктураДопУсловие Цикл
			Если ТипЗнч(текЗнач.Значение) = Тип("СписокЗначений") Тогда
				ТекстЗапроса = ТекстЗапроса + " И " + текЗнач.Ключ + " В(&ДопПараметр" + текЗнач.Ключ + ")";				
			Иначе
				ТекстЗапроса = ТекстЗапроса + " И " + текЗнач.Ключ + " =&ДопПараметр" + текЗнач.Ключ;
			КонецЕсли;
			Запрос.УстановитьПараметр("ДопПараметр" + текЗнач.Ключ, текЗнач.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;		
		
	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
		ОповеститьОСобытии("ru='Помечен на удаление элемент """ + ВыборкаДетальныеЗаписи.Ссылка.Наименование + """ (" + ВыборкаДетальныеЗаписи.Ссылка.Метаданные().Представление() + """)'", ТипыЛогов["Обработка"], , , ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСсылкуСвойствоОбъектаАгентПлюс(_ИмяСвойстваОбъекта) Экспорт
	
	СсылкаСвойствоОбъекта = ПланыВидовХарактеристик.СвойстваОбъектов.ПолучитьСсылку(Имена["ИдентификаторСвойстваОбъекта_" + _ИмяСвойстваОбъекта]);

	ОбъектСвойствоОбъекта = СсылкаСвойствоОбъекта.ПолучитьОбъект();
	
	Если ОбъектСвойствоОбъекта = Неопределено Тогда
		ОбъектСвойствоОбъекта = ПланыВидовХарактеристик.СвойстваОбъектов.СоздатьЭлемент();
		ОбъектСвойствоОбъекта.УстановитьСсылкуНового(СсылкаСвойствоОбъекта);
		ОбъектСвойствоОбъекта.НазначениеСвойства = Имена["НазначениеСвойства_" + _ИмяСвойстваОбъекта];
		ОбъектСвойствоОбъекта.Наименование = Имена["СвойствоОбъекта_" + _ИмяСвойстваОбъекта];		
		ОбъектСвойствоОбъекта.ТипЗначения = Имена["ТипЗначения_" + _ИмяСвойстваОбъекта];		
		Попытка
			ОбъектСвойствоОбъекта.Записать();
		Исключение
			Инфо = ИнформацияОбОшибке();
			ОповеститьОСобытии(Инфо.Описание, ТипыЛогов["Обработка"], СтатусСообщения.Внимание);
			Возврат Неопределено;
		КонецПопытки;
		ОповеститьОСобытии("ru='Добавлен элемент """ + ОбъектСвойствоОбъекта.Наименование + """ (план видов характеристик """ + ОбъектСвойствоОбъекта.Метаданные().Представление() + """)'", ТипыЛогов["Обработка"], , , ОбъектСвойствоОбъекта);
		
	ИначеЕсли ОбъектСвойствоОбъекта.Наименование <> Имена["СвойствоОбъекта_" + _ИмяСвойстваОбъекта] Тогда
		ОбъектСвойствоОбъекта.Наименование = Имена["СвойствоОбъекта_" + _ИмяСвойстваОбъекта];
		Попытка
			ОбъектСвойствоОбъекта.Записать();
		Исключение
			ОповеститьОСобытии("ru='" + СтрЗаменить(ОписаниеОшибки(), "'", """") + "'", ТипыЛогов["Обработка"], СтатусСообщения.Внимание, , ОбъектСвойствоОбъекта);
			Возврат Неопределено;
		КонецПопытки;		
		
		ОповеститьОСобытии("ru='Изменен элемент """ + ОбъектСвойствоОбъекта.Наименование + """ (план видов характеристик """ + ОбъектСвойствоОбъекта.Метаданные().Представление() + """)'", ТипыЛогов["Обработка"], , , ОбъектСвойствоОбъекта);
	КонецЕсли;
	
	Возврат ОбъектСвойствоОбъекта.Ссылка;
	
КонецФункции

Функция ПолучитьСсылкуКатегорияОбъектаАгентПлюс(_ИмяКатегорияОбъекта) Экспорт
	
	СсылкаКатегорияОбъекта = Справочники.КатегорииОбъектов.ПолучитьСсылку(Имена["ИдентификаторКатегорияОбъекта_" + _ИмяКатегорияОбъекта]);

	ОбъектКатегорияОбъекта = СсылкаКатегорияОбъекта.ПолучитьОбъект();
	
	Если ОбъектКатегорияОбъекта = Неопределено Тогда
		
		ОбъектКатегорияОбъекта = Справочники.КатегорииОбъектов.СоздатьЭлемент();
		ОбъектКатегорияОбъекта.УстановитьСсылкуНового(СсылкаКатегорияОбъекта);
		ОбъектКатегорияОбъекта.НазначениеКатегории = Имена["НазначениеКатегории_" + _ИмяКатегорияОбъекта];
		ОбъектКатегорияОбъекта.Наименование = Имена["КатегорияОбъекта_" + _ИмяКатегорияОбъекта];		
		
		ВыполнитьОперациюДляОбъекта(ОбъектКатегорияОбъекта, "запись"); 							
		
	ИначеЕсли ОбъектКатегорияОбъекта.Наименование <> Имена["КатегорияОбъекта_" + _ИмяКатегорияОбъекта] Тогда
		
		ОбъектКатегорияОбъекта.Наименование = Имена["КатегорияОбъекта_" + _ИмяКатегорияОбъекта];		
		ВыполнитьОперациюДляОбъекта(ОбъектКатегорияОбъекта, "запись");
		
	КонецЕсли;
	
	Возврат ОбъектКатегорияОбъекта.Ссылка;
	
КонецФункции

Функция ПолучитьЭлементЗначениеСвойстваПоОбъекту(Объект, СсылкаСвойствоОбъекта, СоздаватьЭлемент = Ложь) Экспорт
	
	Если Объект = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	уникальныйИдентификатор = Объект["УникальныйИдентификатор"];
	Если уникальныйИдентификатор = ПустойИдентификатор Тогда
		Возврат Неопределено;
	КонецЕсли;
	ссылка = Справочники.ЗначенияСвойствОбъектов.ПолучитьСсылку(уникальныйИдентификатор);
	объектЗначениеСвойстваОбъекта = ссылка.ПолучитьОбъект();
	
	Если объектЗначениеСвойстваОбъекта = Неопределено Тогда
		
		Если СоздаватьЭлемент Тогда
			объектЗначениеСвойстваОбъекта = Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
			объектЗначениеСвойстваОбъекта.УстановитьСсылкуНового(ссылка);
			объектЗначениеСвойстваОбъекта.Владелец = СсылкаСвойствоОбъекта;
			объектЗначениеСвойстваОбъекта["Наименование"] = Объект["Наименование"];
			объектЗначениеСвойстваОбъекта.ПометкаУдаления = Объект["ПометкаУдаления"];
			
			Если Не ВыполнитьОперациюДляОбъекта(объектЗначениеСвойстваОбъекта, "запись") Тогда
				Возврат Неопределено;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли объектЗначениеСвойстваОбъекта.Наименование <> Объект["Наименование"] Или объектЗначениеСвойстваОбъекта.ПометкаУдаления <> Объект["ПометкаУдаления"] Тогда
		
		объектЗначениеСвойстваОбъекта.Наименование = Объект["Наименование"];
		объектЗначениеСвойстваОбъекта.ПометкаУдаления = Объект["ПометкаУдаления"];
		 
		Если Не ВыполнитьОперациюДляОбъекта(объектЗначениеСвойстваОбъекта, "запись") Тогда
			Возврат Неопределено;
		КонецЕсли;
		 
	КонецЕсли;		
	
	Возврат ссылка;	
КонецФункции

Функция ПолучитьЭлементСпрЗначениеСвойстваОбъектаПоИд(ИдЭлемента, СсылкаСвойствоОбъекта, ИмяНастройки, СоздаватьЭлемент = Ложь) Экспорт
	
	Перем уникальныйИд;
	
	типИдЭл = ТипЗнч(ИдЭлемента);
	Если типИдЭл = Тип("Строка") Тогда
		
		//vd_180824
		Если ПустаяСтрока(ИдЭлемента) Тогда
			Возврат Неопределено;
		КонецЕсли;	
		
		Попытка 
			уникальныйИд = Новый УникальныйИдентификатор(ИдЭлемента);
		Исключение 
			уникальныйИд = Неопределено;
		КонецПопытки;
		
	ИначеЕсли типИдЭл <> Тип("УникальныйИдентификатор") Тогда		
		уникальныйИд = Неопределено;		
	КонецЕсли;	
	
	Если уникальныйИд <> Неопределено И уникальныйИд <> ПустойИдентификатор Тогда
		
		СписокЗначенийСвойствИзНастроек = ПолучитьЗначениеНастройки(ИмяНастройки, "Соответствие");
		объектИзНастроек = СписокЗначенийСвойствИзНастроек[уникальныйИд];		
		объектЗначениеСвойстваОбъекта = ПолучитьЭлементЗначениеСвойстваПоОбъекту(объектИзНастроек, СсылкаСвойствоОбъекта, СоздаватьЭлемент);
	КонецЕсли;	
	
	Возврат объектЗначениеСвойстваОбъекта;	
КонецФункции

Функция ПолучитьТекстЗапросаПоСвойствуИЗначению() Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ
				   |	ЗначенияСвойствОбъектов.Объект,
				   |	ЗначенияСвойствОбъектов.Свойство,
				   |	ЗначенияСвойствОбъектов.Значение
				   |ИЗ
				   |	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
				   |ГДЕ
				   |	ЗначенияСвойствОбъектов.Свойство = &Свойство
				   |	И ЗначенияСвойствОбъектов.Значение = &Значение";
	
	Возврат ТекстЗапроса;
КонецФункции

// СписокЗначенийСвойствИзБазы и ПерезаписатьСписокЭлементов используются в качестве дополнительных выходных значений функции
//
Функция ПолучитьСписокЗначенийСвойствОбъекта(ИмяСсылкаСвойствоОбъекта, ИмяНастройки, СписокЗначенийСвойствИзБазы, ПерезаписатьСписокЭлементов)
	
	СсылкаСвойствоОбъекта = ПолучитьСсылкуСвойствоОбъектаАгентПлюс(ИмяСсылкаСвойствоОбъекта);
	Если СсылкаСвойствоОбъекта = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗначенияСвойствОбъектов.Ссылка
	               |ИЗ
	               |	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	               |ГДЕ
	               |	ЗначенияСвойствОбъектов.Владелец = &Владелец";
	 
	Запрос.УстановитьПараметр("Владелец", СсылкаСвойствоОбъекта);
	Выборка = Запрос.Выполнить().Выбрать();
	СписокЗначенийСвойствИзБазы = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		СписокЗначенийСвойствИзБазы.Вставить(Выборка.Ссылка.УникальныйИдентификатор(), Выборка.Ссылка);
	КонецЦикла;	
	
	СписокЗначенийСвойствИзНастроек = ПолучитьЗначениеНастройки(ИмяНастройки, "Соответствие");
	Если СписокЗначенийСвойствИзНастроек = Неопределено Тогда
		СписокЗначенийСвойствИзНастроек = Новый Соответствие;
	КонецЕсли;
	
	ПерезаписатьСписокЭлементов = Ложь;	
	
	списУдаляемыхЭл = Новый Массив;
	// не найденные в БД элементы, которые есть в настройке, удаляем
	Для Каждого текКлючЗнач Из СписокЗначенийСвойствИзНастроек Цикл
		
		текЗначСвойствоОбъекта = текКлючЗнач.Значение; 
		уникальныйИдентификатор = текЗначСвойствоОбъекта["УникальныйИдентификатор"];
		Если СписокЗначенийСвойствИзБазы[уникальныйИдентификатор] = Неопределено Тогда
			списУдаляемыхЭл.Добавить(текКлючЗнач.Ключ);
		Иначе
			Если текЗначСвойствоОбъекта["Наименование"] <> СписокЗначенийСвойствИзБазы[уникальныйИдентификатор].Наименование Тогда
				текЗначСвойствоОбъекта["Наименование"] = СписокЗначенийСвойствИзБазы[уникальныйИдентификатор].Наименование;
				ПерезаписатьСписокЭлементов = Истина;
			КонецЕсли;
			Если текЗначСвойствоОбъекта["ПометкаУдаления"] <> СписокЗначенийСвойствИзБазы[уникальныйИдентификатор].ПометкаУдаления Тогда
				текЗначСвойствоОбъекта["ПометкаУдаления"] = СписокЗначенийСвойствИзБазы[уникальныйИдентификатор].ПометкаУдаления;
			КонецЕсли;
			СписокЗначенийСвойствИзБазы.Удалить(уникальныйИдентификатор);
		КонецЕсли;
		
	КонецЦикла;

	Для Каждого текУникальныйИд Из списУдаляемыхЭл Цикл
		 СписокЗначенийСвойствИзНастроек.Удалить(текУникальныйИд);
		 ПерезаписатьСписокЭлементов = Истина;
	КонецЦикла;	
	
	Возврат СписокЗначенийСвойствИзНастроек;
КонецФункции

Функция ПолучитьСписокКатегорииДокументов() Экспорт
	
	ПерезаписатьСписокЭлементов = Ложь;	
	СписокКатегорийДокументовИзБазы = Неопределено;
	имяНастройки = "КатегорииДокументов";
	СписокКатегорийДокументов = ПолучитьСписокЗначенийСвойствОбъекта("Категория", имяНастройки, СписокКатегорийДокументовИзБазы, ПерезаписатьСписокЭлементов);

	//Добавляем в список элементы, которые есть в БД и которых нет в списке элементов из настроек
	Для Каждого текКлючЗнач Из СписокКатегорийДокументовИзБазы Цикл
		
		элКатегорияДок = текКлючЗнач.Значение; 		
		новыйОбъект = Новый Соответствие;
		новыйОбъект["УникальныйИдентификатор"] = текКлючЗнач.Ключ;
		новыйОбъект["ПометкаУдаления"] = Ложь;
		новыйОбъект["Наименование"] = текКлючЗнач.Значение;
		новыйОбъект["Цвет"] = Новый ХранилищеЗначения(Неопределено);		
		СписокКатегорийДокументов.Вставить(новыйОбъект["УникальныйИдентификатор"], новыйОбъект);

		ПерезаписатьСписокЭлементов = Истина;
		
	КонецЦикла;
	
	Если ПерезаписатьСписокЭлементов Тогда
		ЗаписатьНастройку(имяНастройки, СписокКатегорийДокументов);
	КонецЕсли;
	
	Возврат СписокКатегорийДокументов;	
КонецФункции

Функция ПолучитьСписокСтатусыКонтрагентов() Экспорт
	
	ПерезаписатьСписокЭлементов = Ложь;	
	СписокСтатусыКонтрагентовИзБазы = Неопределено;
	имяНастройки = "СтатусыКонтрагентов";
	СписокСтатусыКонтрагентов = ПолучитьСписокЗначенийСвойствОбъекта("СтатусКонтрагента", имяНастройки, СписокСтатусыКонтрагентовИзБазы, ПерезаписатьСписокЭлементов);

	//Добавляем в список элементы, которые есть в БД и которых нет в списке элементов из настроек
	Для Каждого текКлючЗнач Из СписокСтатусыКонтрагентовИзБазы Цикл
		
		элКатегорияДок = текКлючЗнач.Значение; 		
		новыйОбъект = Новый Соответствие;
		новыйОбъект["УникальныйИдентификатор"] = текКлючЗнач.Ключ;
		новыйОбъект["ПометкаУдаления"] = Ложь;
		новыйОбъект["Наименование"] = текКлючЗнач.Значение;
		новыйОбъект["Предупреждение"] = "";
		новыйОбъект["Цвет"] = Новый ХранилищеЗначения(Неопределено);		
		СписокСтатусыКонтрагентов.Вставить(новыйОбъект["УникальныйИдентификатор"], новыйОбъект);

		ПерезаписатьСписокЭлементов = Истина;
		
	КонецЦикла;
	
	Если ПерезаписатьСписокЭлементов Тогда
		ЗаписатьНастройку(имяНастройки, СписокСтатусыКонтрагентов);
	КонецЕсли;
	
	Возврат СписокСтатусыКонтрагентов;
КонецФункции

// sk_190116 Функция не используется
// ПолучитьСписок()
//
Функция ПолучитьСписок_OLD() Экспорт
	
	ПерезаписатьСписокЭлементов = Ложь;	
	СписокСтатусыКонтрагентовИзБазы = Неопределено;
	имяНастройки = "СтатусыКонтрагентов";
	СписокСтатусыКонтрагентов = ПолучитьСписокЗначенийСвойствОбъекта("СтатусКонтрагента", имяНастройки, СписокСтатусыКонтрагентовИзБазы, ПерезаписатьСписокЭлементов);

	//Добавляем в список элементы, которые есть в БД и которых нет в списке элементов из настроек
	Для Каждого текКлючЗнач Из СписокСтатусыКонтрагентовИзБазы Цикл
		
		элКатегорияДок = текКлючЗнач.Значение; 		
		новыйОбъект = Новый Соответствие;
		новыйОбъект["УникальныйИдентификатор"] = текКлючЗнач.Ключ;
		новыйОбъект["ПометкаУдаления"] = Ложь;
		новыйОбъект["Наименование"] = текКлючЗнач.Значение;
		новыйОбъект["Предупреждение"] = "";
		новыйОбъект["Цвет"] = Новый ХранилищеЗначения(Неопределено);		
		СписокСтатусыКонтрагентов.Вставить(новыйОбъект["УникальныйИдентификатор"], новыйОбъект);

		ПерезаписатьСписокЭлементов = Истина;
		
	КонецЦикла;
	
	Если ПерезаписатьСписокЭлементов Тогда
		ЗаписатьНастройку(имяНастройки, СписокСтатусыКонтрагентов);
	КонецЕсли;
	
	Возврат СписокСтатусыКонтрагентов;
	
КонецФункции // ПолучитьСписок_OLD()

// sk_190116 Функция не используется
// ПолучитьСписокПлановПосещений()
//
Функция ПолучитьСписокПлановПосещений_OLD() Экспорт
	
	ПерезаписатьСписокЭлементов = Ложь;	
	СписокПланыПосещенийИзБазы = Неопределено;
	имяНастройки = "ПланыПосещений";
	//СписокПланыПосещений = ПолучитьСписокЗначенийСвойствОбъекта("СтатусКонтрагента", имяНастройки, СписокСтатусыКонтрагентовИзБазы, ПерезаписатьСписокЭлементов);

	// Добавляем в список элементы, которые есть в БД и которых нет в списке элементов из настроек
	//Для Каждого текКлючЗнач Из СписокСтатусыКонтрагентовИзБазы Цикл
	//	
	//	элКатегорияДок = текКлючЗнач.Значение; 		
	//	новыйОбъект = Новый Соответствие;
	//	новыйОбъект["УникальныйИдентификатор"] = текКлючЗнач.Ключ;
	//	новыйОбъект["ПометкаУдаления"] = Ложь;
	//	новыйОбъект["Наименование"] = текКлючЗнач.Значение;
	//	новыйОбъект["Предупреждение"] = "";
	//	новыйОбъект["Цвет"] = Новый ХранилищеЗначения(Неопределено);		
	//	СписокСтатусыКонтрагентов.Вставить(новыйОбъект["УникальныйИдентификатор"], новыйОбъект);

	//	ПерезаписатьСписокЭлементов = Истина;
	//	
	//КонецЦикла;
	//
	//Если ПерезаписатьСписокЭлементов Тогда
	//	ЗаписатьНастройку(имяНастройки, СписокСтатусыКонтрагентов);
	//КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ПолучитьСписокПлановПосещений_OLD()

// Функция возвращает таблицу значений со списком документов "Планирование для агентов"
//
//
Функция ПолучитьСписокДокументовМаршрутов(ИсправлятьОшибки = Ложь, пАгент = Неопределено, пДатаНачала = Неопределено, пДатаОкончания = Неопределено) Экспорт
	
	ПерезаписатьСписокЭлементов = Ложь;
	имяНастройки = "ПланированиеАгентов";
	
	ВидИспользуемыхМаршрутов = НастройкиОбработки["ВидИспользуемыхМаршрутов"];
	Если ВидИспользуемыхМаршрутов = 1 Тогда
		СсылкаГруппаСобытия = ПолучитьГруппуСобытия("ЦиклическийМаршрут");
		Если СсылкаГруппаСобытия = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;	
	Иначе
		СсылкаГруппаСобытия = ПолучитьГруппуСобытия("Маршрут");
		Если СсылкаГруппаСобытия = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	СписокДокументовИзНастроек = ПолучитьЗначениеНастройки(имяНастройки, "ТаблицаЗначений");
	Если СписокДокументовИзНастроек = Неопределено Тогда
		СписокДокументовИзНастроек = Новый ТаблицаЗначений;
		ПерезаписатьСписокЭлементов = ИсправитьСписокЗначений(СписокДокументовИзНастроек, НастройкиПланированиеАгентовПоУмолчанию, НастройкиПланированиеАгентовПоУмолчанию);		
		СписокДокументовИзНастроек.Индексы.Добавить("Дата, Агент");		
	КонецЕсли;
	
	Если ИсправлятьОшибки Тогда		// не найденные в БД строки-документы, которые есть в настройке, удаляем из настроек
		
		ПерезаписатьСписокЭлементов = ИсправитьСписокЗначений(СписокДокументовИзНастроек, НастройкиПланированиеАгентовПоУмолчанию, НастройкиПланированиеАгентовПоУмолчанию);
		
		списУдаляемыхСтрок = Новый Массив;
		
		Запрос = Новый Запрос;
		Запрос.Текст = ПолучитьТекстЗапросаМаршруты(Ложь, Ложь, Ложь);
		Запрос.УстановитьПараметр("ГруппаСобытия", СсылкаГруппаСобытия);
		
		СписокДокументовИзБазы = Запрос.Выполнить().Выгрузить();	
		СписокДокументовИзБазы.Индексы.Добавить("Дата");		
		
		Для Каждого текСтрока Из СписокДокументовИзНастроек Цикл
			
			датаПланирования = текСтрока["Дата"];
			текАгент = текСтрока["Агент"];
			массивСтрокДокИзБазы = СписокДокументовИзБазы.НайтиСтроки(Новый Структура("Дата, Агент", датаПланирования, текАгент));
			Если массивСтрокДокИзБазы.Количество() = 0 Тогда
				списУдаляемыхСтрок.Добавить(текСтрока);
			Иначе
				строкаДокИзБазы = массивСтрокДокИзБазы[0];					// должна быть всегда 1 строка, т.к. в запросе поля группируются по полям "Дата" и "Агент"
				Если строкаДокИзБазы["ПометкаУдаления"] <> текСтрока["ПометкаУдаления"] Тогда
					текСтрока["ПометкаУдаления"] = строкаДокИзБазы["ПометкаУдаления"];
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого текСтрокаИзБД Из массивСтрокДокИзБазы Цикл
				СписокДокументовИзБазы.Удалить(текСтрокаИзБД);				// в СписокДокументовИзБазы могут быть строки, которых не будет в настройках, поэтому удаляем просмотренные строки
			КонецЦикла;
			
		КонецЦикла;
	
		Для Каждого текСтрока Из списУдаляемыхСтрок Цикл
			СписокДокументовИзНастроек.Удалить(текСтрока);
			ПерезаписатьСписокЭлементов = Истина;
		КонецЦикла;	
		 
		// Добавляем в список элементы, которые есть в БД и которых нет в списке элементов из настроек
		Если СписокДокументовИзБазы.Количество() > 0 Тогда
			
			новыйНомер = 1;
			Если СписокДокументовИзНастроек.Количество() > 0 Тогда
				новыйНомер = ПолучитьПоследнийНомерПланированияДляАгентов(СписокДокументовИзНастроек);
			КонецЕсли;		
			
			Для Каждого текСтрока Из СписокДокументовИзБазы Цикл		
				новаяСтрока = СписокДокументовИзНастроек.Добавить();
				Для Каждого текКлючЗнач Из НастройкиПланированиеАгентовПоУмолчанию Цикл				
					имяКолонки = текКлючЗнач.Ключ;
					значНастройки = ?(СписокДокументовИзБазы.Колонки.Найти(имяКолонки) = Неопределено, текКлючЗнач.Значение, текСтрока[имяКолонки]);
					новаяСтрока[имяКолонки] = значНастройки;
					ПерезаписатьСписокЭлементов = Истина;
				КонецЦикла;
				новыйНомер = новыйНомер + 1;
				новаяСтрока["Номер"] = новыйНомер;
			КонецЦикла;
		КонецЕсли;
		
		Если ПерезаписатьСписокЭлементов Тогда
			ЗаписатьНастройку(имяНастройки, СписокДокументовИзНастроек);
		КонецЕсли;
		
	КонецЕсли;
		
	Запрос = Новый Запрос;
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	естьАгент = ЗначениеЗаполнено(пАгент);
	естьДата = (пДатаНачала <> Неопределено) И (пДатаОкончания <> Неопределено);
		
	Запрос.Текст = ПолучитьТекстЗапросаМаршруты(Истина, естьАгент, естьДата);			
	Запрос.УстановитьПараметр("Источник", СписокДокументовИзНастроек);
	
	Если естьАгент Тогда
		Запрос.УстановитьПараметр("Агент", пАгент);
	КонецЕсли;
	
	Если естьДата Тогда
		Запрос.УстановитьПараметр("ДатаНачала", пДатаНачала);
		Запрос.УстановитьПараметр("ДатаОкончания", пДатаОкончания);
	КонецЕсли;
	
	СписокДокументовИзНастроек = Запрос.Выполнить().Выгрузить();	
	СписокДокументовИзНастроек.Индексы.Добавить("Дата");	
		
	Возврат СписокДокументовИзНастроек;
КонецФункции

// Функция ПроверкаДаты
//
// Параметры: 
//  НужнаяДата 	- дата, которую нужно проверить
//  ИмяПоля 	- имя поля, для которого нужно вывести сообщение об ошибке
//
// Описание:
//  Функция проверяет корректность даты и в случае некорректности выдается сообщение
//
// Возвращаемое значение:
//  Булево
//
Функция ПроверкаДаты(НужнаяДата, ИмяПоля) Экспорт
	
	Если НужнаяДата > '39991231235959' Тогда		
		ОбщегоНазначения.СообщитьОбОшибке(НСтр("ru=эНеверно задана дата в поле " + ИмяПоля + "!'"));
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Функция убирает из текста сообщения служебную информацию
//
// Параметры
//  ТекстСообщения, Строка, исходный текст сообщения//
// Возвращаемое значение:
//   Строка
//
Функция СформироватьТекстСообщения(Знач ТекстСообщения) Экспорт

	НачалоСлужебногоСообщения    = Найти(ТекстСообщения, "{");
	ОкончаниеСлужебногоСообщения = Найти(ТекстСообщения, "}:");
	
	Если ОкончаниеСлужебногоСообщения > 0 
		И НачалоСлужебногоСообщения > 0 
		И НачалоСлужебногоСообщения < ОкончаниеСлужебногоСообщения Тогда
		
		ТекстСообщения = Лев(ТекстСообщения, (НачалоСлужебногоСообщения - 1)) +
		                 Сред(ТекстСообщения, (ОкончаниеСлужебногоСообщения + 2));
						 
	КонецЕсли;
	
	Возврат СокрЛП(ТекстСообщения);

КонецФункции // СформироватьТекстСообщения()

// Выводит сообщение об ошибке
// В случае работы на клиенте или на сервере выводит в окно сообщений,
// в случае внешнего соединения вызывает исключение.
//
// Параметры:
//  ТекстСообщения - строка, текст сообщения.//
Процедура СообщитьОСобытии(ТекстСообщения, Заголовок = "", Статус = Неопределено) Экспорт

	ТекстСообщения = СформироватьТекстСообщения(ТекстСообщения);
	
	#Если НЕ ВнешнееСоединение Тогда
				
		Если ЗначениеЗаполнено(Заголовок) Тогда
			Сообщить(Заголовок);
			Заголовок = "";
		КонецЕсли;
		
		Если Статус = Неопределено Тогда
			Статус = СтатусСообщения.Обычное;
		КонецЕсли;
		Сообщить(Строка(ТекущаяДата()) + " - " + ТекстСообщения, Статус);
		
	#КонецЕсли
	
КонецПроцедуры // СообщитьОСобытии()

// Процедура предназначена для оповещения пользователей о событиях обмена
// а также для записи событий в лог обмена
//
Процедура ОповеститьОСобытии(ТекстСообщения, ТипЛога, Статус = "", Агент = Неопределено, СсылкаНаОбъект = Неопределено) Экспорт
	
	НужныйСтатус = ?(Статус = "", СтатусСообщения.Обычное, Статус);
	Если Агент = Неопределено Тогда
		Агент = ПользовательСеанса;
	КонецЕсли;
	
	нстрТекстСообщения = НСтр(ТекстСообщения);
	#Если Клиент Тогда
		СообщитьОСобытии(нстрТекстСообщения, "", НужныйСтатус);
	#КонецЕсли
	
	ЗаписатьЛогОбмена(нстрТекстСообщения, ТипЛога, НужныйСтатус, Агент, СсылкаНаОбъект);
	
КонецПроцедуры

//Процедура ведения лога обмена
//
Процедура ЗаписатьЛогОбмена(ТекстСообщения = "", ТипЛога, ТипСобытия = Неопределено,  Агент = Неопределено, СсылкаНаОбъект = Неопределено)

	Если ТипЛога = ТипыЛогов["Обмен"] Тогда
		
		НоваяСтрока = ТабЛогОбмена.Добавить();
		НоваяСтрока.ТипСобытия     = Строка(ТипСобытия);
		НоваяСтрока.Дата           = ТекущаяДата();
		НоваяСтрока.Событие        = ТекстСообщения;
		НоваяСтрока.Пользователь   = ПользовательСеанса;
		НоваяСтрока.Агент          = Агент;
		НоваяСтрока.СсылкаНаОбъект = ?(СсылкаНаОбъект = Неопределено, "", СсылкаНаОбъект);

	ИначеЕсли ТипЛога = ТипыЛогов["Обработка"] Тогда
		
		НоваяСтрока = ТабЛогОбработки.Добавить();
		НоваяСтрока.ТипСобытия     = Строка(ТипСобытия);
		НоваяСтрока.Дата           = ТекущаяДата();
		НоваяСтрока.Событие        = ТекстСообщения;
		НоваяСтрока.Пользователь   = ПользовательСеанса;
		НоваяСтрока.СсылкаНаОбъект = ?(СсылкаНаОбъект = Неопределено, "", СсылкаНаОбъект);
		
	КонецЕсли;		
		
КонецПроцедуры

Процедура СохранитьЛог(ТипЛога) Экспорт
	Перем текТабЛога, имяЛога, имяОбъектаНастройки;
	
	Если ТипЛога = ТипыЛогов["Обработка"] Тогда
		текТабЛога = ТабЛогОбработки;
		имяЛога = Имена["ЛогОбработки"];
	ИначеЕсли ТипЛога = ТипыЛогов["Обмен"] Тогда
		текТабЛога = ТабЛогОбмена;
		имяЛога = Имена["ЛогОбмена"];		
	КонецЕсли;
	
	имяОбъектаНастройки = Имена["Обработка"] + ": " + имяЛога;
	
	текДата = НачалоДня(ТекущаяДата());	
	
	//удаляем из лога записи, дата которых не совпадает с текущей
	Если ДатаЛога <> текДата Тогда
		
		ДатаЛога = текДата;		
		
		массивСтрок = Новый Массив;
		
		Для Каждого текСтрока Из текТабЛога Цикл
			Если текСтрока["Дата"] < ДатаЛога Тогда
				массивСтрок.Добавить(текСтрока);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого текЭл Из массивСтрок Цикл
			 текТабЛога.Удалить(текЭл);
		КонецЦикла;	
		
	КонецЕсли;
	
	стрДатаЛога = Формат(ДатаЛога, "ДФ=yyyy.MM.dd");
	
	ЗаписьРег = РегистрыСведений.СохраненныеНастройки.СоздатьМенеджерЗаписи();
	ЗаписьРег.Пользователь 		    = ПользовательСеанса;
	ЗаписьРег.ИмяОбъекта    	    = имяОбъектаНастройки;
	ЗаписьРег.НаименованиеНастройки = стрДатаЛога;
	ЗаписьРег.Прочитать();
	
	Если ЗаписьРег.Выбран() Тогда
		хранилищеЗнач = Новый ХранилищеЗначения(текТабЛога, Новый СжатиеДанных);
		ЗаписьРег.СохраненнаяНастройка = хранилищеЗнач;
		Если ВыполнитьОперациюДляОбъекта(ЗаписьРег, "запись") Тогда 						
			ТекстСообщения = "ru='Лог """ + имяЛога + """ успешно сохранён'";			
			ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обработка"], СтатусСообщения.Информация);
		Иначе						
			ТекстСообщения = "ru='Не удалось сохранить лог """ + имяЛога + """!'";
			ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обработка"], СтатусСообщения.Важное);
		КонецЕсли; 
		
	Иначе
		ЗаписьРег.Пользователь 			= ПользовательСеанса;
		ЗаписьРег.ИмяОбъекта 			= имяОбъектаНастройки;
		ЗаписьРег.НаименованиеНастройки = стрДатаЛога;
		хранилищеЗнач = Новый ХранилищеЗначения(текТабЛога, Новый СжатиеДанных);
		ЗаписьРег.СохраненнаяНастройка  = хранилищеЗнач;
		Если Не ВыполнитьОперациюДляОбъекта(ЗаписьРег, "запись") Тогда 						
			ТекстСообщения = "ru='Не удалось записать сведения в журнал обмена данных!'";
			ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обработка"], СтатусСообщения.Важное);			
		КонецЕсли; 
	КонецЕсли;
	
	ЗаписьРег = РегистрыСведений.СохраненныеНастройки.СоздатьМенеджерЗаписи();
	ЗаписьРег.Пользователь 		    = ПользовательСеанса;
	ЗаписьРег.ИмяОбъекта  		    = имяОбъектаНастройки;
	ЗаписьРег.НаименованиеНастройки = стрДатаЛога;
	ЗаписьРег.Прочитать();

	Если ЗаписьРег.Выбран() Тогда
		текТабЛога = ЗаписьРег.СохраненнаяНастройка.Получить();
	КонецЕсли;

	
КонецПроцедуры  //СохранитьТаблицуЛогаВНастройкахПользователя()

// sk_190116 Функция не используется
// ПроверитьЗаполнениеПолей()
//
// Процедура проверяет заполненность полей
// Параметры:
// ОбъектПроверки - тот объект реквизиты которого нужно проверить на заполненность
// СписокИменРеквизитов - список реквизитов для проверки (В значении - Имя реквизита, в представлении - строковое название реквизита)
//
Функция ПроверитьЗаполнениеПолей_OLD(ОбъектПроверки, СписокИменРеквизитов) Экспорт
	
	ЕстьНезаполненные = Ложь;
	
	Если СписокИменРеквизитов = Неопределено Тогда
		Возврат ЕстьНезаполненные 
	КонецЕсли;
	
	Для Каждого ЭлементСписка Из СписокИменРеквизитов Цикл
		Если НЕ ЗначениеЗаполнено(ОбъектПроверки[ЭлементСписка.Значение]) Тогда
			ОповеститьОСобытии("ru='Поле """ + СокрЛП(ЭлементСписка.Представление) + """ не заполнен!'", ТипыЛогов["Обработка"], СтатусСообщения.Внимание, , ОбъектПроверки);
			ЕстьНезаполненные = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьНезаполненные;
	
КонецФункции // ПроверитьЗаполнениеПолей_OLD()

// sk_190116 Функция не используется
// ИзСтрокиВСписок()
// 
Функция ИзСтрокиВСписок_OLD(Знач прСтрока, прРаздел = ",") Экспорт
	Перем лкВозврат, лкПоз;
	
	лкВозврат = Новый СписокЗначений;
	
	Пока Не(ПустаяСтрока(прСтрока)) Цикл
		лкПоз = Найти(прСтрока,прРаздел);
		Если (лкПоз > 0) Тогда
			лкВозврат.Добавить(Лев(прСтрока,лкПоз - 1));
			прСтрока = Сред(прСтрока,лкПоз + СтрДлина(прРаздел));
		Иначе
			лкВозврат.Добавить(Сред(прСтрока, 1, СтрДлина(прСтрока) - 1));
			прСтрока="";
		КонецЕсли;
	КонецЦикла;

	Возврат(лкВозврат);
	
КонецФункции // ИзСтрокиВСписок_OLD()

//Функция возвращает свободный номер, который отсутствует в параметре 'список' (поиск идет по свойству списка 'НомерСтроки')
//
Функция ПолучитьНовыйНомерСтроки(список) Экспорт
	Перем новыйНомер;
	
	занятыеНомера = Новый Соответствие;
	
	Если ТипЗнч(список) = Тип("Соответствие") Тогда
		Для Каждого текЭл Из список Цикл
			занятыеНомера.Вставить(текЭл.Значение["НомерСтроки"], Истина);		
		КонецЦикла;
	КонецЕсли;
	
	сч = 1;
	Пока Истина Цикл
		Если занятыеНомера[сч] = Неопределено Тогда
			новыйНомер = сч;
			Прервать;
		КонецЕсли;
		сч = сч + 1;
	КонецЦикла;
	
	Возврат новыйНомер;
КонецФункции

// Функция производит преобразование цвета из RGB-формата в 
// шестнадцатиричную систему исличсления
//
// Параметры: 
//  НужныйЦвет - Цвет; цвет, который нужно преобразовать
//
// Возвращаемое значение:
//  Строка
//  
Функция ПреобразоватьЦветИзRGBВШестнадцатиричнуюСистему(НужныйЦвет, ВозвратRGBСтроки = Ложь) Экспорт
	
	Если НужныйЦвет = Неопределено Тогда
		Возврат ?(ВозвратRGBСтроки, "", 0);
	КонецЕсли;
	
	Если НужныйЦвет.Вид <> ВидЦвета.Абсолютный Тогда
		НужныйЦвет = ПреобразоватьЦветВАбсолютный(НужныйЦвет);
	КонецЕсли;	
		
	Если ВозвратRGBСтроки Тогда
		ЗначЦвета = Строка(НужныйЦвет.Красный) + СимволРазделительМТ + Строка(НужныйЦвет.Зеленый) + СимволРазделительМТ + Строка(НужныйЦвет.Синий);
	Иначе
		ЗначЦвета = НужныйЦвет.Красный + НужныйЦвет.Зеленый + НужныйЦвет.Синий;
	КонецЕсли;
	
	Возврат ЗначЦвета;	
	
КонецФункции //ПреобразоватьЦветИзRGBВШестнадцатиричнуюСистему

// Функция преобразовывает переданный цвет в абсолютное значение цвета
// Внимание! Данная фукнция может давать погрешность цвета, вызванную
// неоптимальными механизмами платформы 1С: Предприятия
//
Функция ПреобразоватьЦветВАбсолютный(лЦвет) Экспорт
	
	Таб = Новый ТабличныйДокумент;
	Таб.Вывод = ИспользованиеВывода.Разрешить;
	Таб.Область("R1C1").ЦветТекста = лЦвет;	 
	Таб.Записать(РабочаяПапка + "ConvertColor.mxl", ТипФайлаТабличногоДокумента.MXL7); 
	Таб.Прочитать(РабочаяПапка + "ConvertColor.mxl");
	
	Возврат Таб.Область("R1C1").ЦветТекста;
	
КонецФункции //ПреобразоватьЦветВАбсолютный()

// Функция преобразовывает дату и время из формата XML в дату формата 1С
//
//Возвращаемое значение:
//  Дата
Функция ДатаВремяXMLВФормат1С(ДатаВремя, симвРазделитель = "T") Экспорт
				
	Поз = Найти(ДатаВремя, "-");
	
	Если Поз <> 0 Тогда	 
    	Год   = Число(Лев(ДатаВремя,  Поз - 1));
		Месяц = Число(Сред(ДатаВремя, Поз + 1,2));
		День  = Число(Сред(ДатаВремя, Поз + 4,2));
	Иначе
		Возврат '00010101';
	КонецЕсли;
	
	ПозПробела = Найти(ДатаВремя, симвРазделитель);
	
	Часы    = 0;
	Минуты  = 0;
	Секунды = 0;
	    
	Если ПозПробела > 0 Тогда
		Часы    = Число(Сред(ДатаВремя, ПозПробела + 1, 2));
		Минуты  = Число(Сред(ДатаВремя, ПозПробела + 4, 2));
		Секунды = Число(Сред(ДатаВремя, ПозПробела + 7, 2));
	КонецЕсли;
	
	Возврат Дата(Год, Месяц, День, Часы, Минуты, Секунды);
	
КонецФункции //ДатаВремяXMLВФормат1С()

// Процедура производит заполнение одинаковых реквизитов шапки для документов
// vd_180815 Процедура устарела !!! Нужно использовать ЗаполнитьОсновныеПараметрыДокумента()
Процедура ЗаполнитьОсновныеПараметрыДокумента_OLD(Док, СтруктураДокМУ, Менеджер, СтруктураПолей, ТипОперации, Агент) Экспорт
	
	ИдФирмы   	= СтруктураДокМУ.ИдФирмы;
	ИдКлиента 	= СтруктураДокМУ.ИдКлиента;
	ИдТоргТочки = СтруктураДокМУ.ИдТоргТочки;
	ИдДоговора  = СтруктураДокМУ.ИдДоговора;
	ВидДок 		= СтруктураДокМУ.ВидДокумента;
	НомерДок    = Строка(СтруктураДокМУ.Номер);  
	ДатаДок 	= СтруктураДокМУ.Дата;
	Комментарий = СтруктураДокМУ.Комментарий;
	
	ПредставлениеДокВМУ = ВидДок + " № " + НомерДок + " от " + ДатаДок;
	
	Если НаименованиеКонфигурации = "УправлениеПроизводственнымПредприятием" Тогда;
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Док, ТипОперации);
	Иначе
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Док, ПользовательСеанса, мВалютаРегламентированногоУчета, ТипОперации);
		
	КонецЕсли;
		
	Если СтруктураПолей.Свойство("Организация") Тогда
		// Получаем организацию из документа
		Если ИдФирмы = СтрПустойИдентификатор Или ИдФирмы = "" Тогда			
			ОповеститьОСобытии("ru='В документе " + ПредставлениеДокВМУ + " не указана фирма!'", ТипыЛогов["Обмен"], СтатусСообщения.Внимание, Агент, Док);      
		Иначе		
			Организация = ПолучитьСсылкуИзСправочника(ИдФирмы, "Организации");			
			Если Док.Метаданные().Реквизиты.Найти("Организация") <> Неопределено Тогда
				Док.Организация = Организация;
			КонецЕсли;
		КонецЕсли;    		
	КонецЕсли;
	
	Если СтруктураПолей.Свойство("Контрагент") Тогда		
		Если ИдКлиента = СтрПустойИдентификатор Или ИдКлиента = ""  Или ИдКлиента = Неопределено Тогда			
			ОповеститьОСобытии("'В документе " + ПредставлениеДокВМУ + " не указан контрагент!'", ТипыЛогов["Обмен"], СтатусСообщения.Внимание, Агент, Док);
		Иначе	
			Контрагент = ПолучитьСсылкуИзСправочника(ИдКлиента, "Контрагенты");
			Если Док.Метаданные().Реквизиты.Найти("Контрагент") <> Неопределено Тогда
				Док.Контрагент = Контрагент;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли; 	
	
	Если СтруктураПолей.Свойство("ДоговорКонтрагента") Тогда				
		
		ИспользоватьДоговоры = НастройкиОбработки.Получить("ИспользоватьДоговоры");
		ИспользоватьДоговоры = ?(ИспользоватьДоговоры = Неопределено, НастройкиОбработкиПоУмолчанию["ИспользоватьДоговоры"], ИспользоватьДоговоры);
		
		Если ИспользоватьДоговоры Тогда
			// Получаем торговую точку из документа
			Если ИдДоговора = СтрПустойИдентификатор Или ИдДоговора = "" Тогда			
				ОповеститьОСобытии("ru='В документе " + ПредставлениеДокВМУ + " не указан договор! Будет проставлен договор по умолчанию!'", ТипыЛогов["Обмен"], СтатусСообщения.Внимание, Агент, Док);				
			Иначе	
				ДоговорКонтрагента = ПолучитьСсылкуИзСправочника(ИдДоговора, "ДоговорыКонтрагентов");				
				Если Док.Метаданные().Реквизиты.Найти("ДоговорКонтрагента") <> Неопределено Тогда
					Док.ДоговорКонтрагента = ДоговорКонтрагента;
				КонецЕсли;
			КонецЕсли;                                         
		КонецЕсли;	
				
	КонецЕсли;  	
	
	Если ИспользоватьТорговыеТочки Тогда
		// Получаем торговую точку из документа
		Если СтруктураПолей.Свойство("ТорговаяТочка") Тогда		
			
			Если ИдТоргТочки <> СтрПустойИдентификатор И ИдТоргТочки <> "" И ИдТоргТочки <> Неопределено Тогда
				//++Ratmir 2018-01-11
				Если текНаименованиеКонфигурации = "KT2000_Alcohol_MnfcSP" Тогда
					Точка = ПолучитьСсылкуИзСправочника(ИдТоргТочки, "алкПунктыРазгрузки");								
					Док.алкПунктРазгрузки = Точка;
				Иначе
				//--Ratmir 2018-01-11					
					Точка = ПолучитьСсылкуИзСправочника(ИдТоргТочки, "Контрагенты");								
					Док.Контрагент = Точка;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;   		
	КонецЕсли;    	
	
	Если Док.Метаданные().Реквизиты.Найти("Ответственный") <> Неопределено Тогда
		Док.Ответственный = Агент;
	КонецЕсли; 	
	
	Если Док.Метаданные().Реквизиты.Найти("Комментарий") <> Неопределено Тогда
		Док.Комментарий = Комментарий;
	КонецЕсли;
	
	Если Не Док.Проведен Тогда
		Док.Дата = ТекущаяДата();
	КонецЕсли;
	
	ИспАвтонумерациюЦБД = НастройкиОбработки["ИспользоватьАвтонумерациюДокументовВЦБД"];
	ИспАвтонумерациюЦБД = ?(ИспАвтонумерациюЦБД = Неопределено, НастройкиОбработкиПоУмолчанию["ИспользоватьАвтонумерациюДокументовВЦБД"], ИспАвтонумерациюЦБД);
	
	Если ЗначениеЗаполнено(НомерДок) И (Не ИспАвтонумерациюЦБД) Тогда
		Если Менеджер.НайтиПоНомеру(НомерДок, ТекущаяДата()) = Менеджер.ПустаяСсылка() Тогда	
			Док.Номер = НомерДок;	
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДокМУ.Свойство("ТипЦен") Тогда
		Если Док.Метаданные().Реквизиты.Найти("ТипЦен") <> Неопределено Тогда
			ТипЦены = ПолучитьСсылкуИзСправочника(СтруктураДокМУ.ТипЦен, "ТипыЦенНоменклатуры");								
			Док.ТипЦен 	= ТипЦены;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДокМУ.Свойство("СуммаДокумента") Тогда
		Если Док.Метаданные().Реквизиты.Найти("СуммаДокумента") <> Неопределено Тогда
			Док.СуммаДокумента 	= СтруктураДокМУ.СуммаДокумента;
		КонецЕсли;
	КонецЕсли;
			
КонецПроцедуры //ЗаполнитьОсновныеПараметрыДокумента()

//vd_180810 Добавлена.
// Процедура производит заполнение одинаковых реквизитов шапки для документов
//
// Параметры:
//  Док					 - Сссылка	       - Документ
//  стррПоляИзМУ		 - Структура       - Структура полей с данными из XML файла
//  стррПараметры        - Структура       - Структура с параметрами, это новый добавленный реквизит 
//	стррПараметры.Дата  				 - Дата      - Дата документа. 
//	стррПараметры.Номер                  - Строка    - Номер Документа. 
//	стррПараметры.ИдОбъекта              - ГУИД      - Ид документа из МУ (атрибут GUID из МУ)
//	стррПараметры.ЭтоНовый               - Булево    - Ложь если в 1С уже есть документ с стррПараметры.ИдОбъекта
//	стррПараметры.Проведен               - Булево    - Истина если док проведен в МУ
//	стррПараметры.ПропускДокумента       - Булево    - Истина если документ не нужно загружать
//	стррПараметры.ПричинаПропуска        - Строка    - Причина по какой не нужно загружать документ в 1С
//	стррПараметры.ОбъектДокумента        - Ссылка    - Ссылка на документ, если в системе уже есть такой документ то заполненна
//	стррПараметры.Синоним                - Строка    - Синоним менеджера документа из методанных. ДокМенеджер.ПустаяСсылка().Метаданные().Синоним  Например для реализации "Реализация товаров и услуг"
//	стррПараметры.Представление          - Строка    - Представление документа в МУ.
//	стррПараметры.ВидДокумента           - Строка    - Вид документа. Например "РеализацияТоваровУслуг"
//	стррПараметры.ЭтоВиртуальныйДокумент - Булево    - Истина если это виртуальный документ
//
Процедура ЗаполнитьОсновныеПараметрыДокумента(ОбъектДок, стррПоляИзМУ, стррПараметры) Экспорт
	
	МетаданныеДок = ОбъектДок.Метаданные().Реквизиты; 
	
	//1. Дата
	ОбъектДок.Дата = стррПараметры.Дата;  
	
	//2. Номер
	ИспАвтонумерациюЦБД = НастройкиОбработки["ИспользоватьАвтонумерациюДокументовВЦБД"];
	ИспАвтонумерациюЦБД = ?(ИспАвтонумерациюЦБД = Неопределено, НастройкиОбработкиПоУмолчанию["ИспользоватьАвтонумерациюДокументовВЦБД"], ИспАвтонумерациюЦБД);
	Если стррПараметры.ЭтоНовый И Не ИспАвтонумерациюЦБД Тогда
		ОбъектДок.Номер = стррПараметры.Номер;	
	КонецЕсли;
	
	//НЕРИАЛИЗОВАНО применить функцию ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ДокументОбъект, ДокументОснование) и учесть ее заполнение в функции ЗаполнитьРеквизитыДокументаОрганизацияКонтрагентДоговор. 
	
	// 3. Сделка.
	Если стррПоляИзМУ.Свойство("ИдДокОсн") И НЕ стррПоляИзМУ.ИдДокОсн = Неопределено Тогда
		УстановитьРеквизитОснованиеДокумента(ОбъектДок, стррПараметры.ВидДокумента, стррПоляИзМУ.ИдДокОсн);	 	
	КонецЕсли;
	
	//4. Организация, Контрагент, Договор
	ЗаполнитьРеквизитыДокументаОрганизацияКонтрагентДоговор(ОбъектДок, стррПараметры.Представление, стррПоляИзМУ);

	//5. БанковскийСчетОрганизации
	Если МетаданныеДок.Найти("БанковскийСчетОрганизации") <> Неопределено И ЗначениеЗаполнено(ОбъектДок.Организация) Тогда
		ОбъектДок.БанковскийСчетОрганизации = ОбъектДок.Организация.ОсновнойБанковскийСчет;
	КонецЕсли;
	
	//6. ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете, ОтражатьВУправленческомУчете, ОтраженоВОперУчете, Оплачено.
	ЗаполнитьРеквизитыОтраженияВУчетах(ОбъектДок);	
	
	//7. СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансам, СчетУчетаРасчетовПоТаре, СчетУчетаНДС итд.    
	Если 
		текНаименованиеКонфигурации = "КомплекснаяАвтоматизация"
		И (     стррПараметры.ВидДокумента = "РеализацияТоваровУслуг" 
			ИЛИ стррПараметры.ВидДокумента = "ВозвратТоваровОтПокупателя" 
			ИЛИ стррПараметры.ВидДокумента = "ПоступлениеТоваровУслуг")
		И НЕ МетаданныеДок.Найти("ОтражатьВБухгалтерскомУчете") = Неопределено 
		И ОбъектДок.ОтражатьВБухгалтерскомУчете 
		И (НЕ МетаданныеДок.Найти("ДоговорКонтрагента") = Неопределено И ЗначениеЗаполнено(ОбъектДок.ДоговорКонтрагента))
	Тогда
		стррСчетаУчета = ОбъектДок.ЗаполнитьСтруктуруСчетовУчетаШапки();
		ЗаполнитьЗначенияСвойств(ОбъектДок, стррСчетаУчета);
	КонецЕсли;
	
	//10. ТипЦен и СуммаВключаетНДС
	Если НЕ МетаданныеДок.Найти("ТипЦен") = Неопределено Тогда
		Если стррПоляИзМУ.Свойство("идТипЦен") Тогда
			Результат = ПолучитьИПроверитьСсылкуИзСправочника(стррПоляИзМУ.идТипЦен, "ТипыЦенНоменклатуры");
		Иначе
			Результат = Неопределено;		
		КонецЕсли;
		//Подставим из договора, если типЦен не определн
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			Если НЕ МетаданныеДок.Найти("ДоговорКонтрагента") = Неопределено И ЗначениеЗаполнено(ОбъектДок.ДоговорКонтрагента) Тогда
				Результат = ОбъектДок.ДоговорКонтрагента.ТипЦен;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(Результат) Тогда 
			ОбъектДок.ТипЦен = Результат;
			//11. СуммаВключаетНДС
			Если НЕ МетаданныеДок.Найти("СуммаВключаетНДС") = Неопределено Тогда
				ОбъектДок.СуммаВключаетНДС = Результат.ЦенаВключаетНДС;
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;
	
	//12. УчитыватьНДС 
	Если НЕ МетаданныеДок.Найти("УчитыватьНДС") = Неопределено Тогда 
		ЗаполнитьРеквизитУчитыватьНДС(ОбъектДок);
	КонецЕсли;
	
	//13. Склад
	Если НЕ МетаданныеДок.Найти("Склад") = Неопределено Тогда
		Если стррПараметры.ВидДокумента = "РеализацияТоваровУслуг" И ЗначениеЗаполнено(ВыбНастройкиАгента.МобильныйСклад) Тогда
			ОбъектДок.Склад = ВыбНастройкиАгента.МобильныйСклад;
		КонецЕсли;
	ИначеЕсли НЕ МетаданныеДок.Найти("СкладОрдер") = Неопределено Тогда
		Если стррПоляИзМУ.Свойство("идСклад") Тогда
			Результат = ПолучитьИПроверитьСсылкуИзСправочника(стррПоляИзМУ.идСклад, "Склады");
		Иначе
			Результат = Неопределено;		
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Результат) И ЗначениеЗаполнено(ВыбНастройкиАгента.МобильныйСклад) Тогда
			Результат = ВыбНастройкиАгента.МобильныйСклад;	
		КонецЕсли;
		Если ЗначениеЗаполнено(Результат) Тогда
			ОбъектДок.СкладОрдер = Результат;
		КонецЕсли;                       
	ИначеЕсли НЕ МетаданныеДок.Найти("СкладГруппа") = Неопределено Тогда
		Если стррПоляИзМУ.Свойство("идСклад") Тогда
			Результат = ПолучитьИПроверитьСсылкуИзСправочника(стррПоляИзМУ.идСклад, "Склады");
		Иначе
			Результат = Неопределено;		
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Результат) И ЗначениеЗаполнено(ВыбНастройкиАгента.ОсновнойСклад) Тогда
			Результат = ВыбНастройкиАгента.ОсновнойСклад;	
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Результат) Тогда		
			ТекстСообщения = "ru='Для агента: " + ВыбАгент + " не указана настройка ""Основной склад""." +
			" В документе " + Строка(ОбъектДок) + " в качестве склада будет указан склад из настроек текущего пользователя'";
			ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обмен"], СтатусСообщения.Информация, ВыбАгент, ОбъектДок);  		
			Результат = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");		
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(Результат) Тогда
			ОбъектДок.СкладГруппа = Результат;
		КонецЕсли;  		
	КонецЕсли; 		

	//14. Комментарий
	Если НЕ МетаданныеДок.Найти("Комментарий") = Неопределено И стррПоляИзМУ.Свойство("Комментарий") Тогда
		Если ЗначениеЗаполнено(стррПоляИзМУ.Комментарий) Тогда
			ОбъектДок.Комментарий = стррПоляИзМУ.Комментарий;
		КонецЕсли;
	КонецЕсли;
	
	//15. СуммаДокумента  
	Если НЕ МетаданныеДок.Найти("СуммаДокумента") = Неопределено И стррПоляИзМУ.Свойство("СуммаДокумента") Тогда
		Попытка
			Результат = Число(стррПоляИзМУ.СуммаДокумента);
		Исключение
			Результат = 0;	
		КонецПопытки;
		Если НЕ Результат = 0 Тогда
			ОбъектДок.СуммаДокумента = Результат;
		КонецЕсли;
	КонецЕсли;
	
	//100. Заполнить остальные реквизиты. 
	Если НаименованиеКонфигурации = "УправлениеПроизводственнымПредприятием" Тогда;
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ОбъектДок, "Продажа");
	Иначе
		//vd_180816 ВыбАгент или ПользовательСеанса. Некорректно использовать ПользовательСеанса, тк настройки определяются для администратора а не для агента. Однако если использовать настройки для агента это приведет к тому что потребуется заполнять настройки для каждого агента и возможно у Агента не хватает прав чтобы работать в системе и тогда корректно подставлять ПользовательСеанса.
		//Поэтому сначало пробуем заполнить значения значениями для агента, далее запустим еще раз процедуру и незаполненные поля заполнятся значениями для ПользовательСеанса  
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ОбъектДок, ВыбАгент, мВалютаРегламентированногоУчета, "Продажа");
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ОбъектДок, ПользовательСеанса, мВалютаРегламентированногоУчета, "Продажа");
	КонецЕсли;
	
	//ДАЛЕЕ переопределяются реквизиты которые некорректно определила ЗаполнениеДокументов.ЗаполнитьШапкуДокумента()
	
	//101. Ответственный
	Если НЕ МетаданныеДок.Найти("Ответственный") = Неопределено Тогда
		ОбъектДок.Ответственный = ВыбАгент;	
	КонецЕсли;
	
КонецПроцедуры 

//vd_180903 Добавлена
//Заполнение реквизитов: ОтражатьВБухгалтерскомУчете ОтражатьВНалоговомУчете ОтражатьВУправленческомУчете
//Логика: Данные настройки сохраняются в глобальной переменной. 
//1. Если ОтражатьВУправленческомУчете = Ложь то и ОтражатьВБухгалтерскомУчете = Ложь и ОтражатьВНалоговомУчете = ложь
//2. Если ОтражатьВУправленческомУчете = Ложь И ОтражатьВБухгалтерскомУчете = Ложь то и ОтражатьВНалоговомУчете = ложь 
Процедура ЗаполнитьРеквизитыОтраженияВУчетах(ОбъектДок)
	
	МетаданныеДок = ОбъектДок.Метаданные().Реквизиты;
	
	ЕстьРеквизитОтражатьВУпрУчете = ?(МетаданныеДок.Найти("ОтражатьВУправленческомУчете") = Неопределено, Ложь, Истина);
	ЕстьРеквизитОтражатьВБухУчете = ?(МетаданныеДок.Найти("ОтражатьВБухгалтерскомУчете")  = Неопределено, Ложь, Истина);
	ЕстьРеквизитОтражатьВНалУчете = ?(МетаданныеДок.Найти("ОтражатьВНалоговомУчете")      = Неопределено, Ложь, Истина);
	
	//vd_180917
	Если НЕ ЕстьРеквизитОтражатьВУпрУчете И НЕ ЕстьРеквизитОтражатьВБухУчете И НЕ ЕстьРеквизитОтражатьВНалУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДок.Организация) Тогда
		Если ЕстьРеквизитОтражатьВУпрУчете Тогда 
			ОбъектДок.ОтражатьВУправленческомУчете = Ложь;
		КонецЕсли;
		Если ЕстьРеквизитОтражатьВБухУчете Тогда
			ОбъектДок.ОтражатьВБухгалтерскомУчете = Ложь;
		КонецЕсли;
		Если ЕстьРеквизитОтражатьВНалУчете Тогда
			ОбъектДок.ОтражатьВНалоговомУчете = Ложь;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ЕстьРеквизитОтражатьВБухУчете И гОтражатьВБухгалтерскомУчете = Неопределено Тогда
		ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
		гОтражатьВБухгалтерскомУчете = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОтражатьДокументыВБухгалтерскомУчете");
	КонецЕсли;
	Если ЕстьРеквизитОтражатьВНалУчете И гОтражатьВНалоговомУчете = Неопределено Тогда
		ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
		гОтражатьВНалоговомУчете = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОтражатьДокументыВНалоговомУчете");
	КонецЕсли;
	
	//ОтражатьВУправленческомУчете
	Если ЕстьРеквизитОтражатьВУпрУчете Тогда
		ОбъектДок.ОтражатьВУправленческомУчете = ОбъектДок.Организация.ОтражатьВРегламентированномУчете;
	КонецЕсли;
	
	//ОтраженоВОперУчете, Оплачено. Для документов ПКО и РКО 	
	Если ЕстьРеквизитОтражатьВУпрУчете И ОбъектДок.ОтражатьВУправленческомУчете Тогда 
		Если НЕ МетаданныеДок.Найти("ОтраженоВОперУчете") = Неопределено И НЕ МетаданныеДок.Найти("Оплачено") = Неопределено Тогда 
			ОбъектДок.ОтраженоВОперУчете = Истина;
			ОбъектДок.Оплачено           = Истина;
		конецЕсли;
	КонецЕсли;

	//ОтражатьВБухгалтерскомУчете
	Если ЕстьРеквизитОтражатьВУпрУчете И ЕстьРеквизитОтражатьВБухУчете Тогда //Документ реализация и другие		
		Если ОбъектДок.ОтражатьВУправленческомУчете Тогда
			ОбъектДок.ОтражатьВБухгалтерскомУчете = гОтражатьВБухгалтерскомУчете;
		Иначе
			ОбъектДок.ОтражатьВБухгалтерскомУчете = Ложь;
		КонецЕсли;			
	ИначеЕсли НЕ ЕстьРеквизитОтражатьВУпрУчете И ЕстьРеквизитОтражатьВБухУчете Тогда //Документ Заказ
		Если ОбъектДок.Организация.ОтражатьВРегламентированномУчете Тогда
			ОбъектДок.ОтражатьВБухгалтерскомУчете = гОтражатьВБухгалтерскомУчете;
		Иначе
			ОбъектДок.ОтражатьВБухгалтерскомУчете = Ложь;
		КонецЕсли;
	Иначе //такого не должно быть
		ОбъектДок.ОтражатьВБухгалтерскомУчете = Ложь;	
	КонецЕсли;
	
	//ОтражатьВНалоговомУчете
	Если ЕстьРеквизитОтражатьВУпрУчете И ЕстьРеквизитОтражатьВБухУчете И ЕстьРеквизитОтражатьВНалУчете Тогда //Документ реализация и другие	
		Если ОбъектДок.ОтражатьВУправленческомУчете И ОбъектДок.ОтражатьВБухгалтерскомУчете Тогда
			ОбъектДок.ОтражатьВНалоговомУчете = гОтражатьВНалоговомУчете;
		Иначе
			ОбъектДок.ОтражатьВНалоговомУчете = Ложь;
		КонецЕсли;
	ИначеЕсли НЕ ЕстьРеквизитОтражатьВУпрУчете И ЕстьРеквизитОтражатьВБухУчете И ЕстьРеквизитОтражатьВНалУчете Тогда //Документ Заказ
		Если ОбъектДок.Организация.ОтражатьВРегламентированномУчете И ОбъектДок.ОтражатьВБухгалтерскомУчете Тогда
			ОбъектДок.ОтражатьВНалоговомУчете = гОтражатьВНалоговомУчете;
		Иначе
			ОбъектДок.ОтражатьВНалоговомУчете = Ложь;
		КонецЕсли;
	КонецЕсли;

	////{{vd_180904 Моя старая логика без глобальных переменных и проверки существования реквизитов.	
	//Если ОбъектДок.ОтражатьВУправленческомУчете Тогда
	//	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	//	//организация в РУ отражается. Флаги БУ и НУ необходимо установить в соотв. с настройками пользователя по умолчанию
	//	ОбъектДок.ОтражатьВБухгалтерскомУчете = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОтражатьДокументыВБухгалтерскомУчете");
	//	Если ОбъектДок.ОтражатьВБухгалтерскомУчете Тогда
	//		ОбъектДок.ОтражатьВНалоговомУчете = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОтражатьДокументыВНалоговомУчете");
	//	Иначе
	//		ОбъектДок.ОтражатьВНалоговомУчете = Ложь;
	//	КонецЕсли;
	//Иначе
	//	//организация в РУ не отражается - необходимо сбросить флаги отражения в БУ и НУ
	//	ОбъектДок.ОтражатьВБухгалтерскомУчете = Ложь;
	//	ОбъектДок.ОтражатьВНалоговомУчете	  = Ложь;
	//КонецЕсли;
	////}}vd_180903

КонецПроцедуры

//vd_180816 Добавлена
Процедура ЗаполнитьРеквизитыДокументаОрганизацияКонтрагентДоговор(ОбъектДок, ПредставлениеДокВМУ, стррВсеПоляИзМУ)
	
	стррПоляИзМУ = Новый Структура();
	
	Если стррВсеПоляИзМУ.Свойство("идОрганизация") Тогда
		стррПоляИзМУ.Вставить("идОрганизация", стррВсеПоляИзМУ.идОрганизация);
	КонецЕсли;
	Если стррВсеПоляИзМУ.Свойство("идТоргТочка") Тогда
		стррПоляИзМУ.Вставить("идТоргТочка", стррВсеПоляИзМУ.идТоргТочка);
	КонецЕсли;	
	Если стррВсеПоляИзМУ.Свойство("идКонтрагент") Тогда
		стррПоляИзМУ.Вставить("идКонтрагент", стррВсеПоляИзМУ.идКонтрагент);
	КонецЕсли;
	Если стррВсеПоляИзМУ.Свойство("идДоговор") Тогда
		стррПоляИзМУ.Вставить("идДоговор", стррВсеПоляИзМУ.идДоговор);
	КонецЕсли;   	
	
	МетаданныеДок = ОбъектДок.Метаданные().Реквизиты;
	
	Организация = Неопределено;
	Контрагент  = Неопределено;
	Договор     = Неопределено;
	
	ЕстьРеквизитОрганизация = ?(МетаданныеДок.Найти("Организация")        = Неопределено, Ложь, Истина);
	ЕстьРеквизитКонтрагент  = ?(МетаданныеДок.Найти("Контрагент")         = Неопределено, Ложь, Истина);
	ЕстьРеквизитДоговор     = ?(МетаданныеДок.Найти("ДоговорКонтрагента") = Неопределено, Ложь, Истина);
	
	////Возможно это РасходныйКассовыйОрдер или ПриходныйКассовыйОрдер. В этих документе договор заполняется в ТЧ РасшифровкаПлатежа.ДоговорКонтрагента	
	//ЭтоДокументОрдер = Ложь;
	//Если НЕ ЕстьРеквизитДоговор И НЕ ОбъектДок.Метаданные().ТабличныеЧасти.РасшифровкаПлатежа = Неопределено Тогда
	//	Если ОбъектДок.РасшифровкаПлатежа.Количество() = 1 Тогда
	//		ЕстьРеквизитДоговор = Истина;
	//		ЭтоДокументОрдер    = Истина;
	//	КонецЕсли;
	//КонецЕсли;
	
	//Если текст ошибки остается Неопределено, то реквизит корректно получен из МУ, если Текст то реквизит не передан или не найден в системе 
	ТекстОшибкиОрганизации = Неопределено;
	ТекстошибкиКонтрагента = Неопределено;
	ТекстОшибкиДоговора    = Неопределено;
	
	//1. Организация
	Если ЕстьРеквизитОрганизация Тогда
		Если стррПоляИзМУ.Свойство("идОрганизация") Тогда
			Результат = ПолучитьИПроверитьСсылкуИзСправочника(стррПоляИзМУ.идОрганизация, "Организации", ТекстОшибкиОрганизации);
		Иначе
			ТекстОшибкиОрганизации = "Не передан реквизит Организация!";
			Результат = Неопределено;		
		КонецЕсли;
		Если ЗначениеЗаполнено(Результат) Тогда
			Организация = Результат;
		КонецЕсли;
	КонецЕсли;
	
	//2. Контрагент и ТорговаяТочка
	Если ЕстьРеквизитКонтрагент Тогда
		//Если передана торговая точка то в ОбъектДок.Контрагент подставляется из МУ ТорговаяТочка, если нет то подставляется из МУ Контрагент 
		Если ИспользоватьТорговыеТочки И стррПоляИзМУ.Свойство("идТоргТочка") Тогда
			//Пункты разгрузки в конфигурации УТ Алк. продукция.
			Если текНаименованиеКонфигурации = "KT2000_Alcohol_MnfcSP" Тогда 
				Результат = ПолучитьИПроверитьСсылкуИзСправочника(стррПоляИзМУ.идТоргТочка, "алкПунктыРазгрузки", ТекстошибкиКонтрагента);								
				ОбъектДок.алкПунктРазгрузки = Результат;
				Результат = Неопределено; //Для того чтобы заполнить еще и контрагента
			Иначе
				Результат = ПолучитьИПроверитьСсылкуИзСправочника(стррПоляИзМУ.идТоргТочка, "Контрагенты", ТекстошибкиКонтрагента);
			КонецЕсли;
		Иначе
			Результат = Неопределено;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Результат) тогда
			Если стррПоляИзМУ.Свойство("идКонтрагент") Тогда 
				Результат = ПолучитьИПроверитьСсылкуИзСправочника(стррПоляИзМУ.идКонтрагент, "Контрагенты", ТекстошибкиКонтрагента);
			Иначе
				ТекстошибкиКонтрагента = "Не передан реквизит Контрагент!";
				Результат = Неопределено;		
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(Результат) Тогда
			Контрагент = Результат;
		КонецЕсли;
	КонецЕсли;

	//3. Договор
	Если ЕстьРеквизитДоговор Тогда
		Если стррПоляИзМУ.Свойство("идДоговор") Тогда
			Результат = ПолучитьИПроверитьСсылкуИзСправочника(стррПоляИзМУ.идДоговор, "ДоговорыКонтрагентов", ТекстОшибкиДоговора);	
		Иначе
			ТекстОшибкиДоговора = "Не передан реквизит ""Договор контрагента""!";
			Результат = Неопределено;		
		КонецЕсли;
		Если ЗначениеЗаполнено(Результат) Тогда
			Договор = Результат;
		КонецЕсли;
	КонецЕсли;
	
	//////++ Проверка заполнение Организации Контрагента И Договора ////// 
	//10.1 Организация
	Если НЕ ЗначениеЗаполнено(Организация) И ЕстьРеквизитОрганизация Тогда
		//Организацию можно получить из договора
		Результат = Неопределено;
		Если ЕстьРеквизитДоговор И ЗначениеЗаполнено(Договор) Тогда 
			Результат = Договор.Организация;
		КонецЕсли;
		//Организацию можно получить из Контрагента
		Если НЕ ЗначениеЗаполнено(Результат) И ЕстьРеквизитКонтрагент И ЗначениеЗаполнено(Контрагент) Тогда
			Результат =  ЗаполнениеДокументов.ПолучитьОрганизациюПоКонтрагенту(Контрагент);	
		КонецЕсли;
		//Заполнение 
		Если ЗначениеЗаполнено(Результат) Тогда
			Организация = Результат;
		КонецЕсли;
	КонецЕсли;
	
	//10.2 Контрагент
	Если НЕ ЗначениеЗаполнено(Контрагент) И ЕстьРеквизитКонтрагент Тогда
		Если ЕстьРеквизитДоговор И ЗначениеЗаполнено(Договор) Тогда 
			//10.2.1 Контрагента можно получить по владельцу договора
			Результат = Договор.Владелец;
			//10.2.2 Контрагента можно получить из договора по реквизиту основному договор контрагента
			Если НЕ ЗначениеЗаполнено(Результат) Тогда
				Запрос = Новый Запрос();
				Запрос.Текст =  "ВЫБРАТЬ ПЕРВЫЕ 2
				                |	Контрагенты.Ссылка КАК Контрагент,
				                |	Контрагенты.ОсновнойДоговорКонтрагента,
				                |	ДоговорыКонтрагентов.Ссылка КАК ДоговорКонтрагента
				                |ИЗ
				                |	Справочник.Контрагенты КАК Контрагенты
				                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
				                |		ПО Контрагенты.ОсновнойДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка" ;
				
				Если ЕстьРеквизитОрганизация И ЗначениеЗаполнено(Организация) Тогда
					Запрос.Текст = Запрос.Текст + Символы.ПС + "|ГДЕ ДоговорыКонтрагентов.Организация = &Организация";
					Запрос.УстановитьПараметр("Организация", Организация);
				КонецЕсли; 			
				Выборка = Запрос.Выполнить().Выгрузить();
				//Выбираем контрагента, если договор только для одного контрагента
				Если Выборка.Количество() = 1 Тогда
					Результат = Выборка[0].Контрагент;
				КОнецЕсли;
			КонецЕсли;
			//Заполняем
			Если ЗначениеЗаполнено(Результат) Тогда
				Контрагент = Результат;
			КонецЕсли;			
		КонецЕсли;
	КонецЕсли;
	
	//10.3 Организация. Повторно попытаться получить организация из контрагента
	Если НЕ ЗначениеЗаполнено(Организация) И ЕстьРеквизитОрганизация И ЗначениеЗаполнено(Контрагент) Тогда	
		//Получение
		Результат =  ЗаполнениеДокументов.ПолучитьОрганизациюПоКонтрагенту(Контрагент);
		//Заполнение 
		Если ЗначениеЗаполнено(Результат) Тогда
			Организация = Результат;
		КонецЕсли;
	КонецЕсли;
	                               
	//10.4 Договор
	Если НЕ ЗначениеЗаполнено(Договор) И ЕстьРеквизитДоговор И ЗначениеЗаполнено(Контрагент) Тогда
		//++ Определение параметров для общего модуля
		//Организация
		Если ЗначениеЗаполнено(Организация) Тогда
			ЗначОрганизация = Организация;
		Иначе
			ЗначОрганизация = Неопределено;
		КонецЕсли;
		//СтруктураПараметровДляПолученияДоговора
        СтруктураРеквизита = Новый Структура("мСтруктураПараметровДляПолученияДоговора");
		ЗаполнитьЗначенияСвойств(СтруктураРеквизита, ОбъектДок);
		СтруктураПараметровДляПолученияДоговора = ?(ЗначениеЗаполнено(СтруктураРеквизита.мСтруктураПараметровДляПолученияДоговора), ОбъектДок.мСтруктураПараметровДляПолученияДоговора, Неопределено);
		//-- Определение параметров для общего модуля
		//10.4.1 Из Общего модуля 
		Результат = ЗаполнениеДокументов.ПолучитьДоговорПоОрганизацииИКонтрагенту(ЗначОрганизация, Контрагент, СтруктураПараметровДляПолученияДоговора);
		//10.4.2 Из Общего модуля получить доступные и взять первый попавшейся
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			Если НаименованиеКонфигурации = "УправлениеПроизводственнымПредприятием" Тогда
				//В УПП ЗаполнениеДокументов.ПолучитьДоступныеДоговорыКонтрагента не экспортная.
				ВыборкаРезультат = ПолучитьДоступныеДоговорыКонтрагента(Контрагент, СтруктураПараметровДляПолученияДоговора, Истина, ЗначОрганизация, Неопределено);
			Иначе
				ВыборкаРезультат = ЗаполнениеДокументов.ПолучитьДоступныеДоговорыКонтрагента(Контрагент, СтруктураПараметровДляПолученияДоговора, Истина, ЗначОрганизация, Неопределено);
			КонецЕсли;
			ВыборкаРезультат = ВыборкаРезультат.Выбрать();
			Пока ВыборкаРезультат.Следующий() Цикл
				Результат = ВыборкаРезультат.Договор;
				Прервать;
			КонецЦикла;
		КонецЕсли;
		//Заполнение
		Если ЗначениеЗаполнено(Результат) Тогда
			Договор = Результат; 	
		КонецЕсли;
	КонецЕсли;
	
	//////- Проверка заполнение Организации Контрагента И Договора ////// 	
	
	//Заполнение
	Если ЗначениеЗаполнено(Организация) Тогда
		ОбъектДок.Организация = Организация;
	КонецЕсли;
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ОбъектДок.Контрагент = Контрагент;
	КонецЕсли;
	Если ЗначениеЗаполнено(Договор) Тогда
		ОбъектДок.ДоговорКонтрагента = Договор;
	КонецЕсли;
	
	//Оповещения
	Если ЗначениеЗаполнено(ТекстОшибкиОрганизации) Тогда
		ТекстОшибки = "В документе " + ПредставлениеДокВМУ + " не заполнен реквизит организация! Причина: " + ТекстОшибкиОрганизации; 
		Если ЗначениеЗаполнено(Организация) Тогда
			ТекстОшибки = ТекстОшибки + Символы.ПС + " В документе " + ПредставлениеДокВМУ + " организация определена как: " + Организация;
		КонецЕсли;	
		ОповеститьОСобытии("ru='" + ТекстОшибки + "'", ТипыЛогов["Обмен"], СтатусСообщения.Внимание, ВыбАгент, ОбъектДок);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекстошибкиКонтрагента) Тогда
		ТекстОшибки = "В документе " + ПредставлениеДокВМУ + " не заполнен реквизит контрагент! Причина: " + ТекстошибкиКонтрагента; 
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ТекстОшибки = ТекстОшибки + Символы.ПС + " В документе " + ПредставлениеДокВМУ + " контрагент определен как: " + Контрагент;	
		КонецЕсли;	
		ОповеститьОСобытии("ru='" + ТекстОшибки + "'", ТипыЛогов["Обмен"], СтатусСообщения.Внимание, ВыбАгент, ОбъектДок);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекстОшибкиДоговора) Тогда
		ИспользоватьДоговоры = НастройкиОбработки.Получить("ИспользоватьДоговоры");
		ИспользоватьДоговоры = ?(ИспользоватьДоговоры = Неопределено, НастройкиОбработкиПоУмолчанию["ИспользоватьДоговоры"], ИспользоватьДоговоры);
		ИспользоватьДоговоры = ?(ИспользоватьДоговоры = Неопределено, Ложь, Истина);
		
		ТекстОшибки = ?(ИспользоватьДоговоры, "В документе " + ПредставлениеДокВМУ + " не заполнен реквизит договор! Причина: " + ТекстОшибкиДоговора, ""); 
		Если ЗначениеЗаполнено(Договор) Тогда
			ТекстОшибки = ТекстОшибки + ?(ИспользоватьДоговоры, Символы.ПС, "") + " В документе " + ПредставлениеДокВМУ + " договор определен как: " + Договор;	
		КонецЕсли;
			
		ОповеститьОСобытии("ru='" + ТекстОшибки + "'", ТипыЛогов["Обмен"], СтатусСообщения.Внимание, ВыбАгент, ОбъектДок);
	КонецЕсли;

КонецПроцедуры

//vd_180814 Добавлена
//
// Параметры:
//  ИдентификаторGUID	 - Строка - Идентификатор Ссылки Справочника
//  ВидСправочника		 - Строка - Справочник 
// 
// Возвращаемое значение:
// Ссылка       - Ссылка на справочник или пустая ссылка справочника
// Неопределено - Ссылка если 
Функция ПолучитьИПроверитьСсылкуИзСправочника(ИдентификаторGUID, ВидСправочника, ТекстОшибки = Неопределено)
	
	ТекстОшибки = "";	
	
	//1.Проверка ВидСправочника
	Попытка
		СпрМенеджер = Справочники[ВидСправочника];
	Исключение
		ТекстОшибки = "Не найден справочник: " + ВидСправочника + ".";
		Возврат Неопределено;
	КонецПопытки;
	
	//2. Проверка ИдентификаторGUID
	Если ПустаяСтрока(ИдентификаторGUID) Тогда 
		ТекстОшибки = "Из МУ не передан реквизит.";
		Возврат СпрМенеджер.ПустаяСсылка();
	ИначеЕсли СокрЛП(ИдентификаторGUID) = "00000000-0000-0000-0000-000000000000" Тогда
		ТекстОшибки = "Из МУ передана пустая ссылка реквизита справочника " + ВидСправочника + ".";
		Возврат СпрМенеджер.ПустаяСсылка();
	КонецЕсли;
	
	//3. Проверка преобразования ИдентификаторGUID из типа Строка к типу ГУИД
	Попытка
		ГуидЭлемента = Новый УникальныйИдентификатор(ИдентификаторGUID);
	Исключение
		ТекстОшибки = "Из МУ передана битая ссылка справочника " + ВидСправочника + ". Ссылка: " + ИдентификаторGUID + ".";
		Возврат СпрМенеджер.ПустаяСсылка();
	КонецПопытки;
	
	//4. Получаем ссылку на справочник.
	СсылкаЭлемента = СпрМенеджер.ПолучитьСсылку(ГуидЭлемента);   
	
	//5. Проверка результата поиска ссылки
	Если СсылкаЭлемента = Неопределено Тогда
		ТекстОшибки = "Не найден элемент справочника " + ВидСправочника + ". По ссылка: " + ИдентификаторGUID + ".";
		СсылкаЭлемента = СпрМенеджер.ПустаяСсылка();
	КонецЕсли;

	Возврат СсылкаЭлемента;	
	
КонецФункции 

//vd_180814 Добавлена
//
// Параметры:
//  ИдентификаторGUID	 - Строка или ГУИД - Идентификатор Ссылки Справочника
//  ВидСправочника		 - Строка - Справочник 
// 
// Возвращаемое значение:
// Ссылка       - Ссылка на справочник или пустая ссылка справочника
// Неопределено - Ссылка если 
Функция ПолучитьИПроверитьСсылкуИзДокумента(ИдентификаторGUID, ВидДокумента, ТекстОшибки = Неопределено)
	
	ТекстОшибки = "";	
	
	//1.Проверка ВидСправочника
	Попытка
		ДокМенеджер = Документы[ВидДокумента];
	Исключение
		ТекстОшибки = "Не найден документ:" + ВидДокумента + ".";
		Возврат Неопределено;
	КонецПопытки;
	
			
	Если ТипЗнч(ИдентификаторGUID) = Тип("Строка") Тогда
		//2. Проверка ИдентификаторGUID
		Если ПустаяСтрока(ИдентификаторGUID) Тогда 
			ТекстОшибки = "Из МУ не передан реквизит.";
			Возврат ДокМенеджер.ПустаяСсылка();
		ИначеЕсли СокрЛП(ИдентификаторGUID) = "00000000-0000-0000-0000-000000000000" Тогда
			ТекстОшибки = "Из МУ передана пустая ссылка реквизита справочника " + ВидДокумента + ".";
			Возврат ДокМенеджер.ПустаяСсылка();
		КонецЕсли;
	
		//3. Проверка преобразования ИдентификаторGUID из типа Строка к типу ГУИД
		Попытка
			ГуидЭлемента = Новый УникальныйИдентификатор(ИдентификаторGUID);
		Исключение
			ТекстОшибки = "Из МУ передана битая ссылка документа " + ВидДокумента + ". Ссылка: " + ИдентификаторGUID + ".";
			Возврат ДокМенеджер.ПустаяСсылка();
		КонецПопытки;
	ИначеЕсли ТипЗнч(ИдентификаторGUID) = Тип("УникальныйИдентификатор") Тогда 
		Если ИдентификаторGUID = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000") Тогда 
			ТекстОшибки = "Из МУ передана пустая ссылка реквизита справочника " + ВидДокумента + ".";
			Возврат ДокМенеджер.ПустаяСсылка();
		Иначе
			ГуидЭлемента = ИдентификаторGUID;
		КонецЕсли;
	Иначе
		ТекстОшибки = "Из МУ передан неизвестный тип ссылки документа " + ВидДокумента + ". Ссылка: " + ИдентификаторGUID + ".";
		Возврат ДокМенеджер.ПустаяСсылка();
	КонецЕсли;
	
	//4. Получаем ссылку на документ.
	СсылкаЭлемента = ДокМенеджер.ПолучитьСсылку(ГуидЭлемента);   
	
	//5. Проверка результата поиска ссылки
	Если СсылкаЭлемента.ПолучитьОбъект() = Неопределено Тогда
		ТекстОшибки = "Не найден элемент Документа " + ВидДокумента + ". По ссылке: " + Строка(ИдентификаторGUID) + ".";
		СсылкаЭлемента = ДокМенеджер.ПустаяСсылка();
	КонецЕсли;

	Возврат СсылкаЭлемента;	
	
КонецФункции 
	
// vd_180817 Добавлена Заполняет рекизит УчитыватьНДС в документе.
Процедура ЗаполнитьРеквизитУчитыватьНДС(ОбъектДок)
	
	//Возможно стоит еще сделать проверку на существование реквизитов в ОбъектДок
	
	Если НЕ ЗначениеЗаполнено(ОбъектДок.Организация) Тогда
		ОбъектДок.УчитыватьНДС = Ложь;
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(ОбъектДок.Дата) Тогда
		Дата = ОбъектДок.Дата;
	Иначе
		Дата = ТекущаяДата();   
	КонецЕсли;

	
	Если НаименованиеКонфигурации = "УправлениеПроизводственнымПредприятием" Тогда
		СтруктураПараметров = РегистрыСведений.УчетнаяПолитикаОрганизаций.ПолучитьПоследнее(Дата, Новый Структура("Организация", ОбъектДок.Организация));
	Иначе
		СтруктураПараметров = РегистрыСведений.УчетнаяПолитикаНалоговыйУчет.ПолучитьПоследнее(Дата, Новый Структура("Организация", ОбъектДок.Организация));
	КонецЕсли;
	
	Если СтруктураПараметров = Неопределено Тогда
		ОбъектДок.УчитыватьНДС = Ложь;
	Иначе
		//(( sk_190131 Для организаций применяющих УСН устанавливаем УчитыватьНДС = Ложь (MOD-251) 
		//Если СтруктураПараметров.Свойство("СистемаНалогообложения") И СтруктураПараметров.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая Тогда
		//	ОбъектДок.УчитыватьНДС = Истина;
		//Иначе
		//	ОбъектДок.УчитыватьНДС = НЕ СтруктураПараметров.ОрганизацияНеЯвляетсяПлательщикомНДС;
		//КонецЕсли;
		
		//(( sk_190214 Исправлена ошибка при загрузке документа на конфигурации УТ 10.3.35.2 (MOD-259) и конфигурации "Управление торговлей для Казахстана" (2.2.18.5)/Управление торговым предприятием для Казахстана (2.0.16.1)
		//Если СтруктураПараметров.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая Тогда
		//	ОбъектДок.УчитыватьНДС = Истина;
		//ИначеЕсли СтруктураПараметров.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная Тогда 
		//	ОбъектДок.УчитыватьНДС = Ложь;	
		//Иначе
		//	ОбъектДок.УчитыватьНДС = Не СтруктураПараметров.ОрганизацияНеЯвляетсяПлательщикомНДС;
		//КонецЕсли;

		Если СтруктураПараметров.Свойство("СистемаНалогообложения") И СтруктураПараметров.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая Тогда
			ОбъектДок.УчитыватьНДС = Истина;
		ИначеЕсли СтруктураПараметров.Свойство("СистемаНалогообложения") И СтруктураПараметров.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная Тогда
			ОбъектДок.УчитыватьНДС = Ложь;
		ИначеЕсли НаименованиеКонфигурации = "УправлениеТорговымПредприятиемДляКазахстана" Тогда // ИначеЕсли текНаименованиеКонфигурации = "УправлениеТорговлейДляКазахстана" Тогда sk_190604 Изменено условие в рамках (MOD-575)
			ОбъектДок.УчитыватьНДС = СтруктураПараметров.ОрганизацияЯвляетсяПлательщикомНДС;
		Иначе
			ОбъектДок.УчитыватьНДС = Не СтруктураПараметров.ОрганизацияНеЯвляетсяПлательщикомНДС;
		КонецЕсли;
		//)) sk_190214
		
	КонецЕсли;

КонецПроцедуры	

// Функция возвращает таблицу договоров данного контрагента, доступных для выбора
//
// Параметры
//  Контрагент                              - конрагент, по которому определяется договор
//  СтруктураПараметровДляПолученияДоговора - структура, содержащая параметры для определения договора:
//                                            список допустимых видов договоров и
//                                            список допустимых способов ведения взаиморасчетов, не обязательный.
// 	ВозвращатьТолькоПервые                  - булево, Истина - нужно вернуть только первые два договора,
//                                          - ложь - нужно вернуть весь список.
//  Организация                             - необязательный, организация, по которой определяется договор,
//                                            если не передана, то возвращается список договоров по всем орагнизациям.
//  ДополнительныеРеквизиты                 - необязательный, массив дополнительных реквизитов договора,
//                                            которые необходимо вернуть в результате запроса.
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция ПолучитьДоступныеДоговорыКонтрагента(Контрагент, СтруктураПараметровДляПолученияДоговора, ВозвращатьТолькоПервые, Организация = Неопределено, ДополнительныеРеквизиты = Неопределено) Экспорт

	Перем СписокДопустимыхВидовДоговоров, СписокДопустимыхВидовВзаиморасчетов, ВалютаВзаиморасчетовДоговора, ВидСравненияВалютыВзаиморасчетов;

	Если СтруктураПараметровДляПолученияДоговора <> Неопределено Тогда
		СтруктураПараметровДляПолученияДоговора.Свойство("СписокДопустимыхВидовДоговоров", СписокДопустимыхВидовДоговоров);
		СтруктураПараметровДляПолученияДоговора.Свойство("СписокДопустимыхВидовВзаиморасчетов", СписокДопустимыхВидовВзаиморасчетов);
		СтруктураПараметровДляПолученияДоговора.Свойство("ВалютаВзаиморасчетовДоговора", ВалютаВзаиморасчетовДоговора);
		СтруктураПараметровДляПолученияДоговора.Свойство("ВидСравненияВалютыВзаиморасчетов", ВидСравненияВалютыВзаиморасчетов);
	КонецЕсли;

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ПарКонтрагент",  Контрагент);
	Запрос.УстановитьПараметр("ПарВидДоговора", СписокДопустимыхВидовДоговоров);
	Запрос.УстановитьПараметр("ПарВидВзаиморасчетов", СписокДопустимыхВидовВзаиморасчетов);
	Запрос.УстановитьПараметр("ПарВалютаВзаиморасчетов", ВалютаВзаиморасчетовДоговора);
	Запрос.УстановитьПараметр("ПарОрганизация", Организация);

	ПсевдонимТаблицы = "ДоговорыКонтрагентов"; 
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ"
	+?(ВозвращатьТолькоПервые," ПЕРВЫЕ 2","") + "
	|	ДоговорыКонтрагентов.Ссылка КАК Договор,
	|ВЫБОР
	|	КОГДА ДоговорыКонтрагентов.Ссылка = ДоговорыКонтрагентов.Владелец.ОсновнойДоговорКонтрагента
	|		ТОГДА 1
	|	ИНАЧЕ 0
	|КОНЕЦ КАК Сорт";
	
	Если ЗначениеЗаполнено(ДополнительныеРеквизиты) Тогда
		
		Для Каждого НаименованиеРеквизита Из ДополнительныеРеквизиты Цикл
		
			Запрос.Текст = Запрос.Текст  + ", " + ПсевдонимТаблицы + "." + НаименованиеРеквизита;
		
		КонецЦикла; 		
	
	КонецЕсли; 
	
	Запрос.Текст = Запрос.Текст  + "
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК " + ПсевдонимТаблицы + "
	|ГДЕ
	|	(НЕ ДоговорыКонтрагентов.ПометкаУдаления)"
	+?(ЗначениеЗаполнено(Организация), "	И ДоговорыКонтрагентов.Организация = &ПарОрганизация", "") + "
	|	И ДоговорыКонтрагентов.Владелец    = &ПарКонтрагент"
	+?(ВалютаВзаиморасчетовДоговора = Неопределено, "", "
	|	И ДоговорыКонтрагентов.ВалютаВзаиморасчетов " 
	+?(ВидСравненияВалютыВзаиморасчетов = Неопределено, "=", ВидСравненияВалютыВзаиморасчетов) + "(&ПарВалютаВзаиморасчетов)
	|")
	+?(СписокДопустимыхВидовДоговоров = Неопределено, "", "
	|	И ДоговорыКонтрагентов.ВидДоговора В (&ПарВидДоговора)
	|")
	+?(СписокДопустимыхВидовВзаиморасчетов = Неопределено, "", "
	|	И ДоговорыКонтрагентов.ВедениеВзаиморасчетов В (&ПарВидВзаиморасчетов)
	|УПОРЯДОЧИТЬ ПО
	|	Сорт УБЫВ
	|");
		
	Возврат Запрос.Выполнить();

КонецФункции // ПолучитьДоступныеДоговорыКонтрагента()

// Процедура заполняет договор в документе
//  
Процедура УстановитьДоговорВДокументе(Агент, Док, СтрокаТЧ = Неопределено) Экспорт
	
	Перем СтруктураПараметровДляПолученияДоговора;
	
	Если ЗначениеЗаполнено(Док.Контрагент) И Не ЗначениеЗаполнено(Док.ДоговорКонтрагента)Тогда
		
		Если ТипЗнч(Док) = Тип("ДокументОбъект.ЗаказПокупателя") Тогда
			мСтруктураПараметровДляПолученияДоговора = ЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораЗаказаПокупателя();
		ИначеЕсли ТипЗнч(Док) = Тип("ДокументОбъект.ПриходныйКассовыйОрдер") Или 
				  ТипЗнч(Док) = Тип("ДокументОбъект.РасходныйКассовыйОрдер") Тогда
			//++Ratmir 2018-05-03 не тестировалось	  
			//СписокДопустимыхВидовДоговоров           = УправлениеВзаиморасчетами.ОпределитьВидДоговораСКонтрагентом(Док.ВидОперации);
			Если текНаименованиеКонфигурации = "КомплекснаяАвтоматизация" Тогда	  
				СписокДопустимыхВидовДоговоров           = УправлениеДенежнымиСредствами.ОпределитьВидДоговораСКонтрагентом(Док.ВидОперации);
			Иначе
				СписокДопустимыхВидовДоговоров           = УправлениеВзаиморасчетами.ОпределитьВидДоговораСКонтрагентом(Док.ВидОперации);
			КонецЕсли;	
			//--Ratmir 2018-05-03	  
			мСтруктураПараметровДляПолученияДоговора = Новый Структура ("СписокДопустимыхВидовДоговоров", СписокДопустимыхВидовДоговоров);
		Иначе
			мСтруктураПараметровДляПолученияДоговора = ЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораПродажи();
		КонецЕсли;	
		 			
		// Получаем список доступных договоров для контрагента
		РезультатЗапроса = ПолучитьДоступныеДоговорыКонтрагента(Док.Контрагент, мСтруктураПараметровДляПолученияДоговора, Ложь, Док.Организация);
		ТаблицаДоговоров = РезультатЗапроса.Выгрузить();
					
		Если Не ЗначениеЗаполнено(Док.ДоговорКонтрагента) Тогда
			
			Для Каждого СтрокаТаб Из ТаблицаДоговоров Цикл
				Док.ДоговорКонтрагента = СтрокаТаб.Договор;
				Прервать;				
			КонецЦикла;		
			
			Если Не ЗначениеЗаполнено(Док.ДоговорКонтрагента) Тогда
				ТекстСообщения = "ru='Не найдено ни одного подходящего договора для контрагента """ + СокрЛП(Док.Контрагент) + """." + Символы.ПС + 
								 "В документе: " + Строка(Док)+ " не проставлен договор! Укажите договор вручную или создайте новый!'";
				//ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обмен"], СтатусСообщения.Внимание, Агент, Док.Ссылка);
			КонецЕсли;  
			
		КонецЕсли; 
		
	КонецЕсли;
			
	Если СтрокаТЧ <> Неопределено Тогда
		
		СтрокаТЧ.ДоговорКонтрагента = Док.ДоговорКонтрагента
		
	КонецЕсли; 		
	
КонецПроцедуры // УстановитьДоговорВДокументе()

// Функция выполняет указанную операцию с переданным объектом (!) или менеджером записи регистра
// и возвращает значение типа Булево в результате выполнения
// операции
//
Функция ВыполнитьОперациюДляОбъекта(Объект, ВидОперации, Агент = Неопределено) Экспорт
	
	типЛога = ?(Агент = Неопределено, ТипыЛогов["Обработка"], ТипыЛогов["Обмен"]);
	флОперацияВыполнена = Ложь;	
		
	Для Сч = 1 По КоличествоПопыток Цикл
		
		Попытка
			
			типЗнач = ТипЗнч(Объект);
			Если ВидОперации = "запись" Тогда				
				
				////Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч())
				//Если Найти(Строка(типЗнач), "Справочник") > 0 Тогда
				//	стр = ?(этоНовый, "Записан", "Перезаписан");
				//	этоНовый = Объект.ЭтоНовый();
				//	ТекстСообщения = Шаблон("ru='" + стр + " элемент """ + Объект + """ (справочник """ + Объект.Метаданные().Представление() + """)'");				
				//ИначеЕсли Найти(Строка(типЗнач), "Документ") > 0 Тогда
				//	стр = ?(этоНовый, "Записан", "Перезаписан");
				//	ТекстСообщения = Шаблон("ru='" + стр + " документ """ + Объект + """ (""" + Объект.Метаданные().Представление() + """)'");	
				//ИначеЕсли Найти(Строка(типЗнач), "Регистр") > 0 Тогда
				//	ТекстСообщения = Шаблон("ru='Создана запись """ + Объект + """'");
				//Иначе
				//	ТекстСообщения = Шаблон("ru='Записан объект """ + Объект + """'");
				//КонецЕсли;				
                флСпр = (Найти(Строка(типЗнач), "Справочник") > 0);
				флДок = (Найти(Строка(типЗнач), "Документ") > 0);								
				
				Если флСпр Или флДок Тогда
					этоНовый = Объект.ЭтоНовый();
				КонецЕсли;
				
				Объект.Записать();
				
				Если флСпр Тогда
					стр = ?(этоНовый, "Записан", "Перезаписан");					
					ТекстСообщения = "ru='" + стр + " элемент """  + Объект + """ (справочник """ + Объект.Метаданные().Представление() + """)'";				
				ИначеЕсли флДок Тогда
					стр = ?(этоНовый, "Записан", "Перезаписан");
					ТекстСообщения = "ru='" + стр + " документ """ + Объект + """ (""" + Объект.Метаданные().Представление() + """)'";	
				ИначеЕсли Найти(Строка(типЗнач), "Регистр") > 0 Тогда
					ТекстСообщения = "ru='Создана запись """ + Объект + """'";
				Иначе
					ТекстСообщения = "ru='Записан объект """ + Объект + """'";
				КонецЕсли;
				
				ОповеститьОСобытии(ТекстСообщения, типЛога, СтатусСообщения.БезСтатуса, Агент);

			ИначеЕсли ВидОперации = "проведение" Тогда
				
				Объект.Записать(РежимЗаписиДокумента.Проведение);
				ТекстСообщения = "ru='Проведен документ """ + Объект + """ (""" + Объект.Метаданные().Представление() + """)'";				
				ОповеститьОСобытии(ТекстСообщения, типЛога, СтатусСообщения.БезСтатуса, Агент);
			ИначеЕсли ВидОперации = "создание" Тогда
				Если Найти(Строка(типЗнач), "Справочник") > 0 Тогда
					Объект = Объект.СоздатьЭлемент();
					//ТекстСообщения = "ru='Создан элемент """ + Объект + """ (справочник """ + Объект.Метаданные().Представление() + """)'";				
				ИначеЕсли Найти(Строка(типЗнач), "Документ") > 0 Тогда
					Объект = Объект.СоздатьДокумент();
					//ТекстСообщения = "ru='Создан документ """ + Объект + """ (""" + Объект.Метаданные().Представление() + """)'";	
				Иначе
					//ТекстСообщения = "ru='Недопустимый тип объекта """ + Объект + """'";				
					ОповеститьОСобытии(ТекстСообщения, типЛога, СтатусСообщения.Внимание, Агент);
					Возврат Ложь;
				КонецЕсли;
			ИначеЕсли ВидОперации = "удаление" Тогда
				
				представлениеОбъекта = Строка(Объект);
				
				Если Найти(Строка(типЗнач), "Справочник") > 0 Тогда
					представление = Объект.Метаданные().Представление();
					Объект.Удалить();
					ТекстСообщения = "ru='Удален элемент """ + представлениеОбъекта + """ (справочник """ + представление + """)'";				
				ИначеЕсли Найти(Строка(типЗнач), "Документ") > 0 Тогда
					представление = Объект.Метаданные().Представление();
					Объект.Удалить();
					ТекстСообщения = "ru='Удален документ """ + представлениеОбъекта + """'";	
				ИначеЕсли Найти(Строка(типЗнач), "Регистр") > 0 Тогда
					Объект.Удалить();
					ТекстСообщения = "ru='Удалена запись """ + представлениеОбъекта + """'";
				КонецЕсли;
				
				ОповеститьОСобытии(ТекстСообщения, типЛога, СтатусСообщения.БезСтатуса, Агент);
				
			ИначеЕсли  ВидОперации = "пометитьНаУдаление" Тогда
				
				представлениеОбъекта = Строка(Объект);
				
				Если Найти(Строка(типЗнач), "Справочник") > 0 Тогда
					Объект.УстановитьПометкуУдаления(Истина);
					ТекстСообщения = "ru='Элемент """ + Объект + """ помечен на удаление (справочник """ + Объект.Метаданные().Представление() + """)'";				
				ИначеЕсли Найти(Строка(типЗнач), "Документ") > 0 Тогда
					Объект.УстановитьПометкуУдаления(Истина);
					ТекстСообщения = "ru='Документ """ + представлениеОбъекта + """ помечен на удаление'";
				КонецЕсли;
				
				ОповеститьОСобытии(ТекстСообщения, типЛога, СтатусСообщения.БезСтатуса, Агент);
			КонецЕсли;
			
			флОперацияВыполнена = Истина;			
			
			Прервать;
			
		Исключение
			
			Сообщить("------------------------------------------------------" + Символы.ПС + ОписаниеОшибки());
			
			// Пауза снизит нагрузку на сервер и позволит другим пользователям закончить операции,
			// которые идут в транзакции.
			#Если Клиент Тогда
			Предупреждение(НСтр("ru='В данный момент нет возможности выполнить " + ВидОперации + " для объекта: " + Строка(Объект) +
					+ Символы.ПС + "Повторная попытка будет произведена через " + ПаузаМеждуПопытками + " секунд'"),
				ПаузаМеждуПопытками, 
				"Пауза"); 
			#КонецЕсли
			
			ТекстСообщения = "ru='Не удалось выполнить " + ВидОперации + " для объекта: """ + Строка(Объект) + """'";
			
			ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обмен"], СтатусСообщения.Важное, , Объект);
			
		КонецПопытки; 
		
	КонецЦикла;        		
		
	Возврат флОперацияВыполнена;
			
КонецФункции //ВыполнитьОперациюДляОбъекта()

Процедура ЗаполнитьТаблицуТорговыхТочек(сзКлиентыАгента, сзТоргТочкиАгента)
	
	Если текНаименованиеКонфигурации = "KT2000_Alcohol_MnfcSP" Тогда
		Запрос = Новый Запрос(ПолучитьТекстЗапросаАлкПунктыРазгрузки(Истина));
	Иначе
		Запрос = Новый Запрос(ПолучитьТекстЗапросаТорговыхТочек(Истина));
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СписокКонтрагентов", сзКлиентыАгента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если сзТоргТочкиАгента.НайтиПоЗначению(Выборка.Ссылка) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		сзТоргТочкиАгента.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

// Процедура сообщает о документе, который уже был загружен
//    
Процедура СообщитьОПропускеДокумента(СтруктураПараметров, Агент) Экспорт

	ТекстСообщения = "ru='Пропущена загрузка документа """ + СтруктураПараметров.ВидДокумента +
					 """ № " + Строка(СтруктураПараметров.Номер) + " от " + Строка(СтруктураПараметров.Дата) + 
					 " - документ был загружен ранее.'";
	ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обмен"], СтатусСообщения.Информация, Агент);
	
КонецПроцедуры //СообщитьОПропускеДокумента()

// sk_190114 Процедура исключена в рамках (MOD-207)
// НастроитьАвтообменСАгентСОД()
//
Процедура НастроитьАвтообменСАгентСОД_OLD() Экспорт
	
	Если СпособОбмена = 1 Тогда      // Агент Плюс СОД
		Если Не КомпонентаЗагружена Тогда
			Результат = ЗагрузитьКомпонентуAPPlus_OLD(); // Результат = ЗагрузитьКомпонентуAPPlus() sk_190116
		КонецЕсли;
		
		Если КомпонентаЗагружена Тогда
			ПапкаАгентСОД = НастройкиОбработки["ПапкаАгентСОД"];	
			#Если Не Клиент Тогда
				МУОбъектServer.SetExchangeDir(ПапкаАгентСОД);
			#Иначе		
				МУОбъект.АпсУстПапкуОбмена(ПапкаАгентСОД);
			#КонецЕсли	
			Если флАвтоОбменАгентСОД Тогда				
				
				Если Не ЗначениеЗаполнено(ПапкаАгентСОД) Тогда
					ТекстСообщения = "ru='Не указана константа ""Папка обмена"" для способа обмена ""Агент Плюс СОД"". Автообмен не будет производиться!'";
					ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обработка"], СтатусСообщения.Внимание);
					Возврат;
				КонецЕсли;
				
				#Если Не Клиент Тогда
					МУОбъектServer.EnableServer();
				#Иначе		
					МУОбъект.АпсВключитьСервер();
				#КонецЕсли				
			Иначе
				#Если Не Клиент Тогда
					МУОбъектServer.DisableServer();			            
				#Иначе
					МУОбъект.АпсОтключитьСервер();						
				#КонецЕсли
			КонецЕсли;
						
		КонецЕсли;
	
		Возврат;
	КонецЕсли;	
	
КонецПроцедуры
	
Процедура ЗаписатьВПротоколЗагрузкуЭлемСпр(Спр, ЭтоНовый, Агент)
	
	Наим 		  = Спр.Наименование;
	Представление = Спр.Ссылка.ПолучитьОбъект().Метаданные().Представление();
	ИмяСпр 	      = Спр.Ссылка.ПолучитьОбъект().Метаданные().Имя;
	
	Если ЭтоНовый Тогда
		ТекстСообщения = "ru='Записан новый элемент справочника: """ + Представление + """ (""" + Наим + """)'";
		ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обмен"], СтатусСообщения.Информация, Спр.Ссылка);
	Иначе
		ТекстСообщения = "ru='Обновлен элемент справочника: """ + Представление + """ (""" + Наим + """)'"; // ТекстСообщения = "Обновлен элемент справочника: """ + Представление + """ (""" + Наим + """)"; sk_181228
		ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обмен"], СтатусСообщения.Информация, Агент, Спр.Ссылка);
	КонецЕсли;                                          	
	
КонецПроцедуры //ЗаписатьВПротоколЗагрузкуЭлемСпр

// Создает новый документ "РеализацияТоваровУслуг", на основании документа "ЗаказПокупателя",
// используя стандартный метод "Заполнить()"  // sk_181001 Исключено 
// используя типовую процедуру заполнения
//
Процедура ВвестиРеализациюНаОснованииЗаявки(ДокЗаявка, Агент)
	
	// Ищем среди подчиненных документов данной заявки реализацию
	ДокРеал = 0;
	
	//(( sk_181002 Исключено
	//СтРеал = Новый Структура;  
	//СтЗаявка = Новый Структура;
	//СтЗаявка.Вставить("Сделка", ДокЗаявка);
	//)) sk_181002
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка,
	|	РеализацияТоваровУслуг.Сделка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Сделка.Ссылка = &Сделка";
	
	Запрос.УстановитьПараметр("Сделка", ДокЗаявка.Ссылка);
	Реализации = Запрос.Выполнить().Выбрать();

	Если Реализации.Следующий() Тогда
		ДокРеал = Реализации.Ссылка.ПолучитьОбъект();
	КонецЕсли;
	
	Если ДокРеал <> 0 Тогда // Нашли документ, созданный на основании заявки
		Если Не флОбновлятьДокументыПриЗагрузке Тогда
			Возврат;
		КонецЕсли;
		
		//(( sk_181001 Найденный документ проведен, не будем его обновлять
		Если ДокРеал.Проведен Тогда
			ТекстСообщения = "ru='Не удалось создать новый документ ""Реализация товаров и услуг""! На основании документа: " + Строка(ДокЗаявка.Ссылка) + " найден проведенный документ: " + Строка(ДокРеал) + ".'";
			ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обмен"], СтатусСообщения.Важное, Агент, ДокРеал.Ссылка);
			Возврат;
		КонецЕсли;
		//)) sk_181001
		
		ДокРеал.Товары.Очистить();
		ДокРеал.Услуги.Очистить();
		ДокРеал.Дата = ТекущаяДата();
	Иначе    		
		ДокРеал = Документы.РеализацияТоваровУслуг;
		
		Если Не ВыполнитьОперациюДляОбъекта(ДокРеал, "создание", Агент) Тогда 			
			ТекстСообщения = "ru='Не удалось создать новый документ ""Реализация товаров и услуг""!'";
			ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обмен"], СтатусСообщения.Важное, Агент);
			Возврат;			
		КонецЕсли;  		
		ДокРеал.Дата = ТекущаяДата();
	КонецЕсли;
	
	//(( sk_181001 Исключаем использование метода "Заполнить", используем типовую процедуру заполнения
	//ДокРеал.Заполнить(ДокЗаявка.Ссылка); 
	//ДокРеал.Ответственный = ДокЗаявка.Ответственный; // Заполнение ответственного перенесено в процедуру ОбработкаЗаполненияРеализацииНаОснованииЗаявки() 
	ОбработкаЗаполненияРеализацииНаОснованииЗаявки(ДокРеал, ДокЗаявка); 
	//)) sk_181001
	
	Если ВыполнитьОперациюДляОбъекта(ДокРеал, "запись", Агент) Тогда 			
		
		ТекстСообщения = "ru='На основании документа: " + Строка(ДокЗаявка.Ссылка) + " создан документ: " + Строка(ДокРеал) + "'";
		ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обмен"], СтатусСообщения.Информация, Агент, ДокРеал.Ссылка);	
		
		//(( sk_181001 Не будем подтверждать документ "РеализацияТоваровиУслуг" после формирования на основании документа "ЗаказПокупателя"  
		//Если флПроводитьДокументыПриЗагрузке Тогда
		//	
		//	Проводить = Истина;
		//	
		//	Если Не ЗначениеЗаполнено(ДокРеал.Контрагент) Тогда
		//		ОповеститьОСобытии("ru='В документе " + Строка(ДокРеал) + " не указан контрагент. Документ не будет проведен!'", ТипыЛогов["Обмен"], СтатусСообщения.Важное, Агент, ДокРеал.Ссылка);
		//		Проводить = Ложь;
		//	КонецЕсли;
		//	
		//	Если Не ЗначениеЗаполнено(ДокРеал.ДоговорКонтрагента) Тогда
		//		ОповеститьОСобытии("ru='В документе " + Строка(ДокРеал) + " не указан договор. Документ не будет проведен!'", ТипыЛогов["Обмен"], СтатусСообщения.Важное, Агент, ДокРеал.Ссылка);
		//		Проводить = Ложь;
		//	КонецЕсли;
		//	
		//	Если ДокРеал.СуммаДокумента = 0 Тогда
		//		ОповеститьОСобытии("ru='Сумма документа " + Строка(ДокРеал) + " равна 0. Документ не будет проведен!'", ТипыЛогов["Обмен"], СтатусСообщения.Важное, Агент, ДокРеал.Ссылка);
		//		Проводить = Ложь;
		//	КонецЕсли;
		//	
		//	Если Проводить Тогда
		//		Если Не ВыполнитьОперациюДляОбъекта(ДокРеал, "проведение", Агент) Тогда 							
		//			ОповеститьОСобытии("ru='Не удалось провести документ: " + Строка(ДокРеал) + "'", ТипыЛогов["Обмен"], СтатусСообщения.Важное, Агент, ДокРеал);
		//			Возврат;			
		//		КонецЕсли;
		//	КонецЕсли;
		//
		//КонецЕсли;	
		//)) sk_181001
	Иначе
		ТекстСообщения = "ru='Не удалось записать документ: " + Строка(ДокРеал) + ", созданного на основании документа: " + Строка(ДокЗаявка.Ссылка) + "'";
		ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обмен"], СтатусСообщения.Важное, Агент, ДокРеал.Ссылка);		
	КонецЕсли;
	
КонецПроцедуры //ВвестиРеализациюНаОснованииЗаявки()

// sk_180928 Добавлена.
// Заполняет документ "РеализацияТоваровУслуг" на основании документа "ЗаказПокупателя", используя типовую процедуру заполнения
// Параметры:
//  ДокументОбъект  - объект редактируемого документа (РеализацияТоваровУслуг),
//  ДокументОснование - объект документа основания (ЗаказПокупателя)
// 
Процедура ОбработкаЗаполненияРеализацииНаОснованииЗаявки(ДокументОбъект, ДокументОснование)
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ДокументОбъект, ДокументОснование);
	ЗаполнениеДокументов.ЗаполнитьДанныеДоставкиПоОснованию(ДокументОбъект, ДокументОснование);
	
	ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
	ДокументОбъект.ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада;
	ДокументОбъект.Сделка = ДокументОснование.Ссылка;	
	
	Если ДокументОснование.Проведен Тогда
		ДокументОбъект.ЗаполнитьТабличнуюЧастьПоЗаказуПокупателяУпр(ДокументОбъект.Товары, ДокументОснование);
	КонецЕсли;
	
	// В КА документ РеализацияТоваровУслуг заполняем реквизит БанковскийСчетОрганизации 
	Если текНаименованиеКонфигурации = "КомплекснаяАвтоматизация" Тогда
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ДокументОбъект, "Продажа");
	КонецЕсли;

	ДокументОбъект.Ответственный = ДокументОснование.Ответственный;
	
	//В УТ документ РеализацияТоваровУслуг нет реквизитов: СчетУчетаРасчетовПоАвансам, СчетУчетаРасчетовПоТаре, СчетУчетаРасчетовСКонтрагентом
	//В КА документ РеализацияТоваровУслуг есть реквизиты: СчетУчетаРасчетовПоАвансам, СчетУчетаРасчетовПоТаре, СчетУчетаРасчетовСКонтрагентом 
		
	Если текНаименованиеКонфигурации = "КомплекснаяАвтоматизация" Тогда 
		стррСчетаУчета = ДокументОбъект.ЗаполнитьСтруктуруСчетовУчетаШапки();
		ЗаполнитьЗначенияСвойств(ДокументОбъект, стррСчетаУчета);
	КонецЕсли;
	
КонецПроцедуры //ОбработкаЗаполненияРеализацииНаОснованииЗаявки

Функция ПолучитьКодТипаЦены(ДанныеАгента, ПарТипЦены, текОбъект, ТзКатегорииЦен, СписНеНайденныхТиповЦен)
	
	КодТипаЦены = "";
	
	Если ПарТипЦены <> Неопределено Тогда
		
		Если Не ПарТипЦены.Пустая() Тогда 
			
			Если ТипЗнч(ПарТипЦены) = Тип("СправочникСсылка.ТипыЦенНоменклатурыКонтрагентов") Тогда
				ТипЦены = ПарТипЦены.ТипЦеныНоменклатуры;
			Иначе
				ТипЦены = ПарТипЦены;
			КонецЕсли;
			
			НайденнаяСтрока = ТзКатегорииЦен.Найти(ТипЦены, "ТипЦены");
			
			Если НайденнаяСтрока <> Неопределено Тогда  
				
				КодТипаЦены = НайденнаяСтрока.Код;		
				
			Иначе
				
				СтОтбор = Новый Структура("Объект", ВыбАгент);
								
				Если СписНеНайденныхТиповЦен.НайтиПоЗначению(ТипЦены) = Неопределено Тогда
					
					ТипОбъекта = Строка(текОбъект);
					
					Если Найти(ТипОбъекта, "Регистр") = 0 Тогда 					
						ИмяОбъекта = текОбъект.Метаданные().Имя;
						Если Метаданные.Справочники.Найти(ИмяОбъекта) <> Неопределено Тогда
							ТипОбъекта = "Справочник";
						ИначеЕсли Метаданные.Документы.Найти(ИмяОбъекта) <> Неопределено Тогда							
							ТипОбъекта = "Документ";					
						КонецЕсли;
					КонецЕсли;
					
					Если Найти(ТипОбъекта, "Справочник") > 0 Тогда    
						ВидОбъекта = текОбъект.Метаданные().Синоним;
						СтрТипОбъекта = "ru='элементе справочника """ + ВидОбъекта + """: " + Строка(текОбъект) + "'";
					ИначеЕсли Найти(ТипОбъекта, "Документ") > 0 Тогда
						ВидОбъекта = текОбъект.Метаданные().Синоним;
						СтрТипОбъекта = "ru='документе: " + Строка(текОбъект) + "'";  
					КонецЕсли;
					
					СтрТипОбъекта = НСтр(СтрТипОбъекта);
					ТекстОкончание = НСтр("ru='Используется в " + СтрТипОбъекта + "'");
					
					ТекстНачало = НСтр("ru='Не найден тип цены """ + ТипЦены + """ в списке выгружаемых типов цен для агента " + ВыбАгент + "!'");					
					
					ОповеститьОСобытии("ru='" + ТекстНачало + Символы.ПС + ТекстОкончание + "'", ТипыЛогов["Обмен"], СтатусСообщения.Внимание, ДанныеАгента["Пользователь"], текОбъект); 
					
				КонецЕсли;
				
				СписНеНайденныхТиповЦен.Добавить(ТипЦены);
				
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЕсли;		
	
	Возврат Строка(КодТипаЦены);
	
КонецФункции //ПолучитьКодТипаЦены()

// sk_190111 Добавлена
// Возвращает СЗ из файла АПСОД [Папка обмена данными]\Status.txt
// Формат  файла: 03020100-0504-0006-3030-303030303030	Белкина А. Г.	Belkina\To1C.zip	2018-12-07 17-41-51	620163570
//  0-й - уникальный идентификатор МУ
//  1-й - псевдоним торгового агента
//  2-й - имя полученного с МУ файла с директорией
//  3-й - время последнего сеанса
//  4-й - контрольная сумма полученного файла
// 
// Параметры:
//  стрПапкаОбмена - Строка - путь к папке обмена данными АПСОД
//
// Возвращаемое значение:
//  сзДатаПоследнегоСеансаАПСОД - Список Значений -
//												   Значение - уникальный идентификатор мобильного устройства 
//												   Представление - дата последнего сеанса
//
Функция ПолучитьДатуПоследнегоСеансаСАПСОД(стрПапкаОбмена)
	
	сзДатаПоследнегоСеансаАПСОД = Новый СписокЗначений;
	
	стрПолноеИмяФайла = стрПапкаОбмена + "\" + "Status.txt";
	
	ФайлНаДиске = Новый Файл(стрПолноеИмяФайла);
	Если Не ФайлНаДиске.Существует() Тогда
		ТекстСообщения = "ru='Не найден файл: """ + стрПолноеИмяФайла + """. Дата получения файлов от службы ""Агент Плюс СОД"" не доступна.'";
		ОповеститьОСобытии(ТекстСообщения, СтатусСообщения.Важное, Истина);
		Возврат сзДатаПоследнегоСеансаАПСОД;	
	КонецЕсли;	
		
	СтатусАПСОД = Новый ЧтениеТекста;          
    СтатусАПСОД.Открыть(стрПолноеИмяФайла); 
	
	Стр = "";
	Пока Стр <> Неопределено Цикл // Cтроки читаются до символа перевода строки
		
		Стр = СтатусАПСОД.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Продолжить;			
		Конецесли;		
		
		Стр = стрЗаменить(Стр, Символы.Таб, Символы.ПС);
		ЧислоСтрок = СтрЧислоСтрок(Стр);
		Если ЧислоСтрок > 3 Тогда
			стрИДМУ = НРег(СтрПолучитьСтроку(Стр, 1));
			стзМУ   = ПолучитьНастройкиМУ(стрИДМУ);
			Если стзМУ = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			сзДатаПоследнегоСеансаАПСОД.Добавить(стзМУ.УникальныйИдентификатор, СтрПолучитьСтроку(Стр, 4));
		КонецЕсли;
			
    КонецЦикла;
 
    СтатусАПСОД.Закрыть();        
	
	Возврат сзДатаПоследнегоСеансаАПСОД;
	
КонецФункции // ПолучитьДатуПоследнегоСеансаСАПСОД()

// sk_190114 Добавлена
// Возвращает время последного сеанса с АПСОД
//
// Параметры:
//  ИДМУ 						- УникальныйИдентификатор - данные агента
//  сзДатаПоследнегоСеансаАПСОД - СписокЗначений - СЗ из файла АПСОД [Папка обмена данными]\Status.txt
// 
// Возвращаемое значение:
//  ДатаФайла - Дата - дата получения файла
//
Функция ТабАгентыСОД_ПолучитьДату(ИДМУ, сзДатаПоследнегоСеансаАПСОД) 
  
		ДатаФайла = '00010101';
		
		ПоискЗначения = сзДатаПоследнегоСеансаАПСОД.НайтиПоЗначению(ИДМУ);
		Если ПоискЗначения <> Неопределено Тогда
			ДатаФайла = ПоискЗначения.Представление;
			ДатаФайла = стрЗаменить(ДатаФайла, "-" , "");
			ДатаФайла = стрЗаменить(ДатаФайла, " " , "");
			ДатаФайла = Дата(ДатаФайла);
			Возврат ДатаФайла;
		КонецЕсли;
			
		Возврат ДатаФайла;
		
КонецФункции // ТабАгентыСОД_ПолучитьДату()

// sk_190114 Добавлена
//
// Параметры:
//  стрПапкаОбмена - Строка - папка обмена АПСОД
//
// Возвращаемое значение:
//  Булево - 
//	 		Истина - есть данных
//			Ложь - нет данных
//
Функция ТабАгентыСОД_ПолучитьПометку(стрПапкаОбмена)
	
	мИменаФайлов = ПолучитьМассивИменаФайловЗагрузки();
	
	мНайденныеФайлы = НайтиФайлы(стрПапкаОбмена, "*.*");
	
	Для Каждого Файл Из мНайденныеФайлы Цикл
		Если мИменаФайлов.Найти(Файл.Имя) <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции // ТабАгентыСОД_ПолучитьПометку()

// sk_190124 Процедура изменена
// Заполняет таблицу Агент Плюс СОД
//
Процедура ЗаполнитьТаблицуАгентПлюсСОД() Экспорт
	
	ОчиститьСообщения();
	
	ТабАгентыСОД.Очистить();
	
	//(( sk_190124
	//#Если Не Клиент Тогда
	//	ПапкаОбмена = МУОбъектServer.GetExchangeDir();			
	//#Иначе
	//	ПапкаОбмена = МУОбъект.АпсПапкаОбмена();			
	//#КонецЕсли	
	//
	//Спис = Новый СписокЗначений;
	//
	//ГотовоАгентов = 0;
	//
	//#Если Не Клиент Тогда
	//	КолМУ = МУОбъектServer.GetPPCCount();				
	//#Иначе
	//	КолМУ = МУОбъект.АпсПолучитьКоличествоКПК();				
	//#КонецЕсли   
	//
	//СчетчикЦикла = 0;
	//Для Поз = 0 По КолМУ - 1 Цикл
	//	
	//	#Если Не Клиент Тогда
	//		СтрИнфо = МУОбъектServer.GetPPCInfoByIndex(Поз);						
	//	#Иначе
	//		СтрИнфо = МУОбъект.АпсПолучитьКПКИнфо(Поз);						
	//	#КонецЕсли   
	//	
	//	Если Не ЗначениеЗаполнено(СтрИнфо) Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	Стр = Сред(СтрИнфо, 2) + ",""";
	//	Спис = ИзСтрокиВСписок(Стр, """,""");
	//	// В списке следующие значения:
	//	//0-й - иденифмкато МУ
	//	//1-й - псевдоним торгового агента (владельца МУ)
	//	//2-й - директория обмена данными 
	//	//3-й - имя полученного с МУ файла с директорией
	//	//4-й - время сеанса
	//	//5-й - контрольная сумма полученного файла
	//	ИдМУ = НРег(Спис.Получить(0).Значение);
	//	Псевдоним = Спис.Получить(1);		
	//	
	//	данныеМУ = ТабМобильныеУстройства.Найти(ИдМУ, "ИдентификаторМУ");
	//
	//	Если Не ЗначениеЗаполнено(данныеМУ) Тогда
	//		ОповеститьОСобытии("ru='Мобильное устройство не найдено в настройках'", ТипыЛогов["Обработка"], СтатусСообщения.Внимание);
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	Отбор = Новый Структура;
	//	Отбор.Вставить("УникальныйИдентификаторМУ", данныеМУ["УникальныйИдентификатор"]);
	//	Отбор.Вставить("Основной", Истина);
	//	
	//	строкиПользовательМУ = ТабАгентыМУ.НайтиСтроки(Отбор);
	//	количествоЗаписей = строкиПользовательМУ.Количество();
	//	Если количествоЗаписей > 1 Тогда
	//		
	//		ТекстСообщения = "ru='Мобильному устройству: " + Псевдоним + " (идентификатор " + ИдМУ + ") назначено несколько основных пользователей!" + Символы.ПС +
	//						"Назначьте мобильному устройству одного основного пользователя на форме """ + Имена["НастройкиАгентов"] + """'";
	//		ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обработка"], СтатусСообщения.Внимание);			
	//		Продолжить;
	//		
	//	ИначеЕсли количествоЗаписей = 0 Тогда
	//		
	//		ТекстСообщения = "ru='Мобильному устройству """ + Псевдоним + """ (идентификатор " + ИдМУ + ") не назначен основной пользователь!" + Символы.ПС +
	//						"Назначьте мобильному устройству основного пользователя на форме """ + Имена["НастройкиАгентов"] + """'";
	//		ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обработка"], СтатусСообщения.Внимание);
	//		Продолжить;
	//		
	//	КонецЕсли;
	//	
	//	агентМУ = строкиПользовательМУ[0];
	//	настройкиАгента = ТабНастройкиАгентов.Найти(агентМУ["УникальныйИдентификаторАгента"], "УникальныйИдентификатор");
	//	
	//	уникальныйИдентификаторАгента = настройкиАгента["УникальныйИдентификатор"];
	//	уникальныйИдентификаторМУ = данныеМУ["УникальныйИдентификатор"];
	//	//Если количествоЗаписей = 1
	//	пользовательМУ = строкиПользовательМУ[0];
	//	
	//	настройкиАгента = ТабНастройкиАгентов.Найти(уникальныйИдентификаторАгента, "УникальныйИдентификатор");
	//	
	//	Агент = настройкиАгента["Пользователь"];
	//				
	//	НовСтр = ТабАгентыСОД.Добавить();
	//	НовСтр["УникальныйИдентификаторАгента"] = уникальныйИдентификаторАгента;
	//	НовСтр["УникальныйИдентификаторМУ"] 	= уникальныйИдентификаторМУ;
	//	НовСтр["Пользователь"]		= Агент;				
	//	НовСтр["Псевдоним"]			= данныеМУ["Псевдоним"];
	//	НовСтр["Папка"]	= Спис.Получить(2).Значение;
	//	ФайлДанных 	    = Спис.Получить(3).Значение;

	//	Если ЗначениеЗаполнено(ФайлДанных) Тогда   
	//		ВремяСеансаXML = Спис.Получить(4).Значение;
	//		НовСтр["ЕстьДанные"]  	= Истина;
	//		НовСтр["Пометка"]     	= Истина;						
	//		НовСтр["ДатаПолучения"] = ДатаВремяXMLВФормат1С(ВремяСеансаXML, " ");   			
	//		
	//		ГотовоАгентов    		 = ГотовоАгентов + 1;			
	//	Иначе
	//		НовСтр["Пометка"]  	 = Ложь;
	//	КонецЕсли;
	//	
	//КонецЦикла;
	
	стрПапкаСОД = СокрЛП(НастройкиОбработки["ПапкаАгентСОД"]);
	
	Если ПустаяСтрока(стрПапкаСОД) Тогда
		ОповеститьОСобытии("ru='Не задана папка обмена!'", СтатусСообщения.Внимание);
		Возврат;
	Конецесли;
	
	сзДатаПоследнегоСеансаАПСОД = ПолучитьДатуПоследнегоСеансаСАПСОД(стрПапкаСОД);
	
	мАгенты = ТабАгентыМУ.НайтиСтроки(Новый Структура("Основной", Истина));		
	готовоАгентов = 0;
	
	Для Каждого текАгент Из мАгенты Цикл
		
		ИДМУ    = текАгент["УникальныйИдентификаторМУ"];
		ИДАгент = текАгент["УникальныйИдентификаторАгента"];
		
		строкаМУ    = ТабМобильныеУстройства.Найти(ИДМУ, "УникальныйИдентификатор"); 
		строкаАгент = ТабНастройкиАгентов.Найти(ИДАгент, "УникальныйИдентификатор");
		
		стрПапкаАгентСОД = стрПапкаСОД + строкаМУ["ПапкаСОД"]; 
		
		НовСтр = ТабАгентыСОД.Добавить();
		НовСтр["УникальныйИдентификаторАгента"] = ИДАгент;
		НовСтр["УникальныйИдентификаторМУ"] 	= ИДМУ;
		НовСтр["Пользователь"]					= строкаАгент["Пользователь"];				
		НовСтр["Псевдоним"]						= СокрЛП(строкаМУ["Псевдоним"]);
		НовСтр["Папка"]							= стрПапкаАгентСОД;
		Если ТабАгентыСОД_ПолучитьПометку(стрПапкаАгентСОД) Тогда
			НовСтр["Пометка"]    	= Истина;
			НовСтр["ЕстьДанные"]    = Истина;
			НовСтр["ДатаПолучения"] = ТабАгентыСОД_ПолучитьДату(ИДМУ, сзДатаПоследнегоСеансаАПСОД);
			готовоАгентов = готовоАгентов + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если готовоАгентов = 0 Тогда
		ТекстСообщения = "ru='Таблица ""Агент Плюс СОД"" обновлена. Новых данных от агентов не поступило'";
		ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обработка"], СтатусСообщения.Информация);
	Иначе
		ТекстСообщения = "ru='Таблица ""Агент Плюс СОД"" обновлена. Готов к загрузке данных от " + Строка(готовоАгентов) + " агентов'";
		ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обработка"], СтатусСообщения.Информация);
	КонецЕсли;
	//)) sk_190124
	
КонецПроцедуры //ЗаполнитьТаблицуАгентПлюсСОД()

// sk_190114 Процедура исключена в рамках (MOD-207) 
// ЗагрузитьФТПТаблица()
//
Процедура ЗагрузитьФТПТаблица_OLD() Экспорт //Альфия 16.05.2017 Вынесла код в отдельную процедуру
	
	ТаблицаАгентов = ТабАгентыFTP;
	
	Обработано = 0;     
	Для Каждого СтрокаТаб Из ТаблицаАгентов Цикл
		Если СтрокаТаб["Пометка"] Тогда				
			
			Обработано = Обработано + 1;					
			
			найденнаяСтрокаАгент = ТабНастройкиАгентов.Найти(СтрокаТаб["УникальныйИдентификаторАгента"], "УникальныйИдентификатор");
			найденнаяСтрокаМУ = ТабМобильныеУстройства.Найти(СтрокаТаб["УникальныйИдентификаторМУ"], "УникальныйИдентификатор");
			Если найденнаяСтрокаАгент <> Неопределено И найденнаяСтрокаМУ <> Неопределено Тогда						
				
				текАгент = найденнаяСтрокаАгент["Пользователь"];						
				ОповеститьОСобытии("ru='" + Строка(Обработано) + ". Загрузка данных от агента: " + СокрЛП(текАгент) + " (мобильное устройство: " + найденнаяСтрокаМУ["Псевдоним"] + ", идентификатор: " +  найденнаяСтрокаМУ["ИдентификаторМУ"] + ")'", ТипыЛогов["Обработка"]);					
				
				ИзменитьВыбранногоАгента(найденнаяСтрокаАгент["УникальныйИдентификатор"], найденнаяСтрокаМУ["ИдентификаторМУ"]); // sk_180926  Инициализируем агента
				Если Загрузить_OLD(Неопределено, Новый Соответствие, найденнаяСтрокаМУ["ИдентификаторМУ"], найденнаяСтрокаАгент) Тогда // Если Загрузить(Неопределено, Новый Соответствие, найденнаяСтрокаМУ["ИдентификаторМУ"], найденнаяСтрокаАгент) Тогда sk_190116
					ОповеститьОСобытии("ru='Данные не загружены!'", ТипыЛогов["Обработка"], СтатусСообщения.Важное);
				КонецЕсли;
			Иначе
				ТекстСообщения = "ru='Не найдены настройки агента (" + СтрокаТаб["Пользователь"] + ") или мобильного устройства (" + СтрокаТаб["Псевдоним"] + ")" + Символы.ПС +  + "Данные не загружены!'";
				ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обработка"], СтатусСообщения.Внимание, СтрокаТаб["Пользователь"], Ложь);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
	ОчиститьАгентаИУстройство(); // sk_180926	
КонецПроцедуры

// sk_190124 Процедура изменена
// Заполняет таблицу FTP-сервер
//
Процедура ЗаполнитьТаблицуFTP() Экспорт
	
	ОчиститьСообщения();
	
	ТабАгентыFTP.Очистить();	
	
	//(( sk_190124
	//текПодключениеFTP = СоздатьПодключениеFTP();
	//
	//Если текПодключениеFTP <> Неопределено Тогда
	//	// заполняем таблицу агентами, которые являются основными для устройств
	//	массивСтрок = ТабАгентыМУ.НайтиСтроки(Новый Структура("Основной", Истина));		
	//	готовоАгентов = 0;
	//	списЗнач = Новый СписокЗначений;

	//	Для Каждого текСтрокаАгентМУ Из массивСтрок Цикл
	//		
	//		идМУ = текСтрокаАгентМУ["УникальныйИдентификаторМУ"];
	//		идАгент = текСтрокаАгентМУ["УникальныйИдентификаторАгента"];
	//		строкаМУ = ТабМобильныеУстройства.Найти(идМУ, "УникальныйИдентификатор");
	//		строкаАгент = ТабНастройкиАгентов.Найти(идАгент, "УникальныйИдентификатор");
	//		
	//		Если строкаМУ <> Неопределено И строкаАгент <> Неопределено Тогда
	//			текПользователь = строкаАгент["Пользователь"];
	//			Если списЗнач.НайтиПоЗначению(текПользователь) = Неопределено Тогда
	//				новаяСтрока = ТабАгентыFTP.Добавить();
	//				новаяСтрока["УникальныйИдентификаторАгента"] = идАгент;
	//				новаяСтрока["УникальныйИдентификаторМУ"] = идМУ;
	//				новаяСтрока["Пользователь"] = строкаАгент["Пользователь"];
	//				новаяСтрока["ПсевдонимМУ"] = строкаМУ["Псевдоним"];
	//				новаяСтрока["Папка"] = строкаМУ["ПапкаFTP"];
	//				естьДанные = ЕстьДанныеДляЗагрузки(строкаАгент, строкаМУ);
	//				новаяСтрока["ЕстьДанные"] = естьДанные;
	//				новаяСтрока["Пометка"] = естьДанные;
	//				Если новаяСтрока["Пометка"] Тогда
	//					готовоАгентов = готовоАгентов + 1;
	//				КонецЕсли;
	//				списЗнач.Добавить(текПользователь);
	//			КонецЕсли;
	//		КонецЕсли;
	//		
	//	КонецЦикла;
	//	
	//	ТабАгентыFTP.Сортировать("Пользователь");
	//	Если не флАвтоОбменFTP тогда    //Альфия 16.05.2017
	//		Если готовоАгентов = 0 Тогда
	//			ТекстСообщения = "ru='Таблица ""FTP-сервер"" обновлена. Новых данных от агентов не поступило.'";
	//			ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обработка"], СтатусСообщения.Обычное);
	//		Иначе
	//			ТекстСообщения = "ru='Таблица ""FTP-сервер"" обновлена. Готовы к загрузке данные от " + Строка(готовоАгентов) + " агентов.'";
	//			ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обработка"], СтатусСообщения.Обычное);
	//		КонецЕсли;
	//	КонецЕсли;     //Альфия 16.05.2017
	//КонецЕсли;
	
	Если Не ФТП_СоздатьПодключение() = Ложь Тогда
		// Заполняем таблицу агентами, которые являются основными для устройств
		мАгенты = ТабАгентыМУ.НайтиСтроки(Новый Структура("Основной", Истина));		
		готовоАгентов = 0;
		
		Для Каждого текАгент Из мАгенты Цикл
			
			ИДМУ    = текАгент["УникальныйИдентификаторМУ"];
			ИДАгент = текАгент["УникальныйИдентификаторАгента"];
			
			строкаМУ    = ТабМобильныеУстройства.Найти(ИДМУ, "УникальныйИдентификатор");
			строкаАгент = ТабНастройкиАгентов.Найти(ИДАгент, "УникальныйИдентификатор");
			
			Если Не строкаМУ = Неопределено И Не строкаАгент = Неопределено Тогда
				Если ТабАгентыFTP.Найти(строкаАгент["Пользователь"], "Пользователь") = Неопределено Тогда
					новаяСтрока = ТабАгентыFTP.Добавить();
					новаяСтрока["УникальныйИдентификаторАгента"] = ИДАгент;
					новаяСтрока["УникальныйИдентификаторМУ"]     = ИДМУ;
					новаяСтрока["Пользователь"]				     = строкаАгент["Пользователь"];
					новаяСтрока["ПсевдонимМУ"] 				     = СокрЛП(строкаМУ["Псевдоним"]);
					новаяСтрока["Папка"] 						 = строкаМУ["ПапкаFTP"];
					мНайденныеФайлы = ФТП_НайтиФайлы(строкаМУ["ПапкаFTP"], "To1C.*");
					Если Не мНайденныеФайлы = Неопределено И Не мНайденныеФайлы = Ложь Тогда
						Если  мНайденныеФайлы.Количество() > 0 Тогда
							новаяСтрока["ЕстьДанные"] = Истина;
							новаяСтрока["Пометка"]    = Истина;
							готовоАгентов = готовоАгентов + 1;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ТабАгентыFTP.Сортировать("Пользователь");
		Если Не флАвтоОбменFTP Тогда
			Если готовоАгентов = 0 Тогда
				ТекстСообщения = "ru='Таблица ""FTP-сервер"" обновлена. Новых данных от агентов не поступило.'";
				ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обработка"], СтатусСообщения.Обычное);
			Иначе
				ТекстСообщения = "ru='Таблица ""FTP-сервер"" обновлена. Готовы к загрузке данные от " + Строка(готовоАгентов) + " агентов.'";
				ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обработка"], СтатусСообщения.Обычное);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//)) sk_190124

КонецПроцедуры

Процедура ДополнитьСлешВПуть(Каталог) Экспорт
	
	Если Прав(Каталог, 1) <> "\" Тогда
		Каталог = Каталог + "\";
	КонецЕсли;
	
КонецПроцедуры //ДополнитьСлешВПуть

Процедура УстановитьПоляОтбораПостроителяОтчета(имяОтбора, структураОтбор, построительОтчета) Экспорт
	
	Если структураОтбор <> Неопределено Тогда
		Для Каждого текСвойство Из структураОтбор Цикл
			ПостроительОтчета.Отбор[имяОтбора][текСвойство.Ключ] = текСвойство.Значение; 
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Формирует текст-заголовок формы отчета
Функция ПолучитьПредставлениеПериода(ДатаНач, ДатаКон, РежимВводаПериода = 0) Экспорт
	
	ОписаниеПериода = "";
	
	Если РежимВводаПериода =  0 Тогда  // произвольный период
		Если ДатаНач = '00010101000000' И ДатаКон = '00010101000000' Тогда
			ОписаниеПериода     = "Период не установлен";

		Иначе
			Если ДатаНач = '00010101000000' ИЛИ ДатаКон = '00010101000000' Тогда
				ОписаниеПериода = "" + Формат(ДатаНач, "ДФ = ""дд.ММ.гггг""; ДП = ""...""") 
				+ " - "      + Формат(ДатаКон, "ДФ = ""дд.ММ.гггг""; ДП = ""...""");

			Иначе
				Если ДатаНач <= ДатаКон Тогда
					ОписаниеПериода = "" + ПредставлениеПериода(НачалоДня(ДатаНач), КонецДня(ДатаКон), "ФП = Истина");
				Иначе
					ОписаниеПериода = "Неправильно задан период!"
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;
		
	ИначеЕсли РежимВводаПериода =  1 Тогда   // на дату
		Если ДатаКон = '00010101000000' Тогда
			ОписаниеПериода = "на текущее время " + Формат(ТекущаяДата(), "ДФ = ""дд.ММ.гггг""; ДП = ""...""");

		Иначе
			ОписаниеПериода = "на конец дня " + Формат(ДатаКон, "ДФ = ""дд.ММ.гггг""; ДП = ""...""");
			
		КонецЕсли;
			
	КонецЕсли;

	Возврат ОписаниеПериода;
	
КонецФункции // ПолучитьПредставлениеПериода()

// Функция возвращает название дня недели
//
Функция ДеньНеделиСтр(НомерДня) Экспорт
	Если НомерДня = 1 Тогда
	    Возврат "пн";
	ИначеЕсли НомерДня = 2 Тогда
		Возврат "вт";
	ИначеЕсли НомерДня = 3 Тогда
		Возврат "ср";		
	ИначеЕсли НомерДня = 4 Тогда
		Возврат "чт";
	ИначеЕсли НомерДня = 5 Тогда
		Возврат "пт";
	ИначеЕсли НомерДня = 6 Тогда
		Возврат "СБ";
	Иначе
		Возврат "ВС";
	КонецЕсли;
КонецФункции //ДеньНеделиСтр

// Открывает окно для выбора агента, и возвращает соответствие из таблицы значений "ТабНастройкиАгентов" для выбранного пользователя;
// если пользователь не выбран - возвращает Неопределено
//
Функция ВыбратьАгента(текАгент) Экспорт
	
	ВыбСтрокаАгент = Неопределено;
	Если ТабНастройкиАгентов.Количество() = 0 Тогда
		Сообщить(НСтр("ru='Не найдено ни одного торгового агента. Необходимо заполнить список агентов на форме """ + Имена["НастройкиПараметровОбработки"] + """!"), СтатусСообщения.Внимание);
	Иначе	
		
		СписокАгентов = Новый СписокЗначений;	
		выбЭлемент = Неопределено;
		Для Каждого текСтрока Из ТабНастройкиАгентов Цикл			 	
			текПользователь = текСтрока["Пользователь"];
			СписокАгентов.Добавить(текСтрока["УникальныйИдентификатор"], ?(ЗначениеЗаполнено(текПользователь), текПользователь.Наименование, ""));	
			Если выбЭлемент <> Неопределено Тогда
				Если текАгент = текПользователь Тогда 
					выбЭлемент = текСтрока["УникальныйИдентификатор"];
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		СписокАгентов.СортироватьПоПредставлению();
		ВыбЭлементСпискаЗначений = СписокАгентов.НайтиПоЗначению(выбЭлемент);
		ВыбЭлементСпискаЗначений = СписокАгентов.ВыбратьЭлемент(НСтр("ru='Выберите агента'"), ВыбЭлементСпискаЗначений);
		Если ВыбЭлементСпискаЗначений <> Неопределено Тогда
			ВыбСтрокаАгент = ТабНастройкиАгентов.Найти(ВыбЭлементСпискаЗначений.Значение, "УникальныйИдентификатор");
		КонецЕсли;
		
	КонецЕсли;   
	
	Возврат ВыбСтрокаАгент;
КонецФункции

// Функция возвращает общее количество посещений агента по плану за указанный день (используется в плане посещений)
//
Функция ПолучитьЗначениеКолонкиПодвала(пДни, позДня, пИспользоватьПорядок) Экспорт
	
	стрПозДня = Строка(позДня);
	всего = 0;
	Если пИспользоватьПорядок Тогда
		наим = "П";
		имяКолонки = наим + стрПозДня;
		Для Каждого текСтрока Из пДни Цикл
			текЗнач = текСтрока[имяКолонки];
			Если текЗнач <> Неопределено Тогда
				Если текЗнач > 0 Тогда
					всего = всего + 1;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе		
		наим = "Д";
		имяКолонки = наим + стрПозДня;
		Для Каждого текСтрока Из пДни Цикл
			Если текСтрока[имяКолонки] Тогда
				всего = всего + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат всего;
КонецФункции // ПолучитьЗначениеКолонкиПодвала()

Функция ПолучитьОбщееКоличествоПосещенийПоСтроке(пТекДанные, _КолДней) Экспорт
	
	всего = 0;
	Для сч = 1 По _КолДней Цикл
		Если пТекДанные["Д" + Строка(сч)] Тогда
			всего = всего + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат всего;
КонецФункции

// Функция возвращает последний индекс, до которого можно составить непрерывную последовательность, начиная с номера пНачЗначение
// напр., пНачЗначение = 2, всего строк в таблице ТзПланПосещений = 5, в колонке ("П" + пНомерКолонки) есть значения: 1, 3; 5. 
// Функция вернёт значение "3" (т.к. начиная с 2 последовательность прерывается после 3)
// параметр Инкремент - булево, если "Истина", то последовательность восстанавливается в сторону увеличения (пНачЗначение - начало последовательности)
// иначе последовательность восстанавливается в сторону уменьшения (пНачЗначение - конец последовательности)
//
Функция ПолучитьИндексИзмененияПорядка(пДни, пНомерКолонки, пНачЗначение, Инкремент = Истина)
	
	массивЗнач = пДни.ВыгрузитьКолонку("П" + пНомерКолонки);	
	Если Инкремент Тогда
		Для сч = (пНачЗначение + 1) По массивЗнач.Количество() Цикл
			Если массивЗнач.Найти(сч) = Неопределено Тогда
				Возврат (сч - 1);
			КонецЕсли;
		КонецЦикла;
	Иначе
		сч = пНачЗначение - 1;
		Пока сч > 0 Цикл
			Если массивЗнач.Найти(сч) = Неопределено Тогда
				Возврат (сч + 1);
			КонецЕсли;
			сч = сч - 1;
		КонецЦикла;
	КонецЕсли;
	
	Возврат сч;
КонецФункции
      
Процедура ИзменитьПорядокТочкиМаршрута(пДни, пДанныеСтроки, пНомерКолонки, пСтароеЗнач, пНовоеЗнач) Экспорт

	пНовоеЗнач = ?(пНовоеЗнач = Неопределено, 0, пНовоеЗнач);
	пСтароеЗнач = ?(пСтароеЗнач = Неопределено, 0, пСтароеЗнач);
	Если пСтароеЗнач <> пНовоеЗнач Тогда
		
		стрНомер = Строка(пНомерКолонки);
		текМассив = Новый Массив(пДни.Количество());		                                                             
		
		пДанныеСтроки["Д" + стрНомер] = (пНовоеЗнач <> 0);
		пДанныеСтроки["П" + стрНомер] = пНовоеЗнач;
		
		Если пСтароеЗнач = 0 Тогда
			Если пДни.Найти(пНовоеЗнач, "П" + стрНомер) <> Неопределено Тогда
				границаИзмененияПорядка = ПолучитьИндексИзмененияПорядка(пДни, стрНомер, пНовоеЗнач);
				Для Каждого текСтрока Из пДни Цикл
					Если текСтрока <> пДанныеСтроки Тогда
						текЗнач = текСтрока["П" + стрНомер];
						Если текЗнач <> Неопределено Тогда
							Если текЗнач >= пНовоеЗнач И текЗнач <= границаИзмененияПорядка Тогда
								 текСтрока["П" + стрНомер] = текЗнач + 1;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли пНовоеЗнач = 0 Тогда
			границаИзмененияПорядка = ПолучитьИндексИзмененияПорядка(пДни, стрНомер, пСтароеЗнач);
			Для Каждого текСтрока Из пДни Цикл
				Если текСтрока <> пДанныеСтроки Тогда
					текЗнач = текСтрока["П" + стрНомер];
					Если текЗнач <> Неопределено Тогда
						Если текЗнач >= пСтароеЗнач И текЗнач <= границаИзмененияПорядка Тогда
							 текСтрока["П" + стрНомер] = текЗнач - 1;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Для Каждого текСтрока Из пДни Цикл
				Если текСтрока["П" + стрНомер] = пНовоеЗнач Тогда
					Если текСтрока <> пДанныеСтроки Тогда
						 текСтрока["П" + стрНомер] = пСтароеЗнач;
					 	Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВыбратьПорядокПосещенияИзСписка(пФорма, пЭлемент, пДни, пТекСтрока, пНомерКолонки) Экспорт
		
	списЗнач = Новый СписокЗначений;
	
	имяДНомерКолонки = "Д" + пНомерКолонки;
	имяПНомерКолонки = "П" + пНомерКолонки;
	
	текИндекс = пТекСтрока[имяПНомерКолонки];
	текИндекс = ?(текИндекс = Неопределено, 0, текИндекс);
	
	рекомендуемыйИндекс = 0;
	сч = 0;
	списЗнач.Добавить(сч);
	
	тзТочкиМаршрута = пДни.НайтиСтроки(Новый Структура(имяДНомерКолонки, Истина));
	
	текПорядок = пТекСтрока[имяПНомерКолонки];	
	колВыбора = ?(текПорядок = Неопределено Или текПорядок = 0, тзТочкиМаршрута.Количество() + 2, тзТочкиМаршрута.Количество() + 1);
	массивИндексы = Новый Массив(колВыбора);							// индекс свободен, если значение элемента по индексу = Неопределено
	массивИндексы[сч] = Истина;											// 0 - индекс занят (не используется)
	
	Для Каждого текСтрока Из тзТочкиМаршрута Цикл
		сч = сч + 1;	
		списЗнач.Добавить(сч);			
		Если рекомендуемыйИндекс = 0 Тогда
			текПорядок = текСтрока[имяПНомерКолонки];
			Если текСтрока[имяДНомерКолонки] = Истина Тогда
				Если текПорядок = 0 Или текПорядок = Неопределено Тогда	// порядок ещё не назначен
					рекомендуемыйИндекс = сч;
				Иначе
					массивИндексы[текПорядок] = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	сч = сч + 1;
	Если сч < колВыбора Тогда
		списЗнач.Добавить(сч);
	КонецЕсли;
	
	Если рекомендуемыйИндекс = 0 Тогда		
		Если текИндекс = 0 Или текИндекс = Неопределено Тогда
			текСвободныйИндекс = массивИндексы.Найти(Неопределено); 
			Если текСвободныйИндекс <> Неопределено Тогда
				рекомендуемыйИндекс = текСвободныйИндекс;
			КонецЕсли;
		Иначе
			рекомендуемыйИндекс = текПорядок;
		КонецЕсли;
	КонецЕсли;
	
	выбЗнач = пФорма.ВыбратьИзСписка(списЗнач, пЭлемент, списЗнач.НайтиПоЗначению(рекомендуемыйИндекс));
	выбЗнач = ?(выбЗнач = Неопределено, 0, выбЗнач.Значение);

	ИзменитьПорядокТочкиМаршрута(пДни, пТекСтрока, пНомерКолонки, текИндекс, выбЗнач);
	
	Возврат выбЗнач
КонецФункции

Процедура ОчиститьЛоги(ДатаНачалаХраненияЛога)
	
	ОповеститьОСобытии("ru='Очистка логов ...'", ТипыЛогов["Обработка"], СтатусСообщения.БезСтатуса);
	списокИменОбъектовНастроек = Новый Массив;
	списокИменОбъектовНастроек.Добавить(Имена["Обработка"] + ": " + Имена["ЛогОбмена"]);
	списокИменОбъектовНастроек.Добавить(Имена["Обработка"] + ": " + Имена["ЛогОбработки"]);
	
	наборЗаписей = РегистрыСведений.СохраненныеНастройки.СоздатьНаборЗаписей();
	менеджерЗаписи = РегистрыСведений.СохраненныеНастройки.СоздатьМенеджерЗаписи();
	
	Для Каждого текИмяОбъектаНастройки Из списокИменОбъектовНастроек Цикл
	
		наборЗаписей.Отбор.ИмяОбъекта.Установить(текИмяОбъектаНастройки);
		наборЗаписей.Прочитать();
		
		Если наборЗаписей.Выбран() Тогда
			Для Каждого текЗапись Из наборЗаписей Цикл
				Попытка
					датаЛога = Дата(СтрЗаменить(текЗапись.НаименованиеНастройки, ".", ""));
					Если датаЛога < ДатаНачалаХраненияЛога Тогда
						менеджерЗаписи.Пользователь = текЗапись.Пользователь;
						менеджерЗаписи.ИмяОбъекта = текИмяОбъектаНастройки;
						менеджерЗаписи.НаименованиеНастройки = текЗапись.НаименованиеНастройки;
						менеджерЗаписи.Прочитать();
						Если менеджерЗаписи.Выбран() Тогда
							ВыполнитьОперациюДляОбъекта(менеджерЗаписи, "удаление");
						КонецЕсли;
					КонецЕсли;
				Исключение
				КонецПопытки;
			КонецЦикла;
			//Попытка
			//Исключение
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОповеститьОСобытии("ru='Очистка логов завершена'", ТипыЛогов["Обработка"], СтатусСообщения.Информация);
		
КонецПроцедуры

Процедура ОчиститьМаршруты(ДатаНачалаХраненияМаршрутов)
	
	ОповеститьОСобытии("ru='Очистка маршрутов ...'", ТипыЛогов["Обработка"], СтатусСообщения.БезСтатуса);
	группаСобытие = ПолучитьГруппуСобытия("Маршрут");
	Если ЗначениеЗаполнено(группаСобытие) Тогда	
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
				|ВЫБРАТЬ
				|	События.Ссылка
				|ИЗ Документ.Событие КАК События
				|ГДЕ 
				|	События.Дата < &ДатаНачалаХраненияМаршрутов
				|	И События.ГруппаСобытия = &ГруппаСобытие
				|   И НЕ События.ПометкаУдаления
				|";
				
		Запрос.УстановитьПараметр("ГруппаСобытие", группаСобытие);
		Запрос.УстановитьПараметр("ДатаНачалаХраненияМаршрутов", ДатаНачалаХраненияМаршрутов);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ВыполнитьОперациюДляОбъекта(Выборка.Ссылка.ПолучитьОбъект(), "пометитьНаУдаление");
		КонецЦикла;
	КонецЕсли;
	ОповеститьОСобытии("ru='Очистка маршрутов завершена'", ТипыЛогов["Обработка"], СтатусСообщения.Информация);
	
КонецПроцедуры

// Запускает плановые операции (очистка логов, маршрутов)
//
Процедура ВыполнитьПлановыеОперации()
	
	текДата = ТекущаяДата();	
	ОчиститьЛоги(НачалоДня(текДата - ПериодХраненияЛогов*86400));	
	ОчиститьМаршруты(НачалоДня(текДата - ПериодХраненияМаршрутов*86400));
	ОчиститьУстаревшиеЗаписиТЗПорядокТТ(); // sk_190226 Выполняем очистку записей, которые нарушают ссылочную целостность (MOD-276)
	
КонецПроцедуры

// sk_181009 Возвращает маску файлов в зависимости от выбранного периода
//
//Параметры:
//	НачалоПериода - дата начала периода
//	КонецПериода - дата конца периода
//
// Возвращаемое значение:
//	стрМаска - маска файлов в формате yyyyMMdd.txt
//
Функция ПолучитьМаскуФайлов(НачалоПериода, КонецПериода) Экспорт
	
	Если Не НачалоПериода = '00010101' И Не КонецПериода = '00010101' Тогда // Если Не НачалоПериода = Дата(1, 1, 1)  И Не КонецПериода = Дата(1, 1, 1)  Тогда sk_190128
		стрМаска = "";
		
		стрДатаНачала 	 = Формат(НачалоПериода, "ДФ=yyyyMMdd");
		стрДатаОкончания = Формат(КонецПериода, "ДФ=yyyyMMdd");
		
		Для НомерПозиции = 1 По 9 Цикл
			
			стрДатаНачалаСим 	= Сред(стрДатаНачала, НомерПозиции, 1);
			стрДатаОкончанияСим = Сред(стрДатаОкончания, НомерПозиции, 1);
			
			Если стрДатаНачалаСим = стрДатаОкончанияСим Тогда
				стрМаска = стрМаска + стрДатаНачалаСим;
			Иначе
				стрМаска = стрМаска + "?";
			КонецЕсли;
		КонецЦикла;
		
		стрМаска = стрМаска + ".txt";
	Иначе
		стрМаска = "*.txt";
	КонецЕсли;
	
	Возврат стрМаска;
	
КонецФункции // ПолучитьМаскуФайлов()

// sk_181008 перенесена из УТ  НТВ 11
// Сравнивает две строки версий. Если передана не полная версия, то сравнивается только общая начальная часть версий.
//
// Параметры:
//  СтрокаВерсии1  - Строка - номер версии в формате РР.{П|ПП}.ЗЗ.СС.
//  СтрокаВерсии2  - Строка - второй сравниваемый номер версии.
//
// Возвращаемое значение:
//   Число   - больше 0, если СтрокаВерсии1 > СтрокаВерсии2; 0, если версии равны.
//
Функция СравнитьВерсии(СтрокаВерсии1, СтрокаВерсии2) Экспорт
	
	мВерсия1 = СтрРазделить_(?(ПустаяСтрока(СтрокаВерсии1), "0.0.0.0", СтрокаВерсии1), ".");
	мВерсия2 = СтрРазделить_(?(ПустаяСтрока(СтрокаВерсии2), "0.0.0.0", СтрокаВерсии2), ".");
	
	ВГраница = Мин(мВерсия1.Количество(), мВерсия2.Количество()) - 1;
	
	Результат = 0;
	Для Разряд = 0 По ВГраница Цикл
		Результат = Число(мВерсия1[Разряд]) - Число(мВерсия2[Разряд]);
		Если Результат <> 0 Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// sk_181008 перенесена из УТ  НТВ 11
// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//    Если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//  СокращатьНепечатаемыеСимволы - Булево - сокращать непечатаемые символы по краям каждой из найденных подстрок.
//
// Возвращаемое значение:
//  Массив - массив строк.
Функция СтрРазделить_(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь)
	
	мРезультат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				мРезультат.Добавить("");
			КонецЕсли;
			Возврат мРезультат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				мРезультат.Добавить(СокрЛП(Подстрока));
			Иначе
				мРезультат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			мРезультат.Добавить(СокрЛП(Строка));
		Иначе
			мРезультат.Добавить(Строка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат мРезультат;
	
КонецФункции

// sk_181008 перенесена из УТ  НТВ 11
// Возвращает Истина, если требуется обновить настройки обработки до новой версии обработки.
Функция ОбновитьДоВерсии(ВерсияОбновления, стррВерсии, ИзменитьНастройки = Неопределено)
	
	Если СравнитьВерсии(ВерсияОбновления, стррВерсии.НоваяВерсия) > 0 Тогда
		Возврат Ложь; // требуется обновиться до более новой версии, о которой обработка не знает (не знает как обновляться)
	ИначеЕсли СравнитьВерсии(ВерсияОбновления, стррВерсии.ВерсияИзРегистра) < 0 Тогда
		Возврат Ложь; // сохранены настройки от более новой версии обработки, чем версия обновления
	Иначе
		ИзменитьНастройки = Истина;
		Возврат Истина; // требуется обновить настройки до более новой версии
	КонецЕсли;
		
КонецФункции

// sk_181008
// Используется для обновления модуля обмена данными до новых версий: инициализации значений новых настроек, 
// конвертации значений настроек из прежнего формата в новый формат.
// Возвращает строку с описанием факта обновления (если было выполнено обновление настроек модуля) или возвращает Неопределено.
//
Функция ВыполнитьОбновлениеДоНовойВерсии() Экспорт
	
	стррВерсии = Новый Структура;
	стррВерсии.Вставить("НоваяВерсия", 		ВерсияМодуля); // Версия запущенной обработки
	стррВерсии.Вставить("ВерсияИзРегистра", НастройкиОбработки["ВерсияМодуля"]); // Версия обработки, сохраненная в регистре сведений "СохраненныеНастройки"
	
	Если стррВерсии.ВерсияИзРегистра  = стррВерсии.НоваяВерсия Тогда
		Возврат Неопределено; // Обновление не требуется
	КонецЕсли; 
	
	ИзменитьНастройки = Ложь; // Признак изменения значений настроек
	
	ЭтоПервыйЗапуск = ПустаяСтрока(стррВерсии.ВерсияИзРегистра);
	
	Если ЭтоПервыйЗапуск Тогда // Первый запуск
		ОбновитьНаименованияФайловЗагруженныхПосещений(); // sk_181008 Обновляем наименования файлов ранее загруженных посещений
		ВОСоздатьБДВиртуальныхОбъектов(); // sk_190628 Создает БД виртуальных объектов при первом запуске в рамках (MOD-489) 
	КонецЕсли;
	
	//(( sk_190306 Заполняем ТЗ ПорядокТТ в ХранилищеСистемныхНастроек при обновлении до версии 2.0.5.20 (MOD-279)  
	Если Не ЭтоПервыйЗапуск И ОбновитьДоВерсии("2.0.5.20", стррВерсии, ИзменитьНастройки) Тогда
		ЗаполнитьПорядокТТВХранилище();
	КонецЕсли;
	//)) sk_190306
		
	//(( sk_190610 Удаляем устаревшую настройку "СтатистикаОбратнаяСвязь" в рамках (MOD-586)
	Если Не ЭтоПервыйЗапуск И ОбновитьДоВерсии("2.0.5.25", стррВерсии, ИзменитьНастройки) Тогда
		ХранилищеСистемныхНастроек.Удалить("Статистика","Данные", Неопределено);
	КонецЕсли;
	//)) sk_190610
	
	//(( sk_190628 Создает БД виртуальных объектов при обновлении в рамках (MOD-489)  
	Если Не ЭтоПервыйЗапуск И ОбновитьДоВерсии("2.0.6.1", стррВерсии, ИзменитьНастройки) Тогда
		ВОСоздатьБДВиртуальныхОбъектов();
	КонецЕсли;
	//)) sk_190628
	
	Если ИзменитьНастройки Или стррВерсии.ВерсияИзРегистра <> стррВерсии.НоваяВерсия Тогда
		НастройкиОбработки["ВерсияМодуля"]	= ВерсияМодуля; // Записываем новую версию в настройки
		ЗаписатьНастройкиОбработки(НастройкиОбработки);
		Если ЭтоПервыйЗапуск Тогда
			стрРезультат =  "ru='Обновлены настройки до версии " + стррВерсии.НоваяВерсия + "'";
		Иначе
			стрРезультат =  "ru='Обновлены настройки с версии "+ стррВерсии.ВерсияИзРегистра + " до версии " +  стррВерсии.НоваяВерсия + "'";
		КонецЕсли;
	Иначе
		стрРезультат = Неопределено;
	КонецЕсли;
	
	Возврат стрРезультат;
	
КонецФункции //ИнициализироватьДанныеДляНовойВерсии()

// sk_181003 Добавлена
// Обновляет наименования файлов уже загруженных посещений,
// приводя наименования файлов к формату yyyyMMdd.txt
//
Процедура ОбновитьНаименованияФайловЗагруженныхПосещений()
	
	стрПапкаПосещений = СокрЛП(НастройкиОбработки["РабочаяПапка"]) + "Vizits" + "\";
	мСписокФайлов = НайтиФайлы(стрПапкаПосещений,"????-??-??.txt", Истина);
	
	Для Каждого Файл из мСписокФайлов Цикл
		стрПолныйПутьКФайлу 		 = Файл.ПолноеИмя;  
		стрПолныйПутьКФайлуНовоеНаим = Файл.Путь + СтрЗаменить(Файл.Имя, "-", "");
		
		ПереместитьФайл(стрПолныйПутьКФайлу, стрПолныйПутьКФайлуНовоеНаим);
	КонецЦикла;
	
КонецПроцедуры //ОбновитьНаименованияФайловЗагруженныхПосещений()

Процедура ОткрытьФормуОтчета(ИмяОтчета, _Параметры = Неопределено, ЭтаФорма) Экспорт
	
	ФормаОтчета = ПолучитьФорму(ИмяОтчета, ЭтаФорма, ИмяОтчета);
	Если _Параметры <> Неопределено Тогда
		Для Каждого текКлючЗнач Из _Параметры Цикл
			ФормаОтчета[текКлючЗнач.Ключ] = текКлючЗнач.Значение;
		КонецЦикла;
	КонецЕсли;
	ФормаОтчета.Открыть();
	
КонецПроцедуры //ОткрытьФормуОтчета()

// sk_181220 Добавлена
// Дополняет слеш в путь в конец строки, если он отсутствует
//
// Параметры:
//  стрПуть - Строка - путь к каталогу
// 
// Возвращаемое значение:
//  стрПутьККаталогу - Строка - путь к каталогу с дополненным слэшем
//
Функция КаталогДополнитьСлешВПуть(стрПуть) 
	
	стрПутьККаталогу   = СокрЛП(стрПуть);
	стрПоследнийСимвол = Прав(стрПутьККаталогу, 1);
	
	Если стрПоследнийСимвол = "\" Или стрПоследнийСимвол = "/" Тогда    
		Возврат стрПутьККаталогу;
	Иначе	
		Возврат стрПутьККаталогу + "\";
	КонецЕсли;
	
КонецФункции // КаталогДополнитьСлешВПуть()

// sk_190116 Добавлена
// Возвращает уникальный идентификатор МУ
//
// Параметры:
//  Агент - СправочникСсылка.Пользователи - агент
//
// Возвращаемое значение:
//  найденнаяСтрокаМУ - 
//						УникальныйИдентификатор - идентификатор МУ
//						Неопределено - для устройства не назначен агент с признаком "Основной"
//
Функция ПолучитьИдентификаторМУ(Агент) Экспорт

	ИДМУ = Неопределено;
	
	стзНастройкаАгента = ТабНастройкиАгентов.Найти(Агент, "Пользователь");
	
	стррОтбор = Новый Структура;
	стррОтбор.Вставить("УникальныйИдентификаторАгента", стзНастройкаАгента.УникальныйИдентификатор);
	
	мАгентыМУ = ТабАгентыМУ.НайтиСтроки(стррОтбор);
	
	Если мАгентыМУ[0].Основной Тогда
		ИДМУ = мАгентыМУ[0].УникальныйИдентификаторМУ;
	Иначе
		ТекстСообщения = "ru='Для устройства: """ + ВыбМобильноеУстройство.Псевдоним + """ не назначен агент с признаком ""Основной""'";
		ОповеститьОСобытии(ТекстСообщения, ТипыЛогов.Обработка, СтатусСообщения.Внимание);
	КонецЕсли;
	
	Возврат ИДМУ;
	
КонецФункции // ПолучитьИдентификаторМУ()

// sk_190118 Добавлена
// Проверяет подключение к FTP-серверу по переданным параметрам
//
// Параметры:
//  Сервер       - Строка - хост FTP-сервера
//	Пользователь - Строка - имя пользователя для входа на FTP-сервер
//	Пароль       - Строка - пароль пользователя для входа на FTP-сервер
//
Процедура ФТП_ПроверитьПодключение(Сервер, Пользователь, Пароль) Экспорт
	
	Сервер 		 = СокрЛП(Сервер);
	Пользователь = СокрЛП(Пользователь);
	Пароль	 	 = СокрЛП(Пароль);
	
	Если ПустаяСтрока(Сервер) Или ПустаяСтрока(Пользователь) Тогда
		ТекстСообщения = "ru='Указаны не все параметры соединения с FTP-сервером! Работа с FTP невозможна!'";
		ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обмен"], СтатусСообщения.Внимание);
	Иначе
		Попытка
			текПодключениеFTP = Новый FTPСоединение(Сервер, , Пользователь, Пароль, , Истина, 0); // текПодключениеFTP = Новый FTPСоединение(Сервер, , Пользователь, Пароль, , Истина, 60); sk_190313 (MOD-336)		
			ТекстСообщения = "ru='Подключение к FTP-серверу выполнено успешно'";
			ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обмен"], СтатусСообщения.Информация);
		Исключение
			ОповеститьОСобытии("ru='Ошибка подключения к FTP-серверу. Причина: " + СтрЗаменить(ОписаниеОшибки(), "'", """") + "'", ТипыЛогов["Обмен"], СтатусСообщения.Внимание);
		КонецПопытки;	
	КонецЕсли;
	
КонецПроцедуры

// sk_190130 Добавлена
// Возвращает массив допустимых форматов картинок
//
// Возвращаемое значение:
//  мДопустимыеФорматыИзображений - Массив - массив допустимых форматов картинок 
//
Функция ПолучитьМассивДопустимыхФорматовКартинок()

	мДопустимыеФорматыКартинок = Новый Массив;
	мДопустимыеФорматыКартинок.Добавить("BMP");
	мДопустимыеФорматыКартинок.Добавить("DIB");
	мДопустимыеФорматыКартинок.Добавить("JPG");
	мДопустимыеФорматыКартинок.Добавить("JPEG");
	мДопустимыеФорматыКартинок.Добавить("GIF");
	мДопустимыеФорматыКартинок.Добавить("PNG");
	мДопустимыеФорматыКартинок.Добавить("ICO");
	
	Возврат мДопустимыеФорматыКартинок; 

КонецФункции // ПолучитьМассивДопустимыхФорматовКартинок()

// sk_190226 Добавлена
// Возвращает адрес контрагента
//
// Параметры:
//  Контрагент - СправочникСсылка.Контрагенты - cсылка на элемент справочника "Контрагенты"
//
// Возвращаемое значение:
//	Строка 		 - адрес партнера
//	Неопределено - неизвестный адрес
//
Функция ПолучитьАдресКонтрагента(Контрагент) Экспорт
	
	сзВидАдрес = Новый СписокЗначений;
	сзВидАдрес.Добавить(Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Адрес доставки"));
	сзВидАдрес.Добавить(Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Фактический адрес юр.лица"));

	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	               |	ПОДСТРОКА(КонтактнаяИнформация.Представление, 1, 255) КАК Адрес
	               |ИЗ
	               |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	               |ГДЕ
	               |	КонтактнаяИнформация.Объект = &Контрагент
				   |	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	               |	И КонтактнаяИнформация.Вид В(&ВидАдрес)
	               |	И ПОДСТРОКА(КонтактнаяИнформация.Представление, 1, 255) <> """"";
	
	Запрос.УстановитьПараметр("ВидАдрес",   сзВидАдрес);  
	Запрос.УстановитьПараметр("Контрагент", Контрагент);  
	
	Результат = Запрос.Выполнить().Выбрать();
		
	Если Результат.Следующий() Тогда
		Возврат Результат.Адрес;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции // ПолучитьАдресКонтрагента()

// sk_190226 Добавлена в рамках (MOD-276)
// Возвращает ключ объекта настройки для ХранилищеСистемныхНастроек 
//
// Возвращаемое значение:
// 	Строка - ключ объекта настройки
//
Функция КлючНастроекОбмена()

	Возврат "АгентПлюсОбменДанными";
	
КонецФункции // КлючНастроекОбмена()

// sk_190226 Добавлена в рамках (MOD-276)
// Выполняет сохранение Объекта в ХранилищеСистемныхНастроек
//
// Параметры:
//  ИмяНастройки - Строка - имя настройка в Хранилище
//  Значение     - значение настройки
//
Процедура СохранитьОбъектВХранилище(ИмяНастройки, Значение) Экспорт

	ХранилищеСистемныхНастроек.Сохранить(КлючНастроекОбмена(), ИмяНастройки, Значение, , ПользовательАгентПлюс);		
	
КонецПроцедуры

// sk_190226 Добавлена в рамках (MOD-276)
// Возвращает значение настройки из ХранилищеСистемныхНастроек
//
// Параметры:
//  ИмяНастройки - Строка - имя настройка в Хранилище
//
// Возвращаемое значение:
// 	Значение настройки из Хранилища   
//
Функция ПолучитьОбъектИзХранилища(ИмяНастройки) Экспорт

	Возврат ХранилищеСистемныхНастроек.Загрузить(КлючНастроекОбмена(), ИмяНастройки, , ПользовательАгентПлюс);	

КонецФункции // ПолучитьОбъектИзХранилища()

// sk_190226 Добавлена в рамках (MOD-276)
// Возвращает ТЗ порядок посещения торговых точек из ХранилищеСистемныхНастроек
//
// Возвращаемое значение:
// 	тзПорядокТТ  - Таблица значений - порядок ТТ из Хранилища 
//
Функция ПолучитьПорядокТТИзХранилища() Экспорт
	
	тзПорядокТТ = ПолучитьОбъектИзХранилища("тзПорядокТТ");
		
	Если тзПорядокТТ = Неопределено Тогда
		тзПорядокТТ = Новый ТаблицаЗначений;
		тзПорядокТТ.Колонки.Добавить("Документ", Новый ОписаниеТипов("ДокументСсылка.Событие"), "Документ");
		тзПорядокТТ.Колонки.Добавить("Порядок",  Новый ОписаниеТипов("Число"), "Порядок");
		тзПорядокТТ.Индексы.Добавить("Документ");
	КонецЕсли;
	
	Возврат тзПорядокТТ; 
	
КонецФункции // ПолучитьПорядокТТИзХранилища()

// sk_190226 Добавлена в рамках (MOD-276)
// Выполняет очистку записей в ТЗ порядок посещения торговых точек, нарушающих ссылочную целостность 
//
Процедура ОчиститьУстаревшиеЗаписиТЗПорядокТТ() 
	
	ОповеститьОСобытии("ru='Очистка устаревших записей ...'", ТипыЛогов["Обработка"], СтатусСообщения.БезСтатуса);

	тзПорядокТТ =  ПолучитьПорядокТТИзХранилища();
	
	мГруппаСобытия = Новый Массив;
	
	мГруппаСобытия.Добавить(ПолучитьГруппуСобытия("ЦиклическийМаршрут"));
	мГруппаСобытия.Добавить(ПолучитьГруппуСобытия("Маршрут"));
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПорядокТТВХранилище.Документ КАК Документ,
	|	ПорядокТТВХранилище.Порядок КАК Порядок
	|ПОМЕСТИТЬ ВТ_ПорядокТТВХранилище
	|ИЗ
	|	&ПорядокТТВХранилище КАК ПорядокТТВХранилище
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Событие.Ссылка КАК Документ
	|ПОМЕСТИТЬ ВТ_Событие
	|ИЗ
	|	Документ.Событие КАК Событие
	|ГДЕ
	|	Событие.ГруппаСобытия В(&ГруппаСобытия)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПорядокТТВХранилище.Документ КАК Документ,
	|	ВТ_ПорядокТТВХранилище.Порядок КАК Порядок
	|ИЗ
	|	ВТ_ПорядокТТВХранилище КАК ВТ_ПорядокТТВХранилище
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Событие КАК ВТ_Событие
	|		ПО ВТ_ПорядокТТВХранилище.Документ = ВТ_Событие.Документ";
	
	Запрос.УстановитьПараметр("ПорядокТТВХранилище", тзПорядокТТ);
	Запрос.УстановитьПараметр("ГруппаСобытия", 	     мГруппаСобытия);

	тзПорядокТТ = Запрос.Выполнить().Выгрузить();
	
	тзПорядокТТ.Индексы.Добавить("Документ");  
	
	СохранитьОбъектВХранилище("тзПорядокТТ", тзПорядокТТ);
	
	ОповеститьОСобытии("ru='Очистка устаревших записей завершена'", ТипыЛогов["Обработка"], СтатусСообщения.Информация);
	
КонецПроцедуры

// sk_190226 Перенесена из УТ  НТВ 11
//
Процедура ЗаменитьЛитералы(Шаблон, стррЛитералы) Экспорт	
	//(( gi_180306 // литералы в тексте запроса могут указываться в виде строки "[Литерал]" или "//[Литерал]"
	Если Найти(Шаблон, "//[") <> 0 Тогда 
	    стрНачалоВставки = "//[";
	Иначе
		стрНачалоВставки = "[";
	КонецЕсли; 
	//)) gi_180306
	
	Для Каждого Литерал Из стррЛитералы Цикл
		Шаблон = СтрЗаменить(Шаблон, стрНачалоВставки + Литерал.Ключ + "]", 
			?(Литерал.Значение <> Неопределено, Литерал.Значение, Литерал.Ключ)); // если значение литерала не указано, заменяем его на наименование литерала
	КонецЦикла
	
КонецПроцедуры

// sk_190226 Добавлена в рамках (MOD-276)
// Выполняет обработку ТЗ ПорядокТТ в ХранилищеСистемныхНастроек
//
// Параметры:
// 	тзПорядокНаОбработку - Таблица значений - порядок ТТ на обработку  
//
Функция ОбработкаПорядокТТВХранилище(тзПорядокНаОбработку) Экспорт
	  
	тзПорядокТТ = ПолучитьПорядокТТИзХранилища();
		
	Для Каждого стзПорядокНаОбработку Из тзПорядокНаОбработку Цикл
		
		стзПорядокТТ = тзПорядокТТ.Найти(стзПорядокНаОбработку.Документ, "Документ");
		
		Если стзПорядокТТ = Неопределено И стзПорядокНаОбработку.Порядок <= 0 Тогда
			Продолжить;
		ИначеЕсли стзПорядокТТ = Неопределено Тогда								    	    // Добавляем строку
			стзПорядокТТ = тзПорядокТТ.Добавить();
			ЗаполнитьЗначенияСвойств(стзПорядокТТ, стзПорядокНаОбработку);            
		ИначеЕсли Не стзПорядокТТ = Неопределено И стзПорядокНаОбработку.Порядок <= 0 Тогда // Удаляем строку
			тзПорядокТТ.Удалить(стзПорядокТТ);
		Иначе                                                                               // Изменяем строку
			стзПорядокТТ.Порядок = стзПорядокНаОбработку.Порядок;
		КонецЕсли;
	КонецЦикла;
		
	СохранитьОбъектВХранилище("тзПорядокТТ", тзПорядокТТ);
	
КонецФункции // ОбработкаПорядокТТВХранилище()

// sk_190306
// Возвращает значение группы событий по виду маршрута
//
// Возвращаемое значение:
//  ГруппаСобытия - СправочникСсылка.ГруппыСобытий - группа события
//  Неопределено  - группа события не получена
//
Функция ПолучитьГруппуСобытияПоВидуМаршрута() Экспорт

	видИспользуемыхМаршрутов = НастройкиОбработки["ВидИспользуемыхМаршрутов"];
	
	Если видИспользуемыхМаршрутов = 1 Тогда
		ГруппаСобытия = ПолучитьГруппуСобытия("ЦиклическийМаршрут");
	Иначе
		ГруппаСобытия = ПолучитьГруппуСобытия("Маршрут");
	КонецЕсли;
	
	Возврат ГруппаСобытия;	

КонецФункции // ПолучитьГруппуСобытияПоВидуМаршрута()

// sk_190306 Процедура добавлена в рамках (MOD-279)
// Заполняет ТЗ ПорядокТТ в ХранилищеСистемныхНастроек при обновлении версии до 2.0.5.20
//
Процедура ЗаполнитьПорядокТТВХранилище()
	
	флПорядок = (Документы.Событие.ПустаяСсылка().Метаданные().Реквизиты.Найти("УдалитьИнтервалНапоминания") <> Неопределено);
	
	Если флПорядок = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	группаСобытия = ПолучитьГруппуСобытияПоВидуМаршрута(); 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Событие.Ссылка КАК Документ,
	|	Событие.УдалитьИнтервалНапоминания КАК Порядок
	|ИЗ
	|	Документ.Событие КАК Событие
	|ГДЕ
	|	Событие.ГруппаСобытия = &ГруппаСобытия
	|	И Событие.ПометкаУдаления = ЛОЖЬ
	|	И Событие.УдалитьИнтервалНапоминания > 0";
	
	Запрос.УстановитьПараметр("ГруппаСобытия", группаСобытия);
	
	тзПорядокНаОбработку = Запрос.Выполнить().Выгрузить();
	
	Если тзПорядокНаОбработку.Количество() > 0 Тогда 
		ОбработкаПорядокТТВХранилище(тзПорядокНаОбработку);
	КонецЕсли;

КонецПроцедуры

// sk_190628 Функция добавлена в рамках (MOD-489)
// Возвращает модуль работы с виртуальными документами
//
Функция МодульВОБД()

	Возврат ПолучитьФорму("МодульВОБД", , "МодульВОБД"); 

КонецФункции // МодульВОБД()

// sk_190628 Процедура добавлена в рамках (MOD-489)
// Создает БД виртуальных объектов
//
Процедура ВОСоздатьБДВиртуальныхОбъектов()

	МодульВОБД = МодульВОБД();
	МодульВОБД.СоздатьИнформация();

КонецПроцедуры

// sk_190628 Функция добавлена
// Преобразовывает строку в число
//
// Параметры:
//	Строка 
//
// Возвращаемое значение:
//	Число
//
Функция СтрокуВЧисло(Строка)
	
	стрРезультат = "";
	
	БылаТочка = Ложь;
	Для Поз = 1 По СтрДлина(Строка) Цикл
		Символ = Сред(Строка, Поз, 1);
		Код = КодСимвола(Символ);
		Если Код >= 48 И Код <= 57 Или Код = 46 Тогда
			стрРезультат = стрРезультат + Символ;
		ИначеЕсли Не БылаТочка И Код = 46 Тогда
			стрРезультат = стрРезультат + Символ;
			БылаТочка = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если БылаТочка Тогда
		стрРезультат = "0" + стрРезультат + "0"; // чтобы корректно обработалось число вида ".x" или "x."
	КонецЕсли; 
	
	Возврат ?(СтрДлина(стрРезультат) = 0, 0, Число(стрРезультат));
	
КонецФункции // СтрокуВЧисло()

// sk_190628 Функция добавлена
// Выполняет преобразование значения в число
//
// Параметры:
//	Значение
//
// Возвращаемое значение:
//	Число
//
Функция ЗначениеВЧисло(Значение)
	
	стрЗначение = СтрЗаменить(Значение, ",", ".");
	
	Возврат ?(ЗначениеЗаполнено(стрЗначение), СтрокуВЧисло(стрЗначение), 0);
	
КонецФункции // ЗначениеВЧисло()

// sk_190628 Функция добавлена
//
// Параметры:
// 	ДокументСсылка - ДокументСсылка.* - ссылка на документа 
//
// Возвращаемое значение:
//	Имя документа	
//
Функция ПолучитьИмяДокумента(ДокументСсылка) Экспорт

	Возврат ДокументСсылка.Метаданные().Имя;	

КонецФункции // ПолучитьМенеджерДокумента()

// sk_190628 Функция добавлена в рамках (MOD-469)
// Возвращает ссылку на документ по переданным видам документов
//
// Параметры:
// 	Гуид 		 	  - Строка - идентификатор документа
//  стрВидыДокументов - Строка - виды документов
//
// Возвращаемое значение:
//	Результат - Ссылка - ссылка на документ
//
Функция СсылкаИзДокументаПоСпискуВидов(Гуид, стрВидыДокументов)
	
	мВидыДокументов = СтрРазделить_(стрВидыДокументов);
	
	Для Каждого ВидДокумента Из мВидыДокументов Цикл
		Ссылка = ПолучитьСсылкуИзДокумента(Гуид, ВидДокумента);
		Если Не Ссылка.Пустая() Тогда
			Результат = Ссылка;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Если Результат = Неопределено Тогда
		Результат = Документы[мВидыДокументов[0]].ПустаяСсылка();
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции // СсылкаИзДокументаПоСпискуВидов()

// sk_190628 Функция добавлена в рамках (MOD-469)
// Возвращает контрагента по основному договору
//
// Параметры:
// 	Договор 	- СправочникСсылка.ДоговорыКонтрагентов - договор
//  Организация - СправочникСсылка.Организации - организация  
//
// Возвращаемое значение:
//  Контрагент 	 – СправочникСсылка.Контрагенты - контрагент
//	Неопределено - контрагент не получен
//
Функция ПолучитьКонтрагентаПоОсновномуДоговору(Договор, Организация)

	Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	
	Запрос = Новый Запрос();
	Запрос.Текст =  "ВЫБРАТЬ ПЕРВЫЕ 2
	                |	Контрагенты.Ссылка КАК Контрагент,
	                |	Контрагенты.ОсновнойДоговорКонтрагента,
	                |	ДоговорыКонтрагентов.Ссылка КАК ДоговорКонтрагента
	                |ИЗ
	                |	Справочник.Контрагенты КАК Контрагенты
	                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	                |		ПО Контрагенты.ОсновнойДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка
	                |ГДЕ
	                |	ДоговорыКонтрагентов.Ссылка = &Договор
	                |	[Организация]";	
	
	Если ЗначениеЗаполнено(Организация) Тогда
		стрОрганизация = " И ДоговорыКонтрагентов.Организация = &Организация";
	Иначе
		стрОрганизация = "";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Договор", 	 Договор);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	стррЛитералы = Новый Структура;
	стррЛитералы.Вставить("Организация", стрОрганизация);
	
	ЗаменитьЛитералы(Запрос.Текст, стррЛитералы);
	
	тзКонтрагенты = Запрос.Выполнить().Выгрузить();
	
	Если тзКонтрагенты.Количество() = 1 Тогда
		Возврат тзКонтрагенты[0].Контрагент;
	Иначе
		Возврат Неопределено
	КонецЕсли;
	
КонецФункции // ПолучитьКонтрагентаПоОсновномуДоговору()

//////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ ВЫГРУЗКИ ДАННЫХ НА МУ /////////////////////////////////// 
//////////////////////////////////////////////////////////////////////////////////

// Заполняет списки клиентов, торговых точек, договоров, а 
// также заполняет план посещений агента
//
Процедура СформироватьСписокКлиентовАгентов(ДанныеАгента, ДопНастройкиАгента, ПланПосещений, сзКлиентыАгента, сзТоргТочкиАгента) Экспорт
	
	#Если Клиент Тогда
		Состояние(НСтр("ru='Заполнение списка клиентов ...'"));
	#КонецЕсли
	
	ПарАгент = ДанныеАгента["Пользователь"];
	сзКлиентыАгента.Очистить();
	сзТоргТочкиАгента.Очистить();   	
	
	Если ТипЗнч(ПарАгент) = Тип("СписокЗначений") Тогда
		
		Для Каждого СтрокаСписка Из ПарАгент Цикл
			ЗаполнитьСписокКлиентовАгента(ДанныеАгента, ДопНастройкиАгента, СтрокаСписка.Значение, ПланПосещений, сзКлиентыАгента, сзТоргТочкиАгента);
		КонецЦикла;
		
	Иначе  		
		
		Если ПарАгент.Пустая() Тогда	
			Возврат;
		КонецЕсли;  
		
		ЗаполнитьСписокКлиентовАгента(ДанныеАгента, ДопНастройкиАгента, ПарАгент, ПланПосещений, сзКлиентыАгента, сзТоргТочкиАгента);
		
	КонецЕсли;  
	
	РежимВыгрузкиКонтрагентов = НастройкиОбработки["РежимВыгрузкиКонтрагентов"];	
	Если (РежимВыгрузкиКонтрагентов = 1 Или РежимВыгрузкиКонтрагентов = 2) И ИспользоватьТорговыеТочки = Истина Тогда		// без использования плана 
		ЗаполнитьТаблицуТорговыхТочек(сзКлиентыАгента, сзТоргТочкиАгента);
	КонецЕсли;
			
КонецПроцедуры // СформироватьСписокКлиентовАгента()

Процедура СформироватьСписокНоменклатуры(Агент, ДопНастройкиАгента, СзАссортимент, СзГруппыАссортимент)
	
	СзГруппыАссортимент.Очистить();
	СзАссортимент.Очистить();
	
	отбор = ДопНастройкиАгента["Отбор"];			
	отборНоменклатура = отбор.Получить("Номенклатура");

	Выборка = Неопределено;
	Если отборНоменклатура <> Неопределено Тогда	
		Если отборНоменклатура["Использование"] Тогда
				
			ПостроительОтчета = Новый ПостроительОтчета;
			ПостроительОтчета.Текст = ПолучитьТекстЗапросаНоменклатура();
			ПостроительОтчета.ЗаполнитьНастройки();
			ПостроительОтчета.Отбор.Добавить("Ссылка");
			УстановитьПоляОтбораПостроителяОтчета("Ссылка", отборНоменклатура, ПостроительОтчета);
			
			ПостроительОтчета.Выполнить();			
			Выборка = ПостроительОтчета.Результат.Выбрать();

		КонецЕсли;
		
	КонецЕсли;
	
	Если Выборка = Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = ПолучитьТекстЗапросаНоменклатура();
		Выборка = Запрос.Выполнить().Выбрать();
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		СзАссортимент.Добавить(Выборка.Ссылка);
		Если Выборка.Ссылка.ЭтоГруппа Тогда			
			СзГруппыАссортимент.Добавить(Выборка.Ссылка);
		ИначеЕсли ЗначениеЗаполнено(Выборка.Ссылка.Родитель) Тогда
			СзГруппыАссортимент.Добавить(Выборка.Ссылка.Родитель);							
		КонецЕсли;		
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ЗаполнитьСписокКлиентовАгента(ДанныеАгента, ДопНастройкиАгента, ПарАгент, ПланПосещений, сзКлиентыАгента, сзТоргТочкиАгента)
	
	Агент = ДанныеАгента["Пользователь"];
	РежимВыгрузкиКонтрагентов = НастройкиОбработки.Получить("РежимВыгрузкиКонтрагентов");
	флВыгрузитьВсехКонтрагентов = Ложь;
	
	// С использованием плана посещений
	флВыгрузитьКонтрагентовИзСписка = Ложь;
	Если РежимВыгрузкиКонтрагентов = 0 Тогда  		
		НайтиПланАгента(ДанныеАгента, ПарАгент, сзКлиентыАгента, сзТоргТочкиАгента, ПланПосещений);
		//++Ratmir 2017-02-05
		флВыгрузитьКонтрагентовИзСписка = Истина;
		//--Ratmir 2017-02-05
	ИначеЕсли РежимВыгрузкиКонтрагентов = 2 Тогда 		//Выгрузка всех клиентов-покупателей
		флВыгрузитьВсехКонтрагентов = Истина; 
	ИначеЕсли РежимВыгрузкиКонтрагентов = 1 Тогда		//Выгрузка контрагентов из списка
		флВыгрузитьКонтрагентовИзСписка = Истина;
	КонецЕсли;	
	
	Если флВыгрузитьВсехКонтрагентов Тогда
		Если ИспользоватьТорговыеТочки Тогда
			текСписТоргТочки = Неопределено;
			Запрос = Новый Запрос(ПолучитьТекстЗапросаВсеКонтрагенты(ИспользоватьТорговыеТочки, текСписТоргТочки));
			Запрос.УстановитьПараметр("СписокТорговыеТочки", текСписТоргТочки);
		Иначе
			Запрос = Новый Запрос(ПолучитьТекстЗапросаВсеКонтрагенты(ИспользоватьТорговыеТочки));
		КонецЕсли;

		ВыборкаКонтр = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаКонтр.Следующий() Цикл			
			Если сзКлиентыАгента.НайтиПоЗначению(ВыборкаКонтр.Ссылка) = Неопределено Тогда
				сзКлиентыАгента.Добавить(ВыборкаКонтр.Ссылка);
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	
	Если флВыгрузитьКонтрагентовИзСписка Тогда
		Если ДопНастройкиАгента <> Неопределено Тогда
			//СписокКонтрагентов = ДопНастройкиАгента.Получить("СписокКонтрагентов");
			отбор = ДопНастройкиАгента["Отбор"];			
			отборКонтрагенты = отбор.Получить("Контрагенты");
			
			Если отборКонтрагенты = Неопределено Тогда
				ОповеститьОСобытии("ru='Необходимо указать выгружаемый список контрагентов для агента: " + Агент + """ на форме """ + Имена["НастройкиАгента"] + """!'", ТипыЛогов["Обмен"], СтатусСообщения.Внимание, Агент);
				Возврат;
			КонецЕсли;
			
			Если отборКонтрагенты["Использование"] Тогда			
				
				текСписТоргТочки = Неопределено;
				ПостроительОтчета = Новый ПостроительОтчета;
				ПостроительОтчета.Текст = ПолучитьТекстЗапросаВсеКонтрагенты(ИспользоватьТорговыеТочки, текСписТоргТочки);
				ПостроительОтчета.ЗаполнитьНастройки();			
				
				Если ИспользоватьТорговыеТочки Тогда
					ПостроительОтчета.Параметры.Вставить("СписокТорговыеТочки", текСписТоргТочки);
				КонецЕсли;
				
				ПостроительОтчета.Отбор.Добавить("Ссылка");
				УстановитьПоляОтбораПостроителяОтчета("Ссылка", отборКонтрагенты, ПостроительОтчета);
				
				ПостроительОтчета.Выполнить();
				ТаблицаКонтрагентов = ПостроительОтчета.Результат.Выгрузить();			
				
				Для Каждого текСтрока Из ТаблицаКонтрагентов Цикл
					//++Ratmir 2017-10-27
					СсылкаНаКонтрагента = текСтрока.Ссылка;
					//Если СсылкаНаКонтрагента.ОсновнойМенеджерПокупателя.ФизЛицо = Агент.ФизЛицо Тогда
					////--Ratmir 2017-10-27
					//	Если сзКлиентыАгента.НайтиПоЗначению(СсылкаНаКонтрагента) = Неопределено Тогда
					//		сзКлиентыАгента.Добавить(СсылкаНаКонтрагента);
					//	КонецЕсли;
					//КонецЕсли;
					сзКлиентыАгента.Добавить(СсылкаНаКонтрагента);
				КонецЦикла;
			Иначе     // выгружаем всех контрагентов				
				флВыгрузитьВсехКонтрагентов = Истина;
				ОповеститьОСобытии("ru='Не задан список контрагентов для агента """ + Агент + """. Выгружен весь список контрагентов.'", ТипыЛогов["Обмен"], СтатусСообщения.Внимание, Агент);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры //ЗаполнитьСписокКлиентовАгента()

Процедура СформироватьТаблицуВыгружаемыхТиповЦен(ДанныеАгента, ДопНастройкиАгента, ТзКатегорииЦен)

	Агент = ДанныеАгента["Пользователь"];
	ТзКатегорииЦен.Очистить();
	ТзКатегорииЦен.Колонки.Добавить("ТипЦены");
	ТзКатегорииЦен.Колонки.Добавить("Код");
	
	ЕстьОшибки = Ложь;
	
	СтОтбор = Новый Структура("Объект", Агент);
		
	отбор = ДопНастройкиАгента["Отбор"];	
	
	Если отбор = Неопределено Тогда
		ЕстьОшибки = Истина;
	Иначе
		 отборТипыЦен = отбор.Получить("ТипыЦенНоменклатуры");
		
		Если отборТипыЦен = Неопределено Тогда
			ЕстьОшибки = Истина;
		Иначе
			Если отборТипыЦен["Использование"] Тогда
				ПостроительОтчета = Новый ПостроительОтчета;
				ПостроительОтчета.Текст = ПолучитьТекстЗапросаТипыЦен();
				ПостроительОтчета.ЗаполнитьНастройки();
				ПостроительОтчета.Отбор.Добавить("Ссылка");
				УстановитьПоляОтбораПостроителяОтчета("Ссылка", отборТипыЦен, ПостроительОтчета);
				
				ПостроительОтчета.Выполнить();
				ТаблицаЦен = ПостроительОтчета.Результат.Выгрузить();
				
				Для Каждого СтрокаТаб Из ТаблицаЦен Цикл
			
					НовСтрока = ТзКатегорииЦен.Добавить();
					НовСтрока.ТипЦены = СтрокаТаб.Ссылка;
					НовСтрока.Код 	  = СтрокаТаб.Ссылка.Код;
				
				КонецЦикла;

			Иначе
				
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				               |	ТипыЦенНоменклатуры.Ссылка,
				               |	ТипыЦенНоменклатуры.Код
				               |ИЗ
				               |	Справочник.ТипыЦенНоменклатуры КАК ТипыЦенНоменклатуры";					   					   
							   
				ВыборкаСправочника = Запрос.Выполнить().Выбрать();
			    Пока ВыборкаСправочника.Следующий() Цикл
					НовСтрока = ТзКатегорииЦен.Добавить();
					НовСтрока.ТипЦены = ВыборкаСправочника.Ссылка;
					НовСтрока.Код 	  = ВыборкаСправочника.Код;	
			    КонецЦикла;

			КонецЕсли;

		КонецЕсли;
	КонецЕсли;		  
			
	Если ЕстьОшибки Тогда
		ОповеститьОСобытии("ru='Необходимо определить выгружаемый список типов цен для агента: """ + Агент + """ на форме """ + Имена["НастройкиАгента"] + """!'", ТипыЛогов["Обмен"], СтатусСообщения.Внимание, Агент);
	КонецЕсли;
	
КонецПроцедуры // СформироватьТаблицуВыгружаемыхТиповЦен()

// Процедура находит план агента в текущем месяце. Если в текущем месяце есть несколько планов
// посещений, то в расчет берется последний по дате формирования документ планирования.
//   
Процедура НайтиПланАгента(ДанныеАгента, Агент, сзКлиентыАгента, сзТоргТочкиАгента, ПланПосещений) Экспорт
	
	ПланПосещений = Неопределено;
	
	ДатаНачала    = НачалоМесяца(ТекущаяДата());
	ДатаОкончания = КонецМесяца(ТекущаяДата());
	
	ВидИспользуемыхМаршрутов = НастройкиОбработки["ВидИспользуемыхМаршрутов"];
	Если ВидИспользуемыхМаршрутов=1 Тогда
		ГруппаСобытия = ПолучитьГруппуСобытия("ЦиклическийМаршрут");
		//чтобы не править текст запроса 
		ДатаНачала    = Дата(2013,1,1);
		ДатаОкончания = Дата(2020,12,31);
	Иначе	
		ГруппаСобытия = ПолучитьГруппуСобытия("Маршрут");
	КонецЕсли;
	
	Запрос = Новый Запрос;	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	МАКСИМУМ(События.Дата) КАК ПоследняяДата
	               |ПОМЕСТИТЬ ЗапросДаты
	               |ИЗ
	               |	Документ.Событие КАК События
	               |ГДЕ
	               |	События.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	               |	И События.ГруппаСобытия = &ГруппаСобытие
	               |	И НЕ События.ПометкаУдаления
	               |	И События.Ответственный = &Агент
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПоследняяДата УБЫВ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	События.Ссылка
	               |ИЗ
	               |	Документ.Событие КАК События,
	               |	ЗапросДаты КАК ЗапросДаты
	               |ГДЕ
	               |	События.ГруппаСобытия = &ГруппаСобытие
	               |	И НЕ События.ПометкаУдаления
	               |	И События.Ответственный = &Агент
	               |	И События.Дата = ЗапросДаты.ПоследняяДата
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	События.Номер";				   
				   
	Запрос.УстановитьПараметр("ГруппаСобытие", ГруппаСобытия); 
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("Агент", Агент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл	
				
		Контрагент = Выборка.Ссылка.Контрагент;
		
		Если ИспользоватьТорговыеТочки Тогда
			
			Если Не Контрагент = Контрагент.ГоловнойКонтрагент И Не Контрагент.ГоловнойКонтрагент = Справочники.Контрагенты.ПустаяСсылка() Тогда
				Если сзТоргТочкиАгента.НайтиПоЗначению(Контрагент) = Неопределено И Не Контрагент.ПометкаУдаления Тогда
					сзТоргТочкиАгента.Добавить(Контрагент);					
				КонецЕсли;
				
				Если сзКлиентыАгента.НайтиПоЗначению(Контрагент.ГоловнойКонтрагент) = Неопределено И Не Контрагент.ГоловнойКонтрагент.ПометкаУдаления Тогда
					сзКлиентыАгента.Добавить(Контрагент.ГоловнойКонтрагент);
				КонецЕсли;
			Иначе
				Если сзКлиентыАгента.НайтиПоЗначению(Контрагент.ГоловнойКонтрагент) = Неопределено И Не Контрагент.ГоловнойКонтрагент.ПометкаУдаления Тогда
					сзКлиентыАгента.Добавить(Контрагент.ГоловнойКонтрагент);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если сзКлиентыАгента.НайтиПоЗначению(Контрагент) = Неопределено И Не Контрагент.ПометкаУдаления Тогда
				сзКлиентыАгента.Добавить(Контрагент);
			КонецЕсли;
		КонецЕсли;			
		
		ПланПосещений = Выборка.Ссылка;
		
	КонецЦикла;
	
КонецПроцедуры //НайтиПланАгента()

Процедура ВыгрузитьТолькоИсториюПродаж(XML_Текст, ДанныеАгента, ДопНастройкиАгента)
	
	Агент = ДанныеАгента["Пользователь"];
	
	ПланПосещений = Неопределено;				//ссылка на документ Событие
	сзКлиентыАгента = Новый СписокЗначений;
	сзТоргТочкиАгента = Новый СписокЗначений;		
	СзАссортимент = Новый СписокЗначений;
	СзГруппыАссортимент = Новый СписокЗначений;
			
	СформироватьСписокКлиентовАгентов(ДанныеАгента, ДопНастройкиАгента, ПланПосещений, сзКлиентыАгента, сзТоргТочкиАгента);	
	СформироватьСписокНоменклатуры(Агент, ДопНастройкиАгента, СзАссортимент, СзГруппыАссортимент);	
		
			XML_Текст.ЗаписатьНачалоЭлемента(эл_Справочники);
				ВыгрузитьИсториюПродаж(XML_Текст, сзКлиентыАгента, СзАссортимент);
			XML_Текст.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ВыгрузитьЗапрос(XML_Текст, ЭлЗапрос, СоотвЗагруженныхОбъектов, данныеМУ, ДанныеАгента, ДопНастройкиАгента, КолФотоМТ);
	
	Если ЭлЗапрос = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Агент = ДанныеАгента["Пользователь"];
	
	КолФото = 0;
	
	списокЗапросов = СоответствиеСписковЗначений["ВидыЗапросов"];
	списокЗапросов = ?(списокЗапросов = Неопределено, Новый Соответствие, списокЗапросов);
	
	ИдЗапроса = ЭлЗапрос["ВидЗапроса"];
	
	Если ИдЗапроса = (Новый УникальныйИдентификатор("00d68c63-a1d0-4e9d-bf25-43f0d8480cfa")) Тогда			// История продаж
			
		ВыгрузитьТолькоИсториюПродаж(XML_Текст, ДанныеАгента, ДопНастройкиАгента)
					
	ИначеЕсли ИдЗапроса = (Новый УникальныйИдентификатор("67f3e7c2-0711-4555-b816-d214e81ca840")) Тогда		// Взаиморасчеты
		
		ПланПосещений = Неопределено;		//ссылка на документ Событие
		сзКлиентыАгента = Новый СписокЗначений;
		сзТоргТочкиАгента = Новый СписокЗначений;		
				
		СформироватьСписокКлиентовАгентов(ДанныеАгента, ДопНастройкиАгента, ПланПосещений, сзКлиентыАгента, сзТоргТочкиАгента);		
				
			XML_Текст.ЗаписатьНачалоЭлемента(эл_Справочники);					
				ВыгрузитьКлиентов(XML_Текст, СоотвЗагруженныхОбъектов, Агент, сзКлиентыАгента);
			XML_Текст.ЗаписатьКонецЭлемента();
				
			XML_Текст.ЗаписатьНачалоЭлемента(эл_Документы);
				ВыгрузитьВзаиморасчеты(XML_Текст, сзКлиентыАгента);
			XML_Текст.ЗаписатьКонецЭлемента();
		
	ИначеЕсли ИдЗапроса = (Новый УникальныйИдентификатор("361e8f8f-ec4c-4e38-a3bd-8ccf97b692b6")) Тогда		// Маршруты
				
		ПланПосещений = Неопределено;		//ссылка на документ Событие
		сзКлиентыАгента = Новый СписокЗначений;
		сзТоргТочкиАгента = Новый СписокЗначений;	
			
		НайтиПланАгента(ДанныеАгента, Агент, сзКлиентыАгента, сзТоргТочкиАгента, ПланПосещений);		
				
				XML_Текст.ЗаписатьНачалоЭлемента(эл_Документы);
					ВыгрузитьМаршрутыАгента(XML_Текст, Агент, ДанныеАгента, ПланПосещений);
				XML_Текст.ЗаписатьКонецЭлемента();

			
	ИначеЕсли ИдЗапроса = (Новый УникальныйИдентификатор("b3d7b609-0d2e-4059-8878-41afd160a5e5")) Тогда		// Номенклатура
				
		ТзКатегорииЦен = Новый ТаблицаЗначений;
		СзАссортимент = Новый СписокЗначений;
		СзГруппыАссортимент = Новый СписокЗначений;
		ТзСклады = Новый ТаблицаЗначений;
			
		СформироватьТаблицуВыгружаемыхТиповЦен(ДанныеАгента, ДопНастройкиАгента, ТзКатегорииЦен);  	
		СформироватьСписокНоменклатуры(Агент, ДопНастройкиАгента, СзАссортимент, СзГруппыАссортимент);	
			
				XML_Текст.ЗаписатьНачалоЭлемента(эл_Справочники);
					ВыгрузитьНоменклатуру(XML_Текст, СоотвЗагруженныхОбъектов, ДанныеАгента, ДопНастройкиАгента, ТзКатегорииЦен, ТзСклады, СзАссортимент, СзГруппыАссортимент);
					ВыгрузитьХарактеристикиНоменклатуры(XML_Текст, СоотвЗагруженныхОбъектов, ДанныеАгента, СзАссортимент, ТзСклады, ТзКатегорииЦен);
				XML_Текст.ЗаписатьКонецЭлемента();	
			
	ИначеЕсли ИдЗапроса = (Новый УникальныйИдентификатор("b386dacd-d56f-48b4-a076-083b7e013369")) Тогда		// Полная выгрузка
	
		ВыгрузитьКонстанты(XML_Текст, СоотвЗагруженныхОбъектов, данныеМУ, ДанныеАгента);
		
		ВыгрузитьСправочникиДокументы(XML_Текст, СоотвЗагруженныхОбъектов, ДанныеАгента, ДопНастройкиАгента, КолФотоМТ);
	
	КонецЕсли;
 		
КонецПроцедуры //ВыгрузкаЗапросов()
//Процедура обрабатывает кодОшибки и оповещает о ней устройство
// параметры КодОшибки и ТекстСообщения зарезервированы на будущее и не используются
Процедура Выгрузить(ЭлЗапрос, ОтветнаяВыгрузка, СоотвЗагруженныхОбъектов = Неопределено, данныеМУ, ДанныеАгента, ДопНастройкиАгента, Параметры = Неопределено, КодОшибки = Неопределено, ТекстСообщения = "") Экспорт
	
	ЕстьОшибки = Ложь;
	
	//vd_180917
	Если СоотвЗагруженныхОбъектов = Неопределено Тогда
		СоотвЗагруженныхОбъектов = Новый Соответствие;
	КонецЕсли;	
	
	Если ДанныеАгента = Неопределено Тогда
		ЕстьОшибки = Истина; 	
		ОповеститьОСобытии("ru='Агент не определен'", ТипыЛогов["Обмен"], СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	
	Если СпособОбмена = 1 И данныеМУ = Неопределено Тогда
		ТекстОшибки = "ru='Не определены настройки мобильного устройства для агента """ + ДанныеАгента["Пользователь"] + """'";
		ОповеститьОСобытии(ТекстОшибки, СтатусСообщения.Внимание, ТипыЛогов["Обмен"], СтатусСообщения.Внимание, ДанныеАгента["Пользователь"]);
		Возврат;
	КонецЕсли;
	
	СтрДата = Строка(ТекущаяДата());
	
	ЕстьОшибки = СформироватьФайлВыгрузки(ЭлЗапрос, ОтветнаяВыгрузка, СоотвЗагруженныхОбъектов, данныеМУ, ДанныеАгента, ДопНастройкиАгента, Неопределено, КодОшибки, ТекстСообщения);
	
	Если ЕстьОшибки = Ложь Тогда
		ОповеститьОСобытии("ru='Выгрузка данных завершена.'", ТипыЛогов["Обмен"], СтатусСообщения.Информация, ДанныеАгента["Пользователь"]);
	Иначе
		ОповеститьОСобытии("ru='Данные не выгружены!'", ТипыЛогов["Обмен"], СтатусСообщения.Важное, ДанныеАгента["Пользователь"]);
	КонецЕсли;
	
	СохранитьЛог(ТипыЛогов["Обмен"]);
	
КонецПроцедуры //ОповеститьКПКОСобытии()

// sk_190118 Функция не используется
// Функция СоздатьПодключениеFTP
//
// Параметры:
//  ftpСервер      		- адресная строка FTP-сервера (тип: Строка)
//	ftpПользователь		- имя пользователя для входа на FTP-сервер (тип: Строка)
//	ftpПароль           - пароль пользователя для входа на FTP-сервер (тип: Строка)
//
// Возвращаемое значение:
//	ПодключениеFTP / Неопределено
//
// Описание:
// 	Функция формирует новое подключениек FTP-серверу по заданным настройка в системе
// 
Функция СоздатьПодключениеFTP_OLD(ftpСервер = Неопределено, ftpПользователь = Неопределено, ftpПароль = Неопределено, Агент = Неопределено) Экспорт
	
	Если ftpСервер = Неопределено Тогда           	// если идёт не проверка соединения FTP
		Если ПодключениеFTP <> Неопределено Тогда   // если соединение уже создано - возвращаем его
		    Возврат ПодключениеFTP;
		КонецЕсли;
	КонецЕсли;
		
	текFtpСервер = ?(ftpСервер = Неопределено, НастройкиОбработки["FtpСервер"], ftpСервер);
	текFtpПользователь = ?(ftpПользователь = Неопределено, НастройкиОбработки["FtpПользователь"], ftpПользователь);
	текFtpПароль = ?(ftpПароль = Неопределено, НастройкиОбработки["FtpПароль"], ftpПароль);
	
	Если (Не ЗначениеЗаполнено(текFtpСервер)) Или (Не ЗначениеЗаполнено(текFtpПользователь)) Тогда
		ТекстСообщения = "ru='Указаны не все параметры соединения с FTP-сервером! Работа с FTP невозможна!'";
		типЛога = ?(ftpСервер = Неопределено, ТипыЛогов["Обмен"], ТипыЛогов["Обработка"]);
		ОповеститьОСобытии(ТекстСообщения, типЛога, СтатусСообщения.Внимание, Агент);
		Возврат Неопределено;
	КонецЕсли;
	
	#Если Клиент Тогда		
		Состояние(НСтр("ru='Подключение к FTP-серверу ...'"));
	#КонецЕсли
	
	Попытка
		текПодключениеFTP = Новый FTPСоединение(текFtpСервер, , текFtpПользователь, текFtpПароль, , Истина, 60);		
		ТекстСообщения = "ru='Подключение к FTP-серверу выполнено успешно'";
		ОповеститьОСобытии(ТекстСообщения, типЛога, СтатусСообщения.Информация, Агент);
	Исключение
		ТекстСообщения = "ru=""Ошибка подключения. " + СтрЗаменить(ОписаниеОшибки(), "'", """") + """";
		типЛога = ?(ftpСервер = Неопределено, ТипыЛогов["Обмен"], ТипыЛогов["Обработка"]);
		ОповеститьОСобытии(ТекстСообщения, типЛога, СтатусСообщения.Важное, Агент);
		Возврат Ложь;
	КонецПопытки;
	
	Если ftpСервер = Неопределено Тогда              	// если это не проверка соединения FTP
		ПодключениеFTP = текПодключениеFTP;
	КонецЕсли;
	       	
	Возврат текПодключениеFTP;  	
КонецФункции // СоздатьПодключениеFTP()

//++2017-12-20 Ratmir
Процедура СохранитьФайлДляУД(текАгент, текКаталог, текИмяФайла)
	ИДАгента = XMLСтрока(текАгент);
	
	КаталогАпДиск = РабочаяПапка + "ApDisk";
	КаталогНаДиске = Новый Файл(КаталогАпДиск);
	Если НЕ КаталогНаДиске.Существует() Тогда
        СоздатьКаталог(КаталогАпДиск);
	КонецЕсли;    
	
	//проверим файл разрешений
	ФайлРазрешенияУД = КаталогАпДиск + "\configUD.cfg";
	СохранятьКопию = Ложь;
	ФайлНаДиске = Новый Файл(ФайлРазрешенияУД);
	Если НЕ ФайлНаДиске.Существует() Тогда
    	Текст = Новый ТекстовыйДокумент();
		Текст.ДобавитьСтроку("01");
		Текст.Записать(ФайлРазрешенияУД);
	Иначе
	    ФайлРУД = Новый ЧтениеТекста(ФайлРазрешенияУД);
		СтрокаРУД = ФайлРУД.Прочитать();
		Если Лев(СтрокаРУД,1) = "1" Тогда
			Если Найти(текИмяФайла, "From") > 0 Тогда
				СохранятьКопию = Истина;
			КонецЕсли;
		КонецЕсли;
		Если Сред(СтрокаРУД,2,1) = "1" Тогда
			Если Найти(текИмяФайла, "To") > 0 Тогда
				СохранятьКопию = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;    
	
	Если СохранятьКопию Тогда
		КаталогАгента = КаталогАпДиск + "\" + ИДАгента;
		КаталогНаДиске = Новый Файл(КаталогАгента);
		Если НЕ КаталогНаДиске.Существует() Тогда
			СоздатьКаталог(КаталогАгента);
		КонецЕсли;    
		текКаталогПриемника = КаталогАгента + "\";
		
		ТаймСтэмп = Формат(Число(ТекущаяДата() - Дата("19700101")), "ЧН=0; ЧГ=0");
		
		текИмяФайлаПриемника = СокрЛП(ТаймСтэмп) + "_" + ИДАгента + "_" +текИмяФайла;
		ФайлПриемникДляУД = текКаталогПриемника + текИмяФайлаПриемника;
		
		ФайлИсточникДляУД = текКаталог + текИмяФайла;
		КопироватьФайл(ФайлИсточникДляУД, ФайлПриемникДляУД);
	КонецЕсли;
КонецПроцедуры
//--2017-12-20 Ratmir

Функция ВыгрузитьДанныеНаFTP(ДанныеАгента, данныеМУ, СписокФайлов)
	
	естьОшибки = Ложь;
	
	текАгент = ДанныеАгента["Пользователь"];	
	ФТП_СоздатьПодключение();	// текПодключениеFTP = СоздатьПодключениеFTP_OLD(, , , текАгент); sk_190118
	
	Если ПодключениеFTP = Неопределено Тогда
		естьОшибки = Истина;
	Иначе		
		
		FtpПапка = Строка(данныеМУ["ПапкаFTP"]);
		
		Если Не ЗначениеЗаполнено(FtpПапка) Тогда		
			ТекстСообщения = "ru='У агента """ + текАгент.Наименование + """ не указана папка обмена на FTP-сервере!'";
			ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обмен"], СтатусСообщения.Внимание, текАгент); // ОповеститьОСобытии(НСтр(ТекстСообщения), ТипыЛогов["Обмен"], СтатусСообщения.Внимание, текАгент); sk_190121
			Возврат Истина;
		КонецЕсли;
		
		Если (Прав(FtpПапка,1) <> "\") Или (Прав(FtpПапка,1) <> "/") Тогда
			FtpПапка = FtpПапка + "/";
		КонецЕсли;
		
		Для Каждого структураФайл Из СписокФайлов Цикл
			
			Попытка			
				каталог = структураФайл["Каталог"];
				имяФайла = структураФайл["ИмяФайла"];			
				путьКФайлу = каталог + имяФайла;
				
				ФайлНаДиске = Новый Файл(путьКФайлу);    
				Если ФайлНаДиске.Существует() Тогда
					имяФайлаFTP = FtpПапка + имяФайла;
					//++2017-12-20 Ratmir
					СохранитьФайлДляУД(текАгент, каталог, имяФайла);
					//--2017-12-20 Ratmir
					ПодключениеFTP.Записать(каталог + имяФайла, имяФайлаFTP);
				Иначе				
					Возврат Истина;
				КонецЕсли;
					
			Исключение	
				Если ПодключениеFTP.НайтиФайлы(FtpПапка).Количество() = 0 Тогда
					ТекстСообщения = "ru='Данные для торгового агента """ + текАгент.Наименование + """ не отправлены!" + 
										" Причина: не существует папки на FTP-сервере """ + FtpПапка + """'";
					ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обмен"], СтатусСообщения.Внимание, текАгент);
				Иначе
	 				ТекстСообщения = "ru='Данные для торгового агента """ + текАгент.Наименование + """ не отправлены!" + 
						" Причина: " + СтрЗаменить(ОписаниеОшибки(), "'", """") + "'";
					ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обмен"], СтатусСообщения.Внимание, текАгент);
				КонецЕсли;
				Возврат Истина;
			КонецПопытки;	
		КонецЦикла;
		
		ТекстСообщения = "ru='Данные для торгового агента """ + текАгент.Наименование + """ успешно выгружены на FTP-сервер!'";
		ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обмен"], СтатусСообщения.Информация, текАгент);
	КонецЕсли;
	
	Возврат естьОшибки;
	
КонецФункции

Функция ВыгрузитьФайлыВПапкуПрямогоПодключения(ПапкаПрямогоПодключения, Агент, СписокФайлов)
	
	естьОшибки = Ложь;
	
	Для Каждого структураФайл Из СписокФайлов Цикл
	
		Попытка			
			каталог = структураФайл["Каталог"];
			имяФайла = структураФайл["ИмяФайла"];			
			путьКФайлу = каталог + имяФайла;
			
			ФайлНаДиске = Новый Файл(путьКФайлу);    
			Если ФайлНаДиске.Существует() Тогда
				имяФайлаПрямоеПодключение = ПапкаПрямогоПодключения + имяФайла;
				Если путьКФайлу <> имяФайлаПрямоеПодключение Тогда
					КопироватьФайл(путьКФайлу, имяФайлаПрямоеПодключение)
				КонецЕсли;
			Иначе				
				ТекстСообщения = "ru='Файл не существует """ + путьКФайлу + """'";
				ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обмен"], СтатусСообщения.Внимание, Агент);
				Возврат Истина;
			КонецЕсли;
				
		Исключение	
 			ТекстСообщения = "ru='Данные для торгового агента """ + Агент.Наименование + """ не отправлены!" + 
				" Причина: " + СтрЗаменить(ОписаниеОшибки(), "'", """") + "'";
			ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обмен"], СтатусСообщения.Внимание, Агент);
			Возврат Истина;
		КонецПопытки;	
	КонецЦикла;
	
	Возврат естьОшибки;
КонецФункции

// Функция проверяет использование многобазовости агентом и формирует файл манифеста
// при необходимости
// Параметры
//
// Возвращаемое значение:
//   <Строка>   - Имя файла манифеста для упаковки в архив
//
Функция СформироватьФайлМанифест(СписокБД, Каталог)

	ПутьКФайлуМанифеста = "";
	Если СписокБД <> Неопределено Тогда
		Если СписокБД.Количество() > 1 Тогда
			ФайлМанифеста = Новый ТекстовыйДокумент();
			ФайлМанифеста.ДобавитьСтроку("<manifest version=""1"">");
			Для Каждого ТекСтрока из СписокБД Цикл
				ФайлМанифеста.ДобавитьСтроку(Символы.Таб + "<import db=""" + ТекСтрока["ИмяБД"] + """ file=""" + Имена["ФайлВыгрузки"] + Имена["РасширениеXML"] + """ />");
			КонецЦикла;
			ФайлМанифеста.ДобавитьСтроку("</manifest>");
			имяФайлМанифест = Имена["ФайлМанифест"];
			ПутьКФайлуМанифеста = Каталог + имяФайлМанифест;
			ФайлМанифеста.Записать(Каталог + имяФайлМанифест);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПутьКФайлуМанифеста;
КонецФункции // СформироватьФайлМанифест()

Функция СформироватьФайлВыгрузки(ЭлЗапрос, ОтветнаяВыгрузка, СоотвЗагруженныхОбъектов, данныеМУ, ДанныеАгента, ДопНастройкиАгента, Параметры = Неопределено, КодОшибки = Неопределено, ТекстСообщения = "")
	
	ЕстьОшибки = Ложь;
		
	Агент = ДанныеАгента["Пользователь"];
	
	XML_Текст = Новый ЗаписьXML;
	
	ПутьОбмена = ПолучитьПутьОбмена();	
	Если ПутьОбмена = Неопределено Тогда Возврат Истина; КонецЕсли;
	
	Если СпособОбмена = 1 Тогда
		ПутьОбмена = ПутьОбмена + данныеМУ["ПапкаСОД"];		
		ДополнитьСлешВПуть(путьОбмена);		
	КонецЕсли;	
	ПроверитьСуществованиеКаталога(ПутьОбмена, Ложь);
	
	ПланПосещений = Неопределено;
	КолФотоМТ = 0;
	
	ИмяФайлДанныхXML = Имена["ФайлВыгрузки"] + Имена["РасширениеXML"];
	ФайлДанныхXML = ПутьОбмена + ИмяФайлДанныхXML;
	
	Попытка		
		XML_Текст.ОткрытьФайл(ФайлДанныхXML, "UTF-8");
	Исключение
		естьОшибки = Истина;
		текстОшибки = "ru='" + СтрЗаменить(ОписаниеОшибки(), "'", """") + "'";
		ОповеститьОСобытии(текстОшибки, ТипыЛогов["Обмен"], СтатусСообщения.Внимание, ДанныеАгента["Пользователь"]);
	КонецПопытки;
	
	Если Не ЕстьОшибки Тогда
		XML_Текст.ЗаписатьОбъявлениеXML();
		
		XML_Текст.ЗаписатьНачалоЭлемента(эл_Данные);    	// <DАTA>
		
		Если ЭлЗапрос <> Неопределено Тогда  	
			
			ОповеститьОСобытии("ru='Выгрузка ответа на запрос ...'", ТипыЛогов["Обмен"], СтатусСообщения.Информация);
			ВыгрузитьЗапрос(XML_Текст, ЭлЗапрос, СоотвЗагруженныхОбъектов, данныеМУ, ДанныеАгента, ДопНастройкиАгента, КолФотоМТ);
			
		ИначеЕсли ОтветнаяВыгрузка Тогда				
			
			ОповеститьОСобытии("ru='Выгрузка ответных данных ...'", ТипыЛогов["Обмен"], СтатусСообщения.Информация, Агент);							
			ВыгрузитьПодтверждения(XML_Текст, Агент, СоотвЗагруженныхОбъектов);
			
		Иначе // Обычная выгрузка данных, вызывается в том числе по кнопке "Выгрузить" 
			
			ОповеститьОСобытии("ru='Выгрузка данных ...'", ТипыЛогов["Обмен"], СтатусСообщения.БезСтатуса, ДанныеАгента["Пользователь"]);	
			
			ВыгрузитьКонстанты(XML_Текст, СоотвЗагруженныхОбъектов, данныеМУ, ДанныеАгента);
			
			Если ВидВыгрузки = 0 Или ВидВыгрузки = 2 Тогда		//все данные с историей продаж или без
				
				ВыгрузитьСправочникиДокументы(XML_Текст, СоотвЗагруженныхОбъектов, ДанныеАгента, ДопНастройкиАгента, КолФотоМТ);
				
			ИначеЕсли ВидВыгрузки = 1 Тогда						//Только история продаж
				ВыгрузитьТолькоИсториюПродаж(XML_Текст, ДанныеАгента, ДопНастройкиАгента)
			КонецЕсли;
			
			// Выгрузка Стартовых номер документов
			Если флВыгружатьСтартовыеНомера Тогда
				ВыгрузитьСтартовыеНомераДокументов(XML_Текст);
			КонецЕсли;
			
		КонецЕсли;
		
		XML_Текст.ЗаписатьКонецЭлемента();			    	// </DАTA>
		
		XML_Текст.Закрыть();	
		
		ПутьАрхивКартинок = "";		
		ИмяФайлаКартинок = Имена["АрхивВыгрузкиКартинки"] + Имена["РасширениеZIP"];
		Если флВыгружатьКартинки Тогда
			Если КолФотоМТ > 0 Тогда
				// Добавляем в архив картинки товаров
				КаталогКартинок = РабочаяПапка + "PhotosFrom1C\";
				Если ЗначениеЗаполнено(КаталогКартинок) Тогда					
					ПолныйПутьКАрхиву = КаталогКартинок + ИмяФайлаКартинок;
					НужныйФайлАрхиваНаДиске = Новый Файл(ПолныйПутьКАрхиву);
					Если НужныйФайлАрхиваНаДиске.Существует() Тогда
						//СтрАрхивКартинок = Т_+ Имена["АрхивВыгрузкиКартинки"] + Имена["РасширениеZIP"] + Т_ + ПолныйПутьКАрхиву;
						ПутьАрхивКартинок = ПолныйПутьКАрхиву;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
		
		ПутьКФайлуМанифесту = СформироватьФайлМанифест(ДопНастройкиАгента["СписокБД"], ПутьОбмена);
		
		списокФайлов = Новый Массив;
		
		Если ИспользоватьZipАрхивы Тогда
			
			#Если Клиент Тогда
				Состояние(НСтр("ru='Упаковка ...'"));
			#КонецЕсли
			
			имяАрхива = Имена["АрхивВыгрузки"] + Имена["РасширениеZIP"];
			ПутьИмяАрхива = ПутьОбмена + имяАрхива;
			
			найденнаяСтрокаАгент = ТабНастройкиАгентов.Найти(ВыбАгент, "Пользователь");
		
			Отбор = Новый Структура;
			Отбор.Вставить("УникальныйИдентификаторАгента", найденнаяСтрокаАгент.УникальныйИдентификатор);
			Отбор.Вставить("Основной", Истина); 
			
			массивПривязанныеАгентыМУ = ТабАгентыМУ.НайтиСтроки(Отбор);
			найденнаяСтрокаМУ = массивПривязанныеАгентыМУ[0].УникальныйИдентификаторМУ;
			данныеМУ = ТабМобильныеУстройства.Найти(найденнаяСтрокаМУ, "УникальныйИдентификатор");
			ПарольАрхива = данныеМУ["ПарольАрхива"];
					
			архивОбмена = Новый ЗаписьZipФайла(ПутьИмяАрхива, ПарольАрхива);		
			архивОбмена.Добавить(ФайлДанныхXML);		
			Если ЗначениеЗаполнено(ПутьАрхивКартинок) Тогда архивОбмена.Добавить(ПутьАрхивКартинок); КонецЕсли;
			Если ЗначениеЗаполнено(ПутьКФайлуМанифесту) Тогда архивОбмена.Добавить(ПутьКФайлуМанифесту); КонецЕсли;		
			
			Попытка
				архивОбмена.Записать();
				Если ЗначениеЗаполнено(ПарольАрхива) Тогда  				
					ОповеститьОСобытии("ru='Подготовленный zip-архив защищен паролем!'", Неопределено, СтатусСообщения.Информация, Агент);
				КонецЕсли;
				списокФайлов.Добавить(Новый Структура("Каталог, ИмяФайла", ПутьОбмена, имяАрхива));
			Исключение
				ОповеститьОСобытии("ru='Не удалось записать zip-архив по причине: " + СтрЗаменить(ОписаниеОшибки(), "'", """") + "'", ТипыЛогов["Обмен"], СтатусСообщения.Важное, Агент);
			КонецПопытки;
			
			УдалитьФайлы(ФайлДанныхXML);
			Если ЗначениеЗаполнено(ПутьАрхивКартинок) Тогда УдалитьФайлы(ПутьАрхивКартинок); КонецЕсли;
			Если ЗначениеЗаполнено(ПутьКФайлуМанифесту) Тогда УдалитьФайлы(ПутьКФайлуМанифесту); КонецЕсли;		
			
		Иначе
			
			Если ЗначениеЗаполнено(ФайлДанныхXML) Тогда списокФайлов.Добавить(Новый Структура("Каталог, ИмяФайла", ПутьОбмена, ИмяФайлДанныхXML)); КонецЕсли;
			Если ЗначениеЗаполнено(ПутьАрхивКартинок) Тогда списокФайлов.Добавить(Новый Структура("Каталог, ИмяФайла", КаталогКартинок, ИмяФайлаКартинок)); КонецЕсли;		
			Если ЗначениеЗаполнено(ПутьКФайлуМанифесту) Тогда списокФайлов.Добавить(Новый Структура("Каталог, ИмяФайла", ПутьОбмена, Имена["ФайлМанифест"])); КонецЕсли;
			
		КонецЕсли;	
		
		Если СпособОбмена = 0 Тогда			// Прямое подключение
			
			#Если Клиент Тогда		
				Состояние(НСтр("ru='Копирование данных в выбранную папку ...'"));
			#КонецЕсли
			
	        ЕстьОшибки = ВыгрузитьФайлыВПапкуПрямогоПодключения(ПутьОбмена, Агент, СписокФайлов)
			
		ИначеЕсли СпособОбмена = 2 Тогда	// FTP-сервер
			#Если Клиент Тогда		
				Состояние(НСтр("ru='Отправка данных на FTP-сервер ...'"));
			#КонецЕсли
			
			ЕстьОшибки = ВыгрузитьДанныеНаFTP(ДанныеАгента, данныеМУ, СписокФайлов);

		КонецЕсли;
	КонецЕсли;		
		
    Возврат естьОшибки;
КонецФункции

Процедура ОбновитьСсылочныеКонстантыВыгрузки(ДанныеАгента)
	
	// обновляем константы расписания GPS-трекинга
	Если ДанныеАгента["GPSЗаписыватьТрек"] = Истина Тогда
		СписокНастройкиТрекинга = ПолучитьЗначениеНастройки("НастройкиТрекинга", "Соответствие");
		СписокНастройкиТрекинга = ?(СписокНастройкиТрекинга = Неопределено, Новый Соответствие, СписокНастройкиТрекинга);
		идРасписаниеТрека = ДанныеАгента["GPSРасписание"];
		текОбъектНастройкаТрекинга = СписокНастройкиТрекинга[идРасписаниеТрека];
		Если текОбъектНастройкаТрекинга <> Неопределено Тогда
			РабочееВремя = Формат(текОбъектНастройкаТрекинга["ВремяНачала"], "ДФ=HH:mm") + "-" + Формат(текОбъектНастройкаТрекинга["ВремяОкончания"], "ДФ=HH:mm");
			ДанныеАгента["GPSПериодЗаписиТрека"] = текОбъектНастройкаТрекинга["ПериодПовтораВТечениеДня"];
			ДанныеАгента["GPSРабочееВремя"] = РабочееВремя;
			ДанныеАгента["GPSРабочиеДни"] = текОбъектНастройкаТрекинга["ДниНедели"];
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьКонстанты(XML_Текст, СоотвЗагруженныхОбъектов = Неопределено, данныеМУ, ДанныеАгента)
	
	ПодтверждаемыеКонстанты = Неопределено;
	
	Если СоотвЗагруженныхОбъектов <> Неопределено Тогда
		ПодтверждаемыеКонстанты = СоотвЗагруженныхОбъектов[эл_Константы]; 
	КонецЕсли;
	
	ОбновитьСсылочныеКонстантыВыгрузки(ДанныеАгента);
	
	// Выгрузка констант НАЧАЛО
	XML_Текст.ЗаписатьНачалоЭлемента(эл_Константы);								// <CONSTANTS>
	
	#Если Клиент Тогда
		Состояние(НСтр("ru='Выгрузка констант ...'"));
	#КонецЕсли
	
		XML_Текст.ЗаписатьНачалоЭлемента(эл_Элементы);							// <ELEMENTS>
	
		Для Каждого стрКонстанта Из ТаблЗначКонстанты Цикл
			Если стрКонстанта["Выгружать"] = Истина Тогда			
				значение = "";
				текТип = стрКонстанта["Тип"];
				имяКонстанты = стрКонстанта["Имя"];
				Если текТип =  ТипКонстанты["Пользователь"] Тогда
					значение = ДанныеАгента[имяКонстанты];
					значение = ?(значение <> Неопределено, значение, НастройкиАгентаПоУмолчанию[имяКонстанты]);					
				ИначеЕсли текТип = ТипКонстанты["МУ"] Тогда
					Если данныеМУ <> Неопределено Тогда
						значение = данныеМУ[имяКонстанты];
					КонецЕсли;
				ИначеЕсли текТип = ТипКонстанты["Обработка"] Тогда
					значение = НастройкиОбработки[имяКонстанты];
				ИначеЕсли текТип = ТипКонстанты["Типовая"] Тогда
					Попытка
						
						значение = Константы[имяКонстанты].Получить();
						
						типЗнчКонстанты = ТипЗнч(значение);
						Если типЗнчКонстанты <> Тип("Строка") И типЗнчКонстанты <> Тип("Число") И типЗнчКонстанты <> Тип("Булево") Тогда
							
							ОбъектМетаданных = Метаданные.НайтиПоТипу(типЗнчКонстанты);
							Если Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
								значение = значение.Наименование;
							ИначеЕсли Метаданные.Перечисления.Содержит(ОбъектМетаданных) Тогда
								СтруктураПеречисления = СоответствиеПеречислений[ОбъектМетаданных.Имя];
								значение = СтруктураПеречисления[значение]																
							КонецЕсли;								
							 
						КонецЕсли;
						
					Исключение
						Продолжить;
					КонецПопытки;
				КонецЕсли;
				XML_Текст.ЗаписатьНачалоЭлемента(эл_Элемент);                   // <ITEM>
				XML_Текст.ЗаписатьАтрибут(ат_Гуид, стрКонстанта["Ид"]);
				XML_Текст.ЗаписатьАтрибут(ат_Значение, ПреобразоватьЗначениеВСтрокуДляXML(значение, имяКонстанты));
				XML_Текст.ЗаписатьКонецЭлемента();
			КонецЕсли;
			
		КонецЦикла;
			
		XML_Текст.ЗаписатьКонецЭлемента();										// </ELEMENTS>
		
		// Выгрузка подтверждений для констант
		XML_Текст.ЗаписатьНачалоЭлемента(эл_Подтвердить);						// <CONFIRMATIONS>
		Если ПодтверждаемыеКонстанты <> Неопределено Тогда 	
			Для Каждого текКонстанта Из ПодтверждаемыеКонстанты Цикл
				текКлюч = текКонстанта.Ключ;
				стрКонстанта = ТаблЗначКонстанты.Найти(текКонстанта.Ключ, "Ид");
				Если стрКонстанта <> Неопределено Тогда
					Если Не стрКонстанта["Выгружать"] Тогда
						XML_Текст.ЗаписатьНачалоЭлемента(эл_Элемент);               // <ITEM>
						XML_Текст.ЗаписатьАтрибут(ат_Гуид, текКлюч);
						XML_Текст.ЗаписатьКонецЭлемента();
					КонецЕсли;
				Иначе
					XML_Текст.ЗаписатьНачалоЭлемента(эл_Элемент);                   // <ITEM>
					XML_Текст.ЗаписатьАтрибут(ат_Гуид, текКлюч);
					XML_Текст.ЗаписатьКонецЭлемента();
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	
		XML_Текст.ЗаписатьКонецЭлемента();  									// </CONFIRMATIONS>
	
	XML_Текст.ЗаписатьКонецЭлемента(); 											// </CONSTANTS>
		
КонецПроцедуры //ВыгрузитьКонстанты

Процедура ВыгрузитьСправочникиДокументы(XML_Текст, СоотвЗагруженныхОбъектов, ДанныеАгента, ДопНастройкиАгента, КолФотоМТ)
	
	Агент = ДанныеАгента["Пользователь"];	
		
	сзДоговорыАгента = Новый СписокЗначений;
	сзТоргТочкиАгента = Новый СписокЗначений;
	сзКлиентыАгента = Новый СписокЗначений;
	сзНеНайденныхТиповЦен = Новый СписокЗначений;
	СзАссортимент = Новый СписокЗначений;
	СзГруппыАссортимент = Новый СписокЗначений;
	сзФотоСпр = Новый СписокЗначений;
	ТзКатегорииЦен = Новый ТаблицаЗначений;
	ТзСклады = Новый ТаблицаЗначений;	
	ВидыДоставки = Новый ТаблицаЗначений;	
	ПланПосещений = Неопределено;		//ссылка на документ Событие
	
	СформироватьСписокКлиентовАгентов(ДанныеАгента, ДопНастройкиАгента, ПланПосещений, сзКлиентыАгента, сзТоргТочкиАгента);
	
	СформироватьТаблицуВыгружаемыхТиповЦен(ДанныеАгента, ДопНастройкиАгента, ТзКатегорииЦен);	
	
	СформироватьСписокНоменклатуры(Агент, ДопНастройкиАгента, СзАссортимент, СзГруппыАссортимент);	
	
	// Выгружаем справочные данные	
	#Если Клиент Тогда
		Состояние(НСтр("ru='Выгрузка справочников ...'"));
	#КонецЕсли   				
	
	XML_Текст.ЗаписатьНачалоЭлемента(эл_Справочники);		// <CATALOGS>
	
		#Если Клиент Тогда
			Состояние(НСтр("ru='Выгрузка организаций ...'"));
		#КонецЕсли 		
		Если НаименованиеКонфигурации = "УправлениеПроизводственнымПредприятием" Тогда
			ВыгрузитьОрганизацииУПП(XML_Текст, СоотвЗагруженныхОбъектов, ДанныеАгента, ДопНастройкиАгента);
		Иначе
			ВыгрузитьОрганизации(XML_Текст, СоотвЗагруженныхОбъектов, ДанныеАгента, ДопНастройкиАгента);
		КонецЕсли;
		
		#Если Клиент Тогда
			Состояние(НСтр("ru='Выгрузка контрагентов ...'"));
		#КонецЕсли   		
		ВыгрузитьКлиентов(XML_Текст, СоотвЗагруженныхОбъектов, Агент, сзКлиентыАгента);		
		
		ИспользоватьДоговоры = НастройкиОбработки.Получить("ИспользоватьДоговоры");
		ИспользоватьДоговоры = ?(ИспользоватьДоговоры = Неопределено, НастройкиОбработкиПоУмолчанию["ИспользоватьДоговоры"], ИспользоватьДоговоры);
		Если ИспользоватьДоговоры Тогда
			#Если Клиент Тогда
				Состояние(НСтр("ru='Выгрузка договоров контрагентов ...'"));
			#КонецЕсли    
			ВыгрузитьДоговорыКонтагентов(XML_Текст, СоотвЗагруженныхОбъектов, ДанныеАгента, сзКлиентыАгента, ТзКатегорииЦен, сзНеНайденныхТиповЦен); 
		КонецЕсли;
		
		Если ИспользоватьТорговыеТочки Тогда
			#Если Клиент Тогда
				Состояние(НСтр("ru='Выгрузка торговых точек ...'"));
			#КонецЕсли  
			ВыгрузитьТорговыеТочки(XML_Текст, СоотвЗагруженныхОбъектов, сзКлиентыАгента, сзТоргТочкиАгента);	
		КонецЕсли;
		
		#Если Клиент Тогда
			Состояние(НСтр("ru='Выгрузка контактной информации ...'"));
		#КонецЕсли				
		ВыгрузитьКонтактныеЛица(XML_Текст, СоотвЗагруженныхОбъектов, сзКлиентыАгента, сзТоргТочкиАгента);		
 		ВыгрузитьВидыКонтактнойИнформации(XML_Текст, СоотвЗагруженныхОбъектов);
		ВыгрузитьКонтактнуюИнформацию(XML_Текст, СоотвЗагруженныхОбъектов, сзКлиентыАгента, сзТоргТочкиАгента);
		
		#Если Клиент Тогда
			Состояние(НСтр("ru='Выгрузка номенклатуры ...'"));
		#КонецЕсли  		
		ВыгрузитьНоменклатуру(XML_Текст, СоотвЗагруженныхОбъектов, ДанныеАгента, ДопНастройкиАгента, ТзКатегорииЦен, ТзСклады, СзАссортимент, СзГруппыАссортимент);
		
		Если ВидВыгрузки = 0 Тогда			//Все данные с историей продаж
			#Если Клиент Тогда
				Состояние(НСтр("ru='Выгрузка истории продаж ...'"));
			#КонецЕсли  		
			ВыгрузитьИсториюПродаж(XML_Текст, сзКлиентыАгента, СзАссортимент);
		КонецЕсли;
				
		#Если Клиент Тогда
			Состояние(НСтр("ru='Выгрузка дополнительной информации ...'"));
		#КонецЕсли  
		ВыгрузитьДополнительнуюИнформацию(XML_Текст, СоотвЗагруженныхОбъектов, ТзКатегорииЦен, ТзСклады, СзАссортимент);
		
		ВыгрузитьФотоСправочников(XML_Текст, СоотвЗагруженныхОбъектов, СзАссортимент, сзКлиентыАгента, сзТоргТочкиАгента, сзФотоСпр);
		
		ВыгрузитьВидыДоставки(XML_Текст,СоотвЗагруженныхОбъектов,ВидыДоставки);
		
		//2017-10-18
		ВыгрузитьПерсональныеЦеныСкидки(XML_Текст, сзКлиентыАгента, сзАссортимент);
		//2017-10-18

	XML_Текст.ЗаписатьКонецЭлемента(); //CATALOGS

	// Выгружаем документы	
	#Если Клиент Тогда
		Состояние(НСтр("ru='Выгрузка документов ...'"));
	#КонецЕсли 	
    
	XML_Текст.ЗаписатьНачалоЭлемента(эл_Документы);
		
		// Если нет необходимости выгружать целиком документы, 		
		// то можно включить в выгрузку просто выгрузку подтверждений.
		// Нужно выше раскомментировать процедуру "ВыгрузитьПодтверждения"

		#Если Клиент Тогда
			Состояние(НСтр("ru='Выгрузка заказов ...'"));
		#КонецЕсли			
		ВыгрузитьЗаказыПокупателей(XML_Текст, ДанныеАгента, ТзКатегорииЦен, сзНеНайденныхТиповЦен);		
	
		#Если Клиент Тогда
			Состояние(НСтр("ru='Выгрузка взаиморасчетов ...'"));
		#КонецЕсли	
		ВыгрузитьВзаиморасчеты(XML_Текст, сзКлиентыАгента);		
		
		#Если Клиент Тогда
			Состояние(НСтр("ru='Выгрузка маршрутов ...'"));
		#КонецЕсли
		ВыгрузитьМаршрутыАгента(XML_Текст, Агент, ДанныеАгента, ПланПосещений);		

		#Если Клиент Тогда
			Состояние(НСтр("ru='Выгрузка продаж ...'"));
		#КонецЕсли		
		
		// Выгрузка реализаций
		ВыгрузитьПродажи(XML_Текст, ДанныеАгента, ТзКатегорииЦен, сзНеНайденныхТиповЦен);
		
		#Если Клиент Тогда
			Состояние(НСтр("ru='Выгрузка подтверждений документов ...'"));
		#КонецЕсли	
		
		// Выгрузка подтверждений ПКО
		ВыгрузитьПодтвержденияДокумента(XML_Текст, "ПриходныйКассовыйОрдер", "ПКО", Агент);
		
		// Выгрузка подтверждений РКО
		ВыгрузитьПодтвержденияДокумента(XML_Текст, "РасходныйКассовыйОрдер", "ПКО", Агент);
	    		
		// Выгрузка подтверждений Перемещения
		ВыгрузитьПодтвержденияДокумента(XML_Текст, "ПеремещениеТоваров", "Перемещение", Агент);      //vd_180824
		
		// Выгрузка подтверждений возвратов
		ВыгрузитьПодтвержденияДокумента(XML_Текст, "ВозвратТоваровОтПокупателя", "Поступление", Агент);
		
		// Выгрузка подтверждений поступлений
		ВыгрузитьПодтвержденияДокумента(XML_Текст, "ПоступлениеТоваровУслуг", "Поступление", Агент); //vd_180824
		
		// Выгрузка подтверждений Посещений
		ВыгрузитьПодтвержденияПосещений(XML_Текст,Агент);
		
		// sk_190628 В рамках (MOD-470)
		// Выгрузка подтверждений документа "Мерчендайзинг"
		ВОВыгрузитьПодтвержденияДокумента(XML_Текст, ВОТипОбъекта.Мерчендайзинг, Агент);
		
		XML_Текст.ЗаписатьКонецЭлемента();  // DOCUMENTS;
	
	// Выгружаем картинки	
	#Если Клиент Тогда
		Состояние(НСтр("ru='Выгрузка картинок ...'"));
	#КонецЕсли
	
	XML_Текст.ЗаписатьНачалоЭлемента(эл_Картинки);
	
		//ДобавитьПоле("Comment", "Фотографии");
		ВыгрузитьИзображения(XML_Текст, Агент, СоотвЗагруженныхОбъектов, сзФотоСпр, КолФотоМТ);

	XML_Текст.ЗаписатьКонецЭлемента(); //PICTURES
		
КонецПроцедуры

Процедура ВыгрузитьОрганизации(XML_Текст, СоотвЗагруженныхОбъектов, ДанныеАгента, ДопНастройкиАгента)
	
	имяСправочника = "Организации";	
	
	ТекстЗапроса = "ВЫБРАТЬ
	               	|	Организации.Ссылка КАК Ссылка,
	               	|	Организации.Наименование,
	               	|	Организации.ПометкаУдаления,
 	  				|";
					
					Если НаименованиеКонфигурации = "УправлениеТорговымПредприятиемДляКазахстана" Тогда 
						ТекстЗапроса = ТекстЗапроса + "
						|	Организации.РНН КАК ИНН,
						|	""1"" КАК КПП,
						|	""1"" КАК ОГРН,
						|";
					Иначе
						ТекстЗапроса = ТекстЗапроса + "
						|	Организации.ИНН,	
			        	|	Организации.КПП,
	    				|	Организации.ОГРН,
		   				|";
					КонецЕсли;
					
					ТекстЗапроса = ТекстЗапроса + "
	               	|	ЕСТЬNULL(Телефон.Тел, """") КАК Телефон,
	               	|	ЕСТЬNULL(ФактАдрес.ФактичАдрес, """") КАК ФактАдрес,
	               	|	ЕСТЬNULL(ЮрАдрес.ЮридАдрес, """") КАК ЮрАдрес,
	               	|	Организации.Префикс,
	               	|	Организации.НаименованиеПолное,
					|";
				   
					Если НаименованиеКонфигурации = "УправлениеТорговымПредприятиемДляКазахстана" Тогда 
						ТекстЗапроса = ТекстЗапроса + "
	              		|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.ОрганизацияЯвляетсяПлательщикомНДС КАК ИспользоватьНДС
						|";
					Иначе
						ТекстЗапроса = ТекстЗапроса + "
			            |	НЕ УчетнаяПолитикаНалоговыйУчетСрезПоследних.ОрганизацияНеЯвляетсяПлательщикомНДС КАК ИспользоватьНДС
						|";
					КонецЕсли;
					
					ТекстЗапроса = ТекстЗапроса + "
	               |ИЗ
	               |	Справочник.Организации КАК Организации
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
	               |			КонтактнаяИнформация.Объект КАК Организация,
	               |			КонтактнаяИнформация.Вид КАК Вид,
	               |			КонтактнаяИнформация.Представление КАК Тел
	               |		ИЗ
	               |			РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	               |		ГДЕ
	               |			КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонОрганизации)) КАК Телефон
	               |		ПО Организации.Ссылка = Телефон.Организация
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
	               |			КонтактнаяИнформация.Объект КАК Организация,
	               |			КонтактнаяИнформация.Вид КАК Вид,
	               |			КонтактнаяИнформация.Представление КАК ФактичАдрес
	               |		ИЗ
	               |			РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	               |		ГДЕ
	               |			КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресОрганизации)) КАК ФактАдрес
	               |		ПО Организации.Ссылка = ФактАдрес.Организация
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
	               |			КонтактнаяИнформация.Объект КАК Организация,
	               |			КонтактнаяИнформация.Вид КАК Вид,
	               |			КонтактнаяИнформация.Представление КАК ЮридАдрес
	               |		ИЗ
	               |			РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	               |		ГДЕ
	               |			КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации)) КАК ЮрАдрес
	               |		ПО Организации.Ссылка = ЮрАдрес.Организация
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних КАК УчетнаяПолитикаНалоговыйУчетСрезПоследних
	               |		ПО Организации.Ссылка = УчетнаяПолитикаНалоговыйУчетСрезПоследних.Организация
	               |ГДЕ
	               |	Организации.ПометкаУдаления = ЛОЖЬ
				   |";
	
	
	отбор = ДопНастройкиАгента["Отбор"];
	отборОрганизации = отбор.Получить("Организации");

	СписокЭлементов = Неопределено;
	Если отборОрганизации <> Неопределено Тогда	
		Если отборОрганизации["Использование"] Тогда
				
			ПостроительОтчета = Новый ПостроительОтчета;
			ПостроительОтчета.Текст = ТекстЗапроса;
			ПостроительОтчета.ЗаполнитьНастройки();
			
			ПостроительОтчета.Отбор.Добавить("Ссылка");
			УстановитьПоляОтбораПостроителяОтчета("Ссылка", отборОрганизации, ПостроительОтчета);
			
			ПостроительОтчета.Выполнить();			
			СписокЭлементов = ПостроительОтчета.Результат.Выбрать();			
			
		КонецЕсли;
	КонецЕсли;	
	
	Если СписокЭлементов = Неопределено Тогда
		Запрос = Новый Запрос(ТекстЗапроса);
		СписокЭлементов = Запрос.Выполнить().Выбрать();
	КонецЕсли;
	
	ИдСпр = СоответствиеСпр[имяСправочника];
	
	СтруктураРеквизитов = СоответствиеСпр[ИдСпр];
	
	//XML_Текст.ЗаписатьКомментарий(СтруктураРеквизитов["ИмяСправочника"]);	
	XML_Текст.ЗаписатьНачалоЭлемента(эл_Справочник);
	
	XML_Текст.ЗаписатьАтрибут(ат_Гуид, ИдСпр);		             		
	
	УстановитьПризнакОчисткиСправочника(XML_Текст, ИдСпр);
	
	XML_Текст.ЗаписатьАтрибут(ат_Комментарий, СтруктураРеквизитов["_Представление"]);	
                         
		XML_Текст.ЗаписатьНачалоЭлемента(эл_Группы); 					// <GROUPS>
		XML_Текст.ЗаписатьКонецЭлемента();                              // </GROUPS>
	
		XML_Текст.ЗаписатьНачалоЭлемента(эл_Элементы);                  // <ELEMENTS>
		
		Пока СписокЭлементов.Следующий() Цикл 				
			
			XML_Текст.ЗаписатьНачалоЭлемента(эл_Элемент);               // <ITEM>
			XML_Текст.ЗаписатьАтрибут(ат_Гуид, XMLСтрока(СписокЭлементов.Ссылка.УникальныйИдентификатор()));
			XML_Текст.ЗаписатьАтрибут(ат_ПометкаУдаления, ПреобразоватьЗначениеВСтрокуДляXML(СписокЭлементов.ПометкаУдаления));
			XML_Текст.ЗаписатьАтрибут(ат_Наименование, СписокЭлементов.Наименование);			
			XML_Текст.ЗаписатьАтрибут(СтруктураРеквизитов["ИспользоватьНДС"], ПреобразоватьЗначениеВСтрокуДляXML(СписокЭлементов.ИспользоватьНДС));
			XML_Текст.ЗаписатьАтрибут(СтруктураРеквизитов["ЮрАдрес"], СписокЭлементов.ЮрАдрес);
			XML_Текст.ЗаписатьАтрибут(СтруктураРеквизитов["Телефон"], СписокЭлементов.Телефон);
			XML_Текст.ЗаписатьАтрибут(СтруктураРеквизитов["ИНН"], СписокЭлементов.ИНН);
			XML_Текст.ЗаписатьАтрибут(СтруктураРеквизитов["КПП"], СписокЭлементов.КПП);
			XML_Текст.ЗаписатьАтрибут(СтруктураРеквизитов["ОГРН"], СписокЭлементов.ОГРН);
			XML_Текст.ЗаписатьАтрибут(СтруктураРеквизитов["ФактАдрес"], СписокЭлементов.ФактАдрес);
			XML_Текст.ЗаписатьАтрибут(СтруктураРеквизитов["Префикс"], СписокЭлементов.Префикс);						
			
			//ДанныеДляПечатнойФормы
			Если НаименованиеКонфигурации = "УправлениеПроизводственнымПредприятием" Тогда
				Руководители = Вычислить("ОбщегоНазначения.ОтветственныеЛица(СписокЭлементов.Ссылка, ТекущаяДата())");
			ИначеЕсли НаименованиеКонфигурации = "УправлениеТорговымПредприятиемДляКазахстана" Тогда 
				Руководители = Вычислить("ОбщегоНазначения.ОтветственныеЛицаОрганизаций(СписокЭлементов.Ссылка, ТекущаяДата())");
			Иначе
				Руководители = Вычислить("РегламентированнаяОтчетность.ОтветственныеЛицаОрганизации(СписокЭлементов.Ссылка, ТекущаяДата())");
			КонецЕсли;
			Руководитель = Руководители.Руководитель;
			Руководитель = ?(Руководитель = Неопределено, "", Руководитель);
			Бухгалтер    = Руководители.ГлавныйБухгалтер;
			Бухгалтер = ?(Бухгалтер = Неопределено, "", Бухгалтер);
			XML_Текст.ЗаписатьАтрибут(СтруктураРеквизитов["БанкНаименование"], 		СписокЭлементов.Ссылка.ОсновнойБанковскийСчет.Банк.Наименование);
			XML_Текст.ЗаписатьАтрибут(СтруктураРеквизитов["НомерСчета"], 	 		СписокЭлементов.Ссылка.ОсновнойБанковскийСчет.НомерСчета);
			XML_Текст.ЗаписатьАтрибут(СтруктураРеквизитов["КоррСчет"], 				СписокЭлементов.Ссылка.ОсновнойБанковскийСчет.Банк.КоррСчет);
			XML_Текст.ЗаписатьАтрибут(СтруктураРеквизитов["БИК"], 					СписокЭлементов.Ссылка.ОсновнойБанковскийСчет.Банк.Код);
			//XML_Текст.ЗаписатьАтрибут(СтруктураРеквизитов["Руководитель"], 			Руководитель);
			//XML_Текст.ЗаписатьАтрибут(СтруктураРеквизитов["Бухгалтер"], 	 		Бухгалтер);
			XML_Текст.ЗаписатьАтрибут(СтруктураРеквизитов["НаименованиеПолное"], 	СписокЭлементов.НаименованиеПолное);
			
			XML_Текст.ЗаписатьКонецЭлемента();			               	// </ITEM>			

		КонецЦикла;
		
		XML_Текст.ЗаписатьКонецЭлемента();								// </ELEMENTS>
		
		ВыгрузитьПодтверждениеСправочника(XML_Текст, СоотвЗагруженныхОбъектов, имяСправочника);
		
	XML_Текст.ЗаписатьКонецЭлемента(); 									// </CATALOG>
	
КонецПроцедуры	//ВыгрузитьОрганизации

Процедура ВыгрузитьОрганизацииУПП(XML_Текст, СоотвЗагруженныхОбъектов, ДанныеАгента, ДопНастройкиАгента)
	
	имяСправочника = "Организации";	
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Организации.Ссылка КАК Ссылка,
	               |	Организации.Наименование,
	               |	Организации.ПометкаУдаления,
	               |	Организации.ИНН,
	               |	Организации.КПП,
	               |	Организации.ОГРН,
	               |	ЕСТЬNULL(Телефон.Тел, """") КАК Телефон,
	               |	ЕСТЬNULL(ФактАдрес.ФактичАдрес, """") КАК ФактАдрес,
	               |	ЕСТЬNULL(ЮрАдрес.ЮридАдрес, """") КАК ЮрАдрес,
	               |	Организации.Префикс,
	               |	Организации.НаименованиеПолное,
	               |	ВЫБОР
	               |		КОГДА УчетнаяПолитикаНалоговыйУчетСрезПоследних.СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.СистемыНалогообложения.Общая)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ИспользоватьНДС
	               |ИЗ
	               |	Справочник.Организации КАК Организации
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
	               |			КонтактнаяИнформация.Объект КАК Организация,
	               |			КонтактнаяИнформация.Вид КАК Вид,
	               |			КонтактнаяИнформация.Представление КАК Тел
	               |		ИЗ
	               |			РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	               |		ГДЕ
	               |			КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонОрганизации)) КАК Телефон
	               |		ПО Организации.Ссылка = Телефон.Организация
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
	               |			КонтактнаяИнформация.Объект КАК Организация,
	               |			КонтактнаяИнформация.Вид КАК Вид,
	               |			КонтактнаяИнформация.Представление КАК ФактичАдрес
	               |		ИЗ
	               |			РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	               |		ГДЕ
	               |			КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресОрганизации)) КАК ФактАдрес
	               |		ПО Организации.Ссылка = ФактАдрес.Организация
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
	               |			КонтактнаяИнформация.Объект КАК Организация,
	               |			КонтактнаяИнформация.Вид КАК Вид,
	               |			КонтактнаяИнформация.Представление КАК ЮридАдрес
	               |		ИЗ
	               |			РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	               |		ГДЕ
	               |			КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации)) КАК ЮрАдрес
	               |		ПО Организации.Ссылка = ЮрАдрес.Организация
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних КАК УчетнаяПолитикаНалоговыйУчетСрезПоследних
	               |		ПО Организации.Ссылка = УчетнаяПолитикаНалоговыйУчетСрезПоследних.Организация
	               |ГДЕ
	               |	Организации.ПометкаУдаления = ЛОЖЬ";
	
	
	отбор = ДопНастройкиАгента["Отбор"];
	отборОрганизации = отбор.Получить("Организации");

	СписокЭлементов = Неопределено;
	Если отборОрганизации <> Неопределено Тогда	
		Если отборОрганизации["Использование"] Тогда
				
			ПостроительОтчета = Новый ПостроительОтчета;
			ПостроительОтчета.Текст = ТекстЗапроса;
			ПостроительОтчета.ЗаполнитьНастройки();
			
			ПостроительОтчета.Отбор.Добавить("Ссылка");
			УстановитьПоляОтбораПостроителяОтчета("Ссылка", отборОрганизации, ПостроительОтчета);
			
			ПостроительОтчета.Выполнить();			
			СписокЭлементов = ПостроительОтчета.Результат.Выбрать();			
			
		КонецЕсли;
	КонецЕсли;	
	
	Если СписокЭлементов = Неопределено Тогда
		Запрос = Новый Запрос(ТекстЗапроса);
		СписокЭлементов = Запрос.Выполнить().Выбрать();
	КонецЕсли;
	
	ИдСпр = СоответствиеСпр[имяСправочника];
	
	СтруктураРеквизитов = СоответствиеСпр[ИдСпр];
	
	//XML_Текст.ЗаписатьКомментарий(СтруктураРеквизитов["ИмяСправочника"]);	
	XML_Текст.ЗаписатьНачалоЭлемента(эл_Справочник);
	
	XML_Текст.ЗаписатьАтрибут(ат_Гуид, ИдСпр);		             		
	
	УстановитьПризнакОчисткиСправочника(XML_Текст, ИдСпр);
	
	XML_Текст.ЗаписатьАтрибут(ат_Комментарий, СтруктураРеквизитов["_Представление"]);	
                         
		XML_Текст.ЗаписатьНачалоЭлемента(эл_Группы); 					// <GROUPS>
		XML_Текст.ЗаписатьКонецЭлемента();                              // </GROUPS>
	
		XML_Текст.ЗаписатьНачалоЭлемента(эл_Элементы);                  // <ELEMENTS>
		
		Пока СписокЭлементов.Следующий() Цикл 				
			
			XML_Текст.ЗаписатьНачалоЭлемента(эл_Элемент);               // <ITEM>
			XML_Текст.ЗаписатьАтрибут(ат_Гуид, XMLСтрока(СписокЭлементов.Ссылка.УникальныйИдентификатор()));
			XML_Текст.ЗаписатьАтрибут(ат_ПометкаУдаления, ПреобразоватьЗначениеВСтрокуДляXML(СписокЭлементов.ПометкаУдаления));
			XML_Текст.ЗаписатьАтрибут(ат_Наименование, СписокЭлементов.Наименование);			
			XML_Текст.ЗаписатьАтрибут(СтруктураРеквизитов["ИспользоватьНДС"], ПреобразоватьЗначениеВСтрокуДляXML(СписокЭлементов.ИспользоватьНДС));
			XML_Текст.ЗаписатьАтрибут(СтруктураРеквизитов["ЮрАдрес"], СписокЭлементов.ЮрАдрес);
			XML_Текст.ЗаписатьАтрибут(СтруктураРеквизитов["Телефон"], СписокЭлементов.Телефон);
			XML_Текст.ЗаписатьАтрибут(СтруктураРеквизитов["ИНН"], СписокЭлементов.ИНН);
			XML_Текст.ЗаписатьАтрибут(СтруктураРеквизитов["КПП"], СписокЭлементов.КПП);
			XML_Текст.ЗаписатьАтрибут(СтруктураРеквизитов["ОГРН"], СписокЭлементов.ОГРН);
			XML_Текст.ЗаписатьАтрибут(СтруктураРеквизитов["ФактАдрес"], СписокЭлементов.ФактАдрес);
			XML_Текст.ЗаписатьАтрибут(СтруктураРеквизитов["Префикс"], СписокЭлементов.Префикс);						
			
			//ДанныеДляПечатнойФормы
			Если НаименованиеКонфигурации = "УправлениеПроизводственнымПредприятием" Тогда
				Руководители = Вычислить("ОбщегоНазначения.ОтветственныеЛица(СписокЭлементов.Ссылка, ТекущаяДата())");
			Иначе
				Руководители = Вычислить("РегламентированнаяОтчетность.ОтветственныеЛицаОрганизации(СписокЭлементов.Ссылка, ТекущаяДата())");
			КонецЕсли;
			
			Руководитель = Руководители.Руководитель;
			Руководитель = ?(Руководитель = Неопределено, "", Руководитель);
			Бухгалтер    = Руководители.ГлавныйБухгалтер;
			Бухгалтер = ?(Бухгалтер = Неопределено, "", Бухгалтер);
			
			XML_Текст.ЗаписатьАтрибут(СтруктураРеквизитов["БанкНаименование"], 		СписокЭлементов.Ссылка.ОсновнойБанковскийСчет.Банк.Наименование);
			XML_Текст.ЗаписатьАтрибут(СтруктураРеквизитов["НомерСчета"], 	 		СписокЭлементов.Ссылка.ОсновнойБанковскийСчет.НомерСчета);
			XML_Текст.ЗаписатьАтрибут(СтруктураРеквизитов["КоррСчет"], 				СписокЭлементов.Ссылка.ОсновнойБанковскийСчет.Банк.КоррСчет);
			XML_Текст.ЗаписатьАтрибут(СтруктураРеквизитов["БИК"], 					СписокЭлементов.Ссылка.ОсновнойБанковскийСчет.Банк.Код);
			//XML_Текст.ЗаписатьАтрибут(СтруктураРеквизитов["Руководитель"], 			Руководитель);
			//XML_Текст.ЗаписатьАтрибут(СтруктураРеквизитов["Бухгалтер"], 	 		Бухгалтер);
			XML_Текст.ЗаписатьАтрибут(СтруктураРеквизитов["НаименованиеПолное"], 	СписокЭлементов.НаименованиеПолное);
			
			XML_Текст.ЗаписатьКонецЭлемента();			               	// </ITEM>			

		КонецЦикла;
		
		XML_Текст.ЗаписатьКонецЭлемента();								// </ELEMENTS>
		
		ВыгрузитьПодтверждениеСправочника(XML_Текст, СоотвЗагруженныхОбъектов, имяСправочника);
		
	XML_Текст.ЗаписатьКонецЭлемента(); 									// </CATALOG>
	
КонецПроцедуры	//ВыгрузитьОрганизации

//Ratmir 2017-11-18
Процедура ДобавитьПоле(Имя, Значение, XML_Текст)

	ЗначXML = ПреобразоватьЗначениеВСтрокуДляXML(Значение);
	Если Имя = "GUID" Тогда
		ЗначXML = ВРег(ЗначXML);
	КонецЕсли; 		
	XML_Текст.ЗаписатьАтрибут(Имя, ЗначXML);

КонецПроцедуры // ДобавитьПоле()

// Процедура выгружает персональные цены и скидки для клиентов
//
Процедура ВыгрузитьПерсональныеЦеныСкидки(XML_Текст, сзКлиентыАгента, сзАссортимент)
		
	// Выгрузка справочника персональных скидок
	МассивКачество = Новый Массив;
	МассивКачество.Добавить(Справочники.Качество.Новый);
	
	МассивУсловий = Новый Массив;	
	МассивУсловий.Добавить(Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара);
	МассивУсловий.Добавить(Перечисления.УсловияСкидкиНаценки.ПоСуммеДокумента);
	
	ТаблицаДоговоровАгента = Новый ТаблицаЗначений();
	ТаблицаДоговоровАгента.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаДоговоровАгента.Колонки.Добавить("Договор", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДоговорыКонтрагентов.Ссылка КАК Договор,
	|	ДоговорыКонтрагентов.Владелец КАК Контрагент
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец В Иерархии(&СписокКонтрагентов)
	|");
	
	Запрос.УстановитьПараметр("СписокКонтрагентов", сзКлиентыАгента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ТаблицаДоговоровАгента.Найти(Выборка.Договор, "Договор") = Неопределено Тогда
			НовСтрокаТаб = ТаблицаДоговоровАгента.Добавить(); 
			НовСтрокаТаб.Контрагент = Выборка.Контрагент;
			НовСтрокаТаб.Договор	= Выборка.Договор;				
		КонецЕсли;
	КонецЦикла;

	
	ТекстУсловия = "";
	
	РежимВыгрузкиКонтрагентов = НастройкиОбработки.Получить("РежимВыгрузкиКонтрагентов");
	
	Если РежимВыгрузкиКонтрагентов = 1 Тогда
		ПолучателиСкидки = ТаблицаДоговоровАгента.ВыгрузитьКолонку("Договор");
		ТекстУсловия = " И (ПолучательСкидки В ИЕРАРХИИ (&ПолучателиСкидки) ИЛИ ПолучательСкидки = &ПустойДоговор)";
	Иначе
		ПолучателиСкидки = сзКлиентыАгента;
		ТекстУсловия = " И (ПолучательСкидки В (&ПолучателиСкидки) ИЛИ ПолучательСкидки.Владелец В (&ПолучателиСкидки) ИЛИ ПолучательСкидки = &ПустойДоговор)";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РегСкидкиНоменклатуры.Номенклатура,
	|	РегСкидкиНоменклатуры.ПолучательСкидки,
	|	РегСкидкиНоменклатуры.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки
	|ПОМЕСТИТЬ Скидки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА РегСкидкиНоменклатуры.ХарактеристикаНоменклатуры = &ПустаяХарактеристика
	|				ТОГДА РегСкидкиНоменклатуры.Номенклатура
	|			ИНАЧЕ РегСкидкиНоменклатуры.ХарактеристикаНоменклатуры
	|		КОНЕЦ КАК Номенклатура,
	|		РегСкидкиНоменклатуры.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		РегСкидкиНоменклатуры.Качество КАК Качество,
	|		РегСкидкиНоменклатуры.Условие КАК Условие,
	|		РегСкидкиНоменклатуры.ЗначениеУсловия КАК ЗначениеУсловия,
	|		МАКСИМУМ(РегСкидкиНоменклатуры.ПроцентСкидкиНаценки) КАК ПроцентСкидкиНаценки,
	|		РегСкидкиНоменклатуры.ПолучательСкидки КАК ПолучательСкидки
	|	ИЗ
	|		РегистрСведений.СкидкиНаценкиНоменклатуры.СрезПоследних(
	|				&Дата,
	|				" + ?(сзАссортимент.Количество() > 0, "Номенклатура В ИЕРАРХИИ (&Ассортимент) И ", "") + "
	|				Качество В (&МассивКачество)
	|					И Условие В (&МассивУсловий)
	|					И ЗначениеУсловия = 0" + ТекстУсловия + ") КАК РегСкидкиНоменклатуры
	|	ГДЕ
	|		РегСкидкиНоменклатуры.Валюта <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|		И (РегСкидкиНоменклатуры.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ КОНЕЦПЕРИОДА(РегСкидкиНоменклатуры.ДатаОкончания, ДЕНЬ) >= &Дата)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		РегСкидкиНоменклатуры.Номенклатура,
	|		РегСкидкиНоменклатуры.ХарактеристикаНоменклатуры,
	|		РегСкидкиНоменклатуры.Качество,
	|		РегСкидкиНоменклатуры.Условие,
	|		РегСкидкиНоменклатуры.ПолучательСкидки,
	|		РегСкидкиНоменклатуры.ЗначениеУсловия) КАК РегСкидкиНоменклатуры
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.ЦеноваяГруппа,
	|	ВложенныйЗапрос.ПолучательСкидки,
	|	ВложенныйЗапрос.ЦПроцентСкидкиНаценки
	|ИЗ
	|	(ВЫБРАТЬ
	|		РегСкидкиПоЦеновымГруппам.Условие КАК ЦУсловие,
	|		РегСкидкиПоЦеновымГруппам.ЗначениеУсловия КАК ЦЗначениеУсловия,
	|		РегСкидкиПоЦеновымГруппам.ПроцентСкидкиНаценки КАК ЦПроцентСкидкиНаценки,
	|		РегСкидкиПоЦеновымГруппам.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|		РегСкидкиПоЦеновымГруппам.ПолучательСкидки КАК ПолучательСкидки
	|	ИЗ
	|		(ВЫБРАТЬ
	|			РегСкидкиПоЦеновымГруппам.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|			РегСкидкиПоЦеновымГруппам.Качество КАК Качество,
	|			РегСкидкиПоЦеновымГруппам.Условие КАК Условие,
	|			РегСкидкиПоЦеновымГруппам.ЗначениеУсловия КАК ЗначениеУсловия,
	|			МАКСИМУМ(РегСкидкиПоЦеновымГруппам.ПроцентСкидкиНаценки) КАК ПроцентСкидкиНаценки,
	|			РегСкидкиПоЦеновымГруппам.ПолучательСкидки КАК ПолучательСкидки
	|		ИЗ
	|			РегистрСведений.СкидкиНаценкиПоЦеновымГруппам.СрезПоследних(
	|					&Дата,
	|					Качество В (&МассивКачество)
	|						И Условие В (&МассивУсловий)
	|						И ЗначениеУсловия = 0" + ТекстУсловия + ") КАК РегСкидкиПоЦеновымГруппам
	|		ГДЕ
	|			РегСкидкиПоЦеновымГруппам.Валюта <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|			И (РегСкидкиПоЦеновымГруппам.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|					ИЛИ КОНЕЦПЕРИОДА(РегСкидкиПоЦеновымГруппам.ДатаОкончания, ДЕНЬ) >= &Дата)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			РегСкидкиПоЦеновымГруппам.ЦеноваяГруппа,
	|			РегСкидкиПоЦеновымГруппам.Качество,
	|			РегСкидкиПоЦеновымГруппам.Условие,
	|			РегСкидкиПоЦеновымГруппам.ПолучательСкидки,
	|			РегСкидкиПоЦеновымГруппам.ЗначениеУсловия) КАК РегСкидкиПоЦеновымГруппам) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Скидки.Номенклатура,
	|	Скидки.ПолучательСкидки,
	|	Скидки.ПроцентСкидкиНаценки,
	|	1 КАК ИспПерсЦены
	|ИЗ
	|	Скидки КАК Скидки";
		
	Запрос.УстановитьПараметр("Дата", 	 	  		  ТекущаяДата());	
	Запрос.УстановитьПараметр("МассивКачество",  	  МассивКачество);	
	Запрос.УстановитьПараметр("МассивУсловий",   	  МассивУсловий);
	Запрос.УстановитьПараметр("ПолучателиСкидки",     ПолучателиСкидки);
	Запрос.УстановитьПараметр("ПустаяХарактеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());	
	Запрос.УстановитьПараметр("ПустойДоговор", 		  Справочники.ДоговорыКонтрагентов.ПустаяСсылка());		
	Запрос.УстановитьПараметр("Ассортимент",	  	  сзАссортимент);
	
	#Если Клиент Тогда
		Состояние("Выполнение запроса по персональным скидкам ...");			
	#КонецЕсли  		
	ВыборкаСкидокЗапрос = Запрос.Выполнить();
	ВыборкаСкидок = ВыборкаСкидокЗапрос.Выбрать();
	ДокОбмена = XML_Текст;
	// Запись списка персональных скидок
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
	
		ДобавитьПоле("GUID", "12CF8990-D7D7-4CFA-9CCD-AD4CCB5EE9E6", XML_Текст);
		
		ДобавитьПоле("Comment", "Справочник.ПерсональныеСкидки", XML_Текст);
		
		ДобавитьПоле("KILLALL", "1", XML_Текст);
		
		ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
		
			ВсегоЭлементов = ВыборкаСкидок.Количество();
		
			СчЭлементов = 0;
		 
			Пока ВыборкаСкидок.Следующий() Цикл
				
				СчЭлементов = СчЭлементов + 1;
		
				ПроцентВыгрузки = Окр(СчЭлементов/ВсегоЭлементов*100, 0);		
		
				#Если Клиент Тогда
					Состояние("Выгрузка персональных скидок: " + ПроцентВыгрузки + "%");			
					ОбработкаПрерыванияПользователя();
				#КонецЕсли    	
				
				СтруктураПолей = Новый Структура;
				СтруктураПолей.Вставить("GUID", Новый УникальныйИдентификатор);
				Если ЗначениеЗаполнено(ВыборкаСкидок.ПолучательСкидки) Тогда
					СтруктураПолей.Вставить("A01",  ВыборкаСкидок.ПолучательСкидки);
				КонецЕсли;
				СтруктураПолей.Вставить("A02",  ВыборкаСкидок.Номенклатура);
				СтруктураПолей.Вставить("A03",  ВыборкаСкидок.ПроцентСкидкиНаценки);
				ЗаписатьЭлементВДокументОбмена(XML_Текст, СтруктураПолей);
			КонецЦикла;
			
		ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
		
	ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOG
	
	//////////////////////////////////////////////////////
	// Выгрузка справочника персональных цен контрагентов
	// Выборка делается из 2-х регистров: ЦеныНоменклатурыКонтрагентов и  ТипыЦенПоГруппамНоменклатурыДляПокупателей
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕдиницыИзмерения.Ссылка КАК Ссылка,
	|	ЕдиницыИзмерения.ЕдиницаПоКлассификатору КАК ЕдиницаПоКлассификатору,
	|	ЕдиницыИзмерения.Владелец КАК Владелец
	|ПОМЕСТИТЬ Единицы
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	ЕдиницыИзмерения.Владелец В ИЕРАРХИИ(&Ассортимент)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПерсональныеЦены.Контрагент,
	|	ПерсональныеЦены.ОбъектЦены КАК ОбъектЦены,
	|	ПерсональныеЦены.ТипЦены,
	|	ПерсональныеЦены.ЕдиницаИзмерения,
	|	ПерсональныеЦены.Валюта,
	|	ПерсональныеЦены.Цена,
	|	ВЫБОР
	|		КОГДА Единицы.Ссылка <> ПерсональныеЦены.ЕдиницаИзмерения
	|			ТОГДА ПерсональныеЦены.Цена * (Единицы.Ссылка.Коэффициент / ПерсональныеЦены.ЕдиницаИзмерения.Коэффициент)
	|		ИНАЧЕ ПерсональныеЦены.Цена
	|	КОНЕЦ КАК ЦенаЗаБазовуюЕдиницу
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ТипыЦенПоГруппамНоменклатурыДляПокупателейСрезПоследних.Контрагент КАК Контрагент,
	|		ТипыЦенПоГруппамНоменклатурыДляПокупателейСрезПоследних.НоменклатурнаяЦеноваяГруппа КАК ОбъектЦены,
	|		ТипыЦенПоГруппамНоменклатурыДляПокупателейСрезПоследних.ТипЦен КАК ТипЦены,
	|		ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка) КАК ЕдиницаИзмерения,
	|		ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК Валюта,
	|		0 КАК Цена
	|	ИЗ
	|		РегистрСведений.ТипыЦенПоГруппамНоменклатурыДляПокупателей.СрезПоследних(&Дата, Контрагент В (&СписКлиентов)) КАК ТипыЦенПоГруппамНоменклатурыДляПокупателейСрезПоследних
	|	ГДЕ
	|		ТипыЦенПоГруппамНоменклатурыДляПокупателейСрезПоследних.ТипЦен <> ЗНАЧЕНИЕ(Справочник.ТипыЦенНоменклатуры.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЦеныНоменклатурыКонтрагентовСрезПоследних.ТипЦен.Владелец,
	|		ВЫБОР
	|			КОГДА ЦеныНоменклатурыКонтрагентовСрезПоследних.ХарактеристикаНоменклатуры = &ПустаяХарактеристика
	|				ТОГДА ЦеныНоменклатурыКонтрагентовСрезПоследних.Номенклатура
	|			ИНАЧЕ ЦеныНоменклатурыКонтрагентовСрезПоследних.ХарактеристикаНоменклатуры
	|		КОНЕЦ,
	|		ЦеныНоменклатурыКонтрагентовСрезПоследних.ТипЦен.ТипЦеныНоменклатуры,
	|		ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения,
	|		ЦеныНоменклатурыКонтрагентовСрезПоследних.Валюта,
	|		ЦеныНоменклатурыКонтрагентовСрезПоследних.Цена
	|	ИЗ
	|		РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(&Дата, ТипЦен.Владелец В (&СписКлиентов)
	|					" + ?(сзАссортимент.Количество() > 0, " И Номенклатура В ИЕРАРХИИ (&Ассортимент) ", "") + "
	|) КАК ЦеныНоменклатурыКонтрагентовСрезПоследних) КАК ПерсональныеЦены
	|		ЛЕВОЕ СОЕДИНЕНИЕ Единицы КАК Единицы
	|		ПО ПерсональныеЦены.ОбъектЦены.БазоваяЕдиницаИзмерения = Единицы.ЕдиницаПоКлассификатору
	|			И ПерсональныеЦены.ОбъектЦены = Единицы.Владелец
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПерсональныеЦены.ОбъектЦены.Наименование");
	
	Запрос.УстановитьПараметр("ПустойТипЦены", 		  Справочники.ТипыЦенНоменклатуры.ПустаяСсылка());	
	Запрос.УстановитьПараметр("Дата", 	 	  		  ТекущаяДата());
	Запрос.УстановитьПараметр("СписКлиентов",    	  сзКлиентыАгента);
	Запрос.УстановитьПараметр("ПустаяХарактеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());	
	Запрос.УстановитьПараметр("Ассортимент",	  	  сзАссортимент);
	
	#Если Клиент Тогда
		Состояние("Выполнение запроса по персональным ценам ...");			
	#КонецЕсли  		
	ВыборкаЦенЗапрос = Запрос.Выполнить();
	ВыборкаЦен = ВыборкаЦенЗапрос.Выбрать();
	
	// Запись в файл персональных цен контрагентов
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
	
		ДобавитьПоле("GUID", "12215E0A-385D-441A-8E98-1B6E0206143F", XML_Текст);
		
		ДобавитьПоле("Comment", "Справочник.ПерсональныеЦены", XML_Текст);
		
		ДобавитьПоле("KILLALL", "1", XML_Текст);
		
		ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
		
			ВсегоЭлементов = ВыборкаЦен.Количество();
		
			СчЭлементов = 0;          
		
			Пока ВыборкаЦен.Следующий() Цикл
			
				СчЭлементов = СчЭлементов + 1;
		
				ПроцентВыгрузки = Окр(СчЭлементов/ВсегоЭлементов*100, 0);		
		
				#Если Клиент Тогда
					Состояние("Выгрузка персональных цен: " + ПроцентВыгрузки + "%");			
					ОбработкаПрерыванияПользователя();
				#КонецЕсли    
			
				ОбъектЦены  = ВыборкаЦен.ОбъектЦены;
				Цена	    = ВыборкаЦен.ЦенаЗаБазовуюЕдиницу;				
				Контрагент  = ВыборкаЦен.Контрагент;
				ТекТипЦены  = ВыборкаЦен.ТипЦены;
				
				СтруктураПолей = Новый Структура;
				СтруктураПолей.Вставить("GUID", Новый УникальныйИдентификатор);
				СтруктураПолей.Вставить("A01",  Контрагент);
				СтруктураПолей.Вставить("A02",  ОбъектЦены);
				Если Цена = 0 Тогда // значит цены установлены по ценовым группам
					СтруктураПолей.Вставить("A03",  ТекТипЦены);
				Иначе
					СтруктураПолей.Вставить("A03",  "");
				КонецЕсли;				
				СтруктураПолей.Вставить("A04",  Цена);			
				ЗаписатьЭлементВДокументОбмена(XML_Текст, СтруктураПолей);
			КонецЦикла;
			
		ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
		
	ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOG
	XML_Текст = ДокОбмена;
КонецПроцедуры // ВыгрузитьПерсональныеЦеныСкидки()
//--2017-10-18 Ratmir 

// Процедура выгрузки стартовых номеров документов
//
Процедура ВыгрузитьСтартовыеНомераДокументов(XML_Текст)

	ТаблНумераторов = Новый ТаблицаЗначений;
	ТаблНумераторов.Колонки.Добавить("Документ");
	ТаблНумераторов.Колонки.Добавить("ИдНумератора");
	ТаблНумераторов.Колонки.Добавить("ИдОбъекта");
	
	СтрокаНумераторов = ТаблНумераторов.Добавить();
	СтрокаНумераторов.Документ 		= "Заказы";
	СтрокаНумераторов.ИдНумератора 	= "293ff118-c039-4977-bc7b-1a73764237e0";
	СтрокаНумераторов.ИдОбъекта		= "e01e1f5c-d6e4-46e8-b923-3758b0d79bde";
	
	СтрокаНумераторов = ТаблНумераторов.Добавить();
	СтрокаНумераторов.Документ 		= "Продажи";
	СтрокаНумераторов.ИдНумератора 	= "bd6460d1-5b99-41fe-b86d-34fdd8ce98c0";
	СтрокаНумераторов.ИдОбъекта		= "7ffb418c-73c9-4883-91c5-827fa5145a3a";
		
	СтрокаНумераторов = ТаблНумераторов.Добавить();
	СтрокаНумераторов.Документ 		= "ПКО";
	СтрокаНумераторов.ИдНумератора 	= "b04b9dde-1868-4a80-9507-d66ecfeae942";
	СтрокаНумераторов.ИдОбъекта		= "749be2e0-9b00-4d7b-9d4d-88ca53327511";
	
	СтрокаНумераторов = ТаблНумераторов.Добавить();
	СтрокаНумераторов.Документ 		= "РКО";
	СтрокаНумераторов.ИдНумератора 	= "a695650b-7c77-4426-a33f-84d336a5c476";
	СтрокаНумераторов.ИдОбъекта		= "3890d435-96ba-4481-abc0-23782e15b32f";
	 	
	СтрокаНумераторов = ТаблНумераторов.Добавить();
	СтрокаНумераторов.Документ 		= "Поступления";
	СтрокаНумераторов.ИдНумератора 	= "ad10c572-3439-49b7-8986-7dc61e267309";
	СтрокаНумераторов.ИдОбъекта		= "c9850d61-bc15-445a-8b1a-e328cc45ddae";
	
	СтрокаНумераторов = ТаблНумераторов.Добавить();
	СтрокаНумераторов.Документ 		= "Возвраты";
	СтрокаНумераторов.ИдНумератора 	= "ad0bb26b-0536-46d8-8f1d-6d2aa6611311";
	СтрокаНумераторов.ИдОбъекта		= "4971b041-beab-4fa6-b1e8-10138f04fe44";
	
	СтрокаНумераторов = ТаблНумераторов.Добавить();
	СтрокаНумераторов.Документ 		= "Счета-фактуры";
	СтрокаНумераторов.ИдНумератора 	= "d0ff140d-de46-4894-86f4-f1296ba35cc1";
	СтрокаНумераторов.ИдОбъекта		= "d7d70de1-4f98-4153-82f1-12c84ebf81a5";
			
	Если флВыгружатьСтартовыеНомера И ТабСтартовыеНомера.Количество() > 0 Тогда
		#Если Клиент Тогда
			Состояние("Выгрузка стартовых номеров документов.");	
		#КонецЕсли
		XML_Текст.ЗаписатьНачалоЭлемента("NUMERATORS");
		XML_Текст.ЗаписатьАтрибут("KILLALL", "1");
		XML_Текст.ЗаписатьНачалоЭлемента("ELEMENTS");
		
		Для Каждого ТекСтрока Из ТабСтартовыеНомера Цикл
			СтрокаНумератора = ТаблНумераторов.Найти(ТекСтрока.Наименование);
			Если СтрокаНумератора <> Неопределено Тогда
				XML_Текст.ЗаписатьНачалоЭлемента("ITEM");
				XML_Текст.ЗаписатьАтрибут("GUID"		, ПреобразоватьЗначениеВСтрокуДляXML(Новый УникальныйИдентификатор()));
				XML_Текст.ЗаписатьАтрибут("NumeratorId"	, ПреобразоватьЗначениеВСтрокуДляXML(СтрокаНумератора.ИдНумератора));
				XML_Текст.ЗаписатьАтрибут("TypeId"		, ПреобразоватьЗначениеВСтрокуДляXML(СтрокаНумератора.ИдОбъекта));
				XML_Текст.ЗаписатьАтрибут("BegPeriod"	, ПреобразоватьЗначениеВСтрокуДляXML(Дата("19000101")));
				
				НомерДляРазбора = ТекСтрока.СтартовыйНомер;
				ПрефиксНомера	= ТекСтрока.Префикс;
				НулевойНомер	= "00000000000";
				ЦифраНомера		= СтрЗаменить(Строка(Число(СтрЗаменить(НомерДляРазбора, ПрефиксНомера, "")) - 1), Символы.НПП, "");
				ГотовыйНОмер	= Лев(НулевойНомер, (СтрДлина(НулевойНомер) + 1) - (СтрДлина(ПрефиксНомера) + СтрДлина(ЦифраНомера))) + ЦифраНомера;
				
				XML_Текст.ЗаписатьАтрибут("Prefix"	, ПреобразоватьЗначениеВСтрокуДляXML(ПрефиксНомера));
				XML_Текст.ЗаписатьАтрибут("Number"	, ПреобразоватьЗначениеВСтрокуДляXML(ГотовыйНомер));
				XML_Текст.ЗаписатьКонецЭлемента();  //ITEM
			КонецЕсли;
		КонецЦикла; //Для Каждого ТекСтрока Из ТабСтартовыеНомера Цикл
		XML_Текст.ЗаписатьКонецЭлемента();  //ELEMENTS
		XML_Текст.ЗаписатьКонецЭлемента();  //NUMERATORS
	КонецЕсли;

КонецПроцедуры // ВыгрузитьСтартовыеНомераДокументов()
    
// Функция удаляет из строки нечитаемые символы для Агент+
//
Функция УбратьНечитаемыеСимволы(Стр) Экспорт
	
	НовСтрока = Стр;
	Если ТипЗнч(Стр) = Тип("Строка") Тогда
		НовСтрока = СтрЗаменить(Стр, 	   Символы.ПС, "");
		НовСтрока = СтрЗаменить(НовСтрока, Символы.ВК, "");
		НовСтрока = СтрЗаменить(НовСтрока, Символы.Таб, "");
		НовСтрока = СтрЗаменить(НовСтрока, Символы.ВТаб, "");
		НовСтрока = СтрЗаменить(НовСтрока, Символы.ПФ, "");
		НовСтрока = СтрЗаменить(НовСтрока, """", "'");
	КонецЕсли;
	
	Возврат СокрЛП(НовСтрока);
	
КонецФункции // УбратьНечитаемыеСимволы()

//////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАГРУЗКИ ДАННЫХ С МУ ////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////

// Функция осуществляет запись документа в ИБ 1С:Предприятия
//
//Возвращаемое значение:
//  Число: 1 - если документ записан, 0 - если при записи произошла ошибка
//    
Функция ЗаписатьДокумент(Док, Агент, СтруктураДокМУ, НовыйДок = Истина, ЗаписыватьИнформациюОСоздании = Истина)
	
	Проводить = Истина;
	
	Если флПроводитьДокументыПриЗагрузке Тогда
		Если Док.Метаданные().Реквизиты.Найти("Контрагент") <> Неопределено Тогда
			Если Не ЗначениеЗаполнено(Док.Контрагент) Тогда
				ОповеститьОСобытии("ru='В документе " + Строка(Док) + " не указан контрагент. Документ не будет проведен!'", ТипыЛогов["Обмен"], СтатусСообщения.Важное, Агент, Док.Ссылка);
				Проводить = Ложь;
			КонецЕсли;
		КонецЕсли;	
		Если Док.Метаданные().Реквизиты.Найти("ДоговорКонтрагента") <> Неопределено Тогда
			Если Не ЗначениеЗаполнено(Док.ДоговорКонтрагента) Тогда
				ОповеститьОСобытии("ru='В документе " + Строка(Док) + " не указан договор. Документ не будет проведен!'", ТипыЛогов["Обмен"], СтатусСообщения.Важное, Агент, Док.Ссылка);
				Проводить = Ложь;
			КонецЕсли;
		КонецЕсли;	
		Если Док.Метаданные().Реквизиты.Найти("СуммаДокумента") <> Неопределено Тогда
			Если Док.СуммаДокумента = 0 Тогда
				ОповеститьОСобытии("ru='Сумма документа " + Строка(Док) + " равна 0. Документ не будет проведен!'", ТипыЛогов["Обмен"], СтатусСообщения.Важное, Агент, Док.Ссылка);
				Проводить = Ложь;
			КонецЕсли;
		КонецЕсли;	
	Иначе
		Проводить = Ложь
	КонецЕсли;
		
	ЗаписьЖурналаРегистрации(НСтр("ru='Загружен документ из мобильного устройства'"), УровеньЖурналаРегистрации.Информация, Док.Метаданные(), Док.Ссылка, "Запись документа");
		
	Если ВыполнитьОперациюДляОбъекта(Док, "запись", Агент) Тогда 							
		Если ЗаписыватьИнформациюОСоздании = Истина Тогда
			 ЗаписатьРегКатегорияОбъекта(Док, "СозданВМУ");
			 ЗаписатьРегЗначениеСвойстваОбъекта(Док, СтруктураДокМУ, "ДатаСозданияВМУ");
		КонецЕсли;		
	Иначе
		ОповеститьОСобытии("ru='Не удалось записать документ " + Строка(Док) + " в базу!'", ТипыЛогов["Обмен"], СтатусСообщения.Важное, Агент, Док.Ссылка);
		Возврат 0;
	КонецЕсли;	
	
	Если Проводить и Не ТипЗнч(Док) = Тип("ДокументСсылка.ИнвентаризацияТоваровНаСкладе") Тогда
		Если Не ВыполнитьОперациюДляОбъекта(Док, "проведение", Агент) Тогда
			Возврат 0;			
		КонецЕсли;				
	КонецЕсли;
	
	//ТекстСообщения = ?(НовыйДок, "ru='Создан", "ru='Перезаписан") + " документ " + Строка(Док) + "'";
	//ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обмен"], СтатусСообщения.Информация, Агент, Док.Ссылка);
	
	Возврат 1;
	
КонецФункции //ЗаписатьДокумент()

//vd_180822 Старая функция, еще используется.
Процедура ЗакончитьЗагрузкуДокументов_old(СоотвЗагруженныхОбъектов, Агент)
	
	списДокументов = СоотвЗагруженныхОбъектов[эл_Документы];
	Если списДокументов <> Неопределено Тогда
				
		//1. документы ордера
		МассивТиповОрдеров = Новый Массив;
		МассивТиповОрдеров.Добавить(Документы.ПриходныйКассовыйОрдер.ПолучитьСсылку().Метаданные().Имя);
		МассивТиповОрдеров.Добавить(Документы.РасходныйКассовыйОрдер.ПолучитьСсылку().Метаданные().Имя);		
		
		Для Каждого текЭл Из МассивТиповОрдеров Цикл	
		
			СписокОрдеровДляЗаписи = списДокументов[текЭл];
			
			Если СписокОрдеровДляЗаписи = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СписокОснованийДляОрдера = Новый СписокЗначений;
			СписокОснованийДляОрдера.Добавить(Документы.ЗаказПокупателя.ПолучитьСсылку().Метаданные().Имя);
			
			Для Каждого СтрокаОрдера Из СписокОрдеровДляЗаписи Цикл
				
				ОбъектДок = СтрокаОрдера.Документ;
				СтрокаПлатеж = ОбъектДок.РасшифровкаПлатежа[0];
				
				Для Каждого ТекВидОснования Из СписокОснованийДляОрдера Цикл
					ДокОснования = ПолучитьСсылкуИзДокумента(СтрокаОрдера.ИдОснования, ТекВидОснования.Значение);
					Если ЗначениеЗаполнено(ДокОснования) Тогда
						ОбъектОснования = ДокОснования.ПолучитьОбъект();
						Если ОбъектОснования <> Неопределено Тогда
							СтрокаПлатеж.Сделка = ОбъектОснования.Ссылка;
							Если ТипЗнч(ДокОснования) = Тип("ДокументОбъект.ПриходныйКассовыйОрдер") Тогда
								ОбъектДок.Основание = ОбъектОснования.Ссылка;
							КонецЕсли;
							Прервать;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				Результат = ЗаписатьДокумент(ОбъектДок, Агент, СтрокаОрдера["СтруктураДокМУ"], СтрокаОрдера["ЭтоНовыйОбъект"], Истина);
				
				Если Результат = 1 Тогда
					ЗаписатьРегЗначениеСвойстваОбъекта(ОбъектДок, СтрокаОрдера, "КоординатыGPS");
					ЗаписатьРегЗначениеСвойстваОбъекта(ОбъектДок, СтрокаОрдера, "Категория");
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
				
		//2. документы возврат товаров		
		СписокВозвратыДляЗаписи = списДокументов[Документы.ВозвратТоваровОтПокупателя.ПустаяСсылка().Метаданные().Имя];
			
		Если СписокВозвратыДляЗаписи <> Неопределено Тогда			
			
			СписокОснованийДляВозврата = Новый СписокЗначений;
			СписокОснованийДляВозврата.Добавить(Документы.ЗаказПокупателя.ПолучитьСсылку().Метаданные().Имя);
			СписокОснованийДляВозврата.Добавить(Документы.РеализацияТоваровУслуг.ПолучитьСсылку().Метаданные().Имя);
			
			Для Каждого строкаВозврат Из СписокВозвратыДляЗаписи Цикл
				
				ОбъектДок = строкаВозврат.Документ;
				
				Для Каждого текВидОснования Из СписокОснованийДляВозврата Цикл
					ДокОснования = ПолучитьСсылкуИзДокумента(строкаВозврат["ИдОснования"], текВидОснования["Значение"]);
					Если ЗначениеЗаполнено(ДокОснования) Тогда
						ОбъектОснования = ДокОснования.ПолучитьОбъект();
						Если ОбъектОснования <> Неопределено Тогда									
							ОбъектДок.Сделка = ОбъектОснования.Ссылка;					
							Прервать;					
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				Результат = ЗаписатьДокумент(ОбъектДок, Агент, строкаВозврат["СтруктураДокМУ"], строкаВозврат["ЭтоНовыйОбъект"], Истина);
				
				Если Результат = 1 Тогда
								
					ЗаписатьРегЗначениеСвойстваОбъекта(ОбъектДок, строкаВозврат, "КоординатыGPS");
					ЗаписатьРегЗначениеСвойстваОбъекта(ОбъектДок, строкаВозврат, "Категория");			
				
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры 

//vd_180822 Добавлена. Новая функция, нужно переделать
Процедура ЗакончитьЗагрузкуДокументов(ЗагружаемыеОбъекты)
		
	//1. Соберем все таблицы с документами в одну и отсортируем по дате
	ОписаниеТипаСтрока        = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки());
	
	тзЗагруженныеДокументы = Новый ТаблицаЗначений;
	тзЗагруженныеДокументы.Колонки.Добавить("Документ");
	тзЗагруженныеДокументы.Колонки.Добавить("ВидДокумента"  , ОписаниеТипаСтрока);
	тзЗагруженныеДокументы.Колонки.Добавить("ДатаВМУ"       , Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	тзЗагруженныеДокументы.Колонки.Добавить("ЭтоНовыйОбъект", Новый ОписаниеТипов("Булево"));
	тзЗагруженныеДокументы.Колонки.Добавить("КоординатыGPS" , ОписаниеТипаСтрока); 
	тзЗагруженныеДокументы.Колонки.Добавить("Категория"     , ОписаниеТипаСтрока);
	тзЗагруженныеДокументы.Колонки.Добавить("ИдОснования"   , ОписаниеТипаСтрока);
	
	Для Каждого ЭлементСвояство Из ЗагружаемыеОбъекты Цикл
		Если ЭлементСвояство.Ключ = "ТаблицаКасс" Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого ЭлементТаблица Из ЭлементСвояство.Значение Цикл
		    НоваяСтрока = тзЗагруженныеДокументы.Добавить();
		    НоваяСтрока.Документ      = ЭлементТаблица.Документ;
			НоваяСтрока.ВидДокумента  = ЭлементТаблица.стррПараметры.ВидДокумента;
			НоваяСтрока.ДатаВМУ       = Дата(ЭлементТаблица.стррПараметры.Дата);
			НоваяСтрока.ЭтоНовыйОбъект= ЭлементТаблица.стррПараметры.ЭтоНовый;
			НоваяСтрока.КоординатыGPS = ЭлементТаблица.стррПараметры.стррКоординаты.Широта + Имена["СимволРазделительGPS"] + ЭлементТаблица.стррПараметры.стррКоординаты.Долгота;
			НоваяСтрока.Категория     = ЭлементТаблица.стррПараметры.идКатегория;
			НоваяСтрока.ИдОснования   = ЭлементТаблица.ИдОснования;
		КонецЦикла;
	КонецЦикла;
	
	//Сортировка
	тзЗагруженныеДокументы.Сортировать("ДатаВМУ Возр");
	
	//2. Запись Документов
	СтруктураПараметров = Новый Структура("Дата, КоординатыGPS, Категория");	
	Для Каждого Элемент Из тзЗагруженныеДокументы Цикл
		
		//Объект документа
		ОбъектДок = Элемент.Документ;
		
		//Установить реквизита основания документа и заполнение его если необходимо.
		Если НЕ Элемент.ИдОснования = Неопределено Тогда
			УстановитьРеквизитОснованиеДокумента(ОбъектДок, Элемент.ВидДокумента, Элемент.ИдОснования);	 	
		КонецЕсли;
		
		//ЗаписьДокумента
		СтруктураПараметров.Дата = Элемент.ДатаВМУ;
		Результат = ЗаписатьДокумент(ОбъектДок, выбАгент, СтруктураПараметров, Элемент.ЭтоНовыйОбъект, Истина);
		
		//Запись доп реквизитов объекта
		Если Результат = 1 Тогда
			СтруктураПараметров.КоординатыGPS = Элемент.КоординатыGPS;
			СтруктураПараметров.Категория     = Элемент.Категория;
			ЗаписатьРегЗначениеСвойстваОбъекта(ОбъектДок, СтруктураПараметров, "КоординатыGPS");
			ЗаписатьРегЗначениеСвойстваОбъекта(ОбъектДок, СтруктураПараметров, "Категория");
		КонецЕсли;	
			
	КонецЦикла;
	
КонецПроцедуры 

// vd_180822
//  Получет ссылку на докумен основание для обьекта.
//  Пример: есть ДокументОбьект у него есть реквизит ДокументОснование, известен гуид документа основания.
//  То есть Функция позволят получить ссылку документа ДокументОснование для того чтобы в дальнейшем записать в реквизит ДокументОснование для ДокументОбьект
//
// Параметры:
//  ОбъектДок	 - Ссылка	 - ОбъектДок
//  ВидДокумента - Строка	 - Вид ОбъектДок 
//  ИдОснования	 - Строка	 - гуил документа основания
// 
Процедура УстановитьРеквизитОснованиеДокумента(ОбъектДок, ВидДокумента, ИдОснования)
	
	//vd_180828
	Если ВидДокумента = "ПриходныйКассовыйОрдер" ИЛИ ВидДокумента = "РасходныйКассовыйОрдер" Тогда 
		//Для этих документов документ основание хранится в ТЧ РасшифровкаПлатежа
		Если ОбъектДок.РасшифровкаПлатежа.Количество() = 0 Тогда
			Возврат;
		ИначеЕсли ЗначениеЗаполнено(ОбъектДок.РасшифровкаПлатежа[0].Сделка) Тогда
			Возврат;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ОбъектДок.Сделка) Тогда
		Возврат;
	КонецЕсли;
		
	
	//1. Проыверка на заполнение ИдОснования
	Если ИдОснования = Неопределено ИЛИ ПустаяСтрока(ИдОснования) ИЛИ СокрЛП(ИдОснования) = "00000000-0000-0000-0000-000000000000" Тогда 
		Возврат;
	КонецЕсли;
	
	//2. Проверка преобразования ИдОснования из типа Строка к типу ГУИД
	Попытка
		ГуидЭлемента = Новый УникальныйИдентификатор(ИдОснования);
	Исключение
		Возврат;
	КонецПопытки;

	//3. Устанавливаем реквизит
	Если ВидДокумента = "ЗаказПокупателя" Тогда
		Возврат; //В МУ заказы не создаются на основании 			
	ИначеЕсли ВидДокумента = "РеализацияТоваровУслуг" Тогда
		Результат = ПолучитьИПроверитьСсылкуИзДокумента(ГуидЭлемента, "ЗаказПокупателя");
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			Результат = ПолучитьИПроверитьСсылкуИзДокумента(ГуидЭлемента, "ПоступлениеТоваровУслуг");
		КонецЕсли;
	ИначеЕсли ВидДокумента = "ПриходныйКассовыйОрдер" Тогда
		Результат = ПолучитьИПроверитьСсылкуИзДокумента(ГуидЭлемента, "ЗаказПокупателя");
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			Результат = ПолучитьИПроверитьСсылкуИзДокумента(ГуидЭлемента, "РеализацияТоваровУслуг");
		КонецЕсли;
		//Если НЕ ЗначениеЗаполнено(Результат) Тогда
			//Можно создать на основании документа "Долг".
		//КонецЕсли;
	ИначеЕсли ВидДокумента = "РасходныйКассовыйОрдер" Тогда
		Результат = ПолучитьИПроверитьСсылкуИзДокумента(ГуидЭлемента, "ПоступлениеТоваровУслуг");		
	ИначеЕсли ВидДокумента = "ВозвратТоваровОтПокупателя" Тогда
		Результат = ПолучитьИПроверитьСсылкуИзДокумента(ГуидЭлемента, "РеализацияТоваровУслуг");	
	ИначеЕсли ВидДокумента = "ПоступлениеТоваровУслуг" Тогда
		Результат = ПолучитьИПроверитьСсылкуИзДокумента(ГуидЭлемента, "ЗаказПокупателя");
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			Результат = ПолучитьИПроверитьСсылкуИзДокумента(ГуидЭлемента, "РеализацияТоваровУслуг");
		КонецЕсли;
	ИначеЕсли ВидДокумента = "ПеремещениеТоваров" Тогда
		//В МУ перемещения не создаются на основании 
	ИначеЕсли ВидДокумента = "Посещение" Тогда
		//В МУ посещения не создаются на основании 
	Иначе
		Возврат;		
	КонецЕсли;
	 
	Если ЗначениеЗаполнено(Результат) Тогда
		Если ВидДокумента = "ПриходныйКассовыйОрдер" ИЛИ ВидДокумента = "РасходныйКассовыйОрдер" Тогда
			//{{vd_180913 Добавлено условие 
			Если ТипЗнч(Результат) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда				
				ОбъектДок.РасшифровкаПлатежа[0].Сделка = Результат;
			Иначе
				//ТипЗнч(Результат) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
				ОбъектДок.РасшифровкаПлатежа[0].ДокументРасчетовСКонтрагентом = Результат;
			КонецЕсли;
			
			//(( sk_181114 
			//Заполнение ПризнакСпособаРасчета перенесено в процедуру ЗагрузитьДокументОрдер() 			
			//МенеджерОборудованияКлиентСервер.ЗаполнитьПризнакСпособаРасчета(ОбъектДок.РасшифровкаПлатежа[0], ОбъектДок.ВидОперации, Результат)
			//)) sk_181114
			//}}vd_180913
		Иначе
			ОбъектДок.Сделка = Результат;
		КонецЕсли;
	КонецЕсли;  

КонецПроцедуры

Процедура ЗагрузитьСпрКонтрагенты(ТекстXML, СоотвЗагруженныхОбъектов, ДанныеСпр, Агент)
	Перем ЭтоНовый;
	
	СписокСведенияКонтрагентов = ПолучитьЗначениеНастройки("СведенияКонтрагентов", "Соответствие");
	
	ИмяСпр = ДанныеСпр["_ИмяСправочника"];
	текЗагруженныеОбъекты = Новый Соответствие;
	
	СпрМенеджер = Справочники[ИмяСпр];
	СтруктураРеквизитов = ПолучитьСтруктуруЗагружаемыхРеквизитов(ДанныеСпр);
	
	СписокСведенияКонтрагентов = ПолучитьЗначениеНастройки("СведенияКонтрагентов", "Соответствие");
	СписокСведенияКонтрагентовИзменен = Ложь;
	СписокСтатусыКонтрагентов = ПолучитьЗначениеНастройки("СтатусыКонтрагентов", "Соответствие");
	
	Пока ТекстXML.Прочитать() Цикл
			
		Если ТекстXML.Имя = эл_Справочник И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Прервать;
		КонецЕсли;
	 	
		Если ТекстXML.Имя = эл_Элемент И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			стрИд = ТекстXML.ЗначениеАтрибута(ат_Гуид);
			объектСпр = ПолучитьОбъектСправочника(ИмяСпр, стрИд, ЭтоНовый);						
			Если объектСпр = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ОбъектСпр.Наименование = СокрЛП(ТекстXML.ПолучитьАтрибут(ат_Наименование));
			ОбъектСпр.Родитель = ПолучитьСсылкуИзСправочника(ТекстXML.ПолучитьАтрибут("GrpId0"), ИмяСпр);
			ОбъектСпр.НаименованиеПолное = ОбъектСпр.Наименование;	
			
			//%
			ОбъектСпр.Комментарий = СокрЛП(ТекстXML.ПолучитьАтрибут(ат_Комментарий));
						
			ОбъектСпр.ОбменДанными.Загрузка = Истина;
			Если Не ВыполнитьОперациюДляОбъекта(ОбъектСпр, "запись", Агент) Тогда 	
				ТекстСообщения = "ru='Не удалось записать элемент справочника: " + Строка(ОбъектСпр) + " в базу!'";
				ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обмен"], СтатусСообщения.Внимание, Агент, ОбъектСпр);		
				ТекстXML.Пропустить();	
			КонецЕсли;	
			
			Если ДанныеСпр.Свойство("ОсновнойДоговор") Тогда
				ДоговорКонтрагента = ПолучитьСсылкуИзСправочника(ТекстXML.ПолучитьАтрибут(ДанныеСпр["ОсновнойДоговор"]), "ДоговорыКонтрагентов");
				Если Не ОбъектСпр.ЭтоГруппа Тогда 
					ОбъектСпр.Покупатель = Истина;
					ОбъектСпр.ОсновнойДоговорКонтрагента = ДоговорКонтрагента;
					ОбъектСпр.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
				КонецЕсли;
			КонецЕсли;
			
			Если Не ВыполнитьОперациюДляОбъекта(ОбъектСпр, "запись", Агент) Тогда 	
				ТекстСообщения = "ru='Не удалось записать элемент справочника: " + Строка(ОбъектСпр) + " в базу!'";				
				ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обмен"], СтатусСообщения.Внимание, Агент, ОбъектСпр);				
				Возврат;							
			КонецЕсли;			
			
			Если ЭтоНовый Тогда		
				ПроверитьОсновнойДоговорКонтрагента(ОбъектСпр.Ссылка);
			КонецЕсли;			
			
			Если ДанныеСпр.Свойство("СтатусКонтрагента") Тогда
				
				СтрИдСтатусКонтрагента = ТекстXML.ПолучитьАтрибут(ДанныеСпр["СтатусКонтрагента"]);
				Попытка
					ИдСтатусКонтрагента = Новый УникальныйИдентификатор(СтрИдСтатусКонтрагента);
					СтатусКонтрагента = СписокСтатусыКонтрагентов[ИдСтатусКонтрагента];
				Исключение
					ОбъектСтатусКонтрагента = Неопределено;
				КонецПопытки;
				
				Если ОбъектСтатусКонтрагента <> Неопределено Тогда
					
					//уникальный идентификатор объекта СведенияКонтрагентов = уникальному идентификатору контрагента
					объектСведенияКонтрагента = СписокСведенияКонтрагентов[ИдСтатусКонтрагента];
									
					Если объектСведенияКонтрагента <> Неопределено Тогда
						Если объектСведенияКонтрагента["СтатусКонтрагента"] <> СтатусКонтрагента["УникальныйИдентификатор"] Тогда
							СписокСведенияКонтрагентовИзменен = Истина;
							объектСведенияКонтрагента["СтатусКонтрагента"] = ОбъектСтатусКонтрагента["УникальныйИдентификатор"];
							СписокСведенияКонтрагентов[объектСведенияКонтрагента["УникальныйИдентификатор"]] = объектСведенияКонтрагента;						
						КонецЕсли;
					Иначе
						СписокСведенияКонтрагентовИзменен = Истина;
						объектСведенияКонтрагента = Новый Соответствие;
						объектСведенияКонтрагента["УникальныйИдентификатор"] = ОбъектСпр.Ссылка.УникальныйИдентификатор();
						объектСведенияКонтрагента["СтатусКонтрагента"] = ОбъектСтатусКонтрагента["УникальныйИдентификатор"];
						СписокСведенияКонтрагентов[объектСведенияКонтрагента["УникальныйИдентификатор"]] = объектСведенияКонтрагента;
					КонецЕсли;	
				КонецЕсли;
			
			КонецЕсли;
			
			ЗаписатьВПротоколЗагрузкуЭлемСпр(ОбъектСпр, ЭтоНовый, Агент);			
			
		КонецЕсли;
	КонецЦикла;
	
	Если СписокСведенияКонтрагентовИзменен = Истина Тогда
		ЗаписатьНастройку("СведенияКонтрагентов", СписокСведенияКонтрагентов);
	КонецЕсли;
			
КонецПроцедуры //ЗагрузитьСпрКонтрагенты

Процедура ЗагрузитьСправочники(ТекстXML, СоотвЗагруженныхОбъектов, Агент)		
		
	Пока ТекстXML.Прочитать() Цикл
				
		Если ТекстXML.Имя = эл_Справочники И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Прервать;
		КонецЕсли;
 		
		Если ТекстXML.Имя = эл_Справочник И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда	
			
			ИдСправочника = ТекстXML.ПолучитьАтрибут(ат_Гуид);
			
			ДанныеСпр = СоответствиеСпр[НРег(ИдСправочника)];
			
			Если ДанныеСпр = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ДанныеСпр["_Загружать"] Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяСпр = ДанныеСпр["_ИмяСправочника"];	
								
			Если ИмяСпр = "КонтактнаяИнформация" Тогда
				ЗагрузитьРегКонтактнаяИнформация(ТекстXML, СоотвЗагруженныхОбъектов, ДанныеСпр, Агент);
			ИначеЕсли ИмяСпр = "Контрагенты" Тогда
				ЗагрузитьСпрКонтрагенты(ТекстXML, СоотвЗагруженныхОбъектов, ДанныеСпр, Агент);
			ИначеЕсли ИмяСпр = "ТорговыеТочки" Тогда
				ЗагрузитьСпрТорговыеТочки(ТекстXML, СоотвЗагруженныхОбъектов, ДанныеСпр, Агент);
			ИначеЕсли ИмяСпр = "ДоговорыКонтрагентов" Тогда		
				ЗагрузитьСпрДоговорыКонтрагентов(ТекстXML, СоотвЗагруженныхОбъектов, ДанныеСпр, Агент);
			ИначеЕсли ИмяСпр = "КонтактныеЛицаКонтрагентов" Тогда		
				ЗагрузитьСпрКонтактыеЛица(ТекстXML, СоотвЗагруженныхОбъектов, ДанныеСпр, Агент);
			ИначеЕсли ИмяСпр = "ФотоСправочников" Тогда		
				ЗагрузитьСпрФотоСправочников(ТекстXML, СоотвЗагруженныхОбъектов, ДанныеСпр, Агент);
			ИначеЕсли ИмяСпр = "ФотоДокументов" Тогда
				ЗагрузитьСпрФотоДокументов(ТекстXML, СоотвЗагруженныхОбъектов, ДанныеСпр, Агент);
			КонецЕсли;  								
				
		КонецЕсли;
		
	КонецЦикла;	
КонецПроцедуры //ЗагрузитьСправочники

Процедура ЗагрузитьСпрДоговорыКонтрагентов(ТекстXML, СоотвЗагруженныхОбъектов, ДанныеСпр, Агент)
	Перем ЭтоНовый;
	
	ИмяСпр = ДанныеСпр["_ИмяСправочника"];
	текЗагруженныеОбъекты = Новый Соответствие;
	
	СпрМенеджер = Справочники[ИмяСпр];
	СтруктураРеквизитов = ПолучитьСтруктуруЗагружаемыхРеквизитов(ДанныеСпр);

	Пока ТекстXML.Прочитать() Цикл
			
		Если ТекстXML.Имя = эл_Справочник И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Прервать;
		КонецЕсли;
	 	
		Если ТекстXML.Имя = эл_Элемент И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			стрИд = ТекстXML.ЗначениеАтрибута(ат_Гуид);
			объектСпр = ПолучитьОбъектСправочника(ИмяСпр, стрИд, ЭтоНовый);						
			Если объектСпр = Неопределено Тогда
				Продолжить;
			КонецЕсли;
	
	        ОбъектСпр.Наименование = СокрЛП(ТекстXML.ПолучитьАтрибут(ат_Наименование));
			ОбъектСпр.Владелец = ПолучитьСсылкуИзСправочника(ТекстXML.ПолучитьАтрибут(ДанныеСпр["Контрагент"]), "Контрагенты");
			ОбъектСпр.Дата = ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут(ДанныеСпр["Дата"]));
			ОбъектСпр.СрокДействия = ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут(ДанныеСпр["СрокДействия"]));
			ОбъектСпр.Организация = ПолучитьСсылкуИзСправочника(ТекстXML.ПолучитьАтрибут(ДанныеСпр["Организация"]), "Организации");
			ОбъектСпр.ТипЦен = ПолучитьСсылкуИзСправочника(ТекстXML.ПолучитьАтрибут(ДанныеСпр["ТипЦен"]), "ТипыЦенНоменклатуры");
								
			ОбъектСпр.ВалютаВзаиморасчетов  = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяВалютаВзаиморасчетов");
			Если Не ЗначениеЗаполнено(ОбъектСпр.ВалютаВзаиморасчетов) Тогда
				ОбъектСпр.ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
			КонецЕсли;
			ОбъектСпр.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
			ОбъектСпр.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам;		
			Если Не ВыполнитьОперациюДляОбъекта(ОбъектСпр, "запись", Агент) Тогда 	
				ТекстСообщения = "ru='Не удалось записать элемент справочника: """ + Строка(ОбъектСпр) + """ в базу!'"; // ТекстСообщения = "Не удалось записать элемент справочника: " + Строка(ОбъектСпр) + " в базу!"; sk_181228				
				ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обмен"], СтатусСообщения.Внимание, ОбъектСпр);		
				Возврат;
			КонецЕсли;	
	
			ЗаписатьВПротоколЗагрузкуЭлемСпр(ОбъектСпр, ЭтоНовый, Агент);			
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры //ЗагрузитьДоговор

Процедура ЗагрузитьСпрТорговыеТочки(ТекстXML, СоотвЗагруженныхОбъектов, ДанныеСпр, Агент)
	Перем ЭтоНовый;
	
	ИмяСпр = ДанныеСпр["_ИмяСправочника"];
	текЗагруженныеОбъекты = Новый Соответствие;
	
	СпрМенеджер = Справочники[ИмяСпр];
	СтруктураРеквизитов = ПолучитьСтруктуруЗагружаемыхРеквизитов(ДанныеСпр);
	
	Пока ТекстXML.Прочитать() Цикл
			
		Если ТекстXML.Имя = эл_Справочник И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Прервать;
		КонецЕсли;
	 	
		Если ТекстXML.Имя = эл_Элемент И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			стрИд = ТекстXML.ЗначениеАтрибута(ат_Гуид);
			объектСпр = ПолучитьОбъектСправочника(ИмяСпр, стрИд, ЭтоНовый);						
			Если объектСпр = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ОбъектСпр.Наименование = СокрЛП(ТекстXML.ПолучитьАтрибут(ат_Наименование));
			ОбъектСпр.Комментарий = СокрЛП(ТекстXML.ПолучитьАтрибут(ДанныеСпр["Комментарий"]));
			ОбъектСпр.ГоловнойКонтрагента = ПолучитьСсылкуИзСправочника(ТекстXML.ПолучитьАтрибут(ДанныеСпр["Контрагент"]), ИмяСпр);
			ОбъектСпр.НаименованиеПолное = ОбъектСпр.Наименование;	
			
			Если Не ВыполнитьОперациюДляОбъекта(ОбъектСпр, "запись", Агент) Тогда 	
				ТекстСообщения = "ru='Не удалось записать элемент справочника: " + Строка(ОбъектСпр) + " в базу!'";
				ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обмен"], СтатусСообщения.Внимание, Агент, ОбъектСпр);		
				Продолжить;
			КонецЕсли;	
						
			ЗаписатьВПротоколЗагрузкуЭлемСпр(ОбъектСпр, ЭтоНовый, Агент);			
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры //ЗагрузитьСпрТорговыеТочки

Процедура ЗагрузитьСпрКонтактыеЛица(ТекстXML, СоотвЗагруженныхОбъектов, ДанныеСпр, Агент)
	Перем ЭтоНовый;
	
	ИмяСпр = ДанныеСпр["_ИмяСправочника"];
	текЗагруженныеОбъекты = Новый Соответствие;
	
	СпрМенеджер = Справочники[ИмяСпр];
	СтруктураРеквизитов = ПолучитьСтруктуруЗагружаемыхРеквизитов(ДанныеСпр);
	
	Пока ТекстXML.Прочитать() Цикл
			
		Если ТекстXML.Имя = эл_Справочник И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Прервать;
		КонецЕсли;
				
		Если ТекстXML.Имя = эл_Элемент И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			стрИд = ТекстXML.ЗначениеАтрибута(ат_Гуид);
			объектСпр = ПолучитьОбъектСправочника(ИмяСпр, стрИд, ЭтоНовый);
						
			НаименованиеКЛ = СокрЛП(ТекстXML.ПолучитьАтрибут(ат_Наименование));
			ДатаРожденияКЛ = ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут(ДанныеСпр["ДатаРождения"]));
			КомментарийКЛ = СокрЛП(ТекстXML.ПолучитьАтрибут(ДанныеСпр["Комментарий"]));
			КонтрагентКЛ = ТекстXML.ПолучитьАтрибут(ДанныеСпр["Контрагент"]);
			ТорговаяТочкаКЛ = ТекстXML.ПолучитьАтрибут(ДанныеСпр["ТорговаяТочка"]);
			
			Если ЭтоНовый Тогда
				КонтактноеЛицо = Справочники.КонтактныеЛица.СоздатьЭлемент();
				КонтактноеЛицо.Наименование = НаименованиеКЛ;
				КонтактноеЛицо.ДатаРождения = ДатаРожденияКЛ;
				КонтактноеЛицо.ОбменДанными.Загрузка = Истина;
				КонтактноеЛицо.УстановитьНовыйКод();
				Если Не ВыполнитьОперациюДляОбъекта(КонтактноеЛицо, "запись", Агент) Тогда 	
					ТекстСообщения = "ru='Не удалось записать элемент справочника: " + Строка(КонтактноеЛицо) + " в базу!'";
					ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обмен"], СтатусСообщения.Внимание, Агент, ОбъектСпр);		
					Продолжить;	
				КонецЕсли;	
				ОбъектСпр.КонтактноеЛицо = КонтактноеЛицо.Ссылка;
			КонецЕсли;
			
			ОбъектСпр.Наименование = НаименованиеКЛ;
			ОбъектСпр.Комментарий = КомментарийКЛ;			
			
			Если ЗначениеЗаполнено(КонтрагентКЛ) И Не ЗначениеЗаполнено(ТорговаяТочкаКЛ) Тогда 
				ТекВладелецКЛ = ПолучитьСсылкуИзСправочника(КонтрагентКЛ, "Контрагенты");
			Иначе
				ТекВладелецКЛ = ПолучитьСсылкуИзСправочника(ТорговаяТочкаКЛ, "Контрагенты");
			КонецЕсли;
			
			ОбъектСпр.Владелец = ТекВладелецКЛ;
			ОбъектСпр.ОбменДанными.Загрузка = Истина;
			
			Если Не ВыполнитьОперациюДляОбъекта(ОбъектСпр, "запись", Агент) Тогда 	
				ТекстСообщения = "ru='Не удалось записать элемент справочника: " + Строка(ОбъектСпр) + " в базу!'";
				ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обмен"], СтатусСообщения.Внимание, Агент, ОбъектСпр);		
				Продолжить;
			КонецЕсли;

			ЗаписатьВПротоколЗагрузкуЭлемСпр(ОбъектСпр, ЭтоНовый, Агент);
						
		КонецЕсли;
			
	КонецЦикла;  	
	
КонецПроцедуры //ЗагрузитьСпрКонтактыеЛица

Процедура ЗагрузитьСпрФотоСправочников(ТекстXML, СоотвЗагруженныхОбъектов, ДанныеСпр, Агент)
	Перем ЭтоНовый;
	
	ИмяСпр = ДанныеСпр["_ИмяСправочника"];
	ТабЗагруженныхФото = СоотвЗагруженныхОбъектов[эл_Картинки];
	
	//СпрМенеджер = Справочники[ИмяСпр];
	СтруктураРеквизитов = ПолучитьСтруктуруЗагружаемыхРеквизитов(ДанныеСпр);
	
	СпрХранилищеДопИнф = Справочники.ХранилищеДополнительнойИнформации;
	
	Пока ТекстXML.Прочитать() Цикл
			
		Если ТекстXML.Имя = эл_Справочник И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Прервать;
		КонецЕсли;
				
		Если ТекстXML.Имя = эл_Элемент И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			ИдНоменклатура = ТекстXML.ПолучитьАтрибут(ДанныеСпр["Номенклатура"]);
			ИдКонтрагент = ТекстXML.ПолучитьАтрибут(ДанныеСпр["Контрагент"]);
			ИдТоргТочка = ТекстXML.ПолучитьАтрибут(ДанныеСпр["ТорговаяТочка"]);
			ИдФото = ТекстXML.ПолучитьАтрибут(ДанныеСпр["Фото"]);
			
			Если ИдНоменклатура <> Неопределено И ИдНоменклатура <> "" Тогда
				имяСпр = "Номенклатура";
				СсылкаОбъекта = ПолучитьСсылкуИзСправочника(ИдНоменклатура, имяСпр);				
			ИначеЕсли ИдКонтрагент <> Неопределено И ИдКонтрагент <> "" Тогда
				имяСпр = "Контрагенты";
				СсылкаОбъекта = ПолучитьСсылкуИзСправочника(ИдКонтрагент, имяСпр);
			ИначеЕсли ИдТоргТочка <> Неопределено И ИдТоргТочка <> "" Тогда
				имяСпр = "Контрагенты";
				СсылкаОбъекта = ПолучитьСсылкуИзСправочника(ИдТоргТочка, имяСпр);
			Иначе
				Продолжить;
			КонецЕсли;
			
			НовСтрока = ТабЗагруженныхФото.Добавить();
			НовСтрока.СсылкаОбъект = СсылкаОбъекта;
			НовСтрока.СсылкаФото = СпрХранилищеДопИнф.ПолучитьСсылку(Новый УникальныйИдентификатор(НРег(ИдФото)));
			
		КонецЕсли;
		
	КонецЦикла;

	СоотвЗагруженныхОбъектов.Вставить(эл_Картинки, ТабЗагруженныхФото);
	
КонецПроцедуры //ЗагрузитьСпрФотоДокументов

Процедура ЗагрузитьСпрФотоДокументов(ТекстXML, СоотвЗагруженныхОбъектов, ДанныеДок, Агент)
	Перем ЭтоНовый;
	
	ИмяСпр = ДанныеДок["_ИмяДокумента"];
	ТабЗагруженныхФото = СоотвЗагруженныхОбъектов[эл_Картинки];
	
	//СпрМенеджер = Справочники[ИмяСпр];
	СтруктураРеквизитов = ПолучитьСтруктуруЗагружаемыхРеквизитов(ДанныеДок);
	
	СпрХранилищеДопИнф = Справочники.ХранилищеДополнительнойИнформации;
	
	Пока ТекстXML.Прочитать() Цикл
			
		Если ТекстXML.Имя = эл_Справочник И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Прервать;
		КонецЕсли;
				
		Если ТекстXML.Имя = эл_Элемент И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			ИдЗаказа = ТекстXML.ПолучитьАтрибут(ДанныеДок["Заказ"]);
			ИдКасса = ТекстXML.ПолучитьАтрибут(ДанныеДок["Касса"]);
			ИдФото = ТекстXML.ПолучитьАтрибут(ДанныеДок["Фото"]);
			
			Если ИдЗаказа <> Неопределено И ИдЗаказа <> "" Тогда
				ИмяДокумента = "ЗаказПокупателя";
				СсылкаОбъекта = ПолучитьСсылкуИзДокумента(ИдЗаказа, ИмяДокумента);				
			ИначеЕсли ИдКасса <> Неопределено И ИдКасса <> "" Тогда
				ИмяДокумента = "ПриходныйКассовыйОрдер";
				СсылкаОбъекта = ПолучитьСсылкуИзДокумента(ИдКасса, ИмяДокумента);
				Объект = СсылкаОбъекта.ПолучитьОбъект();
				Если Объект = Неопределено Тогда
					ИмяДокумента = "РасходныйКассовыйОрдер";
					СсылкаОбъекта = ПолучитьСсылкуИзДокумента(ИдКасса, ИмяДокумента);
				КонецЕсли
			Иначе
				Продолжить;
			КонецЕсли;
			
			НовСтрока = ТабЗагруженныхФото.Добавить();
			НовСтрока.СсылкаОбъект = СсылкаОбъекта;
			НовСтрока.СсылкаФото = СпрХранилищеДопИнф.ПолучитьСсылку(Новый УникальныйИдентификатор(НРег(ИдФото)));
			
		КонецЕсли;
		
	КонецЦикла;

	СоотвЗагруженныхОбъектов.Вставить(эл_Картинки, ТабЗагруженныхФото);
	
КонецПроцедуры //ЗагрузитьСпрФотоДокументов

Процедура ЗагрузитьРегКонтактнаяИнформация(ТекстXML,  СоотвЗагруженныхОбъектов, ДанныеСпр, Агент)
	
	текЗагруженныеОбъекты = Новый Соответствие;
	//СоотвЗагруженныхОбъектов["Справочники"][ДанныеСпр["_ИмяСправочника"]] = текЗагруженныеОбъекты;
	
	Пока ТекстXML.Прочитать() Цикл
				
		Если ТекстXML.Имя = эл_Справочник И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Прервать;
		КонецЕсли;
 		
		Если ТекстXML.Имя = эл_Элемент И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
	
			ИдЭлемента       = ТекстXML.ПолучитьАтрибут(ат_Гуид);
			ИдКонтрагент     = ТекстXML.ПолучитьАтрибут(ДанныеСпр["Контрагент"]);
			ИдТорговаяТочка  = ТекстXML.ПолучитьАтрибут(ДанныеСпр["ТорговаяТочка"]);
			ИдКонтактноеЛицо = ТекстXML.ПолучитьАтрибут(ДанныеСпр["КонтактноеЛицоКонтрагента"]);
			ИдТип 		     = ТекстXML.ПолучитьАтрибут(ДанныеСпр["Тип"]);
			ИдВид 		     = ТекстXML.ПолучитьАтрибут(ДанныеСпр["Вид"]);
			Представление    = ТекстXML.ПолучитьАтрибут(ДанныеСпр["Значение"]);
			
			СтруктураПеречисления = СоответствиеПеречислений["ТипыКонтактнойИнформации"];
			                                                                              
			Тип = СтруктураПеречисления[НРег(ИдТип)]; 
			Если Тип = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Вид = ПолучитьСсылкуИзСправочника(ИдВид, "ВидыКонтактнойИнформации");
			Если Вид = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ИдКонтрагент <> Неопределено И ИдКонтрагент <> "" Тогда
				ТекОбъект = ПолучитьСсылкуИзСправочника(ИдКонтрагент, "Контрагенты");
				Если Не ЗначениеЗаполнено(ТекОбъект) Тогда
					Продолжить;
				КонецЕсли;
			ИначеЕсли ИдКонтактноеЛицо <> Неопределено И ИдКонтактноеЛицо <> "" Тогда
				ТекОбъект = ПолучитьСсылкуИзСправочника(ИдКонтактноеЛицо, "КонтактныеЛицаКонтрагентов");
				Если Не ЗначениеЗаполнено(ТекОбъект) Тогда
					Продолжить;
				КонецЕсли;
			ИначеЕсли ИдТорговаяТочка <> Неопределено И ИдТорговаяТочка <> "" Тогда
				ТекОбъект = ПолучитьСсылкуИзСправочника(ИдТорговаяТочка, "Контрагенты");
				Если Не ЗначениеЗаполнено(ТекОбъект) Тогда
					Продолжить;
				КонецЕсли;
			Иначе
				Продолжить;
			КонецЕсли;					
			
			НаборЗаписей = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Объект.Установить(ТекОбъект);
			НаборЗаписей.Отбор.Тип.Установить(Тип);
			НаборЗаписей.Отбор.Вид.Установить(Вид);
			
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() = 0 Тогда
				СтрокаНабора = НаборЗаписей.Добавить();						
			Иначе  						
				СтрокаНабора = НаборЗаписей[0];
			КонецЕсли;
			
			СтрокаНабора.Объект 	   = ТекОбъект;	
			СтрокаНабора.Тип		   = Тип;	
			СтрокаНабора.Вид 		   = Вид;	
			СтрокаНабора.Представление = Представление;	
			
			Если Не ВыполнитьОперациюДляОбъекта(НаборЗаписей, "запись", Агент) Тогда 	
				ТекстСообщения = "ru='Не удалось записать контактную информацию для объекта: " + ТекОбъект + "'";				
				ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обмен"], СтатусСообщения.Внимание, Агент, ТекОбъект);					
				Продолжить;
			КонецЕсли;	
			
			текЗагруженныеОбъекты.Вставить(ИдЭлемента, Истина);
			ТекстСообщения = "ru='Записана контактная информация для объекта: " + ТекОбъект + "'";				
			ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обмен"], СтатусСообщения.Информация, Агент, ТекОбъект);	
			
		КонецЕсли;
		
	КонецЦикла;
		
	//СоотвЗагруженныхОбъектов["Справочники"][ДанныеСпр["_ИмяСправочника"]] = текЗагруженныеОбъекты;								
			 	
КонецПроцедуры //ЗагрузитьРегКонтактнаяИнформация

Функция ПолучитьОбъектСправочника(ИмяСпр, стрИд, ЭтоНовыйОбъект)
		
	СпрМенеджер = Справочники[ИмяСпр];
	
	ИдОбъекта = Новый УникальныйИдентификатор(стрИд);
			
	СсылкаОбъекта = СпрМенеджер.ПолучитьСсылку(ИдОбъекта);
	
	ЭтоНовыйОбъект = Истина;
	
	Если СсылкаОбъекта.ПолучитьОбъект() = Неопределено Тогда			
		ОбъектСпр = СпрМенеджер.СоздатьЭлемент();						
		ОбъектСпр.УстановитьСсылкуНового(СсылкаОбъекта);
		ОбъектСпр.ОбменДанными.Загрузка = Истина;
		ОбъектСпр.УстановитьНовыйКод();
	Иначе						
		ОбъектСпр = СсылкаОбъекта.ПолучитьОбъект();
		ОбъектСпр.Разблокировать();
		ЭтоНовыйОбъект = Ложь;
	КонецЕсли; 
	
	// Записываем предварительно, если справочник не подчиненный
	Если СсылкаОбъекта.Метаданные().Владельцы.Количество() = 0 Тогда
		Если Не ВыполнитьОперациюДляОбъекта(ОбъектСпр, "запись") Тогда 	
			ТекстСообщения = "ru='Не удалось записать элемент справочника: """ + Строка(ОбъектСпр) + """ в базу!'"; // ТекстСообщения = "Не удалось записать элемент справочника: " + Строка(ОбъектСпр) + " в базу!"; sk_181228				
			ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обмен"], СтатусСообщения.Внимание, ОбъектСпр);		
			Возврат Неопределено;
		КонецЕсли;									
	КонецЕсли;

	Возврат ОбъектСпр; 
	
КонецФункции

Функция ПолучитьОбъектДокумента(Агент, ИмяДок, стрИд, Проведен, Дата, Номер, ЭтоНовыйОбъект)
	
	Дата = ДатаВремяXMLВФормат1С(Дата);
	Номер = ?(Номер = Неопределено, "", СокрЛП(Номер));

	ДокМенеджер = Документы[ИмяДок];
	ПредставлениеДок = ДокМенеджер.ПустаяСсылка().Метаданные().Синоним;	
	Попытка	Проведен = Булево(Число(Проведен)); Исключение	Проведен = Ложь; КонецПопытки;
	
	Если Не Проведен Тогда
		ОповеститьОСобытии("ru='Пропущена загрузка документа """ + ПредставлениеДок + """ № " + Номер + " от " + Дата + " - документ не проведен в мобильном приложении!'", ТипыЛогов["Обмен"], СтатусСообщения.Внимание, Агент);						
		Возврат Неопределено;		
	КонецЕсли;	
	
	ЭтоНовыйОбъект = Истина;	
	ИдОбъекта = Новый УникальныйИдентификатор(стрИд);
	
	СсылкаОбъекта = ДокМенеджер.ПолучитьСсылку(ИдОбъекта);
	
	Если СсылкаОбъекта.ПолучитьОбъект() = Неопределено Тогда			
		ОбъектДок = ДокМенеджер.СоздатьДокумент();						
		ОбъектДок.УстановитьСсылкуНового(СсылкаОбъекта);
		ЭтоНовыйОбъект = Истина;						
	Иначе
		Если Не флОбновлятьДокументыПриЗагрузке Тогда	
			СтруктураПараметров = Новый Структура("ВидДокумента, Номер, Дата", ПредставлениеДок, Номер, Дата);			
			СообщитьОПропускеДокумента(СтруктураПараметров, Агент);			
			Возврат Неопределено;
		КонецЕсли;
		ОбъектДок = СсылкаОбъекта.ПолучитьОбъект();
		ОбъектДок.Разблокировать();
		ЭтоНовыйОбъект = Ложь;
	КонецЕсли;
	
	Возврат ОбъектДок;
	
КонецФункции
   
//vd_180904 Добавлена
//служебная функция, требуется для ЗаполнитьСтрокуТабличнойЧасти()
Функция ПолучитьСтруктуруСтрокиТЧ(ВидДокумента)
	
	стррСтрокаТЧ = Новый Структура;
	стррСтрокаТЧ.Вставить("ИдНоменклатуры");
	стррСтрокаТЧ.Вставить("ИдХарактеристики");
	стррСтрокаТЧ.Вставить("ИдЕдиницыИзм");
	стррСтрокаТЧ.Вставить("Количество");
	стррСтрокаТЧ.Вставить("Цена");
	стррСтрокаТЧ.Вставить("Сумма");             
	стррСтрокаТЧ.Вставить("СуммаНДС");          //не используется в перемещениях
	стррСтрокаТЧ.Вставить("СкидкаТЧ"); 			//не используется в поступлениях, перемещениях
	стррСтрокаТЧ.Вставить("СтавкаНДС");         //не используется в перемещениях
	стррСтрокаТЧ.Вставить("ИдСклад"); 			//только для заказов
	
	Возврат стррСтрокаТЧ;	
	
КонецФункции

// sk_190516 Процедура добавлена в рамках (MOD-520)
// Выполняет заполнение скидок по строке табличной части
//
// Параметры:
//  СтрокаТабличнойЧасти - ДокументТабличнаяЧастьСтрока - строка табличной части документа
//  СкидкаТЧ			 - Число - скидка
//
Процедура ЗаполнитьСкидкиПоСтроке(СтрокаТабличнойЧасти, СкидкаТЧ)

	текРежимЗагрузкиСкидок = НастройкиОбработки["РежимЗагрузкиСкидок"];	

	Если текРежимЗагрузкиСкидок = 0 Тогда	   // В колонку "Автоматическая скидка"
		СтрокаТабличнойЧасти.ПроцентАвтоматическихСкидок = СкидкаТЧ;
	ИначеЕсли текРежимЗагрузкиСкидок = 1 Тогда // В колонку "Ручная скидка"
		СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = СкидкаТЧ;
	ИначеЕсли текРежимЗагрузкиСкидок = 2 Тогда // Определить учетной системой
		СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 0;
	ИначеЕсли текРежимЗагрузкиСкидок = 3 Тогда // Рекомендуемый
		СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = СкидкаТЧ;
	КонецЕсли;
			
КонецПроцедуры


// vd_180904 Добавлена
// vd_180918 Добавлены реквизиты КлючСтроки КлючСвязи ЗаказПокупателя
//  Добавляет строку в ТЧ документа
//
// Параметры:
//  ОбъектДок					 - Объект	 - Объект документа
//  ВидДокумента				 - Строка	 - Вид документа в УС
//  стррСтрокаТЧ				 - Структура - Строки прочитанные из XML в теге табличной части см. ПолучитьСтруктуруСтрокиТЧ()
//  стррДополнительныеПараметры	 - Структура - Дополнительные прараметры. Это произвольные параметры которые передаются из функций загрузок документов, которые необходимы для заполнения ТЧ конкретного документа. 			 - 
//
Процедура ДобавитьСтрокуТабличнойЧастиВДокумент(ОбъектДок, ВидДокумента, стррСтрокаТЧ, стррДополнительныеПараметры = Неопределено)
	
	Количество = стррСтрокаТЧ.Количество;
	Цена       = стррСтрокаТЧ.Цена;
	Сумма      = стррСтрокаТЧ.Сумма;
	СтавкаНДС  = стррСтрокаТЧ.СтавкаНДС;
	СуммаНДС   = стррСтрокаТЧ.СуммаНДС;
	СкидкаТЧ   = стррСтрокаТЧ.СкидкаТЧ;
	ИдСклад    = стррСтрокаТЧ.ИдСклад;
	
	ТекНоменклатура  	= ПолучитьИПроверитьСсылкуИзСправочника(стррСтрокаТЧ.ИдНоменклатуры,   "Номенклатура");      
	ТекХарактеристика 	= ПолучитьИПроверитьСсылкуИзСправочника(стррСтрокаТЧ.ИдХарактеристики, "ХарактеристикиНоменклатуры");
	ТекЕдиница 			= ПолучитьИПроверитьСсылкуИзСправочника(стррСтрокаТЧ.ИдЕдиницыИзм,     "ЕдиницыИзмерения");
	
	//1. Добавляем новую строку в ТЧ
	Если НЕ ТекНоменклатура.Услуга Тогда
		НоваяСтрока = ОбъектДок.Товары.Добавить();										
	Иначе
		НоваяСтрока = ОбъектДок.Услуги.Добавить();
	КонецЕсли;
	
	//2. КлючСтроки
	Если НЕ ТекНоменклатура.Услуга Тогда
		Если    ВидДокумента = "ЗаказПокупателя" 
			ИЛИ ВидДокумента = "РеализацияТоваровУслуг" 
			ИЛИ ВидДокумента = "ВозвратТоваровОтПокупателя" 
		Тогда
			НоваяСтрока.КлючСтроки = УправлениеЗапасами.ПолучитьНовыйКлючСтроки(ОбъектДок);
		КонецЕсли;
	КонецЕсли;
	
	//3. КлючСвязи 
	Если НЕ ТекНоменклатура.Услуга Тогда
		//ЗаказПокупателя
		//В УТ 10.3.47.3 нет
		//В КА 1.1.101.1 есть
		//РеализацияТоваровУслуг
		//В УТ 10.3.47.3 есть
		//В КА 1.1.101.1 есть
		Если (ВидДокумента = "ЗаказПокупателя" И текНаименованиеКонфигурации = "КомплекснаяАвтоматизация")
			ИЛИ ВидДокумента = "РеализацияТоваровУслуг"
			ИЛИ ВидДокумента = "ПоступлениеТоваровУслуг"
		Тогда
			НоваяСтрока.КлючСвязи  = 0;
		КонецЕсли;
	КонецЕсли;
	
	//4. Номенклатура
	НоваяСтрока.Номенклатура = ТекНоменклатура;				
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(НоваяСтрока, ОбъектДок); // Выполнить общие действия для всех документов при изменении номенклатуры.

	//5. ХарактеристикаНоменклатуры, 
	Если НЕ ТекНоменклатура.Услуга И ТекНоменклатура <> ТекХарактеристика Тогда
		НоваяСтрока.ХарактеристикаНоменклатуры = ТекХарактеристика;
		//ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(НоваяСтрока, ОбъектДок, мВалютаРегламентированногоУчета); // Процедура заполняет ЕдиницаИзмерения и цену по ценам продажи в строке табличной части документа
	КонецЕсли;
	
	//6. СоставНабора. Заполнение табличной части СоставНабора для текущего ОбъектДок, это заполнеие всей строцки ТЧ СоставНабора.   
	Если ВидДокумента = "ЗаказПокупателя" или ВидДокумента = "РеализацияТоваровУслуг" или ВидДокумента = "ВозвратТоваровОтПокупателя" Тогда	
		УправлениеЗапасами.ДобавитьСоставНабора(НоваяСтрока, ОбъектДок); // Состав набора зависит от его характеристики.
	КонецЕсли;
	
	//7.Заказ и ЗаказПокупателя. Добавление при отложенной загрузке не требуется тк Заказы сразу записываются.
	Если ВидДокумента = "РеализацияТоваровУслуг" И ТипЗнч(ОбъектДок.Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		//В КА ЗаказПокупателя как то заполняется выше а в УТ не заполняется, поэтопу проверяем на заполено ли поле в ТЧ
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.ЗаказПокупателя) И ЗначениеЗаполнено(ОбъектДок.Сделка) Тогда
			НоваяСтрока.ЗаказПокупателя = ОбъектДок.Сделка;	
		КонецЕсли;			
	ИначеЕсли ВидДокумента = "ПоступлениеТоваровУслуг" И НЕ ОбъектДок.Сделка = Неопределено И ТипЗнч(ОбъектДок.Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		НоваяСтрока.Заказ = ОбъектДок.Сделка;
	КонецЕсли;
	
	//8. Цена
	//ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(НоваяСтрока, ОбъектДок, мВалютаРегламентированногоУчета);  // Процедура заполняет ЕдиницаИзмерения и цену по ценам продажи в строке табличной части документа
	НоваяСтрока.Цена = Цена;
	
	//9. ЕдиницаИзмерения , Коэффициент
	Если НЕ ТекНоменклатура.Услуга Тогда
		НоваяСтрока.ЕдиницаИзмерения = ТекЕдиница;
		Если ЗначениеЗаполнено(НоваяСтрока.ЕдиницаИзмерения) Тогда			
			НоваяСтрока.Коэффициент = НоваяСтрока.ЕдиницаИзмерения.Коэффициент; 
		КонецЕсли;		
		ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(НоваяСтрока, ОбъектДок); // Выполнить общие действия для всех документов при изменении Единица.
	КонецЕсли;
	
	//10. Количество
	НоваяСтрока.Количество = Количество;
	//ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(НоваяСтрока, ОбъектДок); //Выполняет стандартные действия при изменении единицы цены. Заполняет: ЕдиницаИзмеренияМест, КоличествоМест, Коэффициент,
	
	//11. ЕдиницаИзмеренияМест
	Если ВидДокумента = "ПеремещениеТоваров" Тогда 
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(НоваяСтрока, ОбъектДок);
	КонецЕсли;
	
	//12 КоличествоМест
	Если ВидДокумента = "ПеремещениеТоваров" Тогда
		ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрока, ОбъектДок);
	КонецЕсли;
				
	//50. Содержание, СпособСписанияОстаткаТоваров, Качество, Размещение 
	Если ТекНоменклатура.Услуга Тогда
		НоваяСтрока.Содержание = ТекНоменклатура.НаименованиеПолное;
	ИначеЕсли ВидДокумента = "ЗаказПокупателя" Тогда
		РезервироватьЗаказы = НастройкиОбработки["РезервироватьЗаказы"];	
		РезервироватьЗаказы = ?(РезервироватьЗаказы = Неопределено, НастройкиОбработкиПоУмолчанию["РезервироватьЗаказы"], РезервироватьЗаказы);
		Если РезервироватьЗаказы Тогда
			НоваяСтрока.Размещение = ПолучитьСсылкуИзСправочника(ИдСклад, "Склады");
		КонецЕсли;
	ИначеЕсли ВидДокумента = "РеализацияТоваровУслуг" Тогда
		НоваяСтрока.Качество = Справочники.Качество.Новый;
		НоваяСтрока.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
	ИначеЕсли ВидДокумента = "ВозвратТоваровОтПокупателя" Тогда
		НоваяСтрока.Качество = Справочники.Качество.Новый;
	ИначеЕсли ВидДокумента = "ПеремещениеТоваров" Тогда
		НоваяСтрока.Качество = Справочники.Качество.Новый;
	Иначе
		//ВидДокумента = "ПеремещениеТоваров" ИЛИ ВидДокумента = "ПоступлениеТоваровУслуг" Тогда
		//Не заполняем  	
	КонецЕсли;
		
	//51. СчетУчетаБУ, СчетУчетаНУ итд. Выполняет заполнение счетов учета в переданной строке табличной части
	//Если НЕ ВидДокумента = "ПеремещениеТоваров" И (ОбъектДок.ОтражатьВБухгалтерскомУчете ИЛИ ОбъектДок.ОтражатьВНалоговомУчете) Тогда
	Если текНаименованиеКонфигурации = "КомплекснаяАвтоматизация" Тогда
		Если ОбъектДок.ОтражатьВБухгалтерскомУчете ИЛИ ОбъектДок.ОтражатьВНалоговомУчете Тогда
			ОбщМодуль = Вычислить("СчетаУчетаВДокументах");
			ОбщМодуль.ЗаполнитьСчетаУчетаТабличнойЧасти(?(ТекНоменклатура.Услуга, "Услуги" ,"Товары"), НоваяСтрока, ОбъектДок, ОбъектДок.ОтражатьВБухгалтерскомУчете, ОбъектДок.ОтражатьВНалоговомУчете);
		КонецЕсли;
	КонецЕсли;
	
	//52. Сумма
	//ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ОбъектДок); // Пересчитываем суммы табличных частей
	//В КА 1.1.92.5  документ ПеремещениеТоваров реквизита нет  
	//В КА 1.1.101.1 документ ПеремещениеТоваров реквизит нет (в типовой конфигурации)
	//В УТ 10.3.47.3 документ ПеремещениеТоваров реквизита нет
	
	//(( sk_190131 В типовых конфигурациях в документе ПеремещениеТоваров нет реквизита Сумма  
	// sk_181010 Изменено условие
	//Если текНаименованиеКонфигурации = "КомплекснаяАвтоматизация" ИЛИ НЕ ВидДокумента = "ПеремещениеТоваров" Тогда
	//Если (текНаименованиеКонфигурации = "КомплекснаяАвтоматизация" И СравнитьВерсии(гВерсияКонфигурации, "1.1.101.1") >= 0) 
	//	ИЛИ НЕ ВидДокумента = "ПеремещениеТоваров" Тогда
	//	НоваяСтрока.Сумма = Сумма;
	//КонецЕсли;
	Если Не ВидДокумента = "ПеремещениеТоваров" Тогда
		НоваяСтрока.Сумма = Сумма;
	КонецЕсли;
	//)) sk_190131
	
	//53. СтавкаНДС
	Если НЕ ВидДокумента = "ПеремещениеТоваров" Тогда
		//Если НаименованиеКонфигурации = "УправлениеТорговымПредприятиемДляКазахстана" Тогда 
		//	ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(НоваяСтрока, ОбъектДок);
		//Иначе
		//	ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(НоваяСтрока, ОбъектДок, стррПараметры.ВидДокумента);
		//КонецЕсли;
		НоваяСтрока.СтавкаНДС = ТекНоменклатура.СтавкаНДС;
	КонецЕсли;
	
	//54. СуммаНДС
	Если НЕ ВидДокумента = "ПеремещениеТоваров" Тогда
		//ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ОбъектДок); // Пересчитываем суммы табличных частей
		НоваяСтрока.СуммаНДС = СуммаНДС;
	КонецЕсли;
	
	//55. ПроцентСкидкиНаценки
	Если НЕ (ВидДокумента = "ПеремещениеТоваров" ИЛИ ВидДокумента = "ПоступлениеТоваровУслуг") Тогда
		Если ЗначениеЗаполнено(ВыбНастройкиАгента.МинимальныйТипЦены) Тогда
			//Если НаименованиеКонфигурации = "УправлениеТорговымПредприятиемДляКазахстана" Тогда 
			//	МинЦенаТовара = Вычислить("УправлениеЦенообразованием.ПолучитьЦенуНоменклатуры(ТекНоменклатура, , МинимальныйТипЦены, ТекущаяДата(), ТекЕдиница, мВалютаРегламентированногоУчета)");
			//Иначе
			//	МинЦенаТовара = Вычислить("Ценообразование.ПолучитьЦенуНоменклатуры(ТекНоменклатура, , МинимальныйТипЦены, ТекущаяДата(), ТекЕдиница, мВалютаРегламентированногоУчета)");
			//КонецЕсли;
			Если НаименованиеКонфигурации = "УправлениеТорговымПредприятиемДляКазахстана" Тогда 
				ОбщийМодульПолучитьЦенуНоменклатуры = Вычислить("УправлениеЦенообразованием");
			Иначе
				ОбщийМодульПолучитьЦенуНоменклатуры = Вычислить("Ценообразование");
			КонецЕсли;		
			МинЦенаТовара = ОбщийМодульПолучитьЦенуНоменклатуры.ПолучитьЦенуНоменклатуры(ТекНоменклатура, , ВыбНастройкиАгента.МинимальныйТипЦены, ТекущаяДата(), ТекЕдиница, мВалютаРегламентированногоУчета);
						
			ЦенаСоСкидкой = Цена - (Цена * (СкидкаТЧ / 100));	// Проверяем больше ли цена с применением скидки чем минимально допустимая цена
			
			//(( sk_190516 В рамках (MOD-520)
			//Если ЦенаСоСкидкой >= МинЦенаТовара Тогда
			//	НоваяСтрока.ПроцентСкидкиНаценки = СкидкаТЧ;    
			//Иначе
			//	НоваяСтрока.ПроцентСкидкиНаценки = 0;
			//КонецЕсли;
			Если ЦенаСоСкидкой >= МинЦенаТовара Тогда
				текСкидкаТЧ = СкидкаТЧ;    
			Иначе
				текСкидкаТЧ = 0;
			КонецЕсли;
			//)) sk_190516
		Иначе
			//(( sk_190516 В рамках (MOD-520)
			//НоваяСтрока.ПроцентСкидкиНаценки = СкидкаТЧ;
			текСкидкаТЧ = СкидкаТЧ;
			//)) sk_190516
		КонецЕсли;
		
		ЗаполнитьСкидкиПоСтроке(НоваяСтрока, текСкидкаТЧ); // sk_190516 Выполняем заполнение скидку в строке ТЧ в рамках (MOD-520)
	КонецЕсли;
	
	//56. ПлановаяСебестоимость.
	Если НЕ ВидДокумента = "ПеремещениеТоваров" И Не ТекНоменклатура.Услуга Тогда
		//(( sk_190214 Проверяем наличие реквизита "ИспользоватьПлановуюСебестоимость"
		// ОбработкаТабличныхЧастей.РассчитатьПлановуюСебестоимостьВСтрокеТабЧасти(НоваяСтрока, ОбъектДок, УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяВалютаВзаиморасчетов")); 
		МетаданныеИспользоватьПлановуюСебестоимость = ОбъектДок.Метаданные().Реквизиты.Найти("ИспользоватьПлановуюСебестоимость");
 		Если МетаданныеИспользоватьПлановуюСебестоимость <> Неопределено Тогда
			ОбработкаТабличныхЧастей.РассчитатьПлановуюСебестоимостьВСтрокеТабЧасти(НоваяСтрока, ОбъектДок, УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяВалютаВзаиморасчетов"));
		КонецЕсли;
		//)) sk_190214		
	КонецЕсли;

	///////////////////
	
	//vd_180918 Изменено условие
	//Если ВидДокумента = "РеализацияТоваровУслуг" ИЛИ ВидДокумента = "ПоступлениеТоваровУслуг" Тогда
	Если ВидДокумента = "РеализацияТоваровУслуг" Тогда

		//20. Для реализаций.
		//В КА 1.1.92.5  документ РеализацияТоваровУслуг нет реквизита КодТНВЭД в табличной части  
		//В КА 1.1.101.1 документ РеализацияТоваровУслуг есть реквизит КодТНВЭД в табличной части
		//В УТ 10.3.54.4 документ РеализацияТоваровУслуг нет реквизита КодТНВЭД в табличной части
		//В УТ 10.3.46.3 документ РеализацияТоваровУслуг есть реквизит КодТНВЭД в табличной части
		Если ВидДокумента = "РеализацияТоваровУслуг" Тогда
			//(( sk_190213
			//Если НЕ (текНаименованиеКонфигурации = "КомплекснаяАвтоматизация" И СравнитьВерсии(гВерсияКонфигурации, "1.1.92.5") = 0) Тогда
			//	ОбработкаТабличныхЧастей.ЗаполнитьКодТНВЭД (НоваяСтрока);
			//КонецЕсли;
			Если текНаименованиеКонфигурации = "КомплекснаяАвтоматизация" И СравнитьВерсии(гВерсияКонфигурации, "1.1.101.1") >= 0
				ИЛИ текНаименованиеКонфигурации = "УправлениеТорговлей" И СравнитьВерсии(гВерсияКонфигурации, "10.3.46.3") >= 0 Тогда
				ОбработкаТабличныхЧастей.ЗаполнитьКодТНВЭД(НоваяСтрока);
			КонецЕсли;
			//)) sk_190213
		КонецЕсли;
		
		//21. Для реализаций.
		Если ВидДокумента = "РеализацияТоваровУслуг" Тогда
			УчетСерийныхНомеров.ПроверитьСерийныеНомера(НоваяСтрока, ОбъектДок); //Процедура проверяет соответствие номенклатуры и серийных номеров по ключу связи
		КонецЕсли;
		
		//vd_180917 Перенесана в загрузки самих документов
		//23. Для реализаций. 
		//Если ВидДокумента = "РеализацияТоваровУслуг" ИЛИ ВидДокумента = "ПоступлениеТоваровУслуг" Тогда
		//	//Процедура заполняет табличную часть при оперативном проведении
		//	Если Константы.ИспользоватьСерииНоменклатуры.Получить() Тогда
		//		ОбъектДок.ЗаполнитьТабличныеЧастиПередПроведением(Истина);  
		//	КонецЕсли;
		//КонецЕсли;
	КонецЕсли;		
				
КонецПроцедуры

// sk_190516 Процедура добавлена в рамках (MOD-520)
// Выполняет расчет скидок в зависимости от выбранного режима
// Режимы выгрузки скидок:
//  0 - В колонку "Автоматическая скидка";
//	1 - В колонку "Ручная скидка";
//	2 - Определить учетной системой;
//	3 - Рекомендуемый.              
//
// Параметры:
//  ОбъектДок 					- ДокументОбъект - объект редактируемого документа
//  стррПараметрыРасчетаСкидок  - Структура - структура параметров расчета скидок
//
Процедура РассчитатьСкидкиПоРежиму(ОбъектДок, стррПараметрыРасчетаСкидок)
	
	текРежимЗагрузкиСкидок = НастройкиОбработки["РежимЗагрузкиСкидок"];
	
	Если текРежимЗагрузкиСкидок = 0 ИЛИ текРежимЗагрузкиСкидок = 1  Тогда
		
		// Для ТЧ Товары
		Для Каждого текСтр из ОбъектДок.Товары Цикл
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(текСтр, ОбъектДок)		
		КонецЦикла;
		
		//  Для ТЧ услуги
		Для Каждого текСтр из ОбъектДок.Услуги Цикл
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(текСтр, ОбъектДок)		
		КонецЦикла;
		
		Возврат;
	КонецЕсли;		
	
	// В КА документ РеализацияТоваровУслуг не объявлены экспортные переменные в модуле объекта мМинимальныеЦены, мСписокФильтров  
	Если текНаименованиеКонфигурации = "КомплекснаяАвтоматизация" И ТипЗнч(ОбъектДок.Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда 
		 мМинимальныеЦены = Неопределено;
		 мСписокФильтров  = Неопределено;
	Иначе
		 мМинимальныеЦены = ОбъектДок.мМинимальныеЦены;
		 мСписокФильтров  = ОбъектДок.мСписокФильтров;
	КонецЕсли;
	 
	ОбработкаТабличныхЧастей.РассчитатьСкидкиПриПродаже(ОбъектДок, ОбъектДок.Товары, стррПараметрыРасчетаСкидок, мМинимальныеЦены, мСписокФильтров);
	ОбработкаТабличныхЧастей.РассчитатьСкидкиПриПродаже(ОбъектДок, ОбъектДок.Услуги, стррПараметрыРасчетаСкидок, мМинимальныеЦены, мСписокФильтров);
	
	Если текРежимЗагрузкиСкидок = 3 Тогда // Режим "Рекомендуемый"
		
		флПересчитатьТовары = Ложь;
		флПересчитатьУслуги = Ложь;
		
		// Для ТЧ Товары
		Для Каждого текСтр из ОбъектДок.Товары Цикл
			Если текСтр.ПроцентАвтоматическихСкидок > 0 Тогда
				текСтр.ПроцентСкидкиНаценки = текСтр.ПроцентСкидкиНаценки - текСтр.ПроцентАвтоматическихСкидок;  
				флПересчитатьТовары = Истина;
			Конецесли;		
		КонецЦикла;
		
		// Для ТЧ услуги
		Для Каждого текСтр из ОбъектДок.Услуги Цикл
			Если текСтр.ПроцентАвтоматическихСкидок > 0 Тогда
				текСтр.ПроцентСкидкиНаценки = текСтр.ПроцентСкидкиНаценки - текСтр.ПроцентАвтоматическихСкидок;  
				флПересчитатьУслуги = Истина;
			Конецесли;		
		КонецЦикла;
		
		// Выполняем пересчет табличных частей 
		Если флПересчитатьТовары Тогда
			ОбработкаТабличныхЧастей.РассчитатьСкидкиПриПродаже(ОбъектДок, ОбъектДок.Товары, стррПараметрыРасчетаСкидок, мМинимальныеЦены, мСписокФильтров);
		КонецЕсли;
		
		Если флПересчитатьУслуги Тогда
			ОбработкаТабличныхЧастей.РассчитатьСкидкиПриПродаже(ОбъектДок, ОбъектДок.Услуги, стррПараметрыРасчетаСкидок, мМинимальныеЦены, мСписокФильтров);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // РассчитатьСкидкиПоРежиму()

// vd_180828 Добавлена
//
// Параметры:
//  ТекстXML		 - 	 - 
//  стррПараметры	 - 	Структура - 
//	стррПараметры.Дата  				 - Дата      - Дата документа. 
//	стррПараметры.Номер                  - Строка    - Номер Документа. 
//	стррПараметры.ИдОбъекта              - ГУИД      - Ид документа из МУ (атрибут GUID из МУ)
//	стррПараметры.ЭтоНовый               - Булево    - Ложь если в 1С уже есть документ с стррПараметры.ИдОбъекта
//	стррПараметры.Проведен               - Булево    - Истина если док проведен в МУ
//	стррПараметры.ПропускДокумента       - Булево    - Истина если документ не нужно загружать
//	стррПараметры.ПричинаПропуска        - Строка    - Причина по какой не нужно загружать документ в 1С
//	стррПараметры.ОбъектДокумента        - Ссылка    - Ссылка на документ, если в системе уже есть такой документ то заполненна
//	стррПараметры.Синоним                - Строка    - Синоним менеджера документа из методанных. ДокМенеджер.ПустаяСсылка().Метаданные().Синоним  Например для реализации "Реализация товаров и услуг"
//	стррПараметры.Представление          - Строка    - Представление документа в МУ.
//	стррПараметры.ВидДокумента           - Строка    - Вид документа. Например "РеализацияТоваровУслуг"
//	стррПараметры.ЭтоВиртуальныйДокумент - Булево    - Истина если это виртуальный документ
//
Процедура ЗагрузитьДокументЗаказ(ТекстXML, стррПараметры, ЗагружаемыеОбъекты, ОшибкаЧтенияITEM)
	
	ОбъектДок = стррПараметры.ОбъектДокумента;
	
	стррПоляИзМУ = Новый Структура;
	//стррПоляИзМУ.Вставить("" 			      , ТекстXML.ПолучитьАтрибут("A01"));
	стррПоляИзМУ.Вставить("идОрганизация"     , ТекстXML.ПолучитьАтрибут("A02"));
	стррПоляИзМУ.Вставить("идКонтрагент"	  , ТекстXML.ПолучитьАтрибут("A03"));
	стррПоляИзМУ.Вставить("идТоргТочка" 	  , ТекстXML.ПолучитьАтрибут("A04"));
	стррПоляИзМУ.Вставить("идДоговор"   	  , ТекстXML.ПолучитьАтрибут("A05"));
	стррПоляИзМУ.Вставить("Скидка"	 		  , ТекстXML.ПолучитьАтрибут("A06"));
	стррПоляИзМУ.Вставить("идТипЦен" 		  , ТекстXML.ПолучитьАтрибут("A07"));
	стррПоляИзМУ.Вставить("СуммаДокумента"    , ТекстXML.ПолучитьАтрибут("A08"));
	стррПоляИзМУ.Вставить("Вес" 			  , ТекстXML.ПолучитьАтрибут("A09"));
	стррПоляИзМУ.Вставить("ДатаДоставки" 	  , ТекстXML.ПолучитьАтрибут("A010"));
	стррПоляИзМУ.Вставить("Комментарий" 	  , ТекстXML.ПолучитьАтрибут("A011"));
	стррПоляИзМУ.Вставить("ИдКатегория" 	  , ТекстXML.ПолучитьАтрибут("A012"));
	стррПоляИзМУ.Вставить("идМерчендайзинг"	  , ТекстXML.ПолучитьАтрибут("A013"));
	стррПоляИзМУ.Вставить("Широта"	 		  , ТекстXML.ПолучитьАтрибут("A014"));
	стррПоляИзМУ.Вставить("Долгота" 		  , ТекстXML.ПолучитьАтрибут("A015"));	
	стррПоляИзМУ.Вставить("ЕстьПодчиненные"   , ТекстXML.ПолучитьАтрибут("A016"));	
	стррПоляИзМУ.Вставить("ДатаНачала"	 	  , ТекстXML.ПолучитьАтрибут("A017"));
	стррПоляИзМУ.Вставить("ДатаОкончания" 	  , ТекстXML.ПолучитьАтрибут("A018"));
	стррПоляИзМУ.Вставить("идВидОплаты" 	  , ТекстXML.ПолучитьАтрибут("A019"));
	стррПоляИзМУ.Вставить("идВидДоставки" 	  , ТекстXML.ПолучитьАтрибут("A020"));
	стррПоляИзМУ.Вставить("ДатаТочкиТрека"	  , ТекстXML.ПолучитьАтрибут("A021"));
	стррПоляИзМУ.Вставить("Распечатан"	 	  , ТекстXML.ПолучитьАтрибут("A022"));
	стррПоляИзМУ.Вставить("идСклад"		 	  , ТекстXML.ПолучитьАтрибут("A023"));

	ЗаполнитьОсновныеПараметрыДокумента(ОбъектДок, стррПоляИзМУ, стррПараметры);
	
	//////++ Из старой функции//////
			
	//1. УчитыватьНДС, Склад, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете
	//Заполняется в ЗаполнитьОсновныеПараметрыДокумента()
	
	//2. СтруктурнаяЕдиница
	Если ВыбНастройкиАгента.ВидОплатыПоУмолчанию = Перечисления.ВидыДенежныхСредств.Наличные Тогда
		ОбъектДок.СтруктурнаяЕдиница = ВыбНастройкиАгента.ОсновнаяКасса;
	ИначеЕсли ВыбНастройкиАгента.ВидОплатыПоУмолчанию = Перечисления.ВидыДенежныхСредств.Безналичные  Тогда
		ОбъектДок.СтруктурнаяЕдиница = ОбъектДок.Организация.ОсновнойБанковскийСчет;
	КонецЕсли;
	
	//3. ДатаОтгрузки
	//++Ratmir 2017-10-27 //ОбъектДок.ДатаОтгрузки 	     = ДатаДоставки;
	ДатаДоставки = ДатаВремяXMLВФормат1С(стррПоляИзМУ.ДатаДоставки);
	Если НачалоДня(стррПараметры.Дата) = НачалоДня(ДатаДоставки) Тогда
		ОбъектДок.ДатаОтгрузки = Дата(1,1,1);
	Иначе
		ОбъектДок.ДатаОтгрузки = ДатаДоставки;
	КонецЕсли;             
	//--Ratmir 2017-10-27
	
	//4. АдресДоставки
	//Альфия 26.05.2017
	Соответствие = СоответствиеСпр["Значения_ВидыДоставки"];
	ВидДоставки = Соответствие[НРег(стррПоляИзМУ.идВидДоставки)];
	Если ВидДоставки = "До клиента" тогда
		//++Ratmir 2018-04-13
		текКонтрагент = ПолучитьСсылкуИзСправочника(стррПоляИзМУ.идКонтрагент, "Контрагенты");
		Если ЗначениеЗаполнено(текКонтрагент) Тогда 
			текАдресДоставки = УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(текКонтрагент, "Фактический");
			ОбъектДок.АдресДоставки = текАдресДоставки;	
		КонецЕсли;
		//--Ratmir 2018-04-13
	КонецЕсли;
	//Альфия 26.05.2017

	//////-- Из старой функции//////
	
	//////++ ТАБЛИЧНАЯ ЧАСТЬ //////
	
	Если стррПараметры.ЭтоНовый = Ложь Тогда
		ОбъектДок.Товары.Очистить();
		ОбъектДок.Услуги.Очистить();
	КонецЕсли;
	
 	ТекстXML.Прочитать();
	Если ТекстXML.Имя = "TABLES" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		ТекстXML.Прочитать();
		Если ВРег(СокрЛП(ТекстXML.ПолучитьАтрибут("GUID"))) = "0738E61B-F06F-464A-8483-4249E0254819" Тогда
			
			// ОБРАБОТКА ТАБЛИЧНОЙ ЧАСТИ //
			стррСтрокаТЧ = ПолучитьСтруктуруСтрокиТЧ(стррПараметры.ВидДокумента);
			Пока ТекстXML.Прочитать() Цикл
				//vd_180903 Если ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				Если НЕ ТекстXML.Имя = "ITEM" Тогда
				 	Прервать;
				ИначеЕсли  ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					Продолжить;
				КонецЕсли;	
				
				стррСтрокаТЧ.ИдНоменклатуры 	= ТекстXML.ПолучитьАтрибут("A01");
				стррСтрокаТЧ.ИдХарактеристики 	= ТекстXML.ПолучитьАтрибут("A02");
				стррСтрокаТЧ.ИдЕдиницыИзм 		= ТекстXML.ПолучитьАтрибут("A03");
				стррСтрокаТЧ.Количество 		= Число(ТекстXML.ПолучитьАтрибут("A04"));
				стррСтрокаТЧ.Цена 				= Число(ТекстXML.ПолучитьАтрибут("A05"));
				стррСтрокаТЧ.Сумма 				= Число(ТекстXML.ПолучитьАтрибут("A06"));
				стррСтрокаТЧ.СуммаНДС 			= Число(ТекстXML.ПолучитьАтрибут("A07"));
				//стррСтрокаТЧ.Вес 				= Число(ТекстXML.ПолучитьАтрибут("A08"));
				стррСтрокаТЧ.СкидкаТЧ 			= Число(ТекстXML.ПолучитьАтрибут("A09"));
				стррСтрокаТЧ.СтавкаНДС 			= Число(ТекстXML.ПолучитьАтрибут("A010"));                              
				стррСтрокаТЧ.ИдСклад 			= ТекстXML.ПолучитьАтрибут("A011");
				//стррСтрокаТЧ.СуммаСкидки		= ТекстXML.ПолучитьАтрибут("A012");
				//стррСтрокаТЧ.ЦенаИсходная		= ТекстXML.ПолучитьАтрибут("A014");
				//стррСтрокаТЧ.ИдТипЦены 		= ТекстXML.ПолучитьАтрибут("A015");
				//стррСтрокаТЧ.ИдВидЦены 		= ТекстXML.ПолучитьАтрибут("A016");
				//стррСтрокаТЧ.ИдВидСкидки 		= ТекстXML.ПолучитьАтрибут("A017");
				
				ДобавитьСтрокуТабличнойЧастиВДокумент(ОбъектДок, стррПараметры.ВидДокумента, стррСтрокаТЧ);		
								
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		ОшибкаЧтенияITEM = Истина;
	КонецЕсли;
	//////-- ТАБЛИЧНАЯ ЧАСТЬ //////
	
	//////++ Пересчет скидок //////
	
	//Ratmir 2017-11-24
	//Попытка //vd_180829
		//++ВГ 20171025
		//Пересчитать документ (а именно скидки)
		// ПЕРЕСЧИТЫВАЕМ ДОКУМЕНТ
		//++Ratmir 2018-05-17 Для УправлениеТорговымПредприятиемДляКазахстана Было: 		//СуммаДокументаБезСкидок = Ценообразование.ПолучитьСуммуДокументаБезСкидки(ОбъектДок.Товары) + Ценообразование.ПолучитьСуммуДокументаБезСкидки(ОбъектДок.Услуги);
		Если НаименованиеКонфигурации = "УправлениеТорговымПредприятиемДляКазахстана" Тогда 
			СуммаДокументаБезСкидок = Вычислить("УправлениеЦенообразованием.ПолучитьСуммуДокументаБезСкидки(ОбъектДок.Товары) + УправлениеЦенообразованием.ПолучитьСуммуДокументаБезСкидки(ОбъектДок.Услуги)");
		Иначе
			СуммаДокументаБезСкидок = Вычислить("Ценообразование.ПолучитьСуммуДокументаБезСкидки(ОбъектДок.Товары) + Ценообразование.ПолучитьСуммуДокументаБезСкидки(ОбъектДок.Услуги)");
		КонецЕсли;
		//--Ratmir 2018-05-17
		
		
		//{{vd_180829
		//Было:
		//ДисконтнаяКарта = Справочники.ИнформационныеКарты.ПустаяСсылка(); 
		//УчитыватьНДС = ОбъектДок.УчитыватьНДС;
		//СуммаВключаетНДС = Ложь;
		//ПолучитьЗначениеУчетнойПолитики = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(ОбъектДок.Дата, Ложь);
		//
		//СтруктураПараметровРасчетаСкидок = Новый Структура;
		//СтруктураПараметровРасчетаСкидок.Вставить("ВидРеализации"                 , Перечисления.ВидыСкидок.Оптовая);
		//СтруктураПараметровРасчетаСкидок.Вставить("СуммаДокумента"                , СуммаДокументаБезСкидок);
		//СтруктураПараметровРасчетаСкидок.Вставить("Карта"                         , ДисконтнаяКарта);
		//СтруктураПараметровРасчетаСкидок.Вставить("УчитыватьНДС"                  , УчитыватьНДС);
		//СтруктураПараметровРасчетаСкидок.Вставить("СуммаВключаетНДС"              , СуммаВключаетНДС);
		//СтруктураПараметровРасчетаСкидок.Вставить("ВалютаРегламентированногоУчета", мВалютаРегламентированногоУчета);
		//СтруктураПараметровРасчетаСкидок.Вставить("УчетнаяПолитика"               , ПолучитьЗначениеУчетнойПолитики);
		
		стррПараметрыРасчетаСкидок = Новый Структура; // СтруктураПараметровРасчетаСкидок = Новый Структура; sk_190516 Изменено название переменной 
		стррПараметрыРасчетаСкидок.Вставить("ВидРеализации"                 , Перечисления.ВидыСкидок.Оптовая);
		стррПараметрыРасчетаСкидок.Вставить("СуммаДокумента"                , СуммаДокументаБезСкидок);
		стррПараметрыРасчетаСкидок.Вставить("Карта"                         , ОбъектДок.ДисконтнаяКарта);
		стррПараметрыРасчетаСкидок.Вставить("УчитыватьНДС"                  , ОбъектДок.УчитыватьНДС);                      
		стррПараметрыРасчетаСкидок.Вставить("СуммаВключаетНДС"              , ОбъектДок.СуммаВключаетНДС);
		стррПараметрыРасчетаСкидок.Вставить("ВалютаРегламентированногоУчета", мВалютаРегламентированногоУчета);
		стррПараметрыРасчетаСкидок.Вставить("УчетнаяПолитика"               , ОбъектДок.мУчетнаяПолитика);
		//}}vd_180829
		
		//{{vd_180829
		//мМинимальныеЦены = Неопределено; 
		//мСписокФильтров = УправлениеПользователями.ПолучитьЗначениеПраваДляТекущегоПользователя(ПланыВидовХарактеристик.ПраваПользователей.НеОтпускатьТоварСЦенойНижеОпределенногоТипа, Неопределено);
		//ОбработкаТабличныхЧастей.РассчитатьСкидкиПриПродаже(ОбъектДок, ОбъектДок.Товары, СтруктураПараметровРасчетаСкидок, мМинимальныеЦены, мСписокФильтров);
		//ОбработкаТабличныхЧастей.РассчитатьСкидкиПриПродаже(ОбъектДок, ОбъектДок.Услуги, СтруктураПараметровРасчетаСкидок, мМинимальныеЦены, мСписокФильтров);
		//ОбработкаТабличныхЧастей.РассчитатьСкидкиПриПродаже(ОбъектДок, ОбъектДок.Товары, СтруктураПараметровРасчетаСкидок, ОбъектДок.мМинимальныеЦены, ОбъектДок.мСписокФильтров);
		//ОбработкаТабличныхЧастей.РассчитатьСкидкиПриПродаже(ОбъектДок, ОбъектДок.Услуги, СтруктураПараметровРасчетаСкидок, ОбъектДок.мМинимальныеЦены, ОбъектДок.мСписокФильтров);
		//}}vd_180829
		
		//МЕНЯЕМ СКИДКИ
		//(( sk_190516 Расчет скидок перенес в отдельную процедуру в рамках (MOD-520)
		//ПересчитатьТовары = Ложь;
		//ПересчитатьУслуги = Ложь;	
		////Для товаров
		//Для Каждого Стр из ОбъектДок.Товары Цикл
		//	Если Стр.ПроцентАвтоматическихСкидок > 0 Тогда
		//		Стр.ПроцентСкидкиНаценки = Стр.ПроцентСкидкиНаценки - Стр.ПроцентАвтоматическихСкидок;  
		//		ПересчитатьТовары = Истина;
		//	Конецесли;		
		//КонецЦикла;
		//		
		////Для услуг
		//Для Каждого Стр из ОбъектДок.Услуги Цикл
		//	Если Стр.ПроцентАвтоматическихСкидок > 0 Тогда
		//		Стр.ПроцентСкидкиНаценки = Стр.ПроцентСкидкиНаценки - Стр.ПроцентАвтоматическихСкидок;  
		//		ПересчитатьУслуги = Истина;
		//	Конецесли;		
		//КонецЦикла;
		//		
		////ПЕРЕСЧИТЫВАЕМ ДОКУМЕНТ	
		//Если ПересчитатьТовары = Истина Тогда
		//	ОбработкаТабличныхЧастей.РассчитатьСкидкиПриПродаже(ОбъектДок, ОбъектДок.Товары, СтруктураПараметровРасчетаСкидок, ОбъектДок.мМинимальныеЦены, ОбъектДок.мСписокФильтров);	
		//КонецЕсли;
		//Если ПересчитатьУслуги = Истина Тогда
		//	ОбработкаТабличныхЧастей.РассчитатьСкидкиПриПродаже(ОбъектДок, ОбъектДок.Услуги, СтруктураПараметровРасчетаСкидок, ОбъектДок.мМинимальныеЦены, ОбъектДок.мСписокФильтров);
		//КонецЕсли;
		//ОбработкаТабличныхЧастей.РассчитатьСкидкиПриПродаже(ОбъектДок, ОбъектДок.Товары, СтруктураПараметровРасчетаСкидок, ОбъектДок.мМинимальныеЦены, ОбъектДок.мСписокФильтров);
		//ОбработкаТабличныхЧастей.РассчитатьСкидкиПриПродаже(ОбъектДок, ОбъектДок.Услуги, СтруктураПараметровРасчетаСкидок, ОбъектДок.мМинимальныеЦены, ОбъектДок.мСписокФильтров);
		РассчитатьСкидкиПоРежиму(ОбъектДок, стррПараметрыРасчетаСкидок);
		//)) sk_190516
		//--ВГ 20171025
	//Исключение //vd_180829
	//КонецПопытки; //vd_180829
	//--Ratmir 2017-11-24
	
	//////-- Пересчет скидок //////
	
	//////++ ЗАПИСЬ //////
	стррПараметрыДокМУ = Новый Структура; // СтруктураПараметров = Новый Структура; sk_190516 Изменено название переменной
	стррПараметрыДокМУ.Вставить("Дата", стррПараметры.Дата);
	Результат = ЗаписатьДокумент(ОбъектДок, выбАгент, стррПараметрыДокМУ, стррПараметры.ЭтоНовый, Истина);
	
	Если Результат = 1 Тогда
		
		//Создание документа Заказ на основании Реализации.
		Если ОбъектДок.ПометкаУдаления Тогда
			ТекстСообщения = "ru='На основании документа: " + Строка(ОбъектДок.Ссылка) + " не будет создан документ ""Реализация товаров и услуг"", потому что он помечен на удаление'";
			ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обмен"], СтатусСообщения.Важное, выбАгент, ОбъектДок.Ссылка);
		Иначе
			РеализацияПоЗаявкам = НастройкиОбработки["РеализацияПоЗаявкам"];
			РеализацияПоЗаявкам = ?(РеализацияПоЗаявкам = Неопределено, НастройкиОбработкиПоУмолчанию[РеализацияПоЗаявкам], РеализацияПоЗаявкам);
			Если РеализацияПоЗаявкам = 1 Тогда			
				ВвестиРеализациюНаОснованииЗаявки(ОбъектДок, выбАгент);
			КонецЕсли;	
		КонецЕсли;	
		
		стррПараметрыДокМУ.Вставить("КоординатыGPS", стррПоляИзМУ.Широта + Имена["СимволРазделительGPS"] + стррПоляИзМУ.Долгота);
		стррПараметрыДокМУ.Вставить("Категория",     стррПоляИзМУ.ИдКатегория);
		
		ЗаписатьРегЗначениеСвойстваОбъекта(ОбъектДок, стррПараметрыДокМУ, "КоординатыGPS");
		ЗаписатьРегЗначениеСвойстваОбъекта(ОбъектДок, стррПараметрыДокМУ, "Категория");
		
	КонецЕсли;
	//////-- ЗАПИСЬ //////    
	
КонецПроцедуры 

// sk_190116 Процедура не используется
//
Процедура ЗагрузитьДокументыЗаказ_old(ТекстXML, СоотвЗагруженныхОбъектов, ДанныеДок, Агент, ДанныеАгента)
	
	Перем ЭтоНовый, ОбъектДок, СтруктураПараметров, мМинимальныеЦены;
		
	СписокКатегорииДокументов = ПолучитьЗначениеНастройки("КатегорииДокументов", "Соответствие");
	
	ИмяДок = ДанныеДок["_ИмяДокумента"];
	Менеджер = Документы[ИмяДок];
		
	СтруктураРеквизитов = ПолучитьСтруктуруЗагружаемыхРеквизитов(ДанныеДок);
	
	ОсновнойСклад = ДанныеАгента["ОсновнойСклад"];
	ОсновнойСклад = ?(ОсновнойСклад = Неопределено, НастройкиАгентаПоУмолчанию["ОсновнойСклад"], ОсновнойСклад);
	МинимальныйТипЦены = ДанныеАгента["МинимальныйТипЦены"];
	
	РезервироватьЗаказы = НастройкиОбработки["РезервироватьЗаказы"];
	РезервироватьЗаказы = ?(РезервироватьЗаказы = Неопределено, НастройкиОбработкиПоУмолчанию["РезервироватьЗаказы"], РезервироватьЗаказы);
		
	Пока ТекстXML.Прочитать() Цикл
			
		Если ТекстXML.Имя = эл_Документ И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Прервать;				
		КонецЕсли;
			
		Если ТекстXML.Имя = эл_Элемент И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			стрИд = ТекстXML.ЗначениеАтрибута(ат_Гуид);
			
			номер = Строка(ТекстXML.ПолучитьАтрибут(ат_ПрефиксДокумента)) + Строка(ТекстXML.ПолучитьАтрибут(ат_НомерДокумента));
			ОбъектДок = ПолучитьОбъектДокумента(Агент, ИмяДок, стрИд, ТекстXML.ПолучитьАтрибут(ат_Проведен), ТекстXML.ПолучитьАтрибут(ат_ДатаДокумента), номер, ЭтоНовый);
			Если ОбъектДок = Неопределено Тогда
				СтруктураПараметров = Неопределено;
				Продолжить;
			КонецЕсли;
		
			СтруктураПараметров = Новый Структура("ВидДокумента, Номер, Дата, ТипЦен, ИдДок, СостДок," + 
												  "ИдФирмы, ИдКлиента, ИдДоговора, ИдТоргТочки, ИдМаршрута, СуммаДокумента, Комментарий," + 
												  "ВидОплаты, ИдДокОсн, Широта, Долгота, КоординатыGPS, Категория, СпособСоздания");	
			
			СтруктураПараметров.ВидДокумента       = ИмяДок;
			СтруктураПараметров.Номер     	   	   = номер;
			СтруктураПараметров.Дата     	   	   = ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут(ат_ДатаДокумента));    	
			СтруктураПараметров.ИдФирмы 	   	   = ТекстXML.ПолучитьАтрибут(ДанныеДок["Организация"]);
			СтруктураПараметров.ИдКлиента	   	   = ТекстXML.ПолучитьАтрибут(ДанныеДок["Контрагент"]);
			СтруктураПараметров.ИдДоговора 		   = ТекстXML.ПолучитьАтрибут(ДанныеДок["ДоговорКонтрагента"]);
			СтруктураПараметров.ИдТоргТочки   	   = ТекстXML.ПолучитьАтрибут(ДанныеДок["ТорговаяТочка"]);	
			СтруктураПараметров.Комментарий    	   = ТекстXML.ПолучитьАтрибут(ДанныеДок["Комментарий"]);	
			СтруктураПараметров.СуммаДокумента	   = Число(ТекстXML.ПолучитьАтрибут(ДанныеДок["СуммаДокумента"]));
			СтруктураПараметров.ТипЦен 	           = ТекстXML.ПолучитьАтрибут(ДанныеДок["ТипЦен"]);
			СтруктураПараметров.Широта 	           = ТекстXML.ПолучитьАтрибут(ДанныеДок["Широта"]);
			СтруктураПараметров.Долгота	           = ТекстXML.ПолучитьАтрибут(ДанныеДок["Долгота"]);			
			
			СтруктураПараметров.КоординатыGPS  	   = СтруктураПараметров.Широта + Имена["СимволРазделительGPS"] + СтруктураПараметров.Долгота;
			СтруктураПараметров.Категория	  	   = ТекстXML.ПолучитьАтрибут(ДанныеДок["Категория"]);
							
			СтруктураПараметров.СпособСоздания 	   = "User";
	
			ДатаДоставки = ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут(ДанныеДок["ДатаОтгрузки"]));
				
			СтруктураОбязательныхПолей = Новый Структура("Организация, Контрагент, ТорговаяТочка, ДоговорКонтрагента");
			
			ЗаполнитьОсновныеПараметрыДокумента_OLD(ОбъектДок, СтруктураПараметров, Менеджер, СтруктураОбязательныхПолей, "Продажа", Агент); // ЗаполнитьОсновныеПараметрыДокумента(ОбъектДок, СтруктураПараметров, Менеджер, СтруктураОбязательныхПолей, "Продажа", Агент); sk_190116
			
			УстановитьДоговорВДокументе(Агент, ОбъектДок);			
			
			//++Ratmir 2017-10-27
			//ОбъектДок.ДатаОтгрузки 	     = ДатаДоставки;
			Если НачалоДня(ОбъектДок.Дата) = НачалоДня(ДатаДоставки) Тогда
				ОбъектДок.ДатаОтгрузки 	     = Дата(1,1,1);
			Иначе
				ОбъектДок.ДатаОтгрузки 	     = ДатаДоставки;
			КонецЕсли;
			//--Ratmir 2017-10-27
			
			//%
			//ОбъектДок.СкладГруппа		 = ОсновнойСклад;
			ИдСклад = ТекстXML.ПолучитьАтрибут(ДанныеДок["Склад"]);
			Если ЗначениеЗаполнено(ИдСклад) Тогда
				ОбъектДок.СкладГруппа		 = ПолучитьСсылкуИзСправочника(ИдСклад, "Склады");
			КонецЕсли;
			
			текВидОплаты = ДанныеАгента["ВидОплатыПоУмолчанию"];
			Если текВидОплаты = Перечисления.ВидыДенежныхСредств.Наличные Тогда
				ОбъектДок.СтруктурнаяЕдиница = ДанныеАгента["ОсновнаяКасса"];
			ИначеЕсли текВидОплаты = Перечисления.ВидыДенежныхСредств.Безналичные  Тогда
				ОбъектДок.СтруктурнаяЕдиница = ОбъектДок.Организация.ОсновнойБанковскийСчет;
			КонецЕсли;
						
			Если ОсновнойСклад.Пустая() Тогда		
				ТекстСообщения = "ru='Для агента: " + Агент + " не указана настройка ""Основной склад""." +
				" В документе " + Строка(ОбъектДок) + " в качестве склада будет указан склад из настроек текущего пользователя'";
				ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обмен"], СтатусСообщения.Информация, Агент, ОбъектДок);  		
				ОснСклад = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");		
				ОбъектДок.СкладГруппа  = ОснСклад;
			КонецЕсли;				
			
			//получим из учетной политики признак учета НДС
			ПризнакУчетаНДС = Ложь;
			ЗапросУчетНДС = Новый Запрос;
			
			Если НаименованиеКонфигурации = "УправлениеПроизводственнымПредприятием" Тогда
				ЗапросУчетНДС.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
									|	ВЫБОР
									|		КОГДА УчетнаяПолитикаНалоговыйУчетСрезПоследних.СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.СистемыНалогообложения.Общая)
									|			ТОГДА ЛОЖЬ
									|		ИНАЧЕ ИСТИНА
									|	КОНЕЦ КАК ОрганизацияНеЯвляетсяПлательщикомНДС
									|ИЗ
									|	РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних КАК УчетнаяПолитикаНалоговыйУчетСрезПоследних
									|ГДЕ
									|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.Организация = &Организация";
			ИначеЕсли НаименованиеКонфигурации = "УправлениеТорговымПредприятиемДляКазахстана" Тогда
				ЗапросУчетНДС.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				                      |	НЕ УчетнаяПолитикаНалоговыйУчетСрезПоследних.ОрганизацияЯвляетсяПлательщикомНДС Как ОрганизацияНеЯвляетсяПлательщикомНДС
				                      |ИЗ
				                      |	РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних КАК УчетнаяПолитикаНалоговыйУчетСрезПоследних
				                      |ГДЕ
			    	                  |	УчетнаяПолитикаНалоговыйУчетСрезПоследних.Организация = &Организация";
									
			Иначе
				ЗапросУчетНДС.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			                      |	УчетнаяПолитикаНалоговыйУчетСрезПоследних.ОрганизацияНеЯвляетсяПлательщикомНДС
			                      |ИЗ
			                      |	РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних КАК УчетнаяПолитикаНалоговыйУчетСрезПоследних
			                      |ГДЕ
			                      |	УчетнаяПолитикаНалоговыйУчетСрезПоследних.Организация = &Организация";
			КонецЕсли;
			ЗапросУчетНДС.УстановитьПараметр("Организация", ОбъектДок.Организация.Ссылка);
			
			Выборка = ЗапросУчетНДС.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				ПризнакУчетаНДС = (Не Выборка.ОрганизацияНеЯвляетсяПлательщикомНДС);	
			КонецЦикла;
			
			ОбъектДок.УчитыватьНДС = ПризнакУчетаНДС;
	
			Если Не ОбъектДок.ЭтоНовый() Тогда
				ОбъектДок.Товары.Очистить();
				ОбъектДок.Услуги.Очистить();
			КонецЕсли;
	
			ОбщаяСкидка = Число(ТекстXML.ПолучитьАтрибут(ДанныеДок["Скидка"]));
			
			//Альфия 26.05.2017
			ВидДоставкиИД = ТекстXML.ПолучитьАтрибут(ДанныеДок["ВидыДоставки"]);
			Соответствие = СоответствиеСпр["Значения_ВидыДоставки"];
		    ВидДоставки = Соответствие[НРег(ВидДоставкиИД)];
			Если ВидДоставки = "До клиента" тогда
				//++Ratmir 2018-04-13
				текКонтрагент = ПолучитьСсылкуИзСправочника(ТекстXML.ПолучитьАтрибут(ДанныеДок["Контрагент"]), "Контрагенты");
				Если ЗначениеЗаполнено(текКонтрагент) Тогда 
					текАдресДоставки = УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(текКонтрагент, "Фактический");
					ОбъектДок.АдресДоставки = текАдресДоставки;	
				КонецЕсли;
				//--Ratmir 2018-04-13
			КонецЕсли;
			//Альфия 26.05.2017
			
			//++Ratmir 2018-04-17
			Если текНаименованиеКонфигурации = "КомплекснаяАвтоматизация" Тогда
				ОбъектДок.ОтражатьВБухгалтерскомУчете = Истина;
				ОбъектДок.ОтражатьВНалоговомУчете = Истина;
			КонецЕсли;	
			//++Ratmir 2018-04-17
				
		ИначеЕсли ТекстXML.Имя = эл_ТабличныеЧасти И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			идТчТовары = ДанныеДок["ТчТовары"];
			СтруктураРеквизитовТЧ = ДанныеДок[ДанныеДок["ТчТовары"]];
			Пока ТекстXML.Прочитать() Цикл				
			
				Если ТекстXML.Имя = эл_ТабличныеЧасти И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					Прервать;
				КонецЕсли;
				
				Если ОбъектДок = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Если ТекстXML.Имя = эл_ТабличнаяЧасть И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
					 идТабЧасти = НРег(ТекстXML.ЗначениеАтрибута(ат_Гуид));
					// Заполнение табличной части
					Если идТабЧасти = идТчТовары Тогда
						
						Пока ТекстXML.Прочитать() Цикл				
			
							Если ТекстXML.Имя = эл_ТабличнаяЧасть И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
								Прервать;
							КонецЕсли;
							
							Если ТекстXML.Имя = эл_Элемент И ТекстXML.ТипУзла = ТипУзлаXML.НАчалоЭлемента Тогда
								
								ИдНоменклатуры   = ТекстXML.ПолучитьАтрибут(СтруктураРеквизитовТЧ["Номенклатура"]);
								ИдХарактеристики = ТекстXML.ПолучитьАтрибут(СтруктураРеквизитовТЧ["ХарактеристикаНоменклатуры"]);
								ИдЕдиницыИзм	 = ТекстXML.ПолучитьАтрибут(СтруктураРеквизитовТЧ["ЕдиницаИзмерения"]);
								Количество		 = Число(ТекстXML.ПолучитьАтрибут(СтруктураРеквизитовТЧ["Количество"]));
								Цена			 = Число(ТекстXML.ПолучитьАтрибут(СтруктураРеквизитовТЧ["Цена"]));
								Сумма			 = Число(ТекстXML.ПолучитьАтрибут(СтруктураРеквизитовТЧ["Сумма"]));
								СуммаНДС		 = Число(ТекстXML.ПолучитьАтрибут(СтруктураРеквизитовТЧ["СуммаНДС"]));
								СтавкаНДС		 = Число(ТекстXML.ПолучитьАтрибут(СтруктураРеквизитовТЧ["СтавкаНДС"]));
								Вес				 = Число(ТекстXML.ПолучитьАтрибут(СтруктураРеквизитовТЧ["Вес"]));
								СкидкаТЧ		 = Число(ТекстXML.ПолучитьАтрибут(СтруктураРеквизитовТЧ["ПроцентСкидкиНаценки"])); 				
								ИдСклад			 = ТекстXML.ПолучитьАтрибут(СтруктураРеквизитовТЧ["Размещение"]);
								
								ТекНоменклатура  = ПолучитьСсылкуИзСправочника(ИдНоменклатуры, "Номенклатура");
								ТекЕдиница       = ПолучитьСсылкуИзСправочника(ИдЕдиницыИзм, "ЕдиницыИзмерения");
								
								Если ТекНоменклатура.Услуга Тогда
									НоваяСтрока = ОбъектДок.Услуги.Добавить();										
									НоваяСтрока.Содержание			= ТекНоменклатура.НаименованиеПолное;
								Иначе
									
									НоваяСтрока = ОбъектДок.Товары.Добавить();
									НоваяСтрока.ЕдиницаИзмерения	= ТекЕдиница;
									НоваяСтрока.Коэффициент 		= ТекЕдиница.Коэффициент;									
									//++2018-05-14 непонятная ситуация с резервированием.
									//--2018-05-14 зачем-то сделан обходной путь резервирования, хотя есть стандартный функционал в КА 1.1
									Если РезервироватьЗаказы Тогда
										НоваяСтрока.Размещение = ПолучитьСсылкуИзСправочника(ИдСклад, "Склады");
									КонецЕсли;									
									
									Если НРег(ТекНоменклатура.УникальныйИдентификатор()) <> НРег(ИдХарактеристики) Тогда
										НоваяСтрока.ХарактеристикаНоменклатуры = ПолучитьСсылкуИзСправочника(ИдХарактеристики, "ХарактеристикиНоменклатуры");
									КонецЕсли; 
									
								КонецЕсли;
								
								НоваяСтрока.Номенклатура		 = ТекНоменклатура;				
								НоваяСтрока.Количество           = Количество;
								НоваяСтрока.Цена      			 = Цена;
								НоваяСтрока.Сумма     			 = Сумма;
								
								Если ЗначениеЗаполнено(МинимальныйТипЦены) Тогда
							
								Если НаименованиеКонфигурации = "УправлениеТорговымПредприятиемДляКазахстана" Тогда 
									МинЦенаТовара = Вычислить("УправлениеЦенообразованием.ПолучитьЦенуНоменклатуры(ТекНоменклатура, , МинимальныйТипЦены, ТекущаяДата(), ТекЕдиница, мВалютаРегламентированногоУчета)");
								Иначе
									МинЦенаТовара = Вычислить("Ценообразование.ПолучитьЦенуНоменклатуры(ТекНоменклатура, , МинимальныйТипЦены, ТекущаяДата(), ТекЕдиница, мВалютаРегламентированногоУчета)");
								КонецЕсли;
									ЦенаСоСкидкой = Цена - (Цена*(СкидкаТЧ/100));	// проверяем больше ли цена с применением скидки чем минимально допустимая цена
									Если ЦенаСоСкидкой >= МинЦенаТовара Тогда
										НоваяСтрока.ПроцентСкидкиНаценки = СкидкаТЧ;
									Иначе
										НоваяСтрока.ПроцентСкидкиНаценки = 0;
									КонецЕсли;											   
								Иначе 
									НоваяСтрока.ПроцентСкидкиНаценки = СкидкаТЧ;
								КонецЕсли;								
								
								НоваяСтрока.СтавкаНДС 		     = ТекНоменклатура.СтавкаНДС;
								НоваяСтрока.СуммаНДС 		     = СуммаНДС;
								
								ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(НоваяСтрока, ОбъектДок);
								
								// Заполняем реквизиты табличной части.				
								Если НаименованиеКонфигурации = "УправлениеТорговымПредприятиемДляКазахстана" Тогда 
									ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(НоваяСтрока, ОбъектДок);
								Иначе
									ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(НоваяСтрока, ОбъектДок, ИмяДок);
								КонецЕсли;
								// Пересчитываем суммы табличных частей
								ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ОбъектДок);
								ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ОбъектДок);
								
								Если Не ТекНоменклатура.Услуга Тогда
									// Рассчитываем плановую себестоимость.
									ОбработкаТабличныхЧастей.РассчитатьПлановуюСебестоимостьВСтрокеТабЧасти(НоваяСтрока, ОбъектДок, УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяВалютаВзаиморасчетов"));
								КонецЕсли;								
															
							КонецЕсли;
						КонецЦикла; 	//конец TABLE
					КонецЕсли;						
				КонецЕсли;
			КонецЦикла;					//конец TABLES	
		ИначеЕсли ТекстXML.Имя = эл_Элемент И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			
			Если ОбъектДок = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			//Ratmir 2017-11-24
			Попытка
				//++ВГ 20171025
				//Пересчитать документ (а именно скидки)
				
				// ПЕРЕСЧИТЫВАЕМ ДОКУМЕНТ
				//++Ratmir 2018-05-17 Для УправлениеТорговымПредприятиемДляКазахстана 
				//СуммаДокументаБезСкидок = Ценообразование.ПолучитьСуммуДокументаБезСкидки(ОбъектДок.Товары) + Ценообразование.ПолучитьСуммуДокументаБезСкидки(ОбъектДок.Услуги);
				Если НаименованиеКонфигурации = "УправлениеТорговымПредприятиемДляКазахстана" Тогда 
					СуммаДокументаБезСкидок = Вычислить("УправлениеЦенообразованием.ПолучитьСуммуДокументаБезСкидки(ОбъектДок.Товары) + УправлениеЦенообразованием.ПолучитьСуммуДокументаБезСкидки(ОбъектДок.Услуги)");
				Иначе
					СуммаДокументаБезСкидок = Вычислить("Ценообразование.ПолучитьСуммуДокументаБезСкидки(ОбъектДок.Товары) + Ценообразование.ПолучитьСуммуДокументаБезСкидки(ОбъектДок.Услуги)");
				КонецЕсли;
				//--Ratmir 2018-05-17
				
				ДисконтнаяКарта = Справочники.ИнформационныеКарты.ПустаяСсылка(); 
				УчитыватьНДС = ОбъектДок.УчитыватьНДС;
				СуммаВключаетНДС = Ложь;
				ПолучитьЗначениеУчетнойПолитики = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(ОбъектДок.Дата, Ложь);
				мСписокФильтров = УправлениеПользователями.ПолучитьЗначениеПраваДляТекущегоПользователя(
				ПланыВидовХарактеристик.ПраваПользователей.НеОтпускатьТоварСЦенойНижеОпределенногоТипа, Неопределено);
				
				СтруктураПараметров1 = Новый Структура;
				СтруктураПараметров1.Вставить("ВидРеализации"                 , Перечисления.ВидыСкидок.Оптовая);
				СтруктураПараметров1.Вставить("СуммаДокумента"                , СуммаДокументаБезСкидок);
				СтруктураПараметров1.Вставить("Карта"                         , ДисконтнаяКарта);
				СтруктураПараметров1.Вставить("УчитыватьНДС"                  , УчитыватьНДС);
				СтруктураПараметров1.Вставить("СуммаВключаетНДС"              , СуммаВключаетНДС);
				СтруктураПараметров1.Вставить("ВалютаРегламентированногоУчета", мВалютаРегламентированногоУчета);
				СтруктураПараметров1.Вставить("УчетнаяПолитика"               , ПолучитьЗначениеУчетнойПолитики);
				
				ОбработкаТабличныхЧастей.РассчитатьСкидкиПриПродаже(ОбъектДок, ОбъектДок.Товары, СтруктураПараметров1, мМинимальныеЦены, мСписокФильтров);
				ОбработкаТабличныхЧастей.РассчитатьСкидкиПриПродаже(ОбъектДок, ОбъектДок.Услуги, СтруктураПараметров1, мМинимальныеЦены, мСписокФильтров);
				
				//МЕНЯЕМ СКИДКИ
				ПересчитатьТовары = Ложь;
				ПересчитатьУслуги = Ложь;	
				//Для товаров
				Для Каждого Стр из ОбъектДок.Товары Цикл
					Если Стр.ПроцентАвтоматическихСкидок > 0 Тогда
						Стр.ПроцентСкидкиНаценки = Стр.ПроцентСкидкиНаценки - Стр.ПроцентАвтоматическихСкидок;  
						ПересчитатьТовары = Истина;
					Конецесли;		
				КонецЦикла;
				
				//Для услуг
				Для Каждого Стр из ОбъектДок.Услуги Цикл
					Если Стр.ПроцентАвтоматическихСкидок > 0 Тогда
						Стр.ПроцентСкидкиНаценки = Стр.ПроцентСкидкиНаценки - Стр.ПроцентАвтоматическихСкидок;  
						ПересчитатьУслуги = Истина;
					Конецесли;		
				КонецЦикла;
				
				//ПЕРЕСЧИТЫВАЕМ ДОКУМЕНТ	
				Если ПересчитатьТовары = Истина Тогда
					ОбработкаТабличныхЧастей.РассчитатьСкидкиПриПродаже(ОбъектДок, ОбъектДок.Товары, СтруктураПараметров1, мМинимальныеЦены, мСписокФильтров);	
				КонецЕсли;
				Если ПересчитатьУслуги = Истина Тогда
					ОбработкаТабличныхЧастей.РассчитатьСкидкиПриПродаже(ОбъектДок, ОбъектДок.Услуги, СтруктураПараметров1, мМинимальныеЦены, мСписокФильтров);
				КонецЕсли;	
				
				//--ВГ 20171025
			Исключение
				
		    КонецПопытки;
			//--Ratmir 2017-11-24
			
			Результат = ЗаписатьДокумент(ОбъектДок, Агент, СтруктураПараметров, ЭтоНовый, Истина);
				
			Если Результат = 1 Тогда
				
				Если ОбъектДок.ПометкаУдаления Тогда
					ТекстСообщения = "ru='На основании документа: " + Строка(ОбъектДок.Ссылка) + " не будет создан документ ""Реализация товаров и услуг"", потому что он помечен на удаление'";
					ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обмен"], СтатусСообщения.Важное, Агент, ОбъектДок.Ссылка);
				Иначе
					РеализацияПоЗаявкам = НастройкиОбработки["РеализацияПоЗаявкам"];
					РеализацияПоЗаявкам = ?(РеализацияПоЗаявкам = Неопределено, НастройкиОбработкиПоУмолчанию[РеализацияПоЗаявкам], РеализацияПоЗаявкам);
					Если РеализацияПоЗаявкам = 1 Тогда			//Создавать на основании заявки реализацию (метод ""Ввод на основании"")
						ВвестиРеализациюНаОснованииЗаявки(ОбъектДок, Агент);
					КонецЕсли;	
				КонецЕсли;	
				
				ЗаписатьРегЗначениеСвойстваОбъекта(ОбъектДок, СтруктураПараметров, "КоординатыGPS");
				ЗаписатьРегЗначениеСвойстваОбъекта(ОбъектДок, СтруктураПараметров, "Категория");
				
			КонецЕсли;
			
			ОбъектДок = Неопределено;		//обнуляем переменную
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

// vd_180809 Добавлена
//
// Параметры:
//  ТекстXML		 - 	 - 
//  стррПараметры	 - 	Структура - 
//	стррПараметры.Дата  				 - Дата      - Дата документа. 
//	стррПараметры.Номер                  - Строка    - Номер Документа. 
//	стррПараметры.ИдОбъекта              - ГУИД      - Ид документа из МУ (атрибут GUID из МУ)
//	стррПараметры.ЭтоНовый               - Булево    - Ложь если в 1С уже есть документ с стррПараметры.ИдОбъекта
//	стррПараметры.Проведен               - Булево    - Истина если док проведен в МУ
//	стррПараметры.ПропускДокумента       - Булево    - Истина если документ не нужно загружать
//	стррПараметры.ПричинаПропуска        - Строка    - Причина по какой не нужно загружать документ в 1С
//	стррПараметры.ОбъектДокумента        - Ссылка    - Ссылка на документ, если в системе уже есть такой документ то заполненна
//	стррПараметры.Синоним                - Строка    - Синоним менеджера документа из методанных. ДокМенеджер.ПустаяСсылка().Метаданные().Синоним  Например для реализации "Реализация товаров и услуг"
//	стррПараметры.Представление          - Строка    - Представление документа в МУ.
//	стррПараметры.ВидДокумента           - Строка    - Вид документа. Например "РеализацияТоваровУслуг"
//	стррПараметры.ЭтоВиртуальныйДокумент - Булево    - Истина если это виртуальный документ
//
Процедура ЗагрузитьДокументРеализация(ТекстXML, стррПараметры, ЗагружаемыеОбъекты, ОшибкаЧтенияITEM)
	
	ОбъектДок = стррПараметры.ОбъектДокумента;
	
	стррПоляИзМУ = Новый Структура;
	стррПоляИзМУ.Вставить("идОрганизация"     , ТекстXML.ПолучитьАтрибут("A01"));
	стррПоляИзМУ.Вставить("идКонтрагент"	  , ТекстXML.ПолучитьАтрибут("A02"));
	стррПоляИзМУ.Вставить("идТоргТочка" 	  , ТекстXML.ПолучитьАтрибут("A03"));
	стррПоляИзМУ.Вставить("идДоговор"   	  , ТекстXML.ПолучитьАтрибут("A04"));
	стррПоляИзМУ.Вставить("Скидка"	 		  , ТекстXML.ПолучитьАтрибут("A05"));
	стррПоляИзМУ.Вставить("идТипЦен" 		  , ТекстXML.ПолучитьАтрибут("A06"));
	стррПоляИзМУ.Вставить("СуммаДокумента"    , ТекстXML.ПолучитьАтрибут("A07"));
	стррПоляИзМУ.Вставить("Вес" 			  , ТекстXML.ПолучитьАтрибут("A08"));
	стррПоляИзМУ.Вставить("Комментарий" 	  , ТекстXML.ПолучитьАтрибут("A09"));
	стррПоляИзМУ.Вставить("ИдКатегория" 	  , ТекстXML.ПолучитьАтрибут("A010"));
	стррПоляИзМУ.Вставить("ИдДокОсн" 		  , ТекстXML.ПолучитьАтрибут("A011"));
	стррПоляИзМУ.Вставить("Широта"	 		  , ТекстXML.ПолучитьАтрибут("A012"));
	стррПоляИзМУ.Вставить("Долгота" 		  , ТекстXML.ПолучитьАтрибут("A013"));
	стррПоляИзМУ.Вставить("ЕстьПодчиненные"   , ТекстXML.ПолучитьАтрибут("A014"));
	стррПоляИзМУ.Вставить("идМерчендайзинг"	  , ТекстXML.ПолучитьАтрибут("A015"));
	стррПоляИзМУ.Вставить("ДатаНачала"	 	  , ТекстXML.ПолучитьАтрибут("A016"));
	стррПоляИзМУ.Вставить("ДатаОкончания" 	  , ТекстXML.ПолучитьАтрибут("A017"));
	стррПоляИзМУ.Вставить("идВидОплаты" 	  , ТекстXML.ПолучитьАтрибут("A018"));
	стррПоляИзМУ.Вставить("ИдСчетФактура" 	  , ТекстXML.ПолучитьАтрибут("A019"));
	стррПоляИзМУ.Вставить("ДатаТочкиТрека"	  , ТекстXML.ПолучитьАтрибут("A020"));
	стррПоляИзМУ.Вставить("Распечатан"	 	  , ТекстXML.ПолучитьАтрибут("A021"));
	стррПоляИзМУ.Вставить("СпособСоздания"	  , ТекстXML.ПолучитьАтрибут("A022"));
	стррПоляИзМУ.Вставить("ПереданККТ"	 	  , ТекстXML.ПолучитьАтрибут("A023"));
	стррПоляИзМУ.Вставить("АдресОтправкиЧека" , ТекстXML.ПолучитьАтрибут("A024"));
	
	ЗаполнитьОсновныеПараметрыДокумента(ОбъектДок, стррПоляИзМУ, стррПараметры);
	
	
	//////++ ТАБЛИЧНАЯ ЧАСТЬ //////
	
	Если стррПараметры.ЭтоНовый = Ложь Тогда
		ОбъектДок.Товары.Очистить();		
	КонецЕсли;
	
 	ТекстXML.Прочитать();
	Если ТекстXML.Имя = "TABLES" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		ТекстXML.Прочитать();
		Если ВРег(СокрЛП(ТекстXML.ПолучитьАтрибут("GUID"))) = "E4D61E0A-1D62-48D7-B70C-BCBA935D377A" Тогда
			
			// ОБРАБОТКА ТАБЛИЧНОЙ ЧАСТИ //
			стррСтрокаТЧ = ПолучитьСтруктуруСтрокиТЧ(стррПараметры.ВидДокумента);
			Пока ТекстXML.Прочитать() Цикл
				//{{vd_180903 Если ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				Если НЕ ТекстXML.Имя = "ITEM" Тогда
				 	Прервать;
				ИначеЕсли  ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					Продолжить;
				КонецЕсли;				
				
				стррСтрокаТЧ.ИдНоменклатуры 	= ТекстXML.ПолучитьАтрибут("A01");
				стррСтрокаТЧ.ИдХарактеристики 	= ТекстXML.ПолучитьАтрибут("A02");
				стррСтрокаТЧ.ИдЕдиницыИзм 		= ТекстXML.ПолучитьАтрибут("A03");
				стррСтрокаТЧ.Количество 		= Число(ТекстXML.ПолучитьАтрибут("A04"));
				стррСтрокаТЧ.Цена 				= Число(ТекстXML.ПолучитьАтрибут("A05"));
				стррСтрокаТЧ.Сумма 				= Число(ТекстXML.ПолучитьАтрибут("A06"));
				стррСтрокаТЧ.СуммаНДС 			= Число(ТекстXML.ПолучитьАтрибут("A07"));
				//стррСтрокаТЧ.Вес 				= Число(ТекстXML.ПолучитьАтрибут("A08"));
				стррСтрокаТЧ.СкидкаТЧ 			= Число(ТекстXML.ПолучитьАтрибут("A09"));
				стррСтрокаТЧ.СтавкаНДС 			= Число(ТекстXML.ПолучитьАтрибут("A010"));                              
				//стррСтрокаТЧ.ИдСклад 			= ТекстXML.ПолучитьАтрибут("A011");
				//стррСтрокаТЧ.ИдВидЦены 		= ТекстXML.ПолучитьАтрибут("A015");
					
				ДобавитьСтрокуТабличнойЧастиВДокумент(ОбъектДок, стррПараметры.ВидДокумента, стррСтрокаТЧ);
				
			КонецЦикла;
						
		КонецЕсли;
	ИначеЕсли ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		ОшибкаЧтенияITEM = Истина;
	КонецЕсли;
	
	//////-- ТАБЛИЧНАЯ ЧАСТЬ //////
	
	// ПЕРЕСЧИТЫВАЕМ ДОКУМЕНТ
	
	Если НаименованиеКонфигурации = "УправлениеТорговымПредприятиемДляКазахстана" Тогда 
		СуммаДокументаБезСкидок = Вычислить("УправлениеЦенообразованием.ПолучитьСуммуДокументаБезСкидки(ОбъектДок.Товары) + УправлениеЦенообразованием.ПолучитьСуммуДокументаБезСкидки(ОбъектДок.Услуги)");
	Иначе
		СуммаДокументаБезСкидок = Вычислить("Ценообразование.ПолучитьСуммуДокументаБезСкидки(ОбъектДок.Товары) + Ценообразование.ПолучитьСуммуДокументаБезСкидки(ОбъектДок.Услуги)");
	КонецЕсли;
	
	стррПараметрыРасчетаСкидок = Новый Структура;
	стррПараметрыРасчетаСкидок.Вставить("ВидРеализации"                 , Перечисления.ВидыСкидок.Оптовая);
	стррПараметрыРасчетаСкидок.Вставить("СуммаДокумента"                , СуммаДокументаБезСкидок);
	стррПараметрыРасчетаСкидок.Вставить("Карта"                         , ОбъектДок.ДисконтнаяКарта);
	стррПараметрыРасчетаСкидок.Вставить("УчитыватьНДС"                  , ОбъектДок.УчитыватьНДС);                      
	стррПараметрыРасчетаСкидок.Вставить("СуммаВключаетНДС"              , ОбъектДок.СуммаВключаетНДС);
	стррПараметрыРасчетаСкидок.Вставить("ВалютаРегламентированногоУчета", мВалютаРегламентированногоУчета);

	РассчитатьСкидкиПоРежиму(ОбъектДок, стррПараметрыРасчетаСкидок); // sk_190516 Выполняем расчет скидок в рамках (MOD-520)
	
	// Процедура заполняет табличную часть при оперативном проведении
	Если Константы.ИспользоватьСерииНоменклатуры.Получить() Тогда
		ОбъектДок.ЗаполнитьТабличныеЧастиПередПроведением(Истина);  
	КонецЕсли;
	
	////++ Помещение в виртуальную таблицу ЗагружаемыеОбъекты(определяется функцией ЗагруженныеОбъектыИзФайла()) для дальнейшей записи черезЗакончитьЗагрузкуДокументов  
	стррПараметры.стррКоординаты.Широта  = стррПоляИзМУ.Широта;
	стррПараметры.стррКоординаты.Долгота = стррПоляИзМУ.Долгота;
	стррПараметры.идКатегория 			 = стррПоляИзМУ.ИдКатегория;
	
	НоваяСтрока = ЗагружаемыеОбъекты.тзДокументыРеализаций.Добавить();
	НоваяСтрока.Документ      = ОбъектДок;
	НоваяСтрока.стррПараметры = стррПараметры;
	НоваяСтрока.ИдОснования   = стррПоляИзМУ.ИдДокОсн;
	////-- Помещение в виртуальную таблицу для дальнейшей записи через 
	
	//
	////////++ ЗАПИСЬ //////
	//СтруктураПараметров = Новый Структура;
	//СтруктураПараметров.Вставить("Дата", стррПараметры.Дата);
	//Результат = ЗаписатьДокумент(ОбъектДок, выбАгент, СтруктураПараметров, стррПараметры.ЭтоНовый, Истина);
	//
	//Если Результат = 1 Тогда
	//	
	//	//Создание документа Заказ на основании Реализации.
	//	Если ОбъектДок.ПометкаУдаления Тогда
	//		ТекстСообщения = "ru='На основании документа: " + Строка(ОбъектДок.Ссылка) + " не будет создан документ ""Реализация товаров и услуг"", потому что он помечен на удаление'";
	//		ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обмен"], СтатусСообщения.Важное, выбАгент, ОбъектДок.Ссылка);
	//	Иначе
	//		РеализацияПоЗаявкам = НастройкиОбработки["РеализацияПоЗаявкам"];
	//		РеализацияПоЗаявкам = ?(РеализацияПоЗаявкам = Неопределено, НастройкиОбработкиПоУмолчанию[РеализацияПоЗаявкам], РеализацияПоЗаявкам);
	//		Если РеализацияПоЗаявкам = 1 Тогда			
	//			ВвестиРеализациюНаОснованииЗаявки(ОбъектДок, выбАгент);
	//		КонецЕсли;	
	//	КонецЕсли;	
	//	
	//	СтруктураПараметров.Вставить("КоординатыGPS", стррПоляИзМУ.Широта + Имена["СимволРазделительGPS"] + стррПоляИзМУ.Долгота);
	//	СтруктураПараметров.Вставить("Категория",     стррПоляИзМУ.ИдКатегория);
	//	ЗаписатьРегЗначениеСвойстваОбъекта(ОбъектДок, СтруктураПараметров, "КоординатыGPS");
	//	ЗаписатьРегЗначениеСвойстваОбъекта(ОбъектДок, СтруктураПараметров, "Категория");
	//	
	//КонецЕсли;
	////////-- ЗАПИСЬ //////    
	
КонецПроцедуры 

// vd_180821 Добавлена
//
// Параметры:
//  ТекстXML		 - 	 - 
//  стррПараметры	 - 	Структура - 
//	стррПараметры.Дата  				 - Дата      - Дата документа. 
//	стррПараметры.Номер                  - Строка    - Номер Документа. 
//	стррПараметры.ИдОбъекта              - ГУИД      - Ид документа из МУ (атрибут GUID из МУ)
//	стррПараметры.ЭтоНовый               - Булево    - Ложь если в 1С уже есть документ с стррПараметры.ИдОбъекта
//	стррПараметры.Проведен               - Булево    - Истина если док проведен в МУ
//	стррПараметры.ПропускДокумента       - Булево    - Истина если документ не нужно загружать
//	стррПараметры.ПричинаПропуска        - Строка    - Причина по какой не нужно загружать документ в 1С
//	стррПараметры.ОбъектДокумента        - Ссылка    - Ссылка на документ, если в системе уже есть такой документ то заполненна
//	стррПараметры.Синоним                - Строка    - Синоним менеджера документа из методанных. ДокМенеджер.ПустаяСсылка().Метаданные().Синоним  Например для реализации "Реализация товаров и услуг"
//	стррПараметры.Представление          - Строка    - Представление документа в МУ.
//	стррПараметры.ВидДокумента           - Строка    - Вид документа. Например "РеализацияТоваровУслуг"
//	стррПараметры.ЭтоВиртуальныйДокумент - Булево    - Истина если это виртуальный документ
//	стррПараметры.стррКоординаты         - Структура - Новый Структура("КоординатыGPS, Широта, Долгота")
//	стррПараметры.идКатегория 			 - Строка    - Категория документа
//  ЗагружаемыеОбъекты - Структура - Заносим обьекты которые нужно загрузить позже в 1с, тк документ основание возможно еще не записан
//
Процедура ЗагрузитьДокументПоступление(ТекстXML, стррПараметры, ЗагружаемыеОбъекты, ОшибкаЧтенияITEM)
	
	ОбъектДок = стррПараметры.ОбъектДокумента;
	
	стррПоляИзМУ = Новый Структура;
	стррПоляИзМУ.Вставить("идОрганизация"     , ТекстXML.ПолучитьАтрибут("A01"));
	стррПоляИзМУ.Вставить("идКонтрагент"	  , ТекстXML.ПолучитьАтрибут("A02"));
	стррПоляИзМУ.Вставить("идТоргТочка" 	  , ТекстXML.ПолучитьАтрибут("A03"));
	стррПоляИзМУ.Вставить("идДоговор"   	  , ТекстXML.ПолучитьАтрибут("A04"));
	стррПоляИзМУ.Вставить("Скидка"	 		  , ТекстXML.ПолучитьАтрибут("A05"));
	стррПоляИзМУ.Вставить("идТипЦен" 		  , ТекстXML.ПолучитьАтрибут("A06"));
	стррПоляИзМУ.Вставить("СуммаДокумента"    , ТекстXML.ПолучитьАтрибут("A07"));
	стррПоляИзМУ.Вставить("Вес" 			  , ТекстXML.ПолучитьАтрибут("A08"));
	стррПоляИзМУ.Вставить("Комментарий" 	  , ТекстXML.ПолучитьАтрибут("A09"));
	стррПоляИзМУ.Вставить("ИдКатегория" 	  , ТекстXML.ПолучитьАтрибут("A010"));
	стррПоляИзМУ.Вставить("ИдДокОсн" 		  , ТекстXML.ПолучитьАтрибут("A011"));
	стррПоляИзМУ.Вставить("ЕстьПодчиненные"	  , ТекстXML.ПолучитьАтрибут("A012"));
	стррПоляИзМУ.Вставить("Широта"	 		  , ТекстXML.ПолучитьАтрибут("A013"));
	стррПоляИзМУ.Вставить("Долгота" 		  , ТекстXML.ПолучитьАтрибут("A014"));
	стррПоляИзМУ.Вставить("идСклад" 		  , ТекстXML.ПолучитьАтрибут("A016"));
	стррПоляИзМУ.Вставить("ДатаНачала"	 	  , ТекстXML.ПолучитьАтрибут("A017"));
	стррПоляИзМУ.Вставить("ДатаОкончания" 	  , ТекстXML.ПолучитьАтрибут("A018"));
	стррПоляИзМУ.Вставить("идВидОплаты" 	  , ТекстXML.ПолучитьАтрибут("A019"));
	стррПоляИзМУ.Вставить("ДатаТочкиТрека"	  , ТекстXML.ПолучитьАтрибут("A020"));
	стррПоляИзМУ.Вставить("Распечатан"	 	  , ТекстXML.ПолучитьАтрибут("A021"));
	стррПоляИзМУ.Вставить("ПереданККТ"	 	  , ТекстXML.ПолучитьАтрибут("A022"));	
	
	//vd_180829
	ОбъектДок.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
	
	ЗаполнитьОсновныеПараметрыДокумента(ОбъектДок, стррПоляИзМУ, стррПараметры);
		
	//////++ ТАБЛИЧНАЯ ЧАСТЬ //////
	Если стррПараметры.ЭтоНовый = Ложь Тогда
		ОбъектДок.Товары.Очистить();		
	КонецЕсли;
	
 	ТекстXML.Прочитать();
	Если ТекстXML.Имя = "TABLES" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		ТекстXML.Прочитать();
		Если ВРег(СокрЛП(ТекстXML.ПолучитьАтрибут("GUID"))) = "A10221FA-5AC6-4E8C-80D8-D40D8DFC7779" Тогда
			// ОБРАБОТКА ТАБЛИЧНОЙ ЧАСТИ //
			стррСтрокаТЧ = ПолучитьСтруктуруСтрокиТЧ(стррПараметры.ВидДокумента);
			Пока ТекстXML.Прочитать() Цикл
				//vd_180903 Если ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				Если НЕ ТекстXML.Имя = "ITEM" Тогда
				 	Прервать;
				ИначеЕсли  ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					Продолжить;
				КонецЕсли;	
				
				стррСтрокаТЧ.ИдНоменклатуры 	= ТекстXML.ПолучитьАтрибут("A01");
				стррСтрокаТЧ.ИдХарактеристики 	= ТекстXML.ПолучитьАтрибут("A02");
				стррСтрокаТЧ.ИдЕдиницыИзм 		= ТекстXML.ПолучитьАтрибут("A03");
				стррСтрокаТЧ.Количество 		= Число(ТекстXML.ПолучитьАтрибут("A04"));
				стррСтрокаТЧ.Цена 				= Число(ТекстXML.ПолучитьАтрибут("A05"));
				стррСтрокаТЧ.Сумма 				= Число(ТекстXML.ПолучитьАтрибут("A06"));
				стррСтрокаТЧ.СуммаНДС 			= Число(ТекстXML.ПолучитьАтрибут("A07"));
				//стррСтрокаТЧ.Вес 				= Число(ТекстXML.ПолучитьАтрибут("A08"));
				//стррСтрокаТЧ.СкидкаТЧ 		= Число(ТекстXML.ПолучитьАтрибут("A09"));
				стррСтрокаТЧ.СтавкаНДС 			= Число(ТекстXML.ПолучитьАтрибут("A010"));                              
				//стррСтрокаТЧ.СуммаСкидки 		= ТекстXML.ПолучитьАтрибут("A011");
				
				ДобавитьСтрокуТабличнойЧастиВДокумент(ОбъектДок, стррПараметры.ВидДокумента, стррСтрокаТЧ);
				
			КонецЦикла;
			
			//vd_180917 перенесена из ДобавитьСтрокуТабличнойЧастиВДокумент() 
			Если Константы.ИспользоватьСерииНоменклатуры.Получить() Тогда
				//(( sk_181010 в КА, УТ наименование метода ЗаполнитьТабличныеЧастиПередПроведениемУпр()
				//Если текНаименованиеКонфигурации = "КомплекснаяАвтоматизация" Тогда
				//	ОбъектДок.ЗаполнитьТабличныеЧастиПередПроведением(Истина);
				//Иначе //УТ
				//	ОбъектДок.ЗаполнитьТабличныеЧастиПередПроведениемУпр();
				//КонецЕсли;
				
				//(( sk_190214 В конфигурации "Управление торговлей для Казахстана" (2.2.18.5) необходимо передавать параметр Отказ 
				// ОбъектДок.ЗаполнитьТабличныеЧастиПередПроведениемУпр();
				Если НаименованиеКонфигурации = "УправлениеТорговымПредприятиемДляКазахстана" Тогда // текНаименованиеКонфигурации = "УправлениеТорговлейДляКазахстана" sk_190604 Изменено условие в рамках (MOD-575)
					 ОбъектДок.ЗаполнитьТабличныеЧастиПередПроведениемУпр(Истина);
				Иначе
					 ОбъектДок.ЗаполнитьТабличныеЧастиПередПроведениемУпр();
				КонецЕсли; 
				//)) sk_190214
				//)) sk_181010
			КонецЕсли;

			
		КонецЕсли;
	ИначеЕсли ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		ОшибкаЧтенияITEM = Истина;
	КонецЕсли;
	//////-- ТАБЛИЧНАЯ ЧАСТЬ //////
	
	////++ Помещение в виртуальную таблицу ЗагружаемыеОбъекты(определяется функцией ЗагруженныеОбъектыИзФайла()) для дальнейшей записи черезЗакончитьЗагрузкуДокументов  
	стррПараметры.стррКоординаты.Широта  = стррПоляИзМУ.Широта;
	стррПараметры.стррКоординаты.Долгота = стррПоляИзМУ.Долгота;
	стррПараметры.идКатегория 			 = стррПоляИзМУ.ИдКатегория;
	
	НоваяСтрока = ЗагружаемыеОбъекты.тзДокументыПоступлений.Добавить();
	НоваяСтрока.Документ      = ОбъектДок;
	НоваяСтрока.стррПараметры = стррПараметры;
	НоваяСтрока.ИдОснования   = стррПоляИзМУ.ИдДокОсн;
	////-- Помещение в виртуальную таблицу для дальнейшей записи через 
	
КонецПроцедуры 

// vd_180822 Добавлена
//
// Параметры:
//  ТекстXML		 - 	 - 
//  стррПараметры	 - 	Структура - 
//	стррПараметры.Дата  				 - Дата      - Дата документа. 
//	стррПараметры.Номер                  - Строка    - Номер Документа. 
//	стррПараметры.ИдОбъекта              - ГУИД      - Ид документа из МУ (атрибут GUID из МУ)
//	стррПараметры.ЭтоНовый               - Булево    - Ложь если в 1С уже есть документ с стррПараметры.ИдОбъекта
//	стррПараметры.Проведен               - Булево    - Истина если док проведен в МУ
//	стррПараметры.ПропускДокумента       - Булево    - Истина если документ не нужно загружать
//	стррПараметры.ПричинаПропуска        - Строка    - Причина по какой не нужно загружать документ в 1С
//	стррПараметры.ОбъектДокумента        - Ссылка    - Ссылка на документ, если в системе уже есть такой документ то заполненна
//	стррПараметры.Синоним                - Строка    - Синоним менеджера документа из методанных. ДокМенеджер.ПустаяСсылка().Метаданные().Синоним  Например для реализации "Реализация товаров и услуг"
//	стррПараметры.Представление          - Строка    - Представление документа в МУ.
//	стррПараметры.ВидДокумента           - Строка    - Вид документа. Например "РеализацияТоваровУслуг"
//	стррПараметры.ЭтоВиртуальныйДокумент - Булево    - Истина если это виртуальный документ
//	стррПараметры.стррКоординаты         - Структура - Новый Структура("КоординатыGPS, Широта, Долгота")
//	стррПараметры.идКатегория 			 - Строка    - Категория документа
//  ЗагружаемыеОбъекты - Структура - Заносим обьекты которые нужно загрузить позже в 1с, тк документ основание возможно еще не записан
//
Процедура ЗагрузитьДокументПеремещение(ТекстXML, стррПараметры, ОшибкаЧтенияITEM);
	
	ОбъектДок = стррПараметры.ОбъектДокумента;
	
	стррПоляИзМУ = Новый Структура;
	стррПоляИзМУ.Вставить("идОрганизация"     , ТекстXML.ПолучитьАтрибут("A01"));
	стррПоляИзМУ.Вставить("ИдКатегория" 	  , ТекстXML.ПолучитьАтрибут("A02"));
	стррПоляИзМУ.Вставить("идСкладОтправитель", ТекстXML.ПолучитьАтрибут("A03"));
	стррПоляИзМУ.Вставить("идСкладПолучатель" , ТекстXML.ПолучитьАтрибут("A04"));
	стррПоляИзМУ.Вставить("СуммаДокумента"    , ТекстXML.ПолучитьАтрибут("A05"));
	стррПоляИзМУ.Вставить("Комментарий" 	  , ТекстXML.ПолучитьАтрибут("A06"));
	стррПоляИзМУ.Вставить("Широта"	 		  , ТекстXML.ПолучитьАтрибут("A07"));
	стррПоляИзМУ.Вставить("Долгота" 		  , ТекстXML.ПолучитьАтрибут("A08"));
	стррПоляИзМУ.Вставить("идТипЦен" 		  , ТекстXML.ПолучитьАтрибут("A09"));
	стррПоляИзМУ.Вставить("ДатаНачала"	 	  , ТекстXML.ПолучитьАтрибут("A010"));
	стррПоляИзМУ.Вставить("ДатаОкончания" 	  , ТекстXML.ПолучитьАтрибут("A011"));
	стррПоляИзМУ.Вставить("ДатаТочкиТрека"	  , ТекстXML.ПолучитьАтрибут("A012"));
	
	//ВидОперации
	ОбъектДок.ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция;
	
	//СкладОтправитель
	ОбъектДок.СкладОтправитель = ПолучитьИПроверитьСсылкуИзСправочника(стррПоляИзМУ.идСкладОтправитель, "Склады");
	
	//СкладПолучатель
	ОбъектДок.СкладПолучатель = ПолучитьИПроверитьСсылкуИзСправочника(стррПоляИзМУ.идСкладПолучатель, "Склады");
	
	//НДСвСтоимостиТоваров.
	//В КА 1.1.106.1 документ Перемещение есть реквизит НДСвСтоимостиТоваров
	//В УТ 10.3.50.2 документ Перемещение есть реквизит НДСвСтоимостиТоваров
	//В УТ Казахстан 2.2.18.5 документ Перемещение нет реквизита НДСвСтоимостиТоваров
		
	//(( sk_190214 в конфигурации "Управление торговлей для Казахстана" (2.2.18.5)/Управление торговым предприятием для Казахстана (2.0.16.1)  отсутствует реквизит НДСвСтоимостиТоваров  
	// ОбъектДок.НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
	Если Не НаименованиеКонфигурации = "УправлениеТорговымПредприятиемДляКазахстана" Тогда // Если Не текНаименованиеКонфигурации = "УправлениеТорговлейДляКазахстана" Тогда sk_190604 Изменено условие в рамках (MOD-575) 
		ОбъектДок.НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
	КонецЕсли;
	//)) sk_190214

	ЗаполнитьОсновныеПараметрыДокумента(ОбъектДок, стррПоляИзМУ, стррПараметры);
	
	//////++ ТАБЛИЧНАЯ ЧАСТЬ //////
	Если стррПараметры.ЭтоНовый = Ложь Тогда
		ОбъектДок.Товары.Очистить();		
	КонецЕсли;
	
 	ТекстXML.Прочитать();
	Если ТекстXML.Имя = "TABLES" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		ТекстXML.Прочитать();
		Если ВРег(СокрЛП(ТекстXML.ПолучитьАтрибут("GUID"))) = "3097F10A-BEE6-4A76-AD7A-D4663C9B73EC" Тогда
			// ОБРАБОТКА ТАБЛИЧНОЙ ЧАСТИ //
			стррСтрокаТЧ = ПолучитьСтруктуруСтрокиТЧ(стррПараметры.ВидДокумента);
			Пока ТекстXML.Прочитать() Цикл
				//vd_180903 Если ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				Если НЕ ТекстXML.Имя = "ITEM" Тогда
				 	Прервать;
				ИначеЕсли  ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					Продолжить;
				КонецЕсли;	
				
				стррСтрокаТЧ.ИдНоменклатуры 	= ТекстXML.ПолучитьАтрибут("A01");
				стррСтрокаТЧ.ИдХарактеристики 	= ТекстXML.ПолучитьАтрибут("A02");
				стррСтрокаТЧ.ИдЕдиницыИзм 		= ТекстXML.ПолучитьАтрибут("A03");
				стррСтрокаТЧ.Количество 		= Число(ТекстXML.ПолучитьАтрибут("A04"));
				стррСтрокаТЧ.Цена 				= Число(ТекстXML.ПолучитьАтрибут("A05"));
				стррСтрокаТЧ.Сумма 			    = Число(ТекстXML.ПолучитьАтрибут("A06"));
				//стррСтрокаТЧ.СуммаНДС 		= Число(ТекстXML.ПолучитьАтрибут("A07"));
				//стррСтрокаТЧ.Вес 				= Число(ТекстXML.ПолучитьАтрибут("A08"));
				//стррСтрокаТЧ.СкидкаТЧ 		= Число(ТекстXML.ПолучитьАтрибут("A09"));
				//стррСтрокаТЧ.СтавкаНДС 		= Число(ТекстXML.ПолучитьАтрибут("A010"));                              
				//стррСтрокаТЧ.СуммаСкидки 		= ТекстXML.ПолучитьАтрибут("A011");
					
				ДобавитьСтрокуТабличнойЧастиВДокумент(ОбъектДок, стррПараметры.ВидДокумента, стррСтрокаТЧ);	
				
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		ОшибкаЧтенияITEM = Истина;
	КонецЕсли;
	//////-- ТАБЛИЧНАЯ ЧАСТЬ //////
	
	
	//////++ ЗАПИСЬ //////
	//Этот документ сразу записываются тк на его основе нельзя создать 
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Дата", стррПараметры.Дата);
	Результат = ЗаписатьДокумент(ОбъектДок, выбАгент, СтруктураПараметров, стррПараметры.ЭтоНовый, Истина);
	
	Если Результат = 1 Тогда
		СтруктураПараметров.Вставить("КоординатыGPS", стррПоляИзМУ.Широта + Имена["СимволРазделительGPS"] + стррПоляИзМУ.Долгота);
		СтруктураПараметров.Вставить("Категория",     стррПоляИзМУ.ИдКатегория);
		ЗаписатьРегЗначениеСвойстваОбъекта(ОбъектДок, СтруктураПараметров, "КоординатыGPS");
		ЗаписатьРегЗначениеСвойстваОбъекта(ОбъектДок, СтруктураПараметров, "Категория");
	КонецЕсли;
	//////-- ЗАПИСЬ //////
	
КонецПроцедуры 

// vd_180828 Добавлена
//Логика уже была реализована, пренес из предыдущей функции, Имеются очевидные недочеты
//
// Параметры:
//  ТекстXML		 - 	 - 
//  стррПараметры	 - 	Структура - 
//	стррПараметры.Дата  				 - Дата      - Дата документа. 
//	стррПараметры.Номер                  - Строка    - Номер Документа. 
//	стррПараметры.ИдОбъекта              - ГУИД      - Ид документа из МУ (атрибут GUID из МУ)
//	стррПараметры.ЭтоНовый               - Булево    - Ложь если в 1С уже есть документ с стррПараметры.ИдОбъекта
//	стррПараметры.Проведен               - Булево    - Истина если док проведен в МУ
//	стррПараметры.ПропускДокумента       - Булево    - Истина если документ не нужно загружать
//	стррПараметры.ПричинаПропуска        - Строка    - Причина по какой не нужно загружать документ в 1С
//	стррПараметры.ОбъектДокумента        - Ссылка    - Ссылка на документ, если в системе уже есть такой документ то заполненна
//	стррПараметры.Синоним                - Строка    - Синоним менеджера документа из методанных. ДокМенеджер.ПустаяСсылка().Метаданные().Синоним  Например для реализации "Реализация товаров и услуг"
//	стррПараметры.Представление          - Строка    - Представление документа в МУ.
//	стррПараметры.ВидДокумента           - Строка    - Вид документа. Например "РеализацияТоваровУслуг"
//	стррПараметры.ЭтоВиртуальныйДокумент - Булево    - Истина если это виртуальный документ
//	стррПараметры.стррКоординаты         - Структура - Новый Структура("КоординатыGPS, Широта, Долгота")
//	стррПараметры.идКатегория 			 - Строка    - Категория документа
//  ЗагружаемыеОбъекты - Структура - Заносим обьекты которые нужно загрузить позже в 1с, тк документ основание возможно еще не записан
//
Процедура ЗагрузитьДокументОрдер(ТекстXML, стррПараметры, ЗагружаемыеОбъекты)
	
	ОбъектДок = стррПараметры.ОбъектДокумента;
	
	стррПоляИзМУ = Новый Структура;
	стррПоляИзМУ.Вставить("идОрганизация"     , ТекстXML.ПолучитьАтрибут("A01"));
	стррПоляИзМУ.Вставить("идКонтрагент"	  , ТекстXML.ПолучитьАтрибут("A02"));
	стррПоляИзМУ.Вставить("идТоргТочка" 	  , ТекстXML.ПолучитьАтрибут("A03"));
	стррПоляИзМУ.Вставить("идДоговор"   	  , ТекстXML.ПолучитьАтрибут("A04"));
	//стррПоляИзМУ.Вставить(""	 		      , ТекстXML.ПолучитьАтрибут("A05"));
	стррПоляИзМУ.Вставить("Комментарий" 	  , ТекстXML.ПолучитьАтрибут("A06"));
	стррПоляИзМУ.Вставить("СуммаДокумента"    , ТекстXML.ПолучитьАтрибут("A07"));
	//стррПоляИзМУ.Вставить("" 			  	  , ТекстXML.ПолучитьАтрибут("A08"));
	стррПоляИзМУ.Вставить("ИдДокОсн" 		  , ТекстXML.ПолучитьАтрибут("A09"));
	//стррПоляИзМУ.Вставить("" 	 			  , ТекстXML.ПолучитьАтрибут("A010"));
	стррПоляИзМУ.Вставить("ИдКатегория" 	  , ТекстXML.ПолучитьАтрибут("A011"));
	стррПоляИзМУ.Вставить("Широта"	 		  , ТекстXML.ПолучитьАтрибут("A012"));
	стррПоляИзМУ.Вставить("Долгота" 		  , ТекстXML.ПолучитьАтрибут("A013"));
	стррПоляИзМУ.Вставить("ДатаНачала"	 	  , ТекстXML.ПолучитьАтрибут("A014"));
	стррПоляИзМУ.Вставить("ДатаОкончания" 	  , ТекстXML.ПолучитьАтрибут("A015"));
	стррПоляИзМУ.Вставить("идВидОплаты" 	  , ТекстXML.ПолучитьАтрибут("A016"));
	стррПоляИзМУ.Вставить("ДатаТочкиТрека"	  , ТекстXML.ПолучитьАтрибут("A017"));
	стррПоляИзМУ.Вставить("Распечатан"	 	  , ТекстXML.ПолучитьАтрибут("A018"));
	стррПоляИзМУ.Вставить("ПереданККТ"	 	  , ТекстXML.ПолучитьАтрибут("A019"));
	
	//0. Строка ТЧ РасшифровкаПлатежа. Добавляется перед ЗаполнитьОсновныеПараметрыДокумента(), тк там заполняется договор. 
	ОбъектДок.РасшифровкаПлатежа.Очистить();
	СтрокаПлатеж = ОбъектДок.РасшифровкаПлатежа.Добавить();
	
	ЗаполнитьОсновныеПараметрыДокумента(ОбъектДок, стррПоляИзМУ, стррПараметры);
	
	//1. Касса
	Если ЗагружаемыеОбъекты.ТаблицаКасс <> Неопределено Тогда
		НайденнаяСтрока = ЗагружаемыеОбъекты.ТаблицаКасс.Найти(ОбъектДок.Организация, "Организация");
	    Если НайденнаяСтрока <> Неопределено Тогда
			ОбъектДок.Касса = НайденнаяСтрока.Ссылка;
		КонецЕсли;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ОбъектДок.Касса) Тогда
		ОбъектДок.Касса = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ВыбАгент, "ОсновнаяКасса");	
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ОбъектДок.Касса) Тогда
		ОбъектДок.Касса = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПользовательСеанса, "ОсновнаяКасса");	
	КонецЕсли;	
	
	//2. ВалютаВзаиморасчетовРаботника
	Если НаименованиеКонфигурации = "УправлениеПроизводственнымПредприятием" И стррПараметры.ВидДокумента = "ПриходныйКассовыйОрдер" 
		Или НаименованиеКонфигурации = "УправлениеТорговымПредприятиемДляКазахстана" И (стррПараметры.ВидДокумента = "ПриходныйКассовыйОрдер" Или стррПараметры.ВидДокумента = "РасходныйКассовыйОрдер") Тогда // sk_190214
		ОбъектДок.ВалютаВзаиморасчетовПодотчетника = ОбъектДок.ДоговорКонтрагента.ВалютаВзаиморасчетов;	
	Иначе
		ОбъектДок.ВалютаВзаиморасчетовРаботника = ОбъектДок.ДоговорКонтрагента.ВалютаВзаиморасчетов;	
	КонецЕсли;	
	
	//3. ВалютаДокумента 
	ОбъектДок.ВалютаДокумента = ОбъектДок.Касса.ВалютаДенежныхСредств;
	
	//4. ВидОперации, ПринятоОт, СтатьяДвиженияДенежныхСредств, СтавкаНДС, Выдать 
	Если стррПараметры.ВидДокумента = "ПриходныйКассовыйОрдер" Тогда	
		ОбъектДок.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя;
		ОбъектДок.ПринятоОт = Строка(ОбъектДок.Контрагент);
		//(( sk_190313 (MOD-41)
		// ОбъектДок.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию("Оплата покупателя");
		// Заполнение СтатьяДвиженияДенежныхСредств в ТЧ выполняется по следующему алгоритму:
		//	В конфигурации "УТ":
		// 		1. Из реквизита ОсновнаяСтатьяДвиженияДенежныхСредств договора контрагента.
		//		2. Значением по умолчанию в зависимости от вида операции документа.
		//	В конфигурации "КА":
		//		1. Из реквизита ОсновнаяСтатьяДвиженияДенежныхСредств договора контрагента.
		//)) sk_190313 
		
		// ОбъектДок.СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПользовательСеанса, "ОсновнаяСтавкаНДС"); sk_190313
	ИначеЕсли стррПараметры.ВидДокумента = "РасходныйКассовыйОрдер" Тогда 
		ОбъектДок.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю;  
		ОбъектДок.Выдать = Строка(ОбъектДок.Контрагент);
	КонецЕсли;
	
	//5. СчетОрганизации 
	ОбъектДок.СчетОрганизации    = ОбъектДок.Организация.ОсновнойБанковскийСчет;
	
	//6. Ответственный
	ОбъектДок.Ответственный      = ВыбАгент;
	
	//////++ ТАБЛИЧНАЯ ЧАСТЬ. Заполнение строки ТЧ РасшифровкаПлатежа, Это строка с основанием документа  //////
	
	//1. ДоговорКонтрагента
	СтрокаПлатеж.ДоговорКонтрагента = ОбъектДок.ДоговорКонтрагента;
	
	//2. Заполнение Счетов: СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансам итд 
	Если текНаименованиеКонфигурации = "КомплекснаяАвтоматизация" Тогда
		МодульБухгалтерскийУчетРасчетовСКонтрагентами = Вычислить("БухгалтерскийУчетРасчетовСКонтрагентами"); // sk_190213 Исправлена ошибка при запуске обработки на конфигурации "Управление торговлей для Казахстана" (2.2.18.5) (MOD-269) 
		Если ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
	       	Если НЕ (ОбъектДок.ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентами) Тогда
				СчетаУчета = МодульБухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(ОбъектДок.Организация, ОбъектДок.Контрагент, СтрокаПлатеж.ДоговорКонтрагента); // СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(ОбъектДок.Организация, ОбъектДок.Контрагент, СтрокаПлатеж.ДоговорКонтрагента); sk_190213 (MOD-269)
				
				Если ОбъектДок.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком тогда
					СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
					СтрокаПлатеж.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансов;
				Иначе
					Если СтрокаПлатеж.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
						СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовСКомитентом;
					Иначе
						СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
					КонецЕсли;
					СтрокаПлатеж.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателя;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	 	
	СтрокаПлатеж.СуммаПлатежа = ОбъектДок.СуммаДокумента;
	СтрокаПлатеж.СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ВыбАгент, "ОсновнаяСтавкаНДС");
	
	// Заполняем ставку и рассчитываем сумму НДС
	//(( sk_190214 Получаем ставку НДС из настроек пользователя сеанса, если ставка не получена из настроек выбранного агента 	
	Если Не ЗначениеЗаполнено(СтрокаПлатеж.СтавкаНДС) Тогда
		СтрокаПлатеж.СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПользовательСеанса, "ОсновнаяСтавкаНДС");
	КонецЕсли;	
	//)) sk_190214
	
	УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);  // sk_181114 Выполняем расчет НДС
	
	СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = СтрокаПлатеж.ДоговорКонтрагента.ОсновнаяСтатьяДвиженияДенежныхСредств;
    Если ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента.ОсновнойПроект) Тогда
		СтрокаПлатеж.Проект = СтрокаПлатеж.ДоговорКонтрагента.ОсновнойПроект;
	КонецЕсли;
	
	УправлениеДенежнымиСредствами.УстановитьСтатьюДДСПоУмолчанию(СтрокаПлатеж, ОбъектДок.ВидОперации);
			
	Если НаименованиеКонфигурации = "УправлениеТорговымПредприятиемДляКазахстана" Тогда 
		МодульВУ = Вычислить("ОбщегоНазначения");
	Иначе
		МодульВУ = Вычислить("МодульВалютногоУчета");
	КонецЕсли;
	СтруктураКурсаВзаиморасчетов = МодульВУ.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, ОбъектДок.Дата);
	СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
	
	//(( sk_181114 Заполняем реквизиты документа КурсДокумента и КратностьДокумента
	СтруктураКурсаДокумента = МодульВУ.ПолучитьКурсВалюты(ОбъектДок.ВалютаДокумента, ОбъектДок.Дата);
	ОбъектДок.КурсДокумента = СтруктураКурсаДокумента.Курс;
	ОбъектДок.КратностьДокумента = СтруктураКурсаДокумента.Кратность;	
	//)) sk_181114
	
	ОбъектДок.ПроверкаКурсовВалют(СтрокаПлатеж);

	Если ОбъектДок.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда
		ВалютаВзаиморасчетов = ОбъектДок.ВалютаВзаиморасчетовРаботника;
	Иначе
		ВалютаВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	КонецЕсли;

	Если СтрокаПлатеж.КурсВзаиморасчетов <> 0 И ОбъектДок.КратностьДокумента <> 0 Тогда
		
		//(( sk_181010 Выполняем попытку пересчета из валюты в валюту
		//СтрокаПлатеж.СуммаВзаиморасчетов = 
		//	МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа, ОбъектДок.ВалютаДокумента, ВалютаВзаиморасчетов, ОбъектДок.КурсДокумента, 
		//	СтрокаПлатеж.КурсВзаиморасчетов, ОбъектДок.КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
		
		//(( sk_190214 Исправлена ошибка при запуске обработки на конфигурации "Управление торговлей для Казахстана" (2.2.18.5)/Управление торговым предприятием для Казахстана (2.0.16.1) (MOD-269)
		Если НаименованиеКонфигурации = "УправлениеТорговымПредприятиемДляКазахстана" Тогда // текНаименованиеКонфигурации = "УправлениеТорговлейДляКазахстана" Тогда sk_190604 Изменено условие в рамках (MOD-575) 
			МодульПересчетаВалютногоУчета = Вычислить("ОбщегоНазначения");
		Иначе
			МодульПересчетаВалютногоУчета = Вычислить("МодульВалютногоУчета");
		КонецЕсли;
		//)) sk_190214
		
		Попытка
			//(( sk_190214 (MOD-269)
			//СтрокаПлатеж.СуммаВзаиморасчетов = 
			//МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа, ОбъектДок.ВалютаДокумента, ВалютаВзаиморасчетов, ОбъектДок.КурсДокумента, 
			//	СтрокаПлатеж.КурсВзаиморасчетов, ОбъектДок.КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);	
			СтрокаПлатеж.СуммаВзаиморасчетов = 
			МодульПересчетаВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа, ОбъектДок.ВалютаДокумента, ВалютаВзаиморасчетов, ОбъектДок.КурсДокумента, 
				СтрокаПлатеж.КурсВзаиморасчетов, ОбъектДок.КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
			//)) sk_190214
		Исключение
		КонецПопытки;
		//)) sk_181010
															
	Иначе
		СтрокаПлатеж.СуммаВзаиморасчетов = 0;     
	КонецЕсли;		
	//////-- ТАБЛИЧНАЯ ЧАСТЬ. Заполнение строки ТЧ РасшифровкаПлатежа   //////
	
	//(( sk_181114 Заполняем ПризнакСпособаРасчета
	//В КА 1.1.101.1 документ ПриходныйКасовыйОрдер/РасходныйКассовыйОрдер есть реквизит ПризнакСпособаРасчета в ТЧ, есть метод ЗаполнитьПризнакСпособаРасчета с 3 параметрами
	//В УТ 10.3.34.2 документ ПриходныйКасовыйОрдер/РасходныйКассовыйОрдер нет реквизита ПризнакСпособаРасчета в ТЧ
	//В УТ 10.3.43.1 документ ПриходныйКасовыйОрдер/РасходныйКассовыйОрдер есть реквизит ПризнакСпособаРасчета в ТЧ, есть метод ЗаполнитьПризнакСпособаРасчета с 2 параметрами
	//В УТ 10.3.45.3 документ ПриходныйКасовыйОрдер/РасходныйКассовыйОрдер есть реквизит ПризнакСпособаРасчета в ТЧ, есть метод ЗаполнитьПризнакСпособаРасчета с 3 параметрами
	//В УТ Казахстан 2.2.18.5 документ ПриходныйКасовыйОрдер/РасходныйКассовыйОрдер нет реквизита ПризнакСпособаРасчета в ТЧ
	
	//(( sk_190312
	// МодульМенеджерОборудованияКС = Вычислить("МенеджерОборудованияКлиентСервер");
	Если (текНаименованиеКонфигурации = "УправлениеТорговлей" И СравнитьВерсии(гВерсияКонфигурации, "10.3.43.1") >= 0)
		ИЛИ текНаименованиеКонфигурации = "КомплекснаяАвтоматизация" Тогда 
		МодульМенеджерОборудованияКС = Вычислить("МенеджерОборудованияКлиентСервер");
	КонецЕсли;
	//)) sk_190312
	
	Если текНаименованиеКонфигурации = "УправлениеТорговлей" Тогда
		Если СравнитьВерсии(гВерсияКонфигурации, "10.3.43.1") >= 0 И СравнитьВерсии(гВерсияКонфигурации, "10.3.45.3") < 0 Тогда
			МодульМенеджерОборудованияКС.ЗаполнитьПризнакСпособаРасчета(ОбъектДок.РасшифровкаПлатежа[0], ОбъектДок.ВидОперации);
		ИначеЕсли СравнитьВерсии(гВерсияКонфигурации, "10.3.45.3") >= 0 Тогда
			МодульМенеджерОборудованияКС.ЗаполнитьПризнакСпособаРасчета(ОбъектДок.РасшифровкаПлатежа[0], ОбъектДок.ВидОперации, ОбъектДок.РасшифровкаПлатежа[0].Сделка);
		КонецЕсли;
	ИначеЕсли текНаименованиеКонфигурации = "КомплекснаяАвтоматизация" Тогда // Иначе sk_190312
		МодульМенеджерОборудованияКС.ЗаполнитьПризнакСпособаРасчета(ОбъектДок.РасшифровкаПлатежа[0], ОбъектДок.ВидОперации, ОбъектДок.РасшифровкаПлатежа[0].Сделка);
	КонецЕсли;
	//)) sk_181114

	////++ Помещение в виртуальную таблицу ЗагружаемыеОбъекты(определяется функцией ЗагруженныеОбъектыИзФайла()) для дальнейшей записи через ЗакончитьЗагрузкуДокументов()  
	стррПараметры.стррКоординаты.Широта  = стррПоляИзМУ.Широта;
	стррПараметры.стррКоординаты.Долгота = стррПоляИзМУ.Долгота;
	стррПараметры.идКатегория 			 = стррПоляИзМУ.ИдКатегория;
	Если стррПараметры.ВидДокумента = "ПриходныйКассовыйОрдер" Тогда
		НоваяСтрока = ЗагружаемыеОбъекты.тзДокументыПКО.Добавить();
	ИначеЕсли стррПараметры.ВидДокумента = "РасходныйКассовыйОрдер" Тогда
		НоваяСтрока = ЗагружаемыеОбъекты.тзДокументыРКО.Добавить();
	КонецЕсли;
	НоваяСтрока.Документ      = ОбъектДок;
	НоваяСтрока.стррПараметры = стррПараметры;
	НоваяСтрока.ИдОснования   = стррПоляИзМУ.ИдДокОсн;
	////-- Помещение в виртуальную таблицу для дальнейшей записи  
	
КонецПроцедуры 

// sk_190116 Процедура не используется
//
Процедура ЗагрузитьДокументыОрдера_Old(ТекстXML, СоотвЗагруженныхОбъектов, ДанныеДок, Агент, ТаблицаКасс)
	
	Перем ЭтоНовый;
	
	СписокОрдеровДляЗаписи = Новый ТаблицаЗначений;
	СписокОрдеровДляЗаписи.Колонки.Добавить("Документ");
	СписокОрдеровДляЗаписи.Колонки.Добавить("СтруктураДокМУ");
	СписокОрдеровДляЗаписи.Колонки.Добавить("ЭтоНовыйОбъект");
	СписокОрдеровДляЗаписи.Колонки.Добавить("ИдОснования");
	СписокОрдеровДляЗаписи.Колонки.Добавить("Категория");
	СписокОрдеровДляЗаписи.Колонки.Добавить("КоординатыGPS");
	
	СписокКатегорииДокументов = ПолучитьЗначениеНастройки("КатегорииДокументов", "Соответствие");
		
	ИмяДок = ДанныеДок["_ИмяДокумента"];	
		
	//СпрМенеджер = Справочники[ИмяСпр];
	СтруктураРеквизитов = ПолучитьСтруктуруЗагружаемыхРеквизитов(ДанныеДок);
		
	Пока ТекстXML.Прочитать() Цикл
			
		Если ТекстXML.Имя = эл_Документ И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Прервать;
		КонецЕсли;
				
		Если ТекстXML.Имя = эл_Элемент И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			стрИд = ТекстXML.ЗначениеАтрибута(ат_Гуид);
						
			Менеджер = Документы[ИмяДок];
			
			номер = Строка(ТекстXML.ПолучитьАтрибут(ат_ПрефиксДокумента)) + Строка(ТекстXML.ПолучитьАтрибут(ат_НомерДокумента));
			объектДок = ПолучитьОбъектДокумента(Агент, ИмяДок, стрИд, ТекстXML.ПолучитьАтрибут(ат_Проведен), ТекстXML.ПолучитьАтрибут(ат_ДатаДокумента), номер, ЭтоНовый);
			Если объектДок = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураПараметров = Новый Структура("ВидДокумента, Номер, Дата, ТипЦен, ИдДок, СостДок," + 
										  "ИдФирмы, ИдКлиента, ИдДоговора, ИдТоргТочки, ИдМаршрута, СуммаДокумента, Комментарий, Широта, Долгота, КоординатыGPS, " + 
										  "ВидОплаты, ИдДокОсн,  Категория, СпособСоздания");
			
			СтруктураПараметров.ВидДокумента       = ИмяДок;
			СтруктураПараметров.Номер     	   	   = номер;
			СтруктураПараметров.Дата     	   	   = ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут(ат_ДатаДокумента));    	
			СтруктураПараметров.ИдФирмы 	   	   = ТекстXML.ПолучитьАтрибут(ДанныеДок["Организация"]);
			СтруктураПараметров.ИдКлиента	   	   = ТекстXML.ПолучитьАтрибут(ДанныеДок["Контрагент"]);
			СтруктураПараметров.ИдТоргТочки   	   = ТекстXML.ПолучитьАтрибут(ДанныеДок["ТорговаяТочка"]);
			СтруктураПараметров.ИдДоговора 		   = ТекстXML.ПолучитьАтрибут(ДанныеДок["ДоговорКонтрагента"]);
			СтруктураПараметров.Комментарий    	   = ТекстXML.ПолучитьАтрибут(ДанныеДок["Комментарий"]);
			СтруктураПараметров.СуммаДокумента	   = Число(ТекстXML.ПолучитьАтрибут(ДанныеДок["СуммаДокумента"]));
			ИдОснования 					       = ТекстXML.ПолучитьАтрибут(ДанныеДок["ДокументОснование"]); 
			
			СтруктураПараметров.Широта 	           = ТекстXML.ПолучитьАтрибут(ДанныеДок["Широта"]);
			СтруктураПараметров.Долгота	           = ТекстXML.ПолучитьАтрибут(ДанныеДок["Долгота"]);
			СтруктураПараметров.Категория 	       = ТекстXML.ПолучитьАтрибут(ДанныеДок["КатегорияДокумента"]);
			СтруктураПараметров.СпособСоздания 	   = "User";			
			
			СтруктураОбязательныхПолей = Новый Структура("Организация, Контрагент, ТорговаяТочка, ДоговорКонтрагента");	
			
			ЗаполнитьОсновныеПараметрыДокумента_OLD(ОбъектДок, СтруктураПараметров, Менеджер, СтруктураОбязательныхПолей, "", Агент); // ЗаполнитьОсновныеПараметрыДокумента(ОбъектДок, СтруктураПараметров, Менеджер, СтруктураОбязательныхПолей, "", Агент); sk_190116
			
			Если ТаблицаКасс <> Неопределено Тогда
				НайденнаяСтрока = ТаблицаКасс.Найти(ОбъектДок.Организация, "Организация");
				Если НайденнаяСтрока <> Неопределено Тогда
					ОбъектДок.Касса = НайденнаяСтрока.Ссылка;
				КонецЕсли;		
			КонецЕсли; 
			
			Если Не ЗначениеЗаполнено(ОбъектДок.Касса) Тогда
				ОбъектДок.Касса = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(Агент, "ОсновнаяКасса");	
			КонецЕсли;
	
			//++Ratmir 2018-05-03 //не тестировалось
			//ОбъектДок.ВалютаВзаиморасчетовРаботника = ОбъектДок.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			Попытка
				ОбъектДок.ВалютаВзаиморасчетовРаботника = ОбъектДок.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			Исключение
				
			КонецПопытки;
			//--Ratmir 2018-05-03
			
			ОбъектДок.ВалютаДокумента     		    = ОбъектДок.Касса.ВалютаДенежныхСредств;
			//ОбъектДок.Оплачено	                    = Истина;
			ОбъектДок.СуммаДокумента				= ОбъектДок.СуммаДокумента;
				
			Если ТипЗнч(ОбъектДок.Ссылка) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
				ОбъектДок.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя;
				ОбъектДок.ПринятоОт = Строка(ОбъектДок.Контрагент);
				ОбъектДок.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию("Оплата покупателя");
				ОбъектДок.СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПользовательСеанса, "ОсновнаяСтавкаНДС");
			Иначе
				ОбъектДок.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю;
				ОбъектДок.Выдать = Строка(ОбъектДок.Контрагент);
			КонецЕсли;
			
			ОбъектДок.СчетОрганизации    = ОбъектДок.Организация.ОсновнойБанковскийСчет;
			ОбъектДок.Ответственный      = Агент;
			ОбъектДок.ОтраженоВОперУчете = Истина;
			
			СтрокаПлатеж = ОбъектДок.РасшифровкаПлатежа.Добавить();
			
			УправлениеДенежнымиСредствами.ПриИзмененииКонтрагентаВПлатежномДокументе(ОбъектДок, СтрокаПлатеж); 
			
			СтрокаПлатеж = ОбъектДок.РасшифровкаПлатежа[0];
			
			УстановитьДоговорВДокументе(Агент, ОбъектДок, СтрокаПлатеж);
			
			ИдОснования = ТекстXML.ПолучитьАтрибут(ДанныеДок["ДокументОснование"]); 
			
			СтрокаПлатеж.СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(Агент, "ОсновнаяСтавкаНДС");
			
			СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = СтрокаПлатеж.ДоговорКонтрагента.ОсновнаяСтатьяДвиженияДенежныхСредств;

			Если ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента.ОсновнойПроект) Тогда
				СтрокаПлатеж.Проект = СтрокаПлатеж.ДоговорКонтрагента.ОсновнойПроект;
			КонецЕсли;
			
			УправлениеДенежнымиСредствами.УстановитьСтатьюДДСПоУмолчанию(СтрокаПлатеж, ОбъектДок.ВидОперации);
			
			//++Ratmir 2018-05-17
			Если НаименованиеКонфигурации = "УправлениеТорговымПредприятиемДляКазахстана" Тогда 
				МодульВалютногоУчета = Вычислить("ОбщегоНазначения");	
			КонецЕсли;
			//--Ratmir 2018-05-17
			
			СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, ОбъектДок.Дата);
			
			СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
			СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
			
			ОбъектДок.КратностьДокумента = 1;
			ОбъектДок.КурсДокумента 	 = 1;
			
			ОбъектДок.ПроверкаКурсовВалют(СтрокаПлатеж);

			Если ОбъектДок.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда
				ВалютаВзаиморасчетов = ОбъектДок.ВалютаВзаиморасчетовРаботника;
			Иначе
				ВалютаВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			КонецЕсли;

			Если (СтрокаПлатеж.КурсВзаиморасчетов <> 0) И (ОбъектДок.КратностьДокумента <> 0) Тогда
				СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа, ОбъектДок.ВалютаДокумента,
					                                                  ВалютаВзаиморасчетов, ОбъектДок.КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
					                                                  ОбъектДок.КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);	
			Иначе
				СтрокаПлатеж.СуммаВзаиморасчетов = 0;
			КонецЕсли;							
			
			СтрокаОрдера = СписокОрдеровДляЗаписи.Добавить();
			СтрокаОрдера.Документ 		 = ОбъектДок;
			СтрокаОрдера.СтруктураДокМУ = СтруктураПараметров;
			СтрокаОрдера.ЭтоНовыйОбъект  = ЭтоНовый;
			СтрокаОрдера.ИдОснования	 = ИдОснования;
			СтрокаОрдера.Категория		 = СтруктураПараметров.Категория;
			СтрокаОрдера.КоординатыGPS	 = СтруктураПараметров.Широта + Имена["СимволРазделительGPS"] + СтруктураПараметров.Долгота;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Если СоотвЗагруженныхОбъектов[эл_Документы] = Неопределено Тогда
		соотвДок = Новый Соответствие;		
		СоотвЗагруженныхОбъектов.Вставить(эл_Документы, соотвДок);
	Иначе
		соотвДок = СоотвЗагруженныхОбъектов[эл_Документы];
	КонецЕсли;
	соотвДок.Вставить(ИмяДок, СписокОрдеровДляЗаписи);
	
КонецПроцедуры

Процедура ЗаписатьРегЗначениеСвойстваОбъекта(ОбъектДок, СтруктураПолей, ИмяСвойства)	

	Если ИмяСвойства = "Категория" Тогда
		ссылкаСвойствоОбъектаКатегория = ПолучитьСсылкуСвойствоОбъектаАгентПлюс(ИмяСвойства);
		ссылкаКатегорияДокумента = ПолучитьЭлементСпрЗначениеСвойстваОбъектаПоИд(СтруктураПолей[ИмяСвойства], ссылкаСвойствоОбъектаКатегория, "КатегорииДокументов", Истина);		
		менеджерЗаписиРег = ПолучитьЗаписьРегистраЗначениеСвойстваОбъекта(ссылкаСвойствоОбъектаКатегория, ОбъектДок.Ссылка);						
		менеджерЗаписиРег.Значение = ссылкаКатегорияДокумента;
		ВыполнитьОперациюДляОбъекта(менеджерЗаписиРег, "запись");
	ИначеЕсли ИмяСвойства = "КоординатыGPS" Тогда
		ссылкаСвойствоОбъектаGPS = ПолучитьСсылкуСвойствоОбъектаАгентПлюс("GPS");
		менеджерЗаписиРег = ПолучитьЗаписьРегистраЗначениеСвойстваОбъекта(ссылкаСвойствоОбъектаGPS, ОбъектДок.Ссылка);						
		менеджерЗаписиРег.Значение = СтруктураПолей[ИмяСвойства];
		ВыполнитьОперациюДляОбъекта(менеджерЗаписиРег, "запись");
	ИначеЕсли ИмяСвойства = "ДатаСозданияВМУ" Тогда
		ссылкаСвойствоОбъектаДатаСозданияВМУ = ПолучитьСсылкуСвойствоОбъектаАгентПлюс(ИмяСвойства);
		менеджерЗаписиРег = ПолучитьЗаписьРегистраЗначениеСвойстваОбъекта(ссылкаСвойствоОбъектаДатаСозданияВМУ, ОбъектДок.Ссылка);						
		менеджерЗаписиРег.Значение = СтруктураПолей["Дата"];
		ВыполнитьОперациюДляОбъекта(менеджерЗаписиРег, "запись");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьРегКатегорияОбъекта(ОбъектДок, ИмяКатегория)	

	ссылкаСвойствоОбъектаКатегория = ПолучитьСсылкуКатегорияОбъектаАгентПлюс(ИмяКатегория);
	менеджерЗаписиРег = ПолучитьЗаписьРегистраКатегорииОбъектов(ссылкаСвойствоОбъектаКатегория, ОбъектДок.Ссылка);						
	ВыполнитьОперациюДляОбъекта(менеджерЗаписиРег, "запись");
	
КонецПроцедуры

// sk_190116 Процедура не используется
//
Процедура ЗагрузитьДокументыВозврат_old(ТекстXML, СоотвЗагруженныхОбъектов, ДанныеДок, Агент, ДанныеАгента)
	
	Перем ЭтоНовый, ОбъектДок, СтруктураПараметров;
	
	ИмяДок = ДанныеДок["_ИмяДокумента"];
	Менеджер = Документы[ИмяДок];	
	
	СписокВозвратыДляЗаписи = Новый ТаблицаЗначений;
	СписокВозвратыДляЗаписи.Колонки.Добавить("Документ");
	СписокВозвратыДляЗаписи.Колонки.Добавить("СтруктураДокМУ");
	СписокВозвратыДляЗаписи.Колонки.Добавить("ЭтоНовыйОбъект");
	СписокВозвратыДляЗаписи.Колонки.Добавить("ИдОснования");
	СписокВозвратыДляЗаписи.Колонки.Добавить("Категория");
	СписокВозвратыДляЗаписи.Колонки.Добавить("КоординатыGPS");
		
	СтруктураРеквизитов = ПолучитьСтруктуруЗагружаемыхРеквизитов(ДанныеДок);
	
	СписокКатегорииДокументов = ПолучитьЗначениеНастройки("КатегорииДокументов", "Соответствие");
	ссылкаСвойствоОбъектаGPS = ПолучитьСсылкуСвойствоОбъектаАгентПлюс("GPS");
			
	Пока ТекстXML.Прочитать() Цикл
			
		Если ТекстXML.Имя = эл_Документ И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Прервать;				
		КонецЕсли;
			
		Если ТекстXML.Имя = эл_Элемент И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			стрИд = ТекстXML.ЗначениеАтрибута(ат_Гуид);
			
			номер = Строка(ТекстXML.ПолучитьАтрибут(ат_ПрефиксДокумента)) + Строка(ТекстXML.ПолучитьАтрибут(ат_НомерДокумента));
			ОбъектДок = ПолучитьОбъектДокумента(Агент, ИмяДок, стрИд, ТекстXML.ПолучитьАтрибут(ат_Проведен), ТекстXML.ПолучитьАтрибут(ат_ДатаДокумента), номер, ЭтоНовый);
			Если ОбъектДок = Неопределено Тогда
				СтруктураПараметров = Неопределено;
				Продолжить;
			КонецЕсли;
			
			СтруктураПараметров = Новый Структура("ВидДокумента, Номер, Дата, ИдФирмы, Комментарий," + 
										  "Широта, Долгота, КоординатыGPS, СуммаДокумента,Склад," + 
										  "Категория, СпособСоздания, ИдКлиента, ИдТоргТочки, ИдДоговора");		
			
			СтруктураПараметров.ВидДокумента       = ИмяДок;
			СтруктураПараметров.Номер     	   	   = номер;
			СтруктураПараметров.Дата     	   	   = ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут(ат_ДатаДокумента));    	
			СтруктураПараметров.ИдФирмы 	   	   = ТекстXML.ПолучитьАтрибут(ДанныеДок["Организация"]);
			СтруктураПараметров.ИдКлиента	   	   = ТекстXML.ПолучитьАтрибут(ДанныеДок["Контрагент"]);
			СтруктураПараметров.ИдДоговора 		   = ТекстXML.ПолучитьАтрибут(ДанныеДок["ДоговорКонтрагента"]);
			СтруктураПараметров.ИдТоргТочки   	   = ТекстXML.ПолучитьАтрибут(ДанныеДок["ТорговаяТочка"]);	
			СтруктураПараметров.Комментарий    	   = ТекстXML.ПолучитьАтрибут(ДанныеДок["Комментарий"]);	
			СтруктураПараметров.СуммаДокумента	   = Число(ТекстXML.ПолучитьАтрибут(ДанныеДок["СуммаДокумента"]));
			СтруктураПараметров.Склад	    	   = ТекстXML.ПолучитьАтрибут(ДанныеДок["Склад"]);
			СтруктураПараметров.Широта 	           = ТекстXML.ПолучитьАтрибут(ДанныеДок["Широта"]);
			СтруктураПараметров.Долгота	           = ТекстXML.ПолучитьАтрибут(ДанныеДок["Долгота"]);				

			СтруктураПараметров.СпособСоздания 	   = "User";
				
			СтруктураОбязательныхПолей = Новый Структура("Организация, Контрагент, ТорговаяТочка, ДоговорКонтрагента");			
			
			//vd_180810
			//стррПараметры = Новый Структура;
			//стррПараметры.ВидДокумента  = ИмяДок;
			//стррПараметры.Представление = ИмяДок + " № " + СтруктураПараметров.Номер + " от " + СтруктураПараметров.Дата;

			ЗаполнитьОсновныеПараметрыДокумента_OLD(ОбъектДок, СтруктураПараметров, Менеджер, СтруктураОбязательныхПолей, "Продажа", Агент); // ЗаполнитьОсновныеПараметрыДокумента(ОбъектДок, СтруктураПараметров, Менеджер, СтруктураОбязательныхПолей, "Продажа", Агент); sk_190116
			
			ОбъектДок.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
	
			// Получаем склад-ордер из документа
			Если ЭтоПустойИдентификатор(СтруктураПараметров["Склад"]) Тогда			
				текстСообщения = "ru='В документе """ + ОбъектДок + """ не указан склад!'";
				ОповеститьОСобытии(текстСообщения,  ТипыЛогов["Обмен"], СтатусСообщения.Внимание, Агент, ОбъектДок);      
			Иначе		
				складОрдер = ПолучитьСсылкуИзСправочника(СтруктураПараметров.Склад, "Склады");					
				ОбъектДок.СкладОрдер = складОрдер;
			КонецЕсли;    	
			                 
			ИдОснования = ТекстXML.ПолучитьАтрибут(ДанныеДок["Основание"]);			
			ИдКатегория	= ТекстXML.ПолучитьАтрибут(ДанныеДок["Категория"]);
			
			УстановитьДоговорВДокументе(Агент, ОбъектДок);			
			
			Если ЗначениеЗаполнено(ОбъектДок.ДоговорКонтрагента) Тогда
				ОбъектДок.ВалютаДокумента = ОбъектДок.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбъектДок.ВалютаДокумента) Тогда
				ОбъектДок.ВалютаДокумента = мВалютаРегламентированногоУчета;
			КонецЕсли; 		
	
			//++Ratmir 2018-05-17
			Если НаименованиеКонфигурации = "УправлениеТорговымПредприятиемДляКазахстана" Тогда 
				МодульВалютногоУчета = Вычислить("ОбщегоНазначения");	
			КонецЕсли;
			//--Ratmir 2018-05-17
			
			
			СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(ОбъектДок.ДоговорКонтрагента.ВалютаВзаиморасчетов, ОбъектДок.Дата);		

			
			ОбъектДок.КурсВзаиморасчетов       = СтруктураКурсаВзаиморасчетов.Курс;	
			ОбъектДок.КратностьВзаиморасчетов  = СтруктураКурсаВзаиморасчетов.Кратность;	
	
			Если Не ОбъектДок.ЭтоНовый() Тогда		
				ОбъектДок.Товары.Очистить();		
			КонецЕсли;
            ОбъектДок.Ответственный = Агент;
			
			СтрокаВозврат = СписокВозвратыДляЗаписи.Добавить();
			СтрокаВозврат.Документ 		 = ОбъектДок;
			СтрокаВозврат.СтруктураДокМУ = СтруктураПараметров;
			СтрокаВозврат.ЭтоНовыйОбъект = ЭтоНовый;
			СтрокаВозврат.ИдОснования	 = ИдОснования;
			СтрокаВозврат.Категория	 	 = ИдКатегория;
			СтрокаВозврат.КоординатыGPS	 = СтруктураПараметров.Широта + Имена["СимволРазделительGPS"] + СтруктураПараметров.Долгота;			
			
		ИначеЕсли ТекстXML.Имя = эл_ТабличныеЧасти И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			идТчТовары = ДанныеДок["ТчТовары"];
			СтруктураРеквизитовТЧ = ДанныеДок[ДанныеДок["ТчТовары"]];
			Пока ТекстXML.Прочитать() Цикл				
			
				Если ТекстXML.Имя = эл_ТабличныеЧасти И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					Прервать;
				КонецЕсли;
				
				Если ОбъектДок = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Если ТекстXML.Имя = эл_ТабличнаяЧасть И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
					идТабЧасти = НРег(ТекстXML.ЗначениеАтрибута(ат_Гуид));
					// Заполнение табличной части
					Если идТабЧасти = идТчТовары Тогда
						
						Пока ТекстXML.Прочитать() Цикл				
			
							Если ТекстXML.Имя = эл_ТабличнаяЧасть И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
								Прервать;
							КонецЕсли;
							
							Если ТекстXML.Имя = эл_Элемент И ТекстXML.ТипУзла = ТипУзлаXML.НАчалоЭлемента Тогда
								
								ИдНоменклатуры   = ТекстXML.ПолучитьАтрибут(СтруктураРеквизитовТЧ["Номенклатура"]);
								ИдХарактеристики = ТекстXML.ПолучитьАтрибут(СтруктураРеквизитовТЧ["ХарактеристикаНоменклатуры"]);
								ИдЕдиницыИзм	 = ТекстXML.ПолучитьАтрибут(СтруктураРеквизитовТЧ["ЕдиницаИзмерения"]);
								Количество		 = Число(ТекстXML.ПолучитьАтрибут(СтруктураРеквизитовТЧ["Количество"]));
								Цена			 = Число(ТекстXML.ПолучитьАтрибут(СтруктураРеквизитовТЧ["Цена"]));
								Сумма			 = Число(ТекстXML.ПолучитьАтрибут(СтруктураРеквизитовТЧ["Сумма"]));
								СуммаНДС		 = Число(ТекстXML.ПолучитьАтрибут(СтруктураРеквизитовТЧ["СуммаНДС"]));
								СтавкаНДС		 = Число(ТекстXML.ПолучитьАтрибут(СтруктураРеквизитовТЧ["СтавкаНДС"]));
								СкидкаТЧ		 = Число(ТекстXML.ПолучитьАтрибут(СтруктураРеквизитовТЧ["ПроцентСкидкиНаценки"])); 				
								
								ТекНоменклатура  = ПолучитьСсылкуИзСправочника(ИдНоменклатуры, "Номенклатура");
								ТекЕдиница       = ПолучитьСсылкуИзСправочника(ИдЕдиницыИзм, "ЕдиницыИзмерения");
								
								Если ТекНоменклатура.Услуга Тогда
									НоваяСтрока = ОбъектДок.Услуги.Добавить();										
									НоваяСтрока.Содержание			= ТекНоменклатура.НаименованиеПолное;
								Иначе
									
									НоваяСтрока = ОбъектДок.Товары.Добавить();
									НоваяСтрока.ЕдиницаИзмерения	= ТекЕдиница;
									НоваяСтрока.Коэффициент 		= ТекЕдиница.Коэффициент;							
									
									Если НРег(ТекНоменклатура.УникальныйИдентификатор()) <> НРег(ИдХарактеристики) Тогда
										НоваяСтрока.ХарактеристикаНоменклатуры = ПолучитьСсылкуИзСправочника(ИдХарактеристики, "ХарактеристикиНоменклатуры");
									КонецЕсли; 
									
									НоваяСтрока.Качество 			 = Справочники.Качество.Новый;
									НоваяСтрока.ПроцентСкидкиНаценки = СкидкаТЧ;
									
								КонецЕсли;
								
								НоваяСтрока.Номенклатура		 = ТекНоменклатура;				
								НоваяСтрока.Количество           = Количество;
								НоваяСтрока.Цена      			 = Цена;
								НоваяСтрока.Сумма     			 = Сумма;				
								НоваяСтрока.СтавкаНДС 		     = ТекНоменклатура.СтавкаНДС;
								НоваяСтрока.СуммаНДС 		     = СуммаНДС;
								
								// Выполнить общие действия для всех документов при изменении номенклатуры.  
								ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(НоваяСтрока, ОбъектДок);				
								
								// Пересчитываем суммы табличных частей
								ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ОбъектДок);
								ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ОбъектДок);   
															
							КонецЕсли;
						КонецЦикла; 	//конец TABLE
					КонецЕсли;						
				КонецЕсли;
			КонецЦикла;					//конец TABLES	
		ИначеЕсли ТекстXML.Имя = эл_Элемент И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			
			Если ОбъектДок <> Неопределено Тогда
				ОбъектДок = Неопределено;		//обнуляем переменную
			КонецЕсли;			
			
		КонецЕсли;
	КонецЦикла;
	
	Если СоотвЗагруженныхОбъектов[эл_Документы] = Неопределено Тогда
		соотвДок = Новый Соответствие;		
		СоотвЗагруженныхОбъектов.Вставить(эл_Документы, соотвДок);
	Иначе
		соотвДок = СоотвЗагруженныхОбъектов[эл_Документы];
	КонецЕсли;
	
	соотвДок.Вставить(ИмяДок, СписокВозвратыДляЗаписи);
	
КонецПроцедуры

// vd_180827 Добавлена
//
// Параметры:
//  ТекстXML		 - 	 - 
//  стррПараметры	 - 	Структура - 
//	стррПараметры.Дата  				 - Дата      - Дата документа. 
//	стррПараметры.Номер                  - Строка    - Номер Документа. 
//	стррПараметры.ИдОбъекта              - ГУИД      - Ид документа из МУ (атрибут GUID из МУ)
//	стррПараметры.ЭтоНовый               - Булево    - Ложь если в 1С уже есть документ с стррПараметры.ИдОбъекта
//	стррПараметры.Проведен               - Булево    - Истина если док проведен в МУ
//	стррПараметры.ПропускДокумента       - Булево    - Истина если документ не нужно загружать
//	стррПараметры.ПричинаПропуска        - Строка    - Причина по какой не нужно загружать документ в 1С
//	стррПараметры.ОбъектДокумента        - Ссылка    - Ссылка на документ, если в системе уже есть такой документ то заполненна
//	стррПараметры.Синоним                - Строка    - Синоним менеджера документа из методанных. ДокМенеджер.ПустаяСсылка().Метаданные().Синоним  Например для реализации "Реализация товаров и услуг"
//	стррПараметры.Представление          - Строка    - Представление документа в МУ.
//	стррПараметры.ВидДокумента           - Строка    - Вид документа. Например "РеализацияТоваровУслуг"
//	стррПараметры.ЭтоВиртуальныйДокумент - Булево    - Истина если это виртуальный документ
//	стррПараметры.стррКоординаты         - Структура - Новый Структура("КоординатыGPS, Широта, Долгота")
//	стррПараметры.идКатегория 			 - Строка    - Категория документа
//  ЗагружаемыеОбъекты - Структура - Заносим обьекты которые нужно загрузить позже в 1с, тк документ основание возможно еще не записан
//
Процедура ЗагрузитьДокументВозврат(ТекстXML, стррПараметры, ЗагружаемыеОбъекты, ОшибкаЧтенияITEM)
	
	ОбъектДок = стррПараметры.ОбъектДокумента;
	
	стррПоляИзМУ = Новый Структура;
	стррПоляИзМУ.Вставить("идОрганизация"     , ТекстXML.ПолучитьАтрибут("A01"));
	стррПоляИзМУ.Вставить("идКонтрагент"	  , ТекстXML.ПолучитьАтрибут("A02"));
	стррПоляИзМУ.Вставить("идТоргТочка" 	  , ТекстXML.ПолучитьАтрибут("A03"));
	стррПоляИзМУ.Вставить("идДоговор"   	  , ТекстXML.ПолучитьАтрибут("A04"));
	стррПоляИзМУ.Вставить("Скидка"	 		  , ТекстXML.ПолучитьАтрибут("A05"));
	стррПоляИзМУ.Вставить("идТипЦен" 		  , ТекстXML.ПолучитьАтрибут("A06"));
	стррПоляИзМУ.Вставить("СуммаДокумента"    , ТекстXML.ПолучитьАтрибут("A07"));
	стррПоляИзМУ.Вставить("Вес" 			  , ТекстXML.ПолучитьАтрибут("A08"));
	стррПоляИзМУ.Вставить("Комментарий" 	  , ТекстXML.ПолучитьАтрибут("A09"));
	стррПоляИзМУ.Вставить("ИдКатегория" 	  , ТекстXML.ПолучитьАтрибут("A010"));
	стррПоляИзМУ.Вставить("ИдДокОсн" 		  , ТекстXML.ПолучитьАтрибут("A011"));
	стррПоляИзМУ.Вставить("ЕстьПодчиненные"	  , ТекстXML.ПолучитьАтрибут("A012"));
	стррПоляИзМУ.Вставить("Широта"	 		  , ТекстXML.ПолучитьАтрибут("A013"));
	стррПоляИзМУ.Вставить("Долгота" 		  , ТекстXML.ПолучитьАтрибут("A014"));
	стррПоляИзМУ.Вставить("идСклад" 		  , ТекстXML.ПолучитьАтрибут("A016"));
	стррПоляИзМУ.Вставить("ДатаНачала"	 	  , ТекстXML.ПолучитьАтрибут("A017"));
	стррПоляИзМУ.Вставить("ДатаОкончания" 	  , ТекстXML.ПолучитьАтрибут("A018"));
	стррПоляИзМУ.Вставить("идВидОплаты" 	  , ТекстXML.ПолучитьАтрибут("A019"));
	стррПоляИзМУ.Вставить("ДатаТочкиТрека"	  , ТекстXML.ПолучитьАтрибут("A020"));
	стррПоляИзМУ.Вставить("Распечатан"	 	  , ТекстXML.ПолучитьАтрибут("A021"));
	стррПоляИзМУ.Вставить("ПереданККТ"	 	  , ТекстXML.ПолучитьАтрибут("A022"));	
	стррПоляИзМУ.Вставить("ЗаявкаНаВозврат"	  , ТекстXML.ПолучитьАтрибут("A023"));	
	стррПоляИзМУ.Вставить("ДатаВозврата"	  , ТекстXML.ПолучитьАтрибут("A024"));	
	
	ОбъектДок.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;

	ЗаполнитьОсновныеПараметрыДокумента(ОбъектДок, стррПоляИзМУ, стррПараметры);
	
	//////++ ТАБЛИЧНАЯ ЧАСТЬ //////
	Если стррПараметры.ЭтоНовый = Ложь Тогда
		ОбъектДок.Товары.Очистить();		
	КонецЕсли;
	
 	ТекстXML.Прочитать();
	Если ТекстXML.Имя = "TABLES" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		ТекстXML.Прочитать();
		Если ВРег(СокрЛП(ТекстXML.ПолучитьАтрибут("GUID"))) = "235DC1EA-5963-4DCD-95E1-E8CEF487A2AE" Тогда
			// ОБРАБОТКА ТАБЛИЧНОЙ ЧАСТИ //
			стррСтрокаТЧ = ПолучитьСтруктуруСтрокиТЧ(стррПараметры.ВидДокумента);
			Пока ТекстXML.Прочитать() Цикл
				//vd_180903 Если ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				Если НЕ ТекстXML.Имя = "ITEM" Тогда
				 	Прервать;
				ИначеЕсли  ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					Продолжить;
				КонецЕсли;	
				
				стррСтрокаТЧ.ИдНоменклатуры 	= ТекстXML.ПолучитьАтрибут("A01");
				стррСтрокаТЧ.ИдХарактеристики 	= ТекстXML.ПолучитьАтрибут("A02");
				стррСтрокаТЧ.ИдЕдиницыИзм 		= ТекстXML.ПолучитьАтрибут("A03");
				стррСтрокаТЧ.Количество 		= Число(ТекстXML.ПолучитьАтрибут("A04"));
				стррСтрокаТЧ.Цена 				= Число(ТекстXML.ПолучитьАтрибут("A05"));
				стррСтрокаТЧ.Сумма 				= Число(ТекстXML.ПолучитьАтрибут("A06"));
				стррСтрокаТЧ.СуммаНДС 			= Число(ТекстXML.ПолучитьАтрибут("A07"));
				//стррСтрокаТЧ.Вес 				= Число(ТекстXML.ПолучитьАтрибут("A08"));
				стррСтрокаТЧ.СкидкаТЧ 			= Число(ТекстXML.ПолучитьАтрибут("A09"));
				стррСтрокаТЧ.СтавкаНДС 			= Число(ТекстXML.ПолучитьАтрибут("A010"));                              
				//стррСтрокаТЧ.СуммаСкидки 		= ТекстXML.ПолучитьАтрибут("A011");

				ДобавитьСтрокуТабличнойЧастиВДокумент(ОбъектДок, стррПараметры.ВидДокумента, стррСтрокаТЧ);
				
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		ОшибкаЧтенияITEM = Истина;
	КонецЕсли;
	//////-- ТАБЛИЧНАЯ ЧАСТЬ //////
	
	////++ Помещение в виртуальную таблицу ЗагружаемыеОбъекты(определяется функцией ЗагруженныеОбъектыИзФайла()) для дальнейшей записи черезЗакончитьЗагрузкуДокументов  
	стррПараметры.стррКоординаты.Широта  = стррПоляИзМУ.Широта;
	стррПараметры.стррКоординаты.Долгота = стррПоляИзМУ.Долгота;
	стррПараметры.идКатегория 			 = стррПоляИзМУ.ИдКатегория;
	
	НоваяСтрока = ЗагружаемыеОбъекты.тзДокументыВозвратов.Добавить();
	НоваяСтрока.Документ      = ОбъектДок;
	НоваяСтрока.стррПараметры = стррПараметры;
	НоваяСтрока.ИдОснования   = стррПоляИзМУ.ИдДокОсн;
	////-- Помещение в виртуальную таблицу для дальнейшей записи через 
	
КонецПроцедуры 

//Процедура ЗагрузитьДокументы(ТекстXML, СоотвЗагруженныхОбъектов, Агент, ДанныеАгента, допДанныеАгента, ЗагружаемыеОбъекты); //vd_180821 добавлен атрибут ЗагружаемыеОбъекты
Процедура ЗагрузитьДокументы(ТекстXML, СоотвЗагруженныхОбъектов, ЗагружаемыеОбъекты); // sk_180926 Исключены параметры : Агент, ДанныеАгент, допДанныеАгента 
	
	//(( sk_180926 Проверка заполнения
	Если ВыбАгент = Справочники.Пользователи.ПустаяСсылка()  Тогда  
		ТекстСообщения = "ru = 'Пропущена загрузка документов. Неизвестный агент.'";
		ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обмен"], СтатусСообщения.Внимание, ВыбНастройкиАгента, );	
		Возврат;
	ИначеЕсли ВыбНастройкиАгента = Неопределено Тогда     
		ТекстСообщения = "ru = 'Пропущена загрузка документов. Не указаны настройки агента.'";
		ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обмен"], СтатусСообщения.Внимание, ВыбНастройкиАгента, );	
		Возврат;
	КонецЕсли;
	//)) sk_180926

	отбор = ВыбДопНастройкиАгента["Отбор"];
	Если отбор <> Неопределено Тогда               
		отборКассы = отбор.Получить("Кассы");
		Если отборКассы <> Неопределено Тогда	
			Если отборКассы["Использование"] Тогда
				ПостроительОтчета = Новый ПостроительОтчета;
				ПостроительОтчета.Текст = ПолучитьТекстЗапросаКассы();
				ПостроительОтчета.ЗаполнитьНастройки();
				ПостроительОтчета.Отбор.Добавить("Ссылка");
				УстановитьПоляОтбораПостроителяОтчета("Ссылка", отборКассы, ПостроительОтчета);
				ПостроительОтчета.Выполнить();
				ТаблицаКасс = ПостроительОтчета.Результат.Выгрузить();
				ЗагружаемыеОбъекты.ТаблицаКасс = ТаблицаКасс; //vd_180827
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	

	Пока ТекстXML.Прочитать() Цикл
				
		Если ТекстXML.Имя = "DOCUMENTS" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда //</DOCUMENTS>
			Прервать;
		КонецЕсли;
 		
		Если ТекстXML.Имя = "DOCUMENT" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда //<DOCUMENT>	
			
			ИдДокумента = ТекстXML.ПолучитьАтрибут("GUID");
			
			ДанныеДок = СоответствиеДок[НРег(ИдДокумента)];
			
			Если ДанныеДок = Неопределено Тогда
				//vd_180808 Добавлено оповещение
				ТекстXML.Пропустить();
				ТекстСообщения = "ru = 'Пропущена загрузка документа. Неизвестный тип документа, Идентификатор: " + ИдДокумента + ".'";
				ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обмен"], СтатусСообщения.Внимание, ВыбАгент, );
				Продолжить;
			КонецЕсли;
			
			Если Не ДанныеДок["_Загружать"] Тогда
				Продолжить;
			КонецЕсли;
			
			ВидДокумента = ДанныеДок["_ИмяДокумента"];	
			
			//vd_180809 Переделана чтениеXML для загрузки всех документов.
			//Если () Тогда	

				Пока ТекстXML.Прочитать() Цикл
					Если ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда 
						
						//ОшибкаЧтенияITEM - это значение переходит в чтение Истина, когда при прочтении документа ожидается получить Элемент <TABLES>, 
						//а из-за ошибок в формате документ из МТ приходит без табличной части. В результате считывается следующий элемент <ITEM> что не верно.  
						~ОшибкаЧтенияITEM:  //метка
						ОшибкаЧтенияITEM = Ложь;
						ЗагрузитьДокумент(ТекстXML, ВидДокумента, ЗагружаемыеОбъекты, ОшибкаЧтенияITEM);
						Если ОшибкаЧтенияITEM Тогда		
							Перейти ~ОшибкаЧтенияITEM; //метка
						КонецЕсли;
						
					ИначеЕсли ТекстXML.Имя = "ELEMENTS" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
						Продолжить;		
					ИначеЕсли ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
						ТекстXML.Пропустить();
					ИначеЕсли ТекстXML.Имя = "DOCUMENT" Тогда
						Прервать;
					Иначе
						Продолжить;
					КонецЕсли;
				КонецЦикла;    
		
			//Иначе //vd_180809 Избавится в дальнейшем от этого условия, для этого нужно переделать все функции.		
				//Если ВидДокумента = "ЗаказПокупателя" Тогда		
				//	ЗагрузитьДокументыЗаказ_old(ТекстXML, СоотвЗагруженныхОбъектов, ДанныеДок, Агент, ДанныеАгента);
				//ИначеЕсли ВидДокумента = "ПриходныйКассовыйОрдер" Или ВидДокумента = "РасходныйКассовыйОрдер" Тогда 
				//	ЗагрузитьДокументыОрдера_Old(ТекстXML, СоотвЗагруженныхОбъектов, ДанныеДок, Агент, ТаблицаКасс);
				//ИначеЕсли ВидДокумента = "ВозвратТоваровОтПокупателя" Тогда 
				//	ЗагрузитьДокументыВозврат_old(ТекстXML, СоотвЗагруженныхОбъектов, ДанныеДок, Агент, ТаблицаКасс);
				//	ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обмен"], СтатусСообщения.Внимание, Агент, );	
				//ИначеЕсли ВидДокумента = "Посещение"  тогда //Альфия 18.05.2017
				//	ЗагрузитьПосещенияВФайл(ТекстXML,Агент);
				//Иначе //vd_180808 Добавлено условие
				//	ТекстСообщения =  "ru = 'Пропущена загрузка документа """ + ДанныеДок["_Представление"] + """. Данный вид документа не поддерживается. Идентификатор: " + ИдДокумента + ".'";
				//	ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обмен"], СтатусСообщения.Внимание, Агент, );					
				//КонецЕсли;
			//КонецЕсли;
				
		КонецЕсли;
		
	КонецЦикла; 
			
КонецПроцедуры //ЗагрузитьДокументы

// vd_180809 Добавлена
//
// Параметры:
//  ТекстXML			 - ТекстXML - Строка из XML
//  ВидДокумента		 - СТрока - Вид документа
//  ЗагружаемыеОбъекты	 - Структура - Структура из таблиц для отложенной загрузки.
//  ОшибкаЧтенияITEM	 - Булево - Нужно для чтения ТЧ в документе. Переходит в чтение Истина, когда при прочтении ТЧ документа ожидается получить Элемент <TABLES>, а из-за ошибок в формате документ из МТ приходит без табличной части. В результате считывается следующий элемент <ITEM> что не верно.
//
Процедура ЗагрузитьДокумент(ТекстXML, ВидДокумента, ЗагружаемыеОбъекты, ОшибкаЧтенияITEM)
	
	//vd_180829 //Устанавливается в значение Ложь. Если при прочтении ТЧ локумента возникает соответствующая ситуация то переходит в Истина
	ОшибкаЧтенияITEM = Ложь;
	
	Если НЕ (ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента) Тогда
		Возврат;
	КонецЕсли;
	
	//vd_180829
	//Если у документа нет атриюута ТекстXML.ЗначениеАтрибута("IsPost"), то это не документ а скорей всего табличная часть. ошибка чтения Xml
	Если ТекстXML.ЗначениеАтрибута("IsPost") = Неопределено Тогда
		Возврат;
	КонецЕсли;  	
	
	стррПараметры = СоздатьСтруктуруПараметровЗагрузкиДокумента(ТекстXML, ВидДокумента);
	
	Если стррПараметры.ПропускДокумента Тогда	
		ТекстXML.Пропустить();
		ТекстСообщения =  	"ru = 'Пропущена загрузка документа. " + стррПараметры.ПричинаПропуска + " Документ: " + стррПараметры.Представление + ". ИдДокумента: " + стррПараметры.ИдОбъекта + "'";
		ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обмен"], СтатусСообщения.Информация, ВыбАгент, ?(стррПараметры.ОбъектДокумента = Неопределено, Неопределено, стррПараметры.ОбъектДокумента));
		Возврат;
	Иначе
		Если ВидДокумента = "ЗаказПокупателя" Тогда		
			ЗагрузитьДокументЗаказ(ТекстXML, стррПараметры, ЗагружаемыеОбъекты, ОшибкаЧтенияITEM);
		ИначеЕсли ВидДокумента = "РеализацияТоваровУслуг" Тогда 	
			ЗагрузитьДокументРеализация(ТекстXML, стррПараметры, ЗагружаемыеОбъекты, ОшибкаЧтенияITEM);	
		ИначеЕсли ВидДокумента = "ПриходныйКассовыйОрдер" Или ВидДокумента = "РасходныйКассовыйОрдер" Тогда 
			ЗагрузитьДокументОрдер(ТекстXML, стррПараметры, ЗагружаемыеОбъекты);
		ИначеЕсли ВидДокумента = "ВозвратТоваровОтПокупателя" Тогда 
			ЗагрузитьДокументВозврат(ТекстXML, стррПараметры, ЗагружаемыеОбъекты, ОшибкаЧтенияITEM);
		ИначеЕсли ВидДокумента = "ПоступлениеТоваровУслуг" Тогда	
			ЗагрузитьДокументПоступление(ТекстXML, стррПараметры, ЗагружаемыеОбъекты, ОшибкаЧтенияITEM);
		ИначеЕсли ВидДокумента = "ПеремещениеТоваров"  Тогда
			ЗагрузитьДокументПеремещение(ТекстXML, стррПараметры, ОшибкаЧтенияITEM);				
		ИначеЕсли ВидДокумента = "Посещение"  Тогда 
			ЗагрузитьПосещенияВФайл(ТекстXML);
		//(( sk_190628 Выполняем загрузку документа "Мерчендайзинг" в рамках (MOD-469)	
		ИначеЕсли ВидДокумента = "Мерчендайзинг" Тогда 
			ЗагрузитьДокументМерчендайзинг(ТекстXML, стррПараметры, ЗагружаемыеОбъекты, ОшибкаЧтенияITEM);
		//)) sk_190628	
		Иначе
			ТекстXML.Пропустить();
			стррПараметры.ПропускДокумента = Истина;
			стррПараметры.ПричинаПропуска  = "Вид документов не поддерживается. """ + ВидДокумента + """";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//vd_180810 Добавлена
Функция СоздатьСтруктуруПараметровЗагрузкиДокумента(ТекстXML, ВидДокумента)
	
	стррПараметры = Новый Структура("Дата, Номер, ИдОбъекта, ЭтоНовый, Проведен, ПропускДокумента, ПричинаПропуска, " +
											"ОбъектДокумента, Синоним, Представление, ВидДокумента, ЭтоВиртуальныйДокумент," + 
											"стррКоординаты, идКатегория");
	
	ЭтоВиртуальныйДокумент = Ложь;
	//(( sk_190628 В рамках (MOD-469)
	//Если ВидДокумента = "Посещение" Тогда
	//	ЭтоВиртуальныйДокумент = Истина;
	//КонецЕсли;
	Если ВидДокумента = "Посещение" ИЛИ ВидДокумента = "Мерчендайзинг"  Тогда
		ЭтоВиртуальныйДокумент = Истина;
	КонецЕсли;
	//)) sk_190628
	
	Если НЕ ЭтоВиртуальныйДокумент Тогда
		ДокМенеджер = Документы[ВидДокумента];
	КонецЕсли;
	
	стррПараметры.Дата 		       = Строка(ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("dt")));
	стррПараметры.Номер 	       = СокрЛП(ТекстXML.ПолучитьАтрибут("DocNumberPrefix")) + СокрЛП(ТекстXML.ПолучитьАтрибут("DocNumber"));
	стррПараметры.ИдОбъекта        = Новый УникальныйИдентификатор(ТекстXML.ЗначениеАтрибута("GUID"));
	стррПараметры.ЭтоНовый         = Истина;
	стррПараметры.Проведен	       = Булево(Число(ТекстXML.ЗначениеАтрибута("IsPost"))); 
	стррПараметры.ПропускДокумента = Ложь;
	стррПараметры.ПричинаПропуска  = "";	
	стррПараметры.ОбъектДокумента  = Неопределено;
	стррПараметры.Синоним          = ?(ЭтоВиртуальныйДокумент, ВидДокумента, ДокМенеджер.ПустаяСсылка().Метаданные().Синоним);
	стррПараметры.Представление    = стррПараметры.Синоним + ?(ЗначениеЗаполнено(стррПараметры.Номер), " N " + СокрЛП(стррПараметры.Номер), "") + " от " + стррПараметры.Дата;	
	стррПараметры.ВидДокумента     = ВидДокумента;
	стррПараметры.ЭтоВиртуальныйДокумент = ЭтоВиртуальныйДокумент;
	стррПараметры.стррКоординаты   = Новый Структура("КоординатыGPS, Широта, Долгота");
	стррПараметры.ИдКатегория	   = Неопределено;
	
	Если Не стррПараметры.Проведен Тогда
		стррПараметры.ПропускДокумента  = Истина; 
		стррПараметры.ПричинаПропуска = "Документ не проведен в мобильном приложении!";
	КонецЕсли;

	Если стррПараметры.ПропускДокумента Тогда
		Возврат стррПараметры;
	КонецЕсли;
	
	//++стррПараметры.ОбъектДокумента
	Если НЕ ЭтоВиртуальныйДокумент Тогда 
		СсылкаОбъекта = ДокМенеджер.ПолучитьСсылку(стррПараметры.ИдОбъекта);
		ОбъектДок = СсылкаОбъекта.ПолучитьОбъект();
		Если ОбъектДок = Неопределено Тогда // загружаем новый документ
			ОбъектДок = ДокМенеджер.СоздатьДокумент();
			ОбъектДок.УстановитьСсылкуНового(СсылкаОбъекта);
			стррПараметры.ЭтоНовый = Истина;
		Иначе
			стррПараметры.ЭтоНовый = Ложь; // sk_180927 Документ считаем успешно загруженным в БД
			Если Не флОбновлятьДокументыПриЗагрузке Тогда
				стррПараметры.ПропускДокумента  = Истина; 					// документ уже есть в БД и его не нужно обновлять.
				стррПараметры.ПричинаПропуска = "Документ уже загружен.";
				//стррПараметры.ЭтоНовый          = Ложь;   					// sk_180927
			Иначе
				ОбъектДок.Разблокировать();	//Взято из НТВ11. Выполняет разблокировку документа, если он заблокирован этим объектом.
			КонецЕсли;
		КонецЕсли;
		стррПараметры.ОбъектДокумента = ОбъектДок;
	//(( sk_190628 В рамках (MOD-469)
	Иначе
	    // Виртуальный документ
		МодульВОБД = МодульВОБД();
		
		текВОТипОбъекта = ВОТипОбъекта[стррПараметры.ВидДокумента]; 
		стррСсылка = МодульВОБД.СоздатьСсылкуВО(текВОТипОбъекта, стррПараметры.ИдОбъекта);
		флДокСуществует = МодульВОБД.ЭлементСуществует(стррСсылка); 
		стррПараметры.ЭтоНовый = Не флДокСуществует;
		
		Если флДокСуществует Тогда
			// Документ существует в БД ВО
			ТекстОшибки = Неопределено;
			стррОбъект = МодульВОБД.ЭлементПолучить(стррСсылка, ТекстОшибки); 
												
			Если ЗначениеЗаполнено(стррОбъект) Тогда
				стррПараметры.Номер = стррОбъект.Номер;
			КонецЕсли;
												
			Если Не флОбновлятьДокументыПриЗагрузке Тогда
				стррПараметры.ПропускДокумента = Истина; 					
				стррПараметры.ПричинаПропуска = "Документ уже загружен."
			КонецЕсли;			
			
			Если ЗначениеЗаполнено(ТекстОшибки) Тогда
				ОповеститьОСобытии(ТекстОшибки, ТипыЛогов["Обмен"], СтатусСообщения.Внимание);				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	//)) sk_190628
		
	Возврат стррПараметры;
	
КонецФункции

//Альфия 18.05.2017
//vd_180827 Убран параметр Агент.
Процедура ЗагрузитьПосещенияВФайл(ТекстXML)
	
	//(( sk_181016	
	//Перем ЭтоНовый;
	//ЭтоНовый = Ложь;
	//)) sk_181016
	
	Агент    = ВыбАгент;
	
	//Создание папки треков
	путьПапкаПосещений = НастройкиОбработки["ПапкаТреки"] + "Vizits" + "\"; // Альфия 16.05.2017
	ПапкаПосещений = Новый Файл(путьПапкаПосещений);
	Если не ПапкаПосещений.Существует() тогда
		СоздатьКаталог(путьПапкаПосещений); 	
	КонецЕсли;
	
	//Создание папки агента
	путьПапкаАгента = путьПапкаПосещений + Строка(Агент.УникальныйИдентификатор()) + "\";
	ПапкаАгента = Новый Файл(путьПапкаАгента);
	Если не ПапкаАгента.Существует() тогда
		СоздатьКаталог(путьПапкаАгента); 	
	КонецЕсли;
	
	стррДанные = Новый ТаблицаЗначений;
	стррДанные.Колонки.Добавить("ИдДокумента");
	стррДанные.Колонки.Добавить("ДатаСоздания");
	стррДанные.Колонки.Добавить("ИДКонтрагента");
	стррДанные.Колонки.Добавить("Широта");
	стррДанные.Колонки.Добавить("Долгота");
	стррДанные.Колонки.Добавить("ИДРезультата");
	
	//(( sk_181016 Исключаем функционал сохранения истории загрузок в файл
	//ИсторияЗагрузок = Новый ТаблицаЗначений;
	//ИсторияЗагрузок.Колонки.Добавить("ИдДокумента");
	//ИсторияЗагрузок.Колонки.Добавить("СтатусЗагрузки");
	//ИсторияЗагрузок.Колонки.Добавить("ДатаЗагрузки");
	//)) sk_181016
	
	//vd_180827
	//Пока ТекстXML.Прочитать() Цикл 	
	//Если ТекстXML.Имя = эл_Документ И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
	//	Прервать;				
	//КонецЕсли;
	//Если ТекстXML.Имя = эл_Элемент И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
	
	// sk_181003 Изменен формат наименования файла на yyyyMMdd.txt
	//Файл = НайтиФайлы(путьПапкаАгента, СтрЗаменить(Лев(ТекстXML.ЗначениеАтрибута("dt"),10)," ","") + ".txt");
	Файл = НайтиФайлы(путьПапкаАгента, СтрЗаменить(Лев(ТекстXML.ЗначениеАтрибута("dt"),10),"-","") + ".txt");  
	Попытка
		ИдОбъекта = Новый УникальныйИдентификатор(ТекстXML.ЗначениеАтрибута("A02"));
		объектСпр = Справочники.Контрагенты.ПолучитьСсылку(ИдОбъекта);						
		Если объектСпр.НаименованиеПолное <> Неопределено тогда
			Если Файл.Количество() <>  0 Тогда 
				// sk_181003 Изменен формат наименования файла на yyyyMMdd.txt
				//стррДанные = ЗначениеИзФайла(путьПапкаАгента+ СтрЗаменить(Лев(ТекстXML.ЗначениеАтрибута("dt"),10)," ","") + ".txt");
				стррДанные = ЗначениеИзФайла(путьПапкаАгента + СтрЗаменить(Лев(ТекстXML.ЗначениеАтрибута("dt"),10),"-","") + ".txt"); 
				Если стррДанные.Найти(ТекстXML.ЗначениеАтрибута("GUID")) = Неопределено Тогда
					Строка = стррДанные.Добавить();
					Строка.ИдДокумента = ТекстXML.ЗначениеАтрибута("GUID");
					Строка.ДатаСоздания = СтрЗаменить(ТекстXML.ЗначениеАтрибута("dt"),"T"," ");
					Строка.ИДКонтрагента = ТекстXML.ЗначениеАтрибута("A02");
					Строка.Широта = ТекстXML.ЗначениеАтрибута("A07");
					Строка.Долгота = ТекстXML.ЗначениеАтрибута("A08");
					Строка.ИДРезультата = ТекстXML.ЗначениеАтрибута("A04");
					
					//(( sk_181016 Исключаем функционал сохранения истории загрузок в файл
					//стр = тзИсторияЗагрузок.Добавить();
					//стр.ИдДокумента = ТекстXML.ЗначениеАтрибута("GUID");
					//стр.СтатусЗагрузки = "Загружен"; 
					//стр.ДатаЗагрузки = ТекущаяДата();
					
					//ЗначениеВФайл(путьПапкаАгента+ "История.txt",ИсторияЗагрузок);
					//)) sk_181016
					
					УстановитьКоординаты(объектСпр);
					
					// sk_181003 Изменен формат наименования файла на yyyyMMdd.txt
					//ЗначениеВФайл(путьПапкаАгента+ СтрЗаменить(Лев(ТекстXML.ЗначениеАтрибута("dt"),10)," ","") + ".txt",стррДанные);
					ЗначениеВФайл(путьПапкаАгента+ СтрЗаменить(Лев(ТекстXML.ЗначениеАтрибута("dt"),10),"-","") + ".txt", стррДанные); 
										
					//(( sk_181004 Приводим вывод текста сообщения в логе к одному виду
					//Сообщить("Загружен документ ""Посещение"" контрагента "  + объектСпр.НаименованиеПолное + " от " + СтрЗаменить(Лев(ТекстXML.ЗначениеАтрибута("dt"),10),"-","."),СтатусСообщения.Информация); 
					ТекстСообщения = "ru='Загружен документ ""Посещение контрагента "  + объектСпр.НаименованиеПолное + " от " + Строка(ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("dt"))) + """. ИдДокумента: " + ТекстXML.ЗначениеАтрибута("GUID") + "'";
					//)) sk_181004
				Иначе
					//(( sk_181004 Приводим вывод текста сообщения в логе к одному виду
					//Сообщить("Пропущена загрузка документа ""Посещение"" контрагента " + объектСпр.НаименованиеПолное + " от " + СтрЗаменить(Лев(ТекстXML.ЗначениеАтрибута("dt"),10),"-",".") + " (загружен ранее)",СтатусСообщения.Информация); 
					ТекстСообщения = "ru='Пропущена загрузка документа. Документ уже загружен. Документ: Посещение контрагента " + объектСпр.НаименованиеПолное + " от " + Строка(ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("dt"))) + ". ИдДокумента: " + ТекстXML.ЗначениеАтрибута("GUID") + "'";
					//)) sk_181004
				КонецЕсли;
				ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обмен"], СтатусСообщения.Информация, ВыбАгент, Неопределено); // sk_181004
			Иначе
				Строка = стррДанные.Добавить();
				Строка.ИдДокумента = ТекстXML.ЗначениеАтрибута("GUID");
				Строка.ДатаСоздания = СтрЗаменить(ТекстXML.ЗначениеАтрибута("dt"),"T"," ");
				Строка.ИДКонтрагента = ТекстXML.ЗначениеАтрибута("A02");
				Строка.Широта = ТекстXML.ЗначениеАтрибута("A07");
				Строка.Долгота = ТекстXML.ЗначениеАтрибута("A08");
				Строка.ИДРезультата = ТекстXML.ЗначениеАтрибута("A04");
				
				//(( sk_181016 Исключаем функционал сохранения истории загрузок в файл
				//стр = тзИсторияЗагрузок.Добавить();
				//стр.ИдДокумента = ТекстXML.ЗначениеАтрибута("GUID");
				//стр.СтатусЗагрузки = "Загружен"; 
				//стр.ДатаЗагрузки = ТекущаяДата();
				
				//ЗначениеВФайл(путьПапкаАгента+ "История.txt",ИсторияЗагрузок);
				//)) sk_181016

				УстановитьКоординаты(объектСпр);
				
				// sk_181003 Изменен формат наименования файла при выгрузке на yyyyMMdd.txt
				//ЗначениеВФайл(путьПапкаАгента+ СтрЗаменить(Лев(ТекстXML.ЗначениеАтрибута("dt"),10)," ","") + ".txt",стррДанные);
				ЗначениеВФайл(путьПапкаАгента+ СтрЗаменить(Лев(ТекстXML.ЗначениеАтрибута("dt"),10),"-","") + ".txt", стррДанные);
								
				//(( sk_181004 Приводим вывод текста сообщения в логе к одному виду
				//Сообщить("Загружен документ ""Посещение"" контрагента " + объектСпр.НаименованиеПолное + " от " + СтрЗаменить(Лев(ТекстXML.ЗначениеАтрибута("dt"),10),"-","."),СтатусСообщения.Информация);
				ТекстСообщения = "ru='Загружен документ ""Посещение контрагента "  + объектСпр.НаименованиеПолное + " от " + Строка(ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("dt"))) + """. ИдДокумента: " + ТекстXML.ЗначениеАтрибута("GUID") + "'";
				ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обмен"], СтатусСообщения.Информация, ВыбАгент, Неопределено);
				//)) sk_181004
			КонецЕсли;
		Иначе
			//(( sk_181004 Приводим вывод текста сообщения в логе к одному виду
			//Сообщить("Не найден объект справочника ""Контрагенты""",СтатусСообщения.Важное);
			ТекстСообщения = "ru='Не найден объект справочника ""Контрагенты""'";	
			ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обмен"], СтатусСообщения.Информация, ВыбАгент, Неопределено);
			//)) sk_181004
		КонецЕсли;
	Исключение
	КонецПопытки;  
	
	//vd_180827
	//	КонецЕсли;		
	//КонецЦикла;
	
КонецПроцедуры

// sk_181217 Добавлена
// Конвертирует переданные координаты из формата WGS84 в формат NMEA
//
// Параметры:
//	Координата - Число - значение координаты в формате WGS84
//
// Возвращаемое значение:
// 	Число - значение координаты в формате NMEA 
//
Функция КоординатаИзWGS84ВNMEA(Координата)
	
	Возврат Цел(Координата) * 100 + (Координата - Цел(Координата)) * 60;
	
КонецФункции // КоординатаИзWGS84ВNMEA()

Процедура УстановитьКоординаты (Объект)
	
	//(( sk_181005 Проверяем наличие элементов в справочнике "ВидыКонтактнойИнформации", в случае отсутствия создаем
	стрКлючВидШирота = "Широта";
	стрКлючВидДолгота = "Долгота";
	Тип = Перечисления.ТипыКонтактнойИнформации.Другое;
	ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты;
	
	Если Не НайденВидОбъектаКонтактнойИнформации(стрКлючВидШирота, ВидОбъектаКонтактнойИнформации) Тогда
		ЭлементВидШирота = Справочники.ВидыКонтактнойИнформации.СоздатьЭлемент();
		ЭлементВидШирота.Наименование = стрКлючВидШирота;
		ЭлементВидШирота.Тип = Тип;
		ЭлементВидШирота.ВидОбъектаКонтактнойИнформации = ВидОбъектаКонтактнойИнформации;
		ЭлементВидШирота.Записать();
	КонецЕсли;
	
	Если Не НайденВидОбъектаКонтактнойИнформации(стрКлючВидДолгота, ВидОбъектаКонтактнойИнформации) Тогда
		ЭлементВидДолгота = Справочники.ВидыКонтактнойИнформации.СоздатьЭлемент();
		ЭлементВидДолгота.Наименование = стрКлючВидДолгота;
		ЭлементВидДолгота.Тип = Тип;
		ЭлементВидДолгота.ВидОбъектаКонтактнойИнформации = ВидОбъектаКонтактнойИнформации;
		ЭлементВидДолгота.Записать();
	КонецЕсли;
	//)) sk_181005
	
	
	// sk_181005
	//ВидШирота = Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Широта");
	ВидШирота = Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию(стрКлючВидШирота);
	
	// sk_181005
	//ВидДолгота = Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Долгота");	
	ВидДолгота = Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию(стрКлючВидДолгота);
	
	//(( sk_181005 Выборку проводим по адресу доставки и фактическому адресу юр.лица
	//ВидАдрес = Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Фактический адрес юр.лица");
	ВидАдрес = Новый СписокЗначений;
	ВидАдрес.Добавить(Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Адрес доставки"));
	ВидАдрес.Добавить(Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Фактический адрес юр.лица"));
	//)) sk_181005
	
	//Запрос = новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//|	КонтактнаяИнформация.Представление КАК Широта,
	//|	КонтактнаяИнформация1.Представление КАК Долгота,
	//|	КонтактнаяИнформация2.Представление КАК Адрес
	//|ИЗ
	//|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	//|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация2
	//|			ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация1
	//|			ПО КонтактнаяИнформация2.Объект = КонтактнаяИнформация1.Объект
	//|		ПО КонтактнаяИнформация.Объект = КонтактнаяИнформация2.Объект
	//|ГДЕ
	//|	КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Другое)
	//|	И КонтактнаяИнформация.Вид = &ВидШирота
	//|	И КонтактнаяИнформация1.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Другое)
	//|	И КонтактнаяИнформация1.Вид = &ВидДолгота
	//|	И КонтактнаяИнформация2.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	//|	И КонтактнаяИнформация2.Вид = &ВидАдрес
	//|	И КонтактнаяИнформация2.Объект = &Объект";
	//
	//Запрос.УстановитьПараметр("ВидШирота",ВидШирота); //нужна проверка на создание перечислений
	//Запрос.УстановитьПараметр("ВидДолгота",ВидДолгота);  //нужна проверка на создание перечислений
	//Запрос.УстановитьПараметр("ВидАдрес",ВидАдрес);  
	//Запрос.УстановитьПараметр("Объект",Объект);  
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//Если Выборка.Количество() = 0 тогда
	Адрес = ПроверкаУказанЛиАдрес(Объект, ВидАдрес);
	Если Адрес <> Неопределено Тогда
		
		Координаты = ПолучитьКоординатыОтВебСервиса(Адрес, Ложь);	
				
		ЗаписьРегистраСведений = РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
		ЗаписьРегистраСведений.Объект        = Объект;
		ЗаписьРегистраСведений.Тип           = Тип;  // ЗаписьРегистраСведений.Тип           = Перечисления.ТипыКонтактнойИнформации.Другое; sk_181005
		ЗаписьРегистраСведений.Вид           = ВидДолгота;
		ЗаписьРегистраСведений.Представление = КоординатаИзWGS84ВNMEA(Координаты.Получить(стрКлючВидДолгота)); // Координаты.Получить(стрКлючВидДолгота) sk_181217 (MOD-199)
        ЗаписьРегистраСведений.Записать();
		
		ЗаписьРегистраСведений = РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
		ЗаписьРегистраСведений.Объект        = Объект; 
		ЗаписьРегистраСведений.Тип           = Тип;     // ЗаписьРегистраСведений.Тип           = Перечисления.ТипыКонтактнойИнформации.Другое; sk_181005
		ЗаписьРегистраСведений.Вид           = ВидШирота;
		ЗаписьРегистраСведений.Представление = КоординатаИзWGS84ВNMEA(Координаты.Получить(стрКлючВидШирота)); // Координаты.Получить(стрКлючВидШирота) sk_181217 (MOD-199)
		ЗаписьРегистраСведений.Записать();
		
	КонецЕсли;
	//КонецЕсли;	
КонецПроцедуры

// sk_181005 Добавлена
// Проверяет наличие элементов в справочнике ВидыКонтактнойИнформации по значению реквизита ВидОбъектаКонтактнойИнформации
//
// Параметры:
//	Наименование - Строка - наименование элемента
//	ВидОбъектаКонтактнойИнформации - ПеречислениеСсылка - вид объекта контактной информации
//
// Возвращаемое значение:
//  Истина - нашли реквизит с таким именем
//  Ложь - не нашли
//
Функция НайденВидОбъектаКонтактнойИнформации(Наименование, ВидОбъектаКонтактнойИнформации)
	
	ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию(Наименование);
	Если Не ВидКонтактнойИнформации = Неопределено Тогда
		Если ВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = ВидОбъектаКонтактнойИнформации Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // НайденВидОбъектаКонтактнойИнформации()

Функция ПроверкаУказанЛиАдрес(Объект, ВидАдрес)
	
	Запрос = Новый Запрос;
	
	//(( sk_181005 Выборку проводим по адресу доставки и фактическому адресу юр.лица
	//Запрос.Текст = "ВЫБРАТЬ
	//|	КонтактнаяИнформация.Представление КАК Адрес
	//|ИЗ
	//|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	//|ГДЕ
	//|	КонтактнаяИнформация.Объект = &Объект
	//|	И КонтактнаяИнформация.Вид = &ВидАдрес";
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	               |	ПОДСТРОКА(КонтактнаяИнформация.Представление, 1, 255) КАК Адрес
	               |ИЗ
	               |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	               |ГДЕ
	               |	КонтактнаяИнформация.Объект = &Объект
	               |	И КонтактнаяИнформация.Вид В(&ВидАдрес)
	               |	И ПОДСТРОКА(КонтактнаяИнформация.Представление, 1, 255) <> """"";
	//)) sk_181005
	
	Запрос.УстановитьПараметр("ВидАдрес",ВидАдрес);  
	Запрос.УстановитьПараметр("Объект",Объект);  
	
	Результат=Запрос.Выполнить();
	ТЗ = Результат.Выгрузить();
	Если ТЗ.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе	
		//(( sk_181005 Возвращаем адрес
		//Для к=0 по ТЗ.Количество()-1 Цикл
		//	Возврат ТЗ[0].Адрес;	
		//КонецЦикла;
		Возврат ТЗ[0].Адрес;
		//)) sk_181005
	КонецЕсли;
	
КонецФункции

Функция ПолучитьКоординатыОтВебСервиса (Знач Адрес, ВернутьОдинАдрес)
	Координаты = Новый Соответствие;
	ВебЗапрос = "1.x/?geocode=" + Адрес + "";
	ОтветСервера = ВыполнитьЗапросКВебСервису(, ВебЗапрос);
	Если ОтветСервера = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли; 
	// для ускорения циклов
	ТипУзлаНачалоЭлемента = ТипУзлаXML.НачалоЭлемента;
	СписокАдресов = Новый СписокЗначений;
	
	//Разбор XML ответа
	ЧтениеОтвета = Новый ЧтениеXML;
	ЧтениеОтвета.УстановитьСтроку(ОтветСервера);
	
	//Чтение XML строки
	Пока ЧтениеОтвета.Прочитать() Цикл
		ИмяПараметра = ЧтениеОтвета.Имя;
		ТипУзла = ЧтениеОтвета.ТипУзла;
		Если ТипУзла <> ТипУзлаНачалоЭлемента Тогда
			Продолжить;
		КонецЕсли;
		Если ИмяПараметра = "pos" Тогда
			ЧтениеОтвета.Прочитать();
			Индекс = Найти(ЧтениеОтвета.Значение, " ");
			Координаты.Вставить("Долгота", Число(Лев(ЧтениеОтвета.Значение, Индекс-1)));
			Координаты.Вставить("Широта",Число(Сред(ЧтениеОтвета.Значение, Индекс+1)));		
			//долгота = Число(Лев(ЧтениеОтвета.Значение, Индекс-1));
			//Координаты.Вставить("Долгота", СтрЗаменить(Цел(долгота)*100 + (долгота-Цел(долгота)) * 60,",","."));
			//широта = Число(Сред(ЧтениеОтвета.Значение, Индекс+1));
			//Координаты.Вставить("Широта",СтрЗаменить(Цел(широта)*100 + (широта-Цел(широта)) * 60,",","."));	
			//
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ЧтениеОтвета.Закрыть();
	
	Возврат Координаты;
	
КонецФункции

Функция ВыполнитьЗапросКВебСервису(Знач url = Неопределено, ВебЗапрос, ВернутьJSONСтруктуру = Ложь) Экспорт
	
	//(( sk_181005
	//Попытка
		//2017-06-01 Ратмир
		//СертификатКлиентаWindows = Новый СертификатКлиентаWindows(СпособВыбораСертификатаWindows.Выбирать);
		//СертификатыУдостоверяющихЦентровWindows = Новый СертификатыУдостоверяющихЦентровWindows();
		//ssl = Новый ЗащищенноеСоединениеOpenSSL(СертификатКлиентаWindows, СертификатыУдостоверяющихЦентровWindows);
		//2017-06-01 Ратмир
	//Исключение
	//	ssl = "";
	//КонецПопытки;
	//)) sk_181005
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL; // sk_181005 Инициализация объекта защищенного соединения OpenSSL
	
	Если url = Неопределено Тогда
		url = "geocode-maps.yandex.ru";
	КонецЕсли;
	
	Соединение = Новый HTTPСоединение(url,,,,,, ssl);
	HTTPЗапрос = Новый HTTPЗапрос(ВебЗапрос);	
	
	ОписаниеОшибки = "";
	Попытка 
		HTTPОтвет = Соединение.Получить(HTTPЗапрос);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru = 'Ошибка обращения к веб-сервису. '") + ОписаниеОшибки);
		Возврат Неопределено;
	КонецЕсли;

	Возврат HTTPОтвет.ПолучитьТелоКакСтроку();
	
КонецФункции
//Альфия 18.05.2017

Функция ЗагрузитьФотографии(ТекстXML, СоотвЗагруженныхОбъектов, Агент)
	
	// В этой папке у нас уже содержатся распакованные фото из файла выгрузки
	ПапкаВремФото = РабочаяПапка + Имена["ПапкаКартинки"] + "\";
	ТабЗагруженныхФото = СоотвЗагруженныхОбъектов[эл_Картинки];
	СпрХранилищеДопИнф = Справочники.ХранилищеДополнительнойИнформации;
	
	Пока ТекстXML.Прочитать() Цикл
		
		Если ТекстXML.Имя = эл_Картинки И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Прервать;
		КонецЕсли;
						
		Если ТекстXML.Имя = эл_Элемент И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда					
			
			СсылкаФото =  СпрХранилищеДопИнф.ПолучитьСсылку(Новый УникальныйИдентификатор(ТекстXML.ЗначениеАтрибута(ат_Гуид)));
			
			ИмяФайлаФото = ТекстXML.ЗначениеАтрибута(ат_ИмяФайла);
			ФорматФайла  = ТекстXML.ЗначениеАтрибута(ат_Формат);
			Комментарий  = ТекстXML.ЗначениеАтрибута(ат_Описание);
			
			НайдСтроки = ТабЗагруженныхФото.НайтиСтроки(Новый Структура("СсылкаФото", СсылкаФото)); 
			
			Если НайдСтроки.Количество() = 0 Тогда
				
				// Фото, не привязанное к документу
				НовСтрока = ТабЗагруженныхФото.Добавить();
				НовСтрока.СсылкаОбъект = Неопределено;
				НовСтрока.СсылкаФото = СсылкаФото;
						
			Иначе
				
				Для Каждого НайдСтрока Из НайдСтроки Цикл
					
					ссылкаОбъекта = НайдСтрока.СсылкаОбъект;
					ссылкаФото = НайдСтрока.СсылкаФото;
					Если ссылкаОбъекта <> Неопределено Тогда						
						Объект = ссылкаОбъекта.ПолучитьОбъект();
						Если Объект = Неопределено Тогда
							ТекстСообщения = "ru='Объект, на который ссылается фотография """ + ИмяФайлаФото + """ не был загружен в ЦБД (идентификатор объекта: " + Строка(ссылкаОбъекта.УникальныйИдентификатор()) + """)!'";
							ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обмен"], , Агент);
							ОповеститьОСобытии("ru='Пропущена загрузка фотографии: """ + ИмяФайлаФото + """!'", ТипыЛогов["Обмен"], СтатусСообщения.Внимание, Агент);
							Продолжить;
						КонецЕсли;
					Иначе
						Продолжить;
					КонецЕсли;
					
					типЗнч = ТипЗнч(ссылкаОбъекта);
					Если Не (типЗнч = Тип("ДокументСсылка.ЗаказПокупателя") Или типЗнч = Тип("СправочникСсылка.Контрагенты")) Тогда
						Представление = ссылкаОбъекта.ПолучитьОбъект().Метаданные().Представление();						
						ТекстСообщения = "ru='Загрузка фотографий (""" + ?(Комментарий = "", ИмяФайлаФото, Комментарий) + """) для объекта """ + Представление + """ не поддерживается!'";
						ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обмен"], , Агент);
						ОповеститьОСобытии("ru='Пропущена загрузка фотографии: """ + ИмяФайлаФото + """!'", ТипыЛогов["Обмен"], СтатусСообщения.Внимание, Агент);
						Продолжить;
					КонецЕсли;
					
					ПолныйПутьФото = ПапкаВремФото + Строка(ссылкаФото.УникальныйИдентификатор()) + Имена["РасширениеJPG"];
							
					ФайлФотоНаДиске = Новый Файл(ПолныйПутьФото);
					
					Если Не ФайлФотоНаДиске.Существует() Тогда Продолжить; КонецЕсли;
					
					ФотоМУ 			  	 		= Новый Картинка(ПолныйПутьФото, Ложь);
					НоваяКартинка = ФотоМУ.Преобразовать(ФорматКартинки.PNG);
					
					
					Если СсылкаФото.ПолучитьОбъект() = Неопределено Тогда
						
						НовыйОбъект = СпрХранилищеДопИнф.СоздатьЭлемент();
						НовыйОбъект.УстановитьСсылкуНового(СсылкаФото);
						НовыйОбъект.ВидДанных 	  = Перечисления.ВидыДополнительнойИнформацииОбъектов.Изображение;
						НовыйОбъект.Хранилище 	  = Новый ХранилищеЗначения(НоваяКартинка, Новый СжатиеДанных);
						НовыйОбъект.Объект    	  = НайдСтрока.СсылкаОбъект;
						НовыйОбъект.ИмяФайла  	  = ИмяФайлаФото;
						НовыйОбъект.Наименование  = ?(Комментарий = "", ИмяФайлаФото, Комментарий);						
						
						Представление = НайдСтрока.СсылкаОбъект.ПолучитьОбъект().Метаданные().Представление();						
						
						Если Не ВыполнитьОперациюДляОбъекта(НовыйОбъект, "запись", Агент) Тогда 						
							ОповеститьОСобытии("ru='Не удалось сохранить фотографию для объекта конфигурации """ + Представление + """ (" + НовыйОбъект.Наименование + ")'", ТипыЛогов["Обмен"], СтатусСообщения.Внимание, Агент);
							Продолжить;			
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции //ЗагрузитьФотографии()    

// sk_190116 Процедура не используется
//
Процедура ЗагрузитьНумераторы_OLD(ТекстXML, СоотвЗагруженныхОбъектов)
	
	СоответствиеЗагрНумераторов = Новый Соответствие;
	
	 Пока ТекстXML.Прочитать() Цикл
				
		Если ТекстXML.Имя = эл_Нумераторы И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			СоотвЗагруженныхОбъектов[эл_Нумераторы] = СоответствиеЗагрНумераторов;
			Прервать;
		КонецЕсли;
		
		Если ТекстXML.Имя = эл_Элемент Тогда
			
			СтрИдЭлемента = ТекстXML.ЗначениеАтрибута(ат_Гуид);
			СоответствиеЗагрНумераторов.Вставить(СтрИдЭлемента, Неопределено);	
		КонецЕсли;
							
	КонецЦикла; 
	
КонецПроцедуры

// sk_190116 Функция исключена в рамках (MOD-207)
// ЗагрузитьДанныеXML()
//Истина - ошибки загрузки данных
//Ложь - данные успешно загружены
//
Функция ЗагрузитьДанныеXML_OLD(ФайлЗагрузки, СоотвЗагруженныхОбъектов, ЭлЗапрос, данныеМУ, МассивАгентыМУ, ДанныеАгента, ДопНастройкиАгента)
	
	естьОшибки = Ложь;
	
	ДопНастройкиАгента = Неопределено;
	ДанныеАгента = Неопределено;
	Агент = Неопределено;
	
	ИдМУ = данныеМУ["ИдентификаторМУ"];	
	лЗапрос = Неопределено;
	
	СоотвЗагруженныхОбъектов = Новый Соответствие;	
	СоотвЗагрКонтстанты = Новый Соответствие;
	ТабЗагруженныхФото = Новый ТаблицаЗначений;
	ТабЗагруженныхФото.Колонки.Добавить("СсылкаФото");
	ТабЗагруженныхФото.Колонки.Добавить("СсылкаОбъект");   //тип ссылка на объект
	СоотвЗагруженныхОбъектов[эл_Картинки] = ТабЗагруженныхФото;
	
	ТекстXML = Новый ЧтениеXML;	
	ТекстXML.ОткрытьФайл(ФайлЗагрузки);
	ПродолжитьЗагрузку = Истина;		
	
	ЗагружаемыеОбъекты = ЗагруженныеОбъектыИзФайла(); //vd_180821 Добавлен новый атрибут
	
	Пока ТекстXML.Прочитать() И ПродолжитьЗагрузку Цикл
		
		Если ТекстXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда Продолжить; КонецЕсли;
		
		Если ТекстXML.Имя = эл_Константы Тогда
			
			Если ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				СоотвЗагруженныхОбъектов[эл_Константы] = СоотвЗагрКонтстанты;
				Продолжить;
			КонецЕсли;
			
			ЗапросОбновления = Неопределено;
			
			Пока ТекстXML.Прочитать() Цикл
				
				Если ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ТекстXML.Имя = эл_Константы Тогда
					Прервать;
				КонецЕсли;								
				
				Если ТекстXML.Имя = эл_Элемент И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
					СтрИдКонстанты = НРег(ТекстXML.ЗначениеАтрибута(ат_Гуид));
					
					Если СтрИдКонстанты = СтрИдКонстантыИдентификаторАгента Тогда
						
						стрИдАгент  = ТекстXML.ЗначениеАтрибута(ат_Значение);
						агентФайлаЗагрузки = ПолучитьПользователя(стрИдАгент);
						Если агентФайлаЗагрузки = Неопределено Тогда
							ОповеститьОСобытии("ru='Агент с идентификатором: " + стрИдАгент + " не найден в текущей БД!'", ТипыЛогов["Обмен"], СтатусСообщения.Внимание, Агент);
							естьОшибки = Истина;
							ПродолжитьЗагрузку = Ложь;
							Прервать;
						КонецЕсли;
						
						Если ДанныеАгента = Неопределено Тогда
							ДанныеАгента = ТабНастройкиАгентов.Найти(агентФайлаЗагрузки, "Пользователь");
							Если ДанныеАгента = Неопределено Тогда
								ТекстОшибки = "ru='Не найдены настройки агента """ + агентФайлаЗагрузки.Наименование + """!'";
								ОповеститьОСобытии(ТекстОшибки, ТипыЛогов["Обмен"], СтатусСообщения.Внимание, Агент);								
								естьОшибки = Истина;
								ПродолжитьЗагрузку = Ложь;
								Прервать;
							Иначе
								массивАгентыМУ = ТабАгентыМУ.НайтиСтроки(Новый Структура("УникальныйИдентификаторМУ, УникальныйИдентификаторАгента", данныеМУ["УникальныйИдентификатор"], ДанныеАгента["УникальныйИдентификатор"]));
								Если массивАгентыМУ.Количество() = 0 Тогда
									ТекстОшибки = "ru='Агент """ + агентФайлаЗагрузки.Наименование + """ не привязан к устройству """ + данныеМУ["Псевдоним"] + """!'";
									ОповеститьОСобытии(ТекстОшибки, ТипыЛогов["Обмен"], СтатусСообщения.Внимание, агентФайлаЗагрузки);
									естьОшибки = Истина;
									ПродолжитьЗагрузку = Ложь;
									Прервать;
								Иначе
									Агент = агентФайлаЗагрузки;
									ДопНастройкиАгента = ДопНастройкиАгентов[ДанныеАгента["УникальныйИдентификатор"]];
									КонецЕсли;
							КонецЕсли;
						КонецЕсли;
												
						ОповеститьОСобытии("ru='Получен файл загрузки от агента """ + Агент + """'", ТипыЛогов["Обмен"], СтатусСообщения.Информация);						
						
					ИначеЕсли СтрИдКонстанты = СтрИдКонстантыКодЗапроса Тогда
						ЗапросОбновления = ТекстXML.ЗначениеАтрибута(ат_Значение);							
						
						Попытка
							ЗапросОбновления = Новый УникальныйИдентификатор(ЗапросОбновления);
						Исключение
							ЗапросОбновления = Неопределено;
						КонецПопытки;
					Иначе
						Значение = ТекстXML.ЗначениеАтрибута(ат_Значение);
						СоотвЗагрКонтстанты.Вставить(СтрИдКонстанты, Значение);	
					КонецЕсли;
				КонецЕсли;
									
			КонецЦикла; 			
								
			Если ЗапросОбновления <> Неопределено И естьОшибки = Ложь Тогда
								
				СписокЭлементов = ПолучитьЗначениеНастройки("Запросы", "Соответствие");				
				ЭлЗапрос = СписокЭлементов[ЗапросОбновления];										
				
			КонецЕсли;
			
		ИначеЕсли ТекстXML.Имя = эл_Справочники Тогда
			
			Если ДанныеАгента = Неопределено Тогда
				ТекстСообщения = "ru='Неверный формат файла загрузки! Первым после тега """ + эл_Данные + """ должен быть тег """ + эл_Константы + """.'";
				ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обмен"], СтатусСообщения.Внимание);
				естьОшибки = Истина;
				ПродолжитьЗагрузку = Ложь;
			Иначе
				ЗагрузитьСправочники(ТекстXML, СоотвЗагруженныхОбъектов, Агент);
			КонецЕсли;
			
		ИначеЕсли ТекстXML.Имя = эл_Документы Тогда
			
			Если ДанныеАгента = Неопределено Тогда
				ТекстСообщения = "ru='Неверный формат файла загрузки! Первым после тега """ + эл_Данные + """ должен быть тег """ + эл_Константы + """.'";
				ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обмен"], СтатусСообщения.Внимание);
				естьОшибки = Истина;
				ПродолжитьЗагрузку = Ложь;
			Иначе                              
				//(( sk_180926 Если агент не выбран, то инициализируем агента из загруженных констант 
				Если ВыбАгент = Справочники.Пользователи.ПустаяСсылка() Тогда  
					ИзменитьВыбранногоАгента(ДанныеАгента["УникальныйИдентификатор"], данныеМУ["ИдентификаторМУ"])
				КонецЕсли;
				//)) sk_180926 
				
				//ЗагрузитьДокументы(ТекстXML, СоотвЗагруженныхОбъектов, Агент, ДанныеАгента, допДанныеАгента, ЗагружаемыеОбъекты); //vd_180821 добавлен атрибут ЗагружаемыеОбъекты
				ЗагрузитьДокументы(ТекстXML, СоотвЗагруженныхОбъектов, ЗагружаемыеОбъекты); // sk_180926 Исключены параметры : Агент, ДанныеАгент, допДанныеАгента
			КонецЕсли;			
			
		ИначеЕсли ТекстXML.Имя = эл_Картинки Тогда  
			
			Если ДанныеАгента = Неопределено Тогда
				ТекстСообщения = "ru='Неверный формат файла загрузки! Первым после тега """ + эл_Данные + """ должен быть тег """ + эл_Константы + """.'";
				ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обмен"], СтатусСообщения.Внимание);
				естьОшибки = Истина;
				ПродолжитьЗагрузку = Ложь;
			Иначе
				ЗагрузитьФотографии(ТекстXML, СоотвЗагруженныхОбъектов, Агент);						
			КонецЕсли;			
			
		ИначеЕсли ТекстXML.Имя = эл_Нумераторы Тогда  			
			
			Если ДанныеАгента = Неопределено Тогда
				ТекстСообщения = "ru='Неверный формат файла загрузки! Первым после тега """ + эл_Данные + """ должен быть тег """ + эл_Константы + """.'";
				ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обмен"], СтатусСообщения.Внимание);
				естьОшибки = Истина;
				ПродолжитьЗагрузку = Ложь;
			Иначе
				ЗагрузитьНумераторы_OLD(ТекстXML, СоотвЗагруженныхОбъектов); // ЗагрузитьНумераторы(ТекстXML, СоотвЗагруженныхОбъектов); sk_190116
			КонецЕсли;
			
		КонецЕсли;				
		
	КонецЦикла;
	
	ТекстXML.Закрыть();
	
	Если Не естьОшибки Тогда
		//vd_180822 Старая функция, еще используется.
		ЗакончитьЗагрузкуДокументов_old(СоотвЗагруженныхОбъектов, Агент);
		//vd_180822 Новая функция, нужно переделать 
		ЗакончитьЗагрузкуДокументов(ЗагружаемыеОбъекты);		
	КонецЕсли;
	
	Возврат естьОшибки;
	
КонецФункции // ЗагрузитьДанныеXML_OLD()

// Функция возвращает ссылку на элемент по полученному из XML уникальному идентификатору
// Параметры:
// ИдДокумента - Строка Уникального идентификатора
// Док - Имя документа, в котором необходимо найти элемент
// Возвращаемое значение:
// Найденная ссылка или пустая ссылка на документ, если искомого элеимента нет или неправильный идентификатор
Функция ПолучитьСсылкуИзДокумента(ИдДокумента, Док) Экспорт
	Перем СсылкаДокумента;
	
	Если ИдДокумента = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИдДокумента = НРег(ИдДокумента);
	
	ДокМенеджер = документы[Док];
	
	Если ЗначениеЗаполнено(ИдДокумента) Тогда
		
		ГуидДокумента = Новый УникальныйИдентификатор(ИдДокумента);
		СсылкаДокумента = ДокМенеджер.ПолучитьСсылку(ГуидДокумента);
		
	КонецЕсли;
	
	Если СсылкаДокумента = Неопределено Тогда
		СсылкаДокумента = ДокМенеджер.ПустаяСсылка();
	КонецЕсли;
	
	Возврат СсылкаДокумента;
	
КонецФункции //ПолучитьСсылкуИзДокумента


// sk_190116 Функция исключена в рамках (MOD-207)
//
//возвращает 	Истина, если есть ошибки
//				Ложь - если ошибок нет
Функция Загрузить_OLD(ФайлЗагрузки, СоотвЗагруженныхОбъектов = Неопределено, ИдМУ, ДанныеАгента = Неопределено, ВыгрузкаОтветныхДанных = Истина) Экспорт
	
	Перем Агент, ДопНастройкиАгента;
	
	//vd_180913 изменен параметры Функция оотвЗагруженныхОбъектов, на СоотвЗагруженныхОбъектов = Неопределено . И задано значение поумолчанию.
	Если СоотвЗагруженныхОбъектов = Неопределено Тогда
		СоотвЗагруженныхОбъектов = Новый Соответствие;	
	КонецЕсли;
	
	естьОшибки = Ложь;
	
	Если ДанныеАгента = Неопределено Тогда		// способ обмена "Агент Плюс СОД" (данные агента получим только после загрузки констант, когда узнаем от кого пришёл файл обмена)
		Агент = Неопределено;
		ДопНастройкиАгента = Неопределено;
	Иначе										// другие способы обмена (данные агента известны, т.к. выбираются в основной форме)
		Агент = ДанныеАгента["Пользователь"];
		ДопНастройкиАгента = ДопНастройкиАгентов[ДанныеАгента["УникальныйИдентификатор"]];
	КонецЕсли;	
	
	//Если НЕ ФайлЗагрузки.Существует() Тогда                                                                            
	//	ТекстСообщения = "ru='Не найден файл данных """ + ФайлЗагрузки.Имя + """ с мобильного устройства (идентификатор: " + ИдМУ + ")'";
	//	ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обмен"], СтатусСообщения.Внимание, Агент);
	//	Возврат Истина;
	//КонецЕсли;	
	//
	//Расширение = НРег(ФайлЗагрузки.Расширение);
	ИдМУ = НРег(ИдМУ);
	
	данныеМУ = ТабМобильныеУстройства.Найти(ИдМУ, "ИдентификаторМУ");
	
	Если ЗначениеЗаполнено(данныеМУ) Тогда			
		
		Если ДанныеАгента = Неопределено Тогда			//если загружаем данные по внешнему событию (от Агент Плюс СОД)
			
			ОповеститьОСобытии("ru='Поступили данные с мобильного устройства: " + данныеМУ["Псевдоним"] + ", идентификатор: " + ИдМУ + "'", ТипыЛогов["Обмен"]);		
			
			Отбор = Новый Структура;
			Отбор.Вставить("УникальныйИдентификаторМУ", данныеМУ["УникальныйИдентификатор"]);
			
		Иначе                        			//если загружаем данные от заданного агента
			
			настройкиАгента = ТабНастройкиАгентов.Найти(Агент, "Пользователь");
			Отбор = Новый Структура;
			Отбор.Вставить("УникальныйИдентификаторМУ", данныеМУ["УникальныйИдентификатор"]);
			Отбор.Вставить("УникальныйИдентификаторАгента", настройкиАгента["УникальныйИдентификатор"]);
			
		КонецЕсли;
		
		массивПривязанныеАгентыМУ = ТабАгентыМУ.НайтиСтроки(Отбор);
		количествоЗаписей = массивПривязанныеАгентыМУ.Количество();
		
		Если количествоЗаписей >= 1 Тогда
						
			СписокФайлов = Неопределено;
			
			Если Не ПереместитьФайлыЗагрузкиВРабочуюПапку_OLD(ДанныеАгента, данныеМУ, ФайлЗагрузки, СписокФайлов) Тогда		// Если Не ПереместитьФайлыЗагрузкиВРабочуюПапку(ДанныеАгента, данныеМУ, ФайлЗагрузки, СписокФайлов) Тогда sk_190116
				
				Если ИспользоватьZipАрхивы Тогда			
					Если СписокФайлов.Получить("ФайлАрхивЗагрузки") <> Неопределено Тогда
						структураАрхивЗагрузки = СписокФайлов["ФайлАрхивЗагрузки"];
						полныйПутьАрхива = структураАрхивЗагрузки["Каталог"] + структураАрхивЗагрузки["ИмяФайла"];						
						ИзвлечьZipАрхивОбмена_OLD(полныйПутьАрхива, ДанныеАгента, данныеМУ, СписокФайлов); // ИзвлечьZipАрхивОбмена(полныйПутьАрхива, ДанныеАгента, данныеМУ, СписокФайлов); sk_190116						
						АП_УдалитьФайлы(ТипыЛогов["Обмен"], Агент, полныйПутьАрхива);
					КонецЕсли;
				КонецЕсли;
					
				Если СписокФайлов = Неопределено Тогда
					
					АП_УдалитьФайлы(ТипыЛогов["Обмен"], Агент, ФайлЗагрузки);
					
				Иначе
					
					Если СписокФайлов.Получить("ФайлАрхивКартинки") <> Неопределено Тогда
						структураАрхивКартинки = СписокФайлов["ФайлАрхивКартинки"];
						имяАрхивКартинки = структураАрхивКартинки["Каталог"] + структураАрхивКартинки["ИмяФайла"];
						ИзвлечьZipАрхивКартинки_OLD(структураАрхивКартинки["Каталог"] + структураАрхивКартинки["ИмяФайла"], ДанныеАгента, СписокФайлов); // ИзвлечьZipАрхивКартинки(структураАрхивКартинки["Каталог"] + структураАрхивКартинки["ИмяФайла"], ДанныеАгента, СписокФайлов); sk_190116						
						АП_УдалитьФайлы(ТипыЛогов["Обмен"], Агент, имяАрхивКартинки);
					КонецЕсли;
										
					Если СписокФайлов.Получить("ФайлЗагрузки") <> Неопределено Тогда
						
						ЭлЗапрос = Неопределено;
						//ДопНастройкиАгента = ДопНастройкиАгентов[ДанныеАгента["УникальныйИдентификатор"]];
						//ДопНастройкиАгента = ?(ДопНастройкиАгента = Неопределено, СоздатьДопНастройкиАгентаПоУмолчанию(), ДопНастройкиАгента);
						структураФайла = СписокФайлов["ФайлЗагрузки"];						
						имяФайлЗагрузки = структураФайла["Каталог"] + структураФайла["ИмяФайла"];																
						
						Если ЗагрузитьДанныеXML_OLD(имяФайлЗагрузки, СоотвЗагруженныхОбъектов, ЭлЗапрос, данныеМУ, массивПривязанныеАгентыМУ, ДанныеАгента, ДопНастройкиАгента) Тогда // Если ЗагрузитьДанныеXML(имяФайлЗагрузки, СоотвЗагруженныхОбъектов, ЭлЗапрос, данныеМУ, массивПривязанныеАгентыМУ, ДанныеАгента, ДопНастройкиАгента) Тогда sk_190116
							естьОшибки = Истина;
						Иначе
							Если ДанныеАгента <> Неопределено Тогда
								Агент = ДанныеАгента["Пользователь"];
								ОповеститьОСобытии("ru='Данные от агента """ + Агент.Наименование + """ успешно загружены!'", ТипыЛогов["Обмен"], СтатусСообщения.Информация, Агент);
								АП_УдалитьФайлы(ТипыЛогов["Обмен"], Агент, имяФайлЗагрузки);
								
								// Всегда формируем ответную выгрузку	
								#Если Клиент Тогда
									Состояние(НСтр("ru='Выгрузка ответных данных ...'"));	
								#КонецЕсли					
								
								Если ВыгрузкаОтветныхДанных Тогда
									Выгрузить(ЭлЗапрос, Истина, СоотвЗагруженныхОбъектов, данныеМУ, ДанныеАгента, ДопНастройкиАгента); 
								КонецЕсли;
							Иначе
								ТекстСообщения = "ru='В файле данных не найден идентификатор агента!'";
								ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обмен"], СтатусСообщения.Внимание);	
							КонецЕсли;							
							
						КонецЕсли;
					Иначе											// если файла обмена нет, определяем данные агента из настроек
						Если ДанныеАгента = Неопределено Тогда
							Для Каждого текСтрока Из массивПривязанныеАгентыМУ Цикл
								Если текСтрока["Основной"] = Истина Тогда
									ДанныеАгента = ТабНастройкиАгентов.Найти(текСтрока["УникальныйИдентификаторАгента"], "УникальныйИдентификатор");
									Если ДанныеАгента = Неопределено Тогда
										естьОшибки = Истина;
										ТекстСообщения = "ru='Агент (идентификатор: " + текСтрока["УникальныйИдентификаторАгента"] + ") не найден в настройках!'";
										ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обмен"], СтатусСообщения.Внимание);
									Иначе
										Агент = ДанныеАгента["Пользователь"];
									КонецЕсли;
									Прервать;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
						
					КонецЕсли;	
					
					Если (Не естьОшибки) И ДанныеАгента = Неопределено Тогда
						естьОшибки = Истина;
						ТекстСообщения = "ru='Не найден основной агент устройства """ + данныеМУ["Псевдоним"] + """, идентификатор: " + ИдМУ + "!'";
						ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обмен"], СтатусСообщения.Внимание);
					КонецЕсли;
						
					Если (Не естьОшибки) И СписокФайлов.Получить("ФайлТрек") <> Неопределено Тогда
						
						//Создание папки треков
						путьПапкаТреков = НастройкиОбработки["ПапкаТреки"] + "Track" + "\"; // Альфия 16.05.2017
						ПапкаТреков = Новый Файл(путьПапкаТреков);
						Если не ПапкаТреков.Существует() тогда
							СоздатьКаталог(путьПапкаТреков); 	
						КонецЕсли;
						
						//Исходный файл 
						структураФайла = СписокФайлов["ФайлТрек"];						
						имяФайлТрека = структураФайла["Каталог"] + структураФайла["ИмяФайла"];																
						ФайлТрека = Новый Файл(имяФайлТрека);
						
						///////////////////!!!!!!!!!!!!!!!!  Альфия 16.05.2017
						//Создание папки агента
						путьПапкаАгента = путьПапкаТреков + Строка(Агент.УникальныйИдентификатор()) + "\";
						ПапкаАгента = Новый Файл(путьПапкаАгента);
						Если не ПапкаАгента.Существует() тогда
							СоздатьКаталог(путьПапкаАгента); 	
						КонецЕсли;
						
						ТекущаяДатаТрека = Неопределено; // текущая дата трека в виде строки "YYYY-MM-DD" (дата точек трека).
						стррДанные		 = Неопределено; 	
						ДатаВремяТочки	 = Неопределено;
						БылиИзменения 	 = Ложь;
						Сортировать		 = Ложь;
						
						ТекстовыйДокЗагружаемыйТрек = Новый ТекстовыйДокумент;
						ТекстовыйДокЗагружаемыйТрек.Прочитать(имяФайлТрека);
						
						Для НомерСтроки = 1 По ТекстовыйДокЗагружаемыйТрек.КоличествоСтрок() Цикл
							Строка = ТекстовыйДокЗагружаемыйТрек.ПолучитьСтроку(НомерСтроки);
							ДатаВремяТочки = ТрекДатаИзСтроки(Лев(Строка, 19)); 
							Если ТекущаяДатаТрека <> НачалоДня(ДатаВремяТочки) Тогда
								Если БылиИзменения Тогда			
									ТрекЗакрытьФайл(стррДанные, путьПапкаАгента, Сортировать);
								КонецЕсли;
								ТекущаяДатаТрека = НачалоДня(ДатаВремяТочки);
								стррДанные = ТрекОткрытьФайл(ТекущаяДатаТрека, путьПапкаАгента);
								тзТрек				= стррДанные.Трек;						
								ВремяНачалаТрека 	= стррДанные.ВремяНачала;
								ВремяОкончанияТрека = стррДанные.ВремяОкончания;
								БылиИзменения 	 = Ложь;
								Сортировать		 = Ложь;
							КонецЕсли;
							
							Если ДатаВремяТочки > ВремяОкончанияТрека Тогда
								стзТрек = тзТрек.Добавить();
								стзТрек.Время = ДатаВремяТочки;
								ТрекЗаполнитьРеквизитыСтроки(стзТрек, Строка);
								БылиИзменения = Истина;	
							ИначеЕсли ДатаВремяТочки < ВремяНачалаТрека Тогда // изменено время в МУ?
								стзТрек = тзТрек.Добавить();
								стзТрек.Время = ДатаВремяТочки;
								ТрекЗаполнитьРеквизитыСтроки(стзТрек, Строка);
								БылиИзменения = Истина;
								Сортировать	= Истина;			
							КонецЕсли;
							
						КонецЦикла;
						
						Если БылиИзменения Тогда
							ТрекЗакрытьФайл(стррДанные, путьПапкаАгента, Сортировать);
						КонецЕсли; 

						
						//Создание текстовых документов, проверка уникальности записей в них - перебор
						//Альфия 17.05.2017
						//Для НомерСтроки = 1 По ТекстовыйДокЗагружаемыйТрек.КоличествоСтрок() Цикл
						//	СтрПозицииТрека = ТекстовыйДокЗагружаемыйТрек.ПолучитьСтроку(НомерСтроки);
						//	ДатаТрека = Лев(СтрПозицииТрека, 10);
						//	ИмяФайлаТрека = ДатаТрека + ".txt"; 
						//	
						//	Если ПоискФайлаТрека(путьПапкаАгента, ИмяФайлаТрека) <> Неопределено Тогда 
						//		
						//		//ПоискНомераСтроки
						//		ПроверяемыйДокумент = Новый ТекстовыйДокумент;
						//		ПроверяемыйДокумент.Прочитать(путьПапкаАгента + ИмяФайлаТрека);
						//		// номерстроки 
						//		пр = НайтиНомерСтроки(имяФайлТрека,ПроверяемыйДокумент.ПолучитьСтроку(ПроверяемыйДокумент.КоличествоСтрок()));
						//		Если пр <> 0 и пр >= НомерСтроки Тогда
						//			НомерСтроки = пр;			
						//		Иначе
						//			ПроверяемыйДокумент.ДобавитьСтроку(СтрПозицииТрека);
						//			ПроверяемыйДокумент.Записать(путьПапкаАгента + ИмяФайлаТрека);
						//		КонецЕсли;
						//		
						//	Иначе
						//		Файл = Новый ЗаписьТекста(путьПапкаАгента + ИмяФайлаТрека);
						//		Файл.ЗаписатьСтроку(СтрПозицииТрека);
						//		Файл.Закрыть();	
						//	КонецЕсли;
						//	
						//КонецЦикла;	
						////Альфия 16.05.2017
						
						
						//путьПапкаТрековТекущийДень = путьПапкаАгента + Формат(датаПервогоОтчетаТрека,"ДФ=yyyy-MM-dd") + "\";
						//ПапкаТрековТекДата = Новый Файл(путьПапкаТрековТекущийДень);
						//ИмяФайлТрекаТекДата = "Track_" + Формат(датаПервогоОтчетаТрека, "ДФ=yyyyMMdd") + "_" + Имена["РасширениеTXT"];   // Альфия 16.05.2017
						//
						//Если ПапкаТрековТекДата.Существует() Тогда 
						//
						//    МассивФайловВКаталоге = НайтиФайлы(путьПапкаТрековТекущийДень, "*" + Имена["РасширениеTXT"]);
						//	файлТрекаНайден = Ложь;
						//	Для Каждого текФайл Из МассивФайловВКаталоге Цикл
						//		Если текФайл.Имя = ИмяФайлТрекаТекДата Тогда
						//			файлТрекаНайден = Истина;
						//			ТекстДокФайлСуществующийТрек = Новый ТекстовыйДокумент;
						//			ТекстДокФайлСуществующийТрек.Прочитать(текФайл.ПолноеИмя);
						//			Для НомерСтроки = 1 По ТекстовыйДокЗагружаемыйТрек.КоличествоСтрок() Цикл
						//				ТекстДокФайлСуществующийТрек.ДобавитьСтроку(ТекстовыйДокЗагружаемыйТрек.ПолучитьСтроку(НомерСтроки));										 
						//			КонецЦикла;
						//			ТекстДокФайлСуществующийТрек.Записать(текФайл.ПолноеИмя);
						//			Прервать;
						//		КонецЕсли;
						//	КонецЦикла;
						//
						//	Если Не файлТрекаНайден Тогда
						//		 ПереместитьФайл(имяФайлТрека, путьПапкаТрековТекущийДень + ИмяФайлТрекаТекДата);
						//	КонецЕсли;
						// 
						//Иначе							
						//	СоздатьКаталог(путьПапкаТрековТекущийДень); 
						//	ПереместитьФайл(имяФайлТрека, путьПапкаТрековТекущийДень +  ИмяФайлТрекаТекДата);							
						//КонецЕсли;
						
						АП_УдалитьФайлы(ТипыЛогов["Обмен"], Агент,  имяФайлТрека);
						
						Если (Не естьОшибки) И СписокФайлов.Получить("ФайлТрекСлужба") <> Неопределено Тогда							

							структураФайла = СписокФайлов["ФайлТрекСлужба"];						
							имяФайлФоновыйТрек = структураФайла["Каталог"] + структураФайла["ИмяФайла"];																
							ФайлФоновыйТрек = Новый Файл(имяФайлФоновыйТрек);
							//ИмяФайлТрекаТекДата = "Track_" + Формат(ТекущаяДата(), "ДФ=yyyyMMdd") + "_" +  Строка(Агент.УникальныйИдентификатор())  + Имена["РасширениеTXT"];
							Если ФайлФоновыйТрек.Существует() Тогда
								//ИмяПапкаТрекТекДата = ПапкаТреков + Формат(ТекущаяДата(),"ДФ=yyyy-MM-dd") + "\";
								//ПапкаТрекТекДата = Новый Файл(ИмяПапкаТрекТекДата);			
								//ТекстДокФоновыйТрек = Новый ТекстовыйДокумент;
								//ТекстДокФоновыйТрек.Прочитать(имяФайлФоновыйТрек); 	//Читаем ТХТ фонового трека
								//Если ПапкаТрекТекДата.Существует() Тогда 
								//	МассивФайловВКаталоге = НайтиФайлы(ИмяПапкаТрекТекДата, "*" +  Имена["РасширениеTXT"]);
								//	ФлагТрекНайден = Ложь;
								//	Для Каждого текФайл Из МассивФайловВКаталоге Цикл
								//		Если текФайл.Имя = ИмяФайлТрекаТекДата Тогда
								//			 ФлагТрекНайден = Истина;
								//			 ТекстДокФайл = Новый ТекстовыйДокумент;
								//			 ТекстДокФайл.Прочитать(текФайл.ПолноеИмя);
								//			 Для НомерСтроки = 1 По ТекстДокФоновыйТрек.КоличествоСтрок() Цикл
								//				 ТекстДокФайл.ДобавитьСтроку(ТекстДокФоновыйТрек.ПолучитьСтроку(НомерСтроки));
								//				 ТекстДокФайл.Записать(текФайл.ПолноеИмя);									 
								//			 КонецЦикла;
								//		КонецЕсли;
								//	КонецЦикла;
								//	Если Не ФлагТрекНайден Тогда
								//		 ПереместитьФайл(имяФайлФоновыйТрек, ИмяПапкаТрекТекДата + "\" + ИмяФайлТрекаТекДата);
								//	КонецЕсли;
								//Иначе
								//	СоздатьКаталог(ИмяПапкаТрекТекДата); 
								//	ПереместитьФайл(имяФайлФоновыйТрек, ИмяПапкаТрекТекДата + "\" +  ИмяФайлТрекаТекДата);
								//КонецЕсли;
								
								АП_УдалитьФайлы(ТипыЛогов["Обмен"], Агент, имяФайлФоновыйТрек);
							КонецЕсли;							
								
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;		// Если СписокФайлов = Неопределено
				
			КонецЕсли;         // Если Не ПереместитьФайлыЗагрузкиВРабочуюПапку()
						
		ИначеЕсли количествоЗаписей = 0 Тогда
			
			Если ДанныеАгента = Неопределено Тогда	//если загружаем данные по внешнему событию (от Агент Плюс СОД)							
								
				ТекстСообщения = "ru='Мобильному устройству не назначено ни одного активного пользователя!" + Символы.ПС +
								"Назначьте мобильному устройству активного пользователя на форме """ + Имена["НастройкиАгентов"] + """'";
							
			Иначе                        			//если загружаем данные от заданного агента
				
				ТекстСообщения = "ru='Пользователь " + Агент + " не привязан к мобильному устройству: " + данныеМУ["Псевдоним"] + ", идентификатор: " + ИдМУ + "!" + Символы.ПС +
								"Назначьте мобильному устройству пользователя " + Агент + " на форме """ + Имена["НастройкиАгентов"] + """'";
								
			КонецЕсли;
			
			
			ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обмен"], СтатусСообщения.Внимание);
			ПереместитьФайлыЗагрузкиВРабочуюПапку_OLD(ДанныеАгента, данныеМУ, ФайлЗагрузки); // ПереместитьФайлыЗагрузкиВРабочуюПапку(ДанныеАгента, данныеМУ, ФайлЗагрузки); sk_190116
			
		КонецЕсли;
		
	Иначе		
		 
		ОповеститьОСобытии("ru='Поступили данные с мобильного устройства: " + ИдМУ + "'", ТипыЛогов["Обмен"]);
		ОповеститьОСобытии("ru='Ни один пользователь не привязан к устройству!'", ТипыЛогов["Обмен"], СтатусСообщения.Внимание);
		
	    ПереместитьФайлыЗагрузкиВРабочуюПапку_OLD(ДанныеАгента, данныеМУ, ФайлЗагрузки); // ПереместитьФайлыЗагрузкиВРабочуюПапку(ДанныеАгента, данныеМУ, ФайлЗагрузки); sk_190116
		
		естьОшибки = Истина;
	КонецЕсли;
	
	СохранитьЛог(ТипыЛогов["Обмен"]);
	
	Возврат естьОшибки;
	
КонецФункции // Загрузить_OLD()

// sk_181220 Добавлена
// Возвращает массив агентов
//
// Параметры:
//  ЗапускЧерезАвтообмен - Булево - Истина, если запуск выполняется через автообмен
// 
// Возвращаемое значение:
//  мАгенты - Массив - массив агентов
//
Функция ПолучитьМассивАгентовПоСпособуОбмена(ЗапускЧерезАвтообмен)
	
	мАгенты = Новый Массив;
	ЗагрузитьВсехАгентов = Ложь;
	
	Если ЗапускЧерезАвтообмен = Ложь Тогда 
		ОсновнаяФорма = ПолучитьФорму("ОсновнаяФорма");     	
	
		Если ОсновнаяФорма.ЭлементыФормы.ГлавнаяПанель.ТекущаяСтраница.Имя = "Основная" И ВыбАгент.Пустая() Тогда
			ЗагрузитьВсехАгентов = Истина;
			
		ИначеЕсли ОсновнаяФорма.ЭлементыФормы.ГлавнаяПанель.ТекущаяСтраница.Имя = "Основная" И Не ВыбАгент.Пустая() Тогда
	    	мАгенты.Добавить(ВыбАгент);
			
		ИначеЕсли ОсновнаяФорма.ЭлементыФормы.ГлавнаяПанель.ТекущаяСтраница.Имя = "АгентПлюсСОД" Тогда	
			СпособОбмена = 1;
			Для Каждого Элемент Из ТабАгентыСОД Цикл
				Если Элемент.Пометка = Истина Тогда  
					мАгенты.Добавить(Элемент.Пользователь);
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ОсновнаяФорма.ЭлементыФормы.ГлавнаяПанель.ТекущаяСтраница.Имя = "ФТПСервер" Тогда	
			СпособОбмена = 2;
			Для Каждого Элемент Из ТабАгентыFTP Цикл
				Если Элемент.Пометка = Истина Тогда 
					мАгенты.Добавить(Элемент.Пользователь); 
				КонецЕсли;
			КонецЦикла;
						
		Иначе
			ОповеститьОСобытии("ru='Ошибка выбора способа обмена! Неизвестный способ обмена!'", ТипыЛогов["Обмен"], СтатусСообщения.Внимание);
			Возврат мАгенты;
		Конецесли;
		
	Конецесли;
	
	Если ЗапускЧерезАвтообмен Или ЗагрузитьВсехАгентов Тогда
		
		мАгентыМУ = ТабАгентыМУ.НайтиСтроки(Новый Структура("Основной", Истина));
		
		Для Каждого текСтрокаАгентМУ Из мАгентыМУ Цикл
			ИДАгент = текСтрокаАгентМУ["УникальныйИдентификаторАгента"];
			Агент = ТабНастройкиАгентов.Найти(ИДАгент, "УникальныйИдентификатор");
			мАгенты.Добавить(Агент.Пользователь);
		КонецЦикла;
				
	КонецЕсли;	
	
	Возврат мАгенты;
	
КонецФункции // ПолучитьМассивАгентовПоСпособуОбмена()

// sk_181220 Добавлена
// Возвращает папку агента на сервере по выбраному способу обмена: Агент Плюс СОД, FTP-сервер
// 
// Возвращаемое значение:
//  Строка 		 - каталог агента на сервере
//  Неопределено - ошибка выбора способа обмена/не указана папка обмена
//
Функция КаталогПроверитьИмяИПолучитьКаталогАгентаНаСервере()
	
	стрИмяАгента = СокрЛП(ВыбАгент.Наименование);
	
	Если СпособОбмена = 1 Тогда      // Агент Плюс СОД  
		стрПапкаАгента = КаталогДополнитьСлешВПуть(СокрЛП(НастройкиОбработки["ПапкаАгентСОД"])) + ВыбМобильноеУстройство["ПапкаСОД"]; // стрПапкаАгента = СокрЛП(НастройкиОбработки["ПапкаАгентСОД"]); sk_190214
	ИначеЕсли СпособОбмена = 2 Тогда // FTP-сервер
		стрПапкаАгента = СокрЛП(ВыбМобильноеУстройство["ПапкаFTP"]);	
	Иначе
		ОповеститьОСобытии("ru='Ошибка выбора способа обмена! Неизвестный способ обмена!'", ТипыЛогов["Обмен"], СтатусСообщения.Внимание);
		Возврат Неопределено;
	КонецЕсли;
	
	Если ПустаяСтрока(стрПапкаАгента) Тогда	 	
		ОповеститьОСобытии("ru='Для агента """ + стрИмяАгента + """ не указана папка обмена'", ТипыЛогов["Обмен"], СтатусСообщения.Внимание);
		Возврат Неопределено;
	КонецЕсли;
	
	//(( sk_190214
	//Если СпособОбмена = 1 Тогда      // Агент Плюс СОД
	//	стрПапкаАгента = КаталогДополнитьСлешВПуть(стрПапкаАгента) + ВыбМобильноеУстройство["ПапкаСОД"];		
	//КонецЕсли;
	//)) sk_190214

	Возврат стрПапкаАгента;
	
КонецФункции // КаталогПроверитьИмяИПолучитьКаталогАгентаНаСервере() 

// sk_181220 Добавлена
// Проверяет и создает подключение к FTP-серверу 
//
// Возвращаемое значение:
//  Неопределено - не удалось создать подключение
//  Истина		 - Истина, если подключение создано
//
Функция ФТП_ПроверитьИСоздатьПодключение()
	
	Если ПодключениеFTP = Неопределено Тогда
		Если ФТП_СоздатьПодключение() = Ложь Тогда
			Возврат Неопределено;
		КонецЕсли
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ФТП_ПроверитьИСоздатьПодключение()

// sk_181220 Добавлена
// Проверяет наличие файлов на FTP-сервере
//
// Параметры:
//  стрПуть - Строка - путь к каталогу
// 
// Возвращаемое значение:
// 	Результат - Неопределено - ошибка подключения
//			  - Истина - каталог или файл существует
//  		  - Ложь - каталог или файл не существует
//
Функция ФТП_ПроверитьСуществование(стрПуть)  
	
	Результат = Неопределено;
	
	Если ФТП_ПроверитьИСоздатьПодключение() = Неопределено Тогда
		Возврат Неопределено;		
	КонецЕсли;
	
	//(( sk_190214
	//Попытка
	//	Если ПодключениеFTP.НайтиФайлы(стрПуть).Количество() = 0 Тогда
	//		Результат = Ложь;
	//	Иначе
	//		Результат = Истина;
	//	КонецЕсли;
	//Исключение
	//	Если ФТП_СоздатьПодключение(Истина, Ложь) = Ложь Тогда
	//		Результат = Неопределено;
	//	Иначе
	//		Попытка
	//			Если ПодключениеFTP.НайтиФайлы(стрПуть).Количество() = 0 Тогда    
	//				Результат = Ложь;
	//			Иначе
	//				Результат = Истина;
	//			КонецЕсли;
	//		Исключение
	//			Результат = Ложь;   	
	//		КонецПопытки;
	//	КонецЕсли;
	//КонецПопытки;
	
	Попытка
		Результат = (ПодключениеFTP.НайтиФайлы(стрПуть).Количество() <> 0);
	Исключение
		Если ФТП_СоздатьПодключение(Истина, Ложь) = Ложь Тогда
			Результат = Неопределено;
		Иначе
			Попытка
				Результат = (ПодключениеFTP.НайтиФайлы(стрПуть).Количество() <> 0);
			Исключение
				Результат = Ложь;   	
			КонецПопытки;
		КонецЕсли;
	КонецПопытки;
	//)) sk_190214
	
	Возврат Результат;	
	
КонецФункции // ФТП_ПроверитьСуществование()

// sk_181220 Добавлена
// Возвращает массив имен файлов для загрузки
//
// Возвращаемое значение:
//  мИменаФайлов - Массив - массив имен файлов загрузки 
//
Функция ПолучитьМассивИменаФайловЗагрузки()
	
	мИменаФайлов = Новый Массив;
	мИменаФайлов.Добавить("To1C.zip");
	мИменаФайлов.Добавить("To1C.xml");
	мИменаФайлов.Добавить("gpstrack.txt");
	мИменаФайлов.Добавить("gpstrack.txt.clt");
	
	Возврат мИменаФайлов;
	
КонецФункции // ПолучитьМассивИменаФайловЗагрузки()

// sk_181220 Добавлена
// Возвращает массив файлов с типом FTPФайл с FTP-сервера 
//
// Параметры:
//  стрПуть  - Строка - путь к данным
//  стрМаска - Строка - маска файла 
// 
// Возвращаемое значение:
//  Неопределено - ошибка подключения
//	Массив 		 - массив найденных файлов с типом FTPФайл
//  Ложь		 - не существует каталога указанного в параметре стрПуть
//
Функция ФТП_НайтиФайлы(стрПуть, стрМаска)
	
	Результат = Неопределено;
	
	Если ФТП_ПроверитьИСоздатьПодключение() = Неопределено Тогда
		Возврат Неопределено;		
	КонецЕсли;
	
	Попытка
		Результат = ПодключениеFTP.НайтиФайлы(стрПуть, стрМаска);
	Исключение
		Если ФТП_СоздатьПодключение(Истина, Ложь) = Ложь Тогда
			Результат = Неопределено;
		Иначе
			Попытка
				Результат = ПодключениеFTP.НайтиФайлы(стрПуть, стрМаска);  
			Исключение
				Результат = Ложь;
			КонецПопытки;
		КонецЕсли;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции // ФТП_НайтиФайлы()

// sk_181220 Добавлена
// Выполняет очистку временных файлов в каталоге
//
// Параметры:
//  стрПуть	- Строка - путь к данным
//
// Возвращаемое значение:
//  Булево - Истина, если успешно
//
Функция КаталогОчиститьКаталогВременныхФайлов(стрПуть)
	
	мИменаФайлов = ПолучитьМассивИменаФайловЗагрузки();
	
	Для Каждого Файл Из мИменаФайлов Цикл
		стрПутьФайла = КаталогДополнитьСлешВПуть(стрПуть) + Файл;
		Если ПроверитьСуществованиеКаталога(стрПуть) Тогда
			АП_УдалитьФайлы(ТипыЛогов["Обмен"], ВыбАгент, стрПутьФайла);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // КаталогОчиститьКаталогВременныхФайлов()

// sk_181220 Добавлена
// Выполняет загрузку XML от агента
//
// Параметры:
//  стрФайлЗагрузки 		 - Строка - путь к файлу загрузки 
//  СоотвЗагруженныхОбъектов - Соответствие - соответствие загруженных объектов
//
// Возвращаемое значение:
//  Истина - данные успешно загружены
//  Ложь   - данные не загружены
//
Функция ЗагрузитьДанныеXML(стрФайлЗагрузки, СоотвЗагруженныхОбъектов)
	
	тзЗагруженныеФото = Новый ТаблицаЗначений;
	тзЗагруженныеФото.Колонки.Добавить("СсылкаФото");
	тзЗагруженныеФото.Колонки.Добавить("СсылкаОбъект");	
	
	СоотвЗагруженныхОбъектов[эл_Картинки] = тзЗагруженныеФото;
	
	ЗагружаемыеОбъекты = ЗагруженныеОбъектыИзФайла();
	
	ТекстXML = Новый ЧтениеXML; 
	
	ТекстXML.ОткрытьФайл(стрФайлЗагрузки);
	
	найденнаяСтрокаМУ = ПолучитьИдентификаторМУ(ВыбАгент);
	данныеМУ 		  = ТабМобильныеУстройства.Найти(найденнаяСтрокаМУ, "УникальныйИдентификатор");
	
	стрИДМУ 	   = данныеМУ["ИдентификаторМУ"];
	стрПсевдонимМУ = СокрЛП(данныеМУ["Псевдоним"]);
	
	гОбработаноЗаписей = гОбработаноЗаписей + 1;
	ОповеститьОСобытии("ru='" + Строка(гОбработаноЗаписей) + ". Начало загрузки данных обмена от агента: """ + СокрЛП(ВыбАгент.Наименование) + """ (мобильное устройство: """ + стрПсевдонимМУ + """, идентификатор: """ +  ВРег(стрИДМУ) + """) ...'", ТипыЛогов["Обмен"], СтатусСообщения.Информация, ВыбАгент);
		
	Пока ТекстXML.Прочитать() Цикл
		
		Если Не ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекстXML.Имя = "CONSTANTS" Тогда
			
			Если ТекстXML.Имя = "CONSTANTS" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				Продолжить;
			КонецЕсли;
			
			Пока ТекстXML.Прочитать() Цикл
				
				Если ТекстXML.Имя = "CONSTANTS" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					Прервать;
				КонецЕсли;
				
				ЗапросОбновления = Неопределено;
				
				Если ТекстXML.Имя = "ITEM" Тогда
					Если "79c698db-3c55-465e-acfe-4741acdd5655" = Нрег(ТекстXML.ЗначениеАтрибута("GUID")) Тогда
						АгентИд  = ТекстXML.ЗначениеАтрибута("Value");							
						АгентИзФайла = ПолучитьПользователя(АгентИд);
						Если Не АгентИзФайла = ВыбАгент Тогда							
							ОповеститьОСобытии("ru='Получен файл загрузки от агента: """ + АгентИзФайла + """'", ТипыЛогов["Обмен"], СтатусСообщения.Информация, АгентИзФайла);
							Если АгентИзФайла.ПолучитьОбъект() = Неопределено Тогда
								ОповеститьОСобытии("ru='Агент с идентификатором: """ + АгентИд + """ не найден в текущей БД! Загрузка не будет выполнена!'", ТипыЛогов["Обмен"], СтатусСообщения.Внимание);	
							КонецЕсли;
							Возврат Ложь;
						КонецЕсли;
					ИначеЕсли Нрег(ТекстXML.ЗначениеАтрибута("GUID")) = СтрИдКонстантыКодЗапроса Тогда
						ЗапросОбновления = ТекстXML.ЗначениеАтрибута("Value");
						
						Попытка
							ЗапросОбновления = Новый УникальныйИдентификатор(ЗапросОбновления);
						Исключение
							ЗапросОбновления = Неопределено;
						КонецПопытки;
						
						Прервать;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла; 			
						
			Если ЗапросОбновления <> Неопределено Тогда	
				ствСписокЭлементов = ПолучитьЗначениеНастройки("Запросы", "Соответствие");
				Если Не ствСписокЭлементов = Неопределено Тогда
					гЗапросМУ = ствСписокЭлементов[ЗапросОбновления];
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ТекстXML.Имя = "CATALOGS" Тогда
			ЗагрузитьСправочники(ТекстXML, СоотвЗагруженныхОбъектов, ВыбАгент);
		ИначеЕсли ТекстXML.Имя = "DOCUMENTS" Тогда
			ЗагрузитьДокументы(ТекстXML, СоотвЗагруженныхОбъектов, ЗагружаемыеОбъекты);	
		ИначеЕсли ТекстXML.Имя = "PICTURES" Тогда
			Если ТекстXML.Имя = "PICTURES" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				Прервать;
			КонецЕсли;   
			ЗагрузитьФотографии(ТекстXML, СоотвЗагруженныхОбъектов, ВыбАгент);						
		КонецЕсли;				
		
	КонецЦикла;
	
	ТекстXML.Закрыть();
	
	//(( sk_181228
	//vd_180822 Старая функция, еще используется.
	ЗакончитьЗагрузкуДокументов_old(СоотвЗагруженныхОбъектов, ВыбАгент);
	//vd_180822 Новая функция, нужно переделать 
	ЗакончитьЗагрузкуДокументов(ЗагружаемыеОбъекты);
	//)) sk_181228
	
	Возврат Истина;
	
КонецФункции // ЗагрузитьДанныеXML()

// sk_181220
// Выполняет очистку временных файлов обмена
//
// Параметры:
//  стрПапкаРаспаковки - Строка - каталог распаковки 
//
Процедура ОчиститьПапкуВременныхФайлов(стрПапкаРаспаковки = Неопределено)
	
	Если стрПапкаРаспаковки = Неопределено Тогда
		стрПапкаРаспаковки = СокрЛП(НастройкиОбработки["РабочаяПапка"]);
	КонецЕсли;
	
	мФайлов = Новый Массив;
	мФайлов.Добавить("PhotosToCDB.zip");
	мФайлов.Добавить("To1C.xml");
	мФайлов.Добавить("ToCDB.xml");

	Для Каждого Файл Из мФайлов Цикл
		ПоискФайла = НайтиФайлы(стрПапкаРаспаковки, Файл);  
		Если ПоискФайла.Количество() > 0 Тогда    
			#Если Клиент Тогда
				Состояние("Удаление временных файлов ... " + Файл);
			#КонецЕсли
			АП_УдалитьФайлы(ТипыЛогов["Обмен"], ВыбАгент, стрПапкаРаспаковки, Файл);
		КонецЕсли;
	КонецЦикла;
	
	#Если Клиент Тогда
		Состояние("");
	#КонецЕсли  
	
КонецПроцедуры

// sk_181220 Добавлена
// Выполняет очистку временных файлов для фото,
// создает каталог временных файлов для фото, если его не существует
//
Процедура ОчиститьПапкуВременныхФото()
	
	стрПапкаВремФото = СокрЛП(НастройкиОбработки["РабочаяПапка"]) + "pictures\";
	
	ПроверитьСуществованиеКаталога(стрПапкаВремФото);
	
	мНайденныеФайлы = НайтиФайлы(стрПапкаВремФото, "*.*");	
	
	Если мНайденныеФайлы.Количество() > 0 Тогда
		#Если Клиент Тогда
			Состояние("Удаление временных файлов фото ...");
		#КонецЕсли  
		
		АП_УдалитьФайлы(ТипыЛогов["Обмен"], ВыбАгент,  стрПапкаВремФото);
		
		#Если Клиент Тогда
			Состояние("");
		#КонецЕсли  
	КонецЕсли;
	
КонецПроцедуры 

// sk_181220 Добавлена
// Выполняет распаковку архива
//
// Параметры:
//  ФайлЗагрузки       - Файл - архив
//  стрПарольАрхива    - Строка - пароль на архив
//  стрПапкаРаспаковки - Строка - каталог распаковки 
//
// Возвращаемое значение:
//  Булево -
//	        Истина - архив распакован
//		    Ложь   - архив не распакован
//
Функция ФайлРазархивировать(ФайлЗагрузки, стрПарольАрхива, стрПапкаРаспаковки = Неопределено)
	 
	Если ФайлЗагрузки <> Неопределено Тогда
		Попытка
			АрхивОбмена = Новый ЧтениеZipФайла(ФайлЗагрузки.ПолноеИмя, стрПарольАрхива);
			АрхивОбмена.ИзвлечьВсе(стрПапкаРаспаковки);
			АрхивОбмена.Закрыть();
			АП_УдалитьФайлы(ТипыЛогов["Обмен"], ВыбАгент, ФайлЗагрузки.ПолноеИмя);
		Исключение
			Текст = "ru='Не удалось распаковать архив загрузки : """ + ФайлЗагрузки + """ по причине: " + СтрЗаменить(ОписаниеОшибки(), "'", """") + "'"; 
			ОповеститьОСобытии(Текст, СтатусСообщения.Важное);
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Возврат Истина
	
КонецФункции // ФайлРазархивировать()

// sk_181220 Добавлена
// Выполняет очистку временных файлов обмена и распаковывает архив
//
// Параметры:
//  ФайлЗагрузки - Файл - архив
//
// Возвращаемое значение:
//  Булево -
//	        Истина - архив распакован
//		    Ложь   - архив не распакован
//
Функция ФайлРаспаковать(ФайлЗагрузки) 
	
	Если ВРег(ФайлЗагрузки.Расширение) = ".ZIP" Тогда
		
		стрПапкаРаспаковки = ФайлЗагрузки.Путь; 
		
		найденнаяСтрокаМУ = ПолучитьИдентификаторМУ(ВыбАгент);
		
		данныеМУ = ТабМобильныеУстройства.Найти(найденнаяСтрокаМУ, "УникальныйИдентификатор");
		
		стрПарольАрхива = данныеМУ["ПарольАрхива"];
		
		#Если Клиент Тогда
			Состояние("Очистка временных файлов ...  " + ФайлЗагрузки.Путь);
		#КонецЕсли    
		
		// Удаление временных файлов из каталога ПапкаРаспаковки
		ОчиститьПапкуВременныхФайлов();
		
		// Удаление фотографий из каталога ПапкаРаспаковки\pictures
		ОчиститьПапкуВременныхФото(); 
		
		#Если Клиент Тогда
			Состояние("Распаковка полученных данных ...");    
		#КонецЕсли    
		
		// Распаковка файла обмена данными в каталог ПапкаРаспаковки  
		Если ФайлРазархивировать(ФайлЗагрузки, стрПарольАрхива, стрПапкаРаспаковки) = Ложь Тогда
			Возврат Ложь;
		КонецЕсли;
		
		// Распаковка фотографий в каталог ПапкаРаспаковки\pictures
		стрПапкаВремФото = стрПапкаРаспаковки + "pictures\";
		Если Не ПроверитьСуществованиеКаталога(стрПапкаВремФото) Тогда
			СоздатьКаталог(стрПапкаВремФото);			
		КонецЕсли;
		
		мПоискФайла = НайтиФайлы(стрПапкаРаспаковки, "PhotosToCDB.zip");
		Если мПоискФайла.Количество() = 1 Тогда
			ОповеститьОСобытии("ru='Файл загрузки содержит архив фотографий'", СтатусСообщения.Информация);
			ФайлФото = мПоискФайла[0];
			Если Не ФайлРазархивировать(ФайлФото, стрПарольАрхива, стрПапкаВремФото) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли; 	
	
	#Если Клиент Тогда	
		Состояние("");
	#КонецЕсли
	
	Возврат Истина;
	
КонецФункции // ФайлРаспаковать()

// sk_181220 Добавлена
// Выполняет загрузку файла трека перемещений
//
// Параметры:
//  стрПутьКФайлТрека - Строка - путь к файлу трека перемещений
//
Процедура ЗагрузитьДанныеТрека(стрПутьКФайлТрека) 
	
	// Создание папки трека перемещений
	стрПутьПапкаТрека = СокрЛП(НастройкиОбработки["ПапкаТреки"]) + "Track\";
	ПапкаТреков = Новый Файл(стрПутьКФайлТрека);
	Если Не ПапкаТреков.Существует() Тогда
		СоздатьКаталог(стрПутьКФайлТрека); 	
	КонецЕсли;
																
	ФайлТрека = Новый Файл(стрПутьКФайлТрека);
	
	// Создание папки агента
	стрПутьПапкаАгента = стрПутьПапкаТрека + Строка(ВыбАгент.УникальныйИдентификатор()) + "\";
	ПапкаАгента = Новый Файл(стрПутьПапкаАгента);
	Если Не ПапкаАгента.Существует() Тогда
		СоздатьКаталог(стрПутьПапкаАгента); 	
	КонецЕсли;
	
	ТекущаяДатаТрека = Неопределено; // Текущая дата трека в виде строки "YYYY-MM-DD" (дата точек трека).
	стррДанные		 = Неопределено; 	
	ДатаВремяТочки	 = Неопределено;
	флБылиИзменения  = Ложь;
	флСортировать	 = Ложь;
	
	ЗагружаемыйТрек = Новый ТекстовыйДокумент;
	ЗагружаемыйТрек.Прочитать(стрПутьКФайлТрека);
	
	Для НомерСтроки = 1 По ЗагружаемыйТрек.КоличествоСтрок() Цикл
		Строка = ЗагружаемыйТрек.ПолучитьСтроку(НомерСтроки);
		ДатаВремяТочки = ТрекДатаИзСтроки(Лев(Строка, 19)); 
		Если ТекущаяДатаТрека <> НачалоДня(ДатаВремяТочки) Тогда
			Если флБылиИзменения Тогда			
				ТрекЗакрытьФайл(стррДанные, стрПутьПапкаАгента, флСортировать);
			КонецЕсли;
			ТекущаяДатаТрека 	= НачалоДня(ДатаВремяТочки);
			стррДанные 			= ТрекОткрытьФайл(ТекущаяДатаТрека, стрПутьПапкаАгента);
			тзТрек				= стррДанные.Трек;						
			ВремяНачалаТрека 	= стррДанные.ВремяНачала;
			ВремяОкончанияТрека = стррДанные.ВремяОкончания;
			флБылиИзменения 	= Ложь;
			флСортировать		= Ложь;
		КонецЕсли;
		
		Если ДатаВремяТочки > ВремяОкончанияТрека Тогда
			стзТрек = тзТрек.Добавить();
			стзТрек.Время = ДатаВремяТочки;
			ТрекЗаполнитьРеквизитыСтроки(стзТрек, Строка);
			флБылиИзменения = Истина;	
		ИначеЕсли ДатаВремяТочки < ВремяНачалаТрека Тогда // Изменено время в МУ?
			стзТрек = тзТрек.Добавить();
			стзТрек.Время = ДатаВремяТочки;
			ТрекЗаполнитьРеквизитыСтроки(стзТрек, Строка);
			флБылиИзменения = Истина;
			флСортировать	= Истина;			
		КонецЕсли;
		
	КонецЦикла;
	
	Если флБылиИзменения Тогда
		ТрекЗакрытьФайл(стррДанные, стрПутьПапкаАгента, флСортировать);
	КонецЕсли; 
		
КонецПроцедуры

// sk_181220 Добавлена
// Загружает данные из файла обмена
//
// Параметры:
//  стрПуть - Строка - путь к файлу обмена
//
// Возвращаемое значение:
//  Булево -
//	        Истина - файл загружен
//		    Ложь   - файл не загружен
// 
Функция ЗагрузитьДанные(стрПуть)
	
	ФайлЗагрузки =  Новый Файл(стрПуть);
	стрПапкаРаспаковки = ФайлЗагрузки.Путь;
		
	Если ФайлРаспаковать(ФайлЗагрузки) = Ложь Тогда
		Возврат Ложь;
	КонецЕсли;
	
	//(( Загрузка файла трека перемещений
	мПоискФайлаТрека = НайтиФайлы(стрПапкаРаспаковки, "gpstrack.txt");
	Если мПоискФайлаТрека.Количество() > 0 Тогда
		ФайлТрека = мПоискФайлаТрека[0];
		
		ОповеститьОСобытии("ru='Загрузка данных трека перемещений для агента """ + СокрЛП(ВыбАгент.Наименование) + """'", ТипыЛогов["Обмен"], СтатусСообщения.Информация);
		ЗагрузитьДанныеТрека(ФайлТрека.ПолноеИмя);  		
		
		АП_УдалитьФайлы(ТипыЛогов["Обмен"], ВыбАгент,  ФайлТрека.ПолноеИмя);
	КонецЕсли;
	//)) Загрузка файла трека перемещений
	
	//(( Загрузка файла обмена данными (XML)
	стрПутьФайлаXML = "ToCDB.xml";
	стрПутьФайлаXML = КаталогДополнитьСлешВПуть(стрПапкаРаспаковки) + стрПутьФайлаXML;
	
	мПоискФайлаXML = НайтиФайлы(стрПутьФайлаXML);
	Если мПоискФайлаXML.Количество() = 0 Тогда 
		Если ВРег(ФайлЗагрузки.Расширение) = ".ZIP" Тогда
			ОповеститьОСобытии("ru='В файле архива мобильного устройства не найдено файлов для загрузки в требуемом формате!'", ТипыЛогов["Обмен"], СтатусСообщения.Внимание);
		КонецЕсли;
	Иначе
				
		#Если Клиент Тогда
			Состояние("Загрузка данных ...");   
		#КонецЕсли    
		СоотвЗагруженныхОбъектов = Новый Соответствие;
		гЗапросМУ = Неопределено;
		
		Если Не ЗагрузитьДанныеXML(стрПутьФайлаXML, СоотвЗагруженныхОбъектов) Тогда
			АП_УдалитьФайлы(ТипыЛогов["Обмен"], ВыбАгент,  стрПутьФайлаXML);
			Возврат Ложь;
		КонецЕсли;
		 
		 АП_УдалитьФайлы(ТипыЛогов["Обмен"], ВыбАгент,  стрПутьФайлаXML);
		 
		 //(( Ответная выгрузка
		найденнаяСтрокаМУ = ПолучитьИдентификаторМУ(ВыбАгент);
		данныеМУ = ТабМобильныеУстройства.Найти(найденнаяСтрокаМУ, "УникальныйИдентификатор");
		Выгрузить(гЗапросМУ, Истина, СоотвЗагруженныхОбъектов, данныеМУ, ВыбНастройкиАгента, ВыбДопНастройкиАгента);
		ОтветитьНаЗапрос = Ложь;
		//)) Ответная выгрузка
	КонецЕсли;
	//)) Загрузка файла обмена данными (XML)
	
	#Если Клиент Тогда	
		Состояние("");
	#КонецЕсли
		
	Возврат Истина
	
КонецФункции //ЗагрузитьДанные()

// sk_181220 Добавлена
// Загружает данные по способу обмена Агент Плюс СОД
//
// Параметры:
//  стрПутьВременныхФайлов - Строка	- Каталог временных файлов
//	ФайлЗагрузки		   - Файл   - Файл обмена данными
// 
// Возвращаемое значение:
//  Булево - 
//	         Истина - файл загружен
//		     Ложь   - файл не загружен
//
Функция ЗагрузитьФайл_АПСОД(стрПутьВременныхФайлов, ФайлЗагрузки)
	
	Результат = Истина;
	
	стрПутьФайлаСервера   = ФайлЗагрузки.ПолноеИмя;
	стрПутьФайлаЛокальный = стрПутьВременныхФайлов + ФайлЗагрузки.Имя;
	
	Если Не КаталогОчиститьКаталогВременныхФайлов(стрПутьВременныхФайлов) Тогда
		ОповеститьОСобытии("ru='Ошибка очистки каталога временных файлов'", ТипыЛогов["Обмен"], СтатусСообщения.Внимание);
  		Возврат Ложь;
	КонецЕсли; 
	
	Попытка
		КопироватьФайл(стрПутьФайлаСервера, стрПутьФайлаЛокальный);
	Исключение
		ОповеститьОСобытии("ru='Ошибка копирования файла : """ + стрПутьФайлаСервера + """. Причина: " + СтрЗаменить(ОписаниеОшибки(), "'", """") + "'", ТипыЛогов["Обмен"], СтатусСообщения.Внимание);
		Возврат Ложь;
	КонецПопытки;
	
	Если ЗагрузитьДанные(стрПутьФайлаЛокальный) Тогда
		 АП_УдалитьФайлы(ТипыЛогов["Обмен"], ВыбАгент, стрПутьФайлаСервера);
	Иначе
		Возврат Ложь;	 
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ЗагрузитьФайл_АПСОД()

// sk_181220 Добавлена
// Сохраняет файл с FTP-сервера в рабочий каталог
//
// Параметры:
//  стрПутьФайлаСервера   - Строка - путь к файлу на FTP сервере
//  стрПутьФайлаЛокальный - Строка - путь к файлу в локальной папке
// 
// Возвращаемое значение:
//  Результат -	
//			   Неопределено - ошибка при создании подключения к FTP
//			   Истина		- успешно прошло получение файла
//  		   Строка		- описание ошибки
//
Функция ФТП_Получить(стрПутьФайлаСервера, стрПутьФайлаЛокальный)
	
	Результат = Неопределено;
	
	Если ФТП_ПроверитьИСоздатьПодключение() = Неопределено Тогда
		Возврат Неопределено;		
	КонецЕсли;
	
	Попытка
	    ПодключениеFTP.Получить(стрПутьФайлаСервера, стрПутьФайлаЛокальный); 
		Результат = Истина;
	Исключение
		Если ФТП_СоздатьПодключение(Истина, Ложь) = Ложь Тогда
			Результат = Неопределено;
		Иначе
			Попытка 
			 	ПодключениеFTP.Получить(стрПутьФайлаСервера, стрПутьФайлаЛокальный);
				Результат = Истина;
			Исключение
				Результат = СтрЗаменить(ОписаниеОшибки(), "'", """")
			КонецПопытки;
		КонецЕсли;
	КонецПопытки;
		
	Возврат Результат;
	
КонецФункции // ФТП_Получить()

// sk_181220 Добавлена
// Удаляет файл с FTP-сервера  
//
// Параметры:
//  стрПутьФайлаСервера - Строка - путь к файлу на сервере
// 
// Возвращаемое значение:
//	Неопределено - ошибка при создании подключения к FTP
//	Истина		 - удаление выполнено
//  Строка		 - описание ошибки
//
Функция ФТП_Удалить(стрПутьФайлаСервера)
	
	Результат = Неопределено;
	
	Если ФТП_ПроверитьИСоздатьПодключение() = Неопределено Тогда
		Возврат Неопределено;		
	КонецЕсли;
	
	Попытка
	    ПодключениеFTP.Удалить(стрПутьФайлаСервера);  
		Результат = Истина;
	Исключение
		Если ФТП_СоздатьПодключение(Истина, Ложь) = Ложь Тогда
			Результат = Неопределено;
		Иначе
			Попытка 
			 	ПодключениеFTP.Удалить(стрПутьФайлаСервера);
				Результат = Истина;
			Исключение
				Результат = СтрЗаменить(ОписаниеОшибки(), "'", """");
			КонецПопытки;
		КонецЕсли;
	КонецПопытки;
		
	Возврат Результат; 
	
КонецФункции // ФТП_Удалить()

// sk_181220 Добавлена
//  Загружает файл с FTP-сервера
//
// Параметры:
//  стрПутьВременныхФайлов - Строка - Каталог временных файлов
//  ФайлЗагрузки		   - FTPФайл - Файл обмена данными
// 
// Возвращаемое значение:
//  Результат -
//	           Истина - файл загружен
//		       Ложь   - файл не загружен
//
Функция ЗагрузитьФайл_ФТП(стрПутьВременныхФайлов, ФайлЗагрузки)
	
	Результат = Истина;
	
	стрПутьФайлаСервера   = ФайлЗагрузки.ПолноеИмя;
	стрПутьФайлаЛокальный = стрПутьВременныхФайлов + ФайлЗагрузки.Имя;  
	
	Если Не КаталогОчиститьКаталогВременныхФайлов(стрПутьВременныхФайлов) Тогда
		ОповеститьОСобытии("ru='Ошибка очистки каталога временных файлов'", ТипыЛогов["Обмен"], СтатусСообщения.Внимание);
  		Возврат Ложь;
	КонецЕсли; 
	
	РезультатВыполнения = ФТП_Получить(стрПутьФайлаСервера, стрПутьФайлаЛокальный);
	Если РезультатВыполнения = Неопределено Тогда
		ОповеститьОСобытии("ru='Отсутствует подключение к ФТП - серверу'", ТипыЛогов["Обмен"], СтатусСообщения.Внимание);
	ИначеЕсли Не РезультатВыполнения = Истина Тогда
		ОповеститьОСобытии("ru='Ошибка при копировании файла с FTP-сервера. Файл: """ + стрПутьФайлаСервера + """ Причина: " + РезультатВыполнения + "'", ТипыЛогов["Обмен"], СтатусСообщения.Внимание);
		Результат = Ложь;			
	КонецЕсли;
		
	Если ЗагрузитьДанные(стрПутьФайлаЛокальный) Тогда
		РезультатУдаления = ФТП_Удалить(стрПутьФайлаСервера);
		Если РезультатУдаления = Неопределено Тогда
			ОповеститьОСобытии("ru='Отсутствует подключение к ФТП - серверу'", ТипыЛогов["Обмен"], СтатусСообщения.Внимание);
		ИначеЕсли Не РезультатУдаления = Истина Тогда
			ОповеститьОСобытии("ru='Не удалось удалить файл на FTP-сервере. Файл: """ + стрПутьФайлаСервера + """ Причина: " + РезультатУдаления + "'", ТипыЛогов["Обмен"], СтатусСообщения.Внимание);
			Результат = Ложь;
		КонецЕсли;
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ЗагрузитьФайл_ФТП()

// sk_181220 Добавлена
// Выполняет загрузку файлов по способам обмена: FTP-сервер и Агент Плюс СОД 
//
// Параметры:
//  стрПутьНаСервере        - Строка - путь к файлам на сервере 
//  стрПутьВременныхФайлов  - Строка - каталог временных файлов
//  мИменаФайловДляЗагрузки - Массив - массив имен файлов, которые следует загружать с сервера
// 
// Возвращаемое значение:
//  Булево - 
//		    Истина 		 - файлы загружены
//		    Ложь   		 - файлы отсутствуют
//		    Неопределено - произошла ошибка
//
Функция ЗагрузитьФайлыПоСпособуОбмена(стрПутьНаСервере, стрПутьВременныхФайлов, мИменаФайловДляЗагрузки)   
	
	Результат = Ложь;
	
	Если СпособОбмена = 1 Тогда      // Агент Плюс СОД
		мНайденныеФайлы = НайтиФайлы(стрПутьНаСервере, "*.*");
	ИначеЕсли СпособОбмена = 2 Тогда // FTP-сервер
		мНайденныеФайлы = ФТП_НайтиФайлы(стрПутьНаСервере, "*.*"); 
		Если мНайденныеФайлы = Неопределено Тогда
			ОповеститьОСобытии("ru='Отсутствует подключение к ФТП - серверу'", ТипыЛогов["Обмен"], СтатусСообщения.Внимание);
		КонецЕсли;
	Иначе
		ОповеститьОСобытии("ru='Ошибка выбора способа обмена! Неизвестный способ обмена!'", СтатусСообщения.Важное);
		Возврат Неопределено;	
	КонецЕсли;
		
	Для Каждого Файл Из мНайденныеФайлы Цикл
		
		Если мИменаФайловДляЗагрузки.Найти(Файл.Имя) <> Неопределено Тогда      
			
			Если Результат <> Неопределено Тогда
				Результат = Истина;                      
			КонецЕсли;
			
			Если СпособОбмена = 1 Тогда      // Агент Плюс СОД
				РезультатЗагрузки = ЗагрузитьФайл_АПСОД(стрПутьВременныхФайлов, Файл);
			ИначеЕсли СпособОбмена = 2 Тогда // FTP-сервер
				РезультатЗагрузки = ЗагрузитьФайл_ФТП(стрПутьВременныхФайлов, Файл);				
			КонецЕсли;
			
			Если РезультатЗагрузки = Ложь Тогда
				Результат = Неопределено;
			КонецЕсли
				
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ЗагрузитьФайлыПоСпособуОбмена()

// sk_181220 Добавлена
// Загружает данные от агента по способам обмена: FTP-сервер и Агент Плюс СОД
//
Процедура ЗагрузитьДанныеАгента()
	
	Если СпособОбмена = 2 Тогда 	 // FTP-сервер  
		Если ПодключениеFTP = Неопределено Тогда 
			Если ФТП_СоздатьПодключение() = Ложь Тогда
				ОповеститьОРезультатеЗагрузки(Неопределено, "Ошибка подключения к ФТП");
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	стрПапкаАгента = КаталогПроверитьИмяИПолучитьКаталогАгентаНаСервере();
	Если стрПапкаАгента = Неопределено тогда
		ОповеститьОРезультатеЗагрузки(Неопределено);
		Возврат;	
	КонецЕсли;
	
	флПроверкаНаличияКаталогаАгента = Ложь;
	Если СпособОбмена = 1 Тогда 	 // Агент Плюс СОД
		флПроверкаНаличияКаталогаАгента = ПроверитьСуществованиеКаталога(стрПапкаАгента);
	ИначеЕсли СпособОбмена = 2 Тогда // FTP-сервер                                                                
		флПроверкаНаличияКаталогаАгента = ФТП_ПроверитьСуществование(стрПапкаАгента);
		//(( sk_190214
		Если флПроверкаНаличияКаталогаАгента = Неопределено Тогда
			ОповеститьОСобытии("ru='Отсутствует подключение к ФТП - серверу'", ТипыЛогов["Обмен"], СтатусСообщения.Внимание);
			Возврат;
		КонецЕсли;
		//)) sk_190214
	Иначе
		//(( sk_190214 
		ОповеститьОСобытии("ru='Ошибка выбора способа обмена! Неизвестный способ обмена!'", ТипыЛогов["Обмен"], СтатусСообщения.Внимание); 
		Возврат;
		//) sk_190214
	КонецЕсли;
	
	//(( sk_190214
	//Если флПроверкаНаличияКаталогаАгента = Неопределено Тогда
	//	ОповеститьОСобытии("ru='Отсутствует подключение к ФТП - серверу'", ТипыЛогов["Обмен"], СтатусСообщения.Внимание);
	//	Возврат;
	//ИначеЕсли флПроверкаНаличияКаталогаАгента = Ложь Тогда   
	//	ОповеститьОРезультатеЗагрузки(Ложь);
	//	Возврат;
	//КонецЕсли;
		
	Если флПроверкаНаличияКаталогаАгента = Ложь Тогда   
		ОповеститьОРезультатеЗагрузки(Ложь);
		Возврат;
	КонецЕсли;
	//)) sk_190214

	стрПутьВременныхФайлов 	= СокрЛП(НастройкиОбработки["РабочаяПапка"]);
	мИменаФайловДляЗагрузки = ПолучитьМассивИменаФайловЗагрузки();
	
	Результат = ЗагрузитьФайлыПоСпособуОбмена(стрПапкаАгента, стрПутьВременныхФайлов, мИменаФайловДляЗагрузки);
	
	ОповеститьОРезультатеЗагрузки(Результат);
	
	СохранитьЛог(ТипыЛогов["Обмен"]);
	
КонецПроцедуры

// sk_190111 Добавлена
// Загружает данные от агента по способу обмена Прямое подключение
//
Процедура ЗагрузитьФайлИзКаталога()
	
	Если Не ВыбАгент = Справочники.Пользователи.ПустаяСсылка() Тогда
		
		Если НастройкиОбработки["ИспользоватьZipАрхивы"] Тогда
			Фильтр = "ru='Файл загрузки с мобильного устройства (*.zip)|*.zip'";
		Иначе
			Фильтр = "ru='Файл загрузки с мобильного устройства (*.xml)|*.xml'";
		КонецЕсли;
		
		Режим = РежимДиалогаВыбораФайла.Открытие;
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(Режим);
		ДиалогВыбораФайла.Фильтр    = НСтр(Фильтр);
		ДиалогВыбораФайла.Каталог   = ВосстановитьЗначение("КаталогСохраненияФайловДляМУ");			
		ДиалогВыбораФайла.Заголовок = НСтр("ru='Укажите файл загрузки агента " + СокрЛП(ВыбАгент.Наименование) + "'");
		
		Если ДиалогВыбораФайла.Выбрать() Тогда
			стрФайлЗагрузки = ДиалогВыбораФайла.ПолноеИмяФайла;	
			СохранитьЗначение("КаталогСохраненияФайловДляМУ", ДиалогВыбораФайла.Каталог);
			
			Если Не ЗагрузитьДанные(стрФайлЗагрузки) Тогда
				ОповеститьОРезультатеЗагрузки(Ложь);
			КонецЕсли; 
			
			СохранитьЛог(ТипыЛогов["Обмен"]);
		Иначе
			Предупреждение(НСтр("ru='Файл не выбран!'"));
		КонецЕсли;
	Иначе
		ОповеститьОСобытии("ru='Агент не выбран!'", ТипыЛогов["Обработка"], СтатусСообщения.Важное);
	КонецЕсли;
	
КонецПроцедуры

// sk_181220 Добавлена
// Загрузка данных по способам обмена: Прямое подключение, Агент Плюс СОД, FTP-сервер
//
// Параметры:
//  ЗапускЧерезАвтообмен - Булево - Истина, если запуск через автообмен
//
Процедура ЗагрузитьДанныеПоСпособуОбмена(ЗапускЧерезАвтообмен = Ложь) Экспорт
	
	гОбработаноЗаписей = 0;
	
	Если СпособОбмена = 0 Тогда      // Прямое подключение
		ЗагрузитьФайлИзКаталога();
	ИначеЕсли СпособОбмена = 1 Тогда // Агент Плюс СОД 
		стрПапкаОбмена = СокрЛП(НастройкиОбработки["ПапкаАгентСОД"]);
		Если ПустаяСтрока(стрПапкаОбмена) Тогда
			ОповеститьОСобытии("ru='Не задана папка обмена!'", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
	ИначеЕсли СпособОбмена = 2 Тогда // FTP-сервер
		Если ФТП_СоздатьПодключение() = Ложь Тогда
			Возврат;	
		КонецЕсли;
	Иначе
		ОповеститьОСобытии("ru='Ошибка выбора способа обмена! Неизвестный способ обмена!'", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	мАгенты = ПолучитьМассивАгентовПоСпособуОбмена(ЗапускЧерезАвтообмен);
	
	Для Каждого текАгент Из мАгенты Цикл
		
		ВыбАгент = текАгент;
		
		найденнаяСтрокаАгент = ТабНастройкиАгентов.Найти(текАгент, "Пользователь");
		ИДМУ 				 = ПолучитьИдентификаторМУ(текАгент);
				
		Если ИДМУ = Неопределено Тогда // Для устройства не назначен агент с признаком "Основной" 
			Продолжить;
		КонецЕсли;
		
		ИзменитьВыбранногоАгента(найденнаяСтрокаАгент.УникальныйИдентификатор, ИДМУ);
		
		Если СпособОбмена = 1 Или СпособОбмена = 2 Тогда // Агент Плюс СОД и FTP-сервер 
			ЗагрузитьДанныеАгента();
		КонецЕсли;
			
	КонецЦикла;
	
	Если мАгенты.Количество() = 0 Тогда
		ОповеститьОСобытии("ru='Агенты не выбраны'", ТипыЛогов["Обмен"], СтатусСообщения.Внимание);
	ИначеЕсли мАгенты.Количество() > 1 Тогда
		ОчиститьАгентаИУстройство();
	КонецЕсли;
	
	//(( sk_190628 Оповещаем формы виртуальных объектов о загрузке из МУ новых данных в рамках (MOD-469)
	Если мАгенты.Количество() > 0 Тогда 
		Оповестить("АПЗагруженыНовыеДанныеИзМУ", Неопределено);
	КонецЕсли;
	//)) sk_190628
	
КонецПроцедуры
	
// sk_181220 Добавлена
// Создает подключение к FTP-серверу
//
// Параметры:
//  Переподключится			   - Булево - флаг переподключения
//  ВыводитьСлужебныеСообщения - Булево - флаг вывода служебных сообщений
// 
// Возвращаемое значение:
//  ПодключениеКFTP - FTPСоединение 
//  Ложь			- не успешное подключение
//
Функция ФТП_СоздатьПодключение(Переподключится = Ложь, ВыводитьСлужебныеСообщения = Истина)
	
	Если ПодключениеFTP = Неопределено Или Переподключится = Истина Тогда
		
		стрСервер = СокрЛП(НастройкиОбработки["FtpСервер"]);
		стрЛогин  = СокрЛП(НастройкиОбработки["FtpПользователь"]);
		стрПароль = СокрЛП(НастройкиОбработки["FtpПароль"]);
		
		Если ПустаяСтрока(стрСервер) Или ПустаяСтрока(стрЛогин) Тогда
			Если ВыводитьСлужебныеСообщения Тогда
				ТекстСообщения = "ru='Не настроены параметры соединения с FTP-сервером! Работа с FTP невозможна!'";
				ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обмен"], СтатусСообщения.Внимание);
			КонецЕсли;
			ПодключениеFTP = Неопределено;
			Возврат Ложь;
		КонецЕсли;
		
		Если ВыводитьСлужебныеСообщения Тогда
			ОповеститьОСобытии("ru='Подключение к FTP-серверу ...'", ТипыЛогов["Обмен"], СтатусСообщения.Информация);
		КонецЕсли;
		
		Попытка
			ПодключениеКFTP = Новый FTPСоединение(стрСервер, , стрЛогин, стрПароль, , Истина, 0); // ПодключениеКFTP = Новый FTPСоединение(стрСервер, , стрЛогин, стрПароль, , Истина, 60); sk_190313 (MOD-336)	
		Исключение
			ОповеститьОСобытии("ru='Ошибка подключения к FTP-серверу. Причина: " + СтрЗаменить(ОписаниеОшибки(), "'", """") + "'", ТипыЛогов["Обмен"], СтатусСообщения.Внимание);			
			ПодключениеFTP = Неопределено;
			Возврат Ложь;
		КонецПопытки;
		
		Если ВыводитьСлужебныеСообщения Тогда
			ОповеститьОСобытии("ru='Подключение к FTP-серверу выполнено успешно'", ТипыЛогов["Обмен"], СтатусСообщения.Информация);
		КонецЕсли;
		
		ПодключениеFTP = ПодключениеКFTP;
		
	КонецЕсли;
	
	Возврат ПодключениеКFTP; 
		
КонецФункции // ФТП_СоздатьПодключение()

// sk_181220 Добавлена 
// Выполняет обработку результата загрузки данных
//
// Параметры:
//  Результат		 
//			 - Истина - данные загружены
//			 - Ложь - нет данных на сервере
//			 - Неопределено - произошла ошибка
//  стрОписаниеОшибки - Строка - описание ошибки
//
Процедура ОповеститьОРезультатеЗагрузки(Результат, стрОписаниеОшибки = Неопределено)
	
	стрИмяАгента = СокрЛП(ВыбАгент.Наименование);
	
	найденнаяСтрокаМУ = ПолучитьИдентификаторМУ(ВыбАгент);
	данныеМУ = ТабМобильныеУстройства.Найти(найденнаяСтрокаМУ, "УникальныйИдентификатор");
	
	стрИДМУ 	   = данныеМУ["ИдентификаторМУ"];
	стрПсевдонимМУ = СокрЛП(данныеМУ["Псевдоним"]);
	
	Если Результат = Ложь Тогда
		ОповеститьОСобытии("ru='Данные от агента: """ + стрИмяАгента + """ (мобильное устройство: """ + стрПсевдонимМУ + """, идентификатор: """ +  ВРег(стрИДМУ) + """)" + " на сервере отсутствуют.'", СтатусСообщения.Информация);
	ИначеЕсли Результат = Неопределено Тогда
		ТекстСообщения = "ru='Данные от агента """ + стрИмяАгента + """ (мобильное устройство: """ + стрПсевдонимМУ + """, идентификатор: """ +  ВРег(стрИДМУ) + """)" + " не загружены!'";
		Если НЕ стрОписаниеОшибки = Неопределено Тогда
			ТекстСообщения = ТекстСообщения + " Причина: " + стрОписаниеОшибки + ".'";	
		КонецЕсли;	
		ОповеститьОСобытии(ТекстСообщения, ТипыЛогов.Обработка, СтатусСообщения.Внимание, Неопределено, Ложь);
	Иначе
		ОповеститьОСобытии("ru='Данные от агента """ + стрИмяАгента + """ (мобильное устройство: """ + стрПсевдонимМУ + """, идентификатор: """ +  ВРег(стрИДМУ) + """)" + " успешно загружены!'", СтатусСообщения.Информация);
	КонецЕсли;
		
КонецПроцедуры	

Функция ТрекИмяФайлаПоДате(ДатаТрека, путьПапкаАгента)

	Возврат путьПапкаАгента + Формат(ДатаТрека, "ДФ=yyyyMMdd") + ".txt";
	
КонецФункции

Процедура ТрекЗаполнитьРеквизитыСтроки(стзТрек, Строка)
	
	Разделитель = Символы.Таб;
	
	НомерПараметра = 0;
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		СтрЗначение = Лев(Строка, Позиция - 1);
		Если НомерПараметра > 0 Тогда
			стзТрек[НомерПараметра] = ?(ПустаяСтрока(СтрЗначение), 0, Число(СтрЗначение));
		КонецЕсли; 
		Строка = Сред(Строка, Позиция + 1);
		Позиция = Найти(Строка, Разделитель);
		НомерПараметра = НомерПараметра + 1;
	КонецЦикла;
	
	стзТрек[НомерПараметра] = ?(ПустаяСтрока(Строка), 0, Число(Строка));
	
КонецПроцедуры	

Процедура ТрекЗакрытьФайл(стррДанные, КаталогТрековАгента, Сортировать = Ложь)

	тзТрек = стррДанные.Трек;
	Если тзТрек.Количество() = 0 Тогда // пустой трек не записываем
		Возврат;
	КонецЕсли; 
	
	Если Сортировать Тогда
		тзТрек.Сортировать("Время");
	КонецЕсли; 
	
	стррДанные.ВремяНачала 		= тзТрек[0].Время;
	стррДанные.ВремяОкончания 	= тзТрек[тзТрек.Количество()-1].Время;	
	ИмяФайла = ТрекИмяФайлаПоДате(стррДанные.ВремяНачала, КаталогТрековАгента);
	ЗначениеВФайл(ИмяФайла, стррДанные);

КонецПроцедуры

Функция ТрекОткрытьФайл(ДатаТочкиТрека, путьПапкаАгента) Экспорт

	ИмяФайла = ТрекИмяФайлаПоДате(ДатаТочкиТрека, путьПапкаАгента);
	ФайлОбъект = Новый Файл(ИмяФайла);
	Если ФайлОбъект.Существует() Тогда
		стррДанные = ЗначениеИзФайла(ИмяФайла);
	Иначе
		стррДанные = Новый Структура;
		стррДанные.Вставить("Версия", 1);
		стррДанные.Вставить("ВремяНачала", 		'00010101');
		стррДанные.Вставить("ВремяОкончания", 	'00010101');
		
		ТипДата	 = Новый ОписаниеТипов("Дата");
		ТипЧисло = Новый ОписаниеТипов("Число");
		
		тзТрек = Новый ТаблицаЗначений;
		тзТрек.Колонки.Добавить("Время", 	ТипДата);
		тзТрек.Колонки.Добавить("Широта", 	ТипЧисло);
		тзТрек.Колонки.Добавить("Долгота", 	ТипЧисло);
		тзТрек.Колонки.Добавить("Скорость",	ТипЧисло);
		тзТрек.Колонки.Добавить("ИсточникСигнала",  ТипЧисло);
		
		стррДанные.Вставить("Трек", тзТрек);

	КонецЕсли; 
	
	Возврат стррДанные;

КонецФункции 

Функция ТрекДатаИзСтроки(СтрокаТрека)

	СтрокаДаты = СтрЗаменить(Лев(СтрокаТрека, 19), "-", "");
	СтрокаДаты = СтрЗаменить(СтрокаДаты, " ", "");
	Возврат Дата(СтрокаДаты);

КонецФункции

//Альфия 17.05.2017
//Функция ПоискФайлаТрека (ПутьКФайлу,ИмяФайла)
//	
//	НайденныеФайлы = НайтиФайлы(ПутьКФайлу, ИмяФайла);
//	Результат = Неопределено;
//	Если НайденныеФайлы.Количество() > 0 Тогда
//		Результат = НайденныеФайлы[0];
//	КонецЕсли;

//	Возврат Результат;
//	
//КонецФункции

//Функция НайтиНомерСтроки(Файл,Строка)
//	
//	ТекстовыйДокЗагружаемыйТрек = Новый ТекстовыйДокумент;
//	ТекстовыйДокЗагружаемыйТрек.Прочитать(Файл);
//						
//	Для НомерСтроки = 1 По ТекстовыйДокЗагружаемыйТрек.КоличествоСтрок() Цикл
//		Если ТекстовыйДокЗагружаемыйТрек.ПолучитьСтроку(НомерСтроки) = Строка тогда
//			Возврат НомерСтроки;
//		КонецЕсли;
//	КонецЦикла;
//	Возврат 0;
//	
//КонецФункции								
       
// Функция возвращает ссылку на элемент по полученному из XML уникальному идентификатору
// Параметры:
// ИдЭлемента - Строка Уникального идентификатора
// Спр - Имя справочника, в котором необходимо найти элемент
// Возвращаемое значение:
// Найденная ссылка или пустая ссылка на справочник, если искомого элеимента нет или неправильный идентификатор
//
//vd_180913 Сделана экспортной.
Функция ПолучитьСсылкуИзСправочника(ИдЭлемента, Спр, СоздаватьЭлемент = Ложь) Экспорт
	Перем СсылкаЭлемента;
	
	Если ИдЭлемента = Неопределено ИЛИ ПустаяСтрока(ИдЭлемента) Или СокрЛП(ИдЭлемента) = "00000000-0000-0000-0000-000000000000" Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если ИдЭлемента = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИдЭлемента = НРег(ИдЭлемента);
	
	СпрМенеджер = Справочники[Спр];
	
	Если ЗначениеЗаполнено(ИдЭлемента) Тогда
		
		ГуидЭлемента = Новый УникальныйИдентификатор(ИдЭлемента);
		СсылкаЭлемента = СпрМенеджер.ПолучитьСсылку(ГуидЭлемента);
		
		Если СсылкаЭлемента.ПолучитьОбъект() = Неопределено Тогда
			
			Если СоздаватьЭлемент Тогда
				
				ЭлементОбъект = СпрМенеджер.СоздатьЭлемент();
				СсылкаОбъекта = СпрМенеджер.ПолучитьСсылку(ГуидЭлемента);
				ЭлементОбъект.УстановитьСсылкуНового(СсылкаОбъекта);
				ЭлементОбъект.ОбменДанными.Загрузка = Истина;
				
				Если Не ВыполнитьОперациюДляОбъекта(ЭлементОбъект, "запись") Тогда 			
					ТекстСообщения = "ru='Не удалось записать элемент справочника: " + ЭлементОбъект + "'";
					ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обмен"], СтатусСообщения.Внимание, , ЭлементОбъект);		
					Возврат СсылкаЭлемента;			
				КонецЕсли;
				
				СсылкаЭлемента = ЭлементОбъект.Ссылка;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СсылкаЭлемента = Неопределено Тогда
		СсылкаЭлемента = СпрМенеджер.ПустаяСсылка();
	КонецЕсли;
	
	Возврат СсылкаЭлемента;	
	
КонецФункции //ПолучитьСсылкуИзСправочника

// sk_181116
Функция ПолучитьСсылкуПоМенеджеруОбъекта(ОбъектыМенеджер, УникальныйИдентификатор) Экспорт
	
	СсылкаНаОбъектГуид = ОбъектыМенеджер.ПолучитьСсылку(УникальныйИдентификатор);
	Если СсылкаНаОбъектГуид.ПолучитьОбъект() <> Неопределено Тогда
		Возврат СсылкаНаОбъектГуид;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции //ПолучитьСсылкуПоМенеджеруОбъекта()

// Функция получает общую скидку контрагентов
//
Функция ПолучитьОбщуюСкидку()
	
	СписокКачество = Новый СписокЗначений;
	СписокКачество.Добавить(Справочники.Качество.Новый);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СкидкиНоменклатуры.Номенклатура,
	|	СкидкиНоменклатуры.ХарактеристикаНоменклатуры,
	|	СкидкиНоменклатуры.Качество,
	|	СкидкиНоменклатуры.Условие,
	|	СкидкиНоменклатуры.ЗначениеУсловия,
	|	СкидкиНоменклатуры.ПроцентСкидкиНаценки КАК Скидка,
	|	СкидкиНоменклатуры.ПолучательСкидки
	|ИЗ
	|	РегистрСведений.СкидкиНаценкиНоменклатуры.СрезПоследних(
	|			,
	|			Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|				И Качество В (&МассивКачество)
	|				И условие = &Условие
	|				И (ПолучательСкидки = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|					ИЛИ ПолучательСкидки = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|					ИЛИ ПолучательСкидки = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))) КАК СкидкиНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК КурсыВалют
	|		ПО СкидкиНоменклатуры.Валюта = КурсыВалют.Валюта
	|ГДЕ
	|	СкидкиНоменклатуры.Валюта <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|	И (СкидкиНоменклатуры.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ КОНЕЦПЕРИОДА(СкидкиНоменклатуры.ДатаОкончания, ДЕНЬ) >= &Дата)");
	
	Запрос.УстановитьПараметр("Дата"		  , ТекущаяДата());
	Запрос.УстановитьПараметр("МассивКачество", СписокКачество);
	Запрос.УстановитьПараметр("Условие"       , Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара);
	
	ОбщиеСкидки = Запрос.Выполнить().Выбрать();
	
	ОбщаяСкидка = 0;
	
	Если ОбщиеСкидки.Следующий() Тогда
		ОбщаяСкидка = ОбщиеСкидки.Скидка;
	КонецЕсли;
	
	Возврат ОбщаяСкидка;	
КонецФункции //ПолучитьОбщуюСкидку

// Процедура позволяет выбрать время из выпадающего списка
//Параметры:
//Форма - форма-владелец списка,
//ПолеВводаФормы - элемент-владелец списка,
//ТекущееЗначение - значение, на которое будет спозиционирован выпадающий список,
//Интервал - интервал, с которым необходимо заполнить список, по умолчанию час
//
Функция ВыбратьВремя(ФормаВладелец, ПолеВводаФормы, Знач ТекущееЗначение, Интервал = 3600) Экспорт

	НачалоРабочегоДня      = '00010101000000';
	ОкончаниеРабочегоДня   = '00010101235959';

	СписокВремен = Новый СписокЗначений;
	НачалоРабочегоДня = НачалоЧаса(НачалоДня(ТекущееЗначение) +
		Час(НачалоРабочегоДня) * 3600 +
		Минута(НачалоРабочегоДня)*60);
	ОкончаниеРабочегоДня = КонецЧаса(НачалоДня(ТекущееЗначение) +
		Час(ОкончаниеРабочегоДня) * 3600 +
		Минута(ОкончаниеРабочегоДня)*60);

	ВремяСписка = НачалоРабочегоДня;
	Пока НачалоЧаса(ВремяСписка) <= НачалоЧаса(ОкончаниеРабочегоДня) Цикл
		Если НЕ ЗначениеЗаполнено(ВремяСписка) Тогда
			ПредставлениеВремени = "00:00";
		Иначе
			ПредставлениеВремени = Формат(ВремяСписка,"ДФ=ЧЧ:мм");
		КонецЕсли;

		СписокВремен.Добавить(ВремяСписка, ПредставлениеВремени);

		ВремяСписка = ВремяСписка + Интервал;
	КонецЦикла;

	НачальноеЗначение = СписокВремен.НайтиПоЗначению(ТекущееЗначение);
	Если НачальноеЗначение = Неопределено Тогда
		ВыбранноеВремя = ФормаВладелец.ВыбратьИзСписка(СписокВремен, ПолеВводаФормы);
	Иначе
		ВыбранноеВремя = ФормаВладелец.ВыбратьИзСписка(СписокВремен, ПолеВводаФормы, НачальноеЗначение);
	КонецЕсли;

	Если ВыбранноеВремя = Неопределено Тогда
		Возврат Дата('00010101000000');
	КонецЕсли;	

	Возврат ВыбранноеВремя.Значение;

КонецФункции

// sk_190628 Процедура добавлена в рамках (MOD-469)
// Выполняет проверку и исправление структуры виртуального объекта
//
// Параметры:
// 	СтррОбъект - Структура - структура документа
//
Процедура ВОПроверитьИИсправитьСтруктуруДокумента(СтррОбъект)

	МодульВОБД = МодульВОБД();
		
	текТипОбъекта = СтррОбъект.Ссылка.ТипОбъекта;
	
	стррТипыПолей   = МодульВОБД.ПолучитьСтруктуруВО(текТипОбъекта, "ТипыПолей");  
	стррТЧТипыПолей = стррТипыПолей.Товары;
	
	стррЗнчПоУмолчанию   = МодульВОБД.ПолучитьСтруктуруВО(текТипОбъекта, "ЗнчПоУмолчанию");
	стррТЧЗнчПоУмолчанию = стррЗнчПоУмолчанию.Товары;
		
	// Реквизиты документа
	Для Каждого Элемент Из СтррОбъект Цикл
		Если Не ТипЗнч(Элемент.Значение) = Тип("Структура") И Не ТипЗнч(Элемент.Значение) = Тип("ТаблицаЗначений") Тогда 
			Если Не ТипЗнч(Элемент.Значение) = стррТипыПолей[Элемент.Ключ] Тогда
				СтррОбъект[Элемент.Ключ] = стррЗнчПоУмолчанию[Элемент.Ключ]; 		
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Табличная часть
	тзТовары = стррОбъект.Товары;
	Для Каждого стзСтрока Из тзТовары Цикл
		Для Каждого Элемент Из стррТЧЗнчПоУмолчанию Цикл
			Если Не ТипЗнч(стзСтрока[Элемент.Ключ]) = стррТЧТипыПолей[Элемент.Ключ] Тогда
				стзСтрока[Элемент.Ключ] = стррТЧЗнчПоУмолчанию[Элемент.Ключ]; 	
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
		
КонецПроцедуры
 
// sk_190628 Процедура добавлена в рамках (MOD-469)
// Выполняет загрузку документа "Мерчендайзинг"
//
// Параметры:
//  ТекстXML		 - 	 - 
//  СтррПараметры	 					 - 	Структура - 
//	СтррПараметры.Дата  				 - Дата      - Дата документа. 
//	СтррПараметры.Номер                  - Строка    - Номер Документа. 
//	СтррПараметры.ИдОбъекта              - ГУИД      - Ид документа из МУ (атрибут GUID из МУ)
//	СтррПараметры.ЭтоНовый               - Булево    - Ложь если в 1С уже есть документ с стррПараметры.ИдОбъекта
//	СтррПараметры.Проведен               - Булево    - Истина если док проведен в МУ
//	СтррПараметры.ПропускДокумента       - Булево    - Истина если документ не нужно загружать
//	СтррПараметры.ПричинаПропуска        - Строка    - Причина по какой не нужно загружать документ в 1С
//	СтррПараметры.ОбъектДокумента        - Ссылка    - Ссылка на документ, если в системе уже есть такой документ то заполненна
//	СтррПараметры.Синоним                - Строка    - Синоним документа
//	СтррПараметры.Представление          - Строка    - Представление документа в МУ.
//	СтррПараметры.ВидДокумента           - Строка    - Вид документа. Например "РеализацияТоваровУслуг"
//	СтррПараметры.ЭтоВиртуальныйДокумент - Булево    - Истина если это виртуальный документ
//
Процедура ЗагрузитьДокументМерчендайзинг(ТекстXML, СтррПараметры, ЗагружаемыеОбъекты, ОшибкаЧтенияITEM)
	
	стрПредставлениеДокВМУ = СтррПараметры.Представление; 
	 
	МодульВОБД = МодульВОБД();
	
	стррОбъект = МодульВОБД.ПолучитьСтруктуруВО(ВОТипОбъекта.Мерчендайзинг);
	стррОбъект.Вставить("Представление", стрПредставлениеДокВМУ); 
	
	ВОЗаполнитьСистемныеРеквизитыДокумента(стррОбъект, СтррПараметры); 
	
	стррПоляИзМУ = Новый Структура;
	стррПоляИзМУ.Вставить("идОрганизация"  , ТекстXML.ПолучитьАтрибут("A01"));
	стррПоляИзМУ.Вставить("идКонтрагент"   , ТекстXML.ПолучитьАтрибут("A02"));
	стррПоляИзМУ.Вставить("идТоргТочка"    , ТекстXML.ПолучитьАтрибут("A03"));
	стррПоляИзМУ.Вставить("идДоговор"      , ТекстXML.ПолучитьАтрибут("A04"));
	стррПоляИзМУ.Вставить("идТипЦен" 	   , ТекстXML.ПолучитьАтрибут("A05"));
	стррПоляИзМУ.Вставить("Сумма"    	   , Число(ТекстXML.ПолучитьАтрибут("A06")));
	стррПоляИзМУ.Вставить("Комментарий"    , ТекстXML.ПолучитьАтрибут("A07"));
	стррПоляИзМУ.Вставить("Широта"	 	   , ЗначениеВЧисло(ТекстXML.ПолучитьАтрибут("A09")));
	стррПоляИзМУ.Вставить("Долгота" 	   , ЗначениеВЧисло(ТекстXML.ПолучитьАтрибут("A010")));
	стррПоляИзМУ.Вставить("идДокОснование" , ТекстXML.ПолучитьАтрибут("A011"));
	стррПоляИзМУ.Вставить("ЕстьПодчиненные", ТекстXML.ПолучитьАтрибут("A012"));	
	стррПоляИзМУ.Вставить("ДатаНачала"	   , ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A013")));
	стррПоляИзМУ.Вставить("ДатаОкончания"  , ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A014")));
	стррПоляИзМУ.Вставить("ДатаТочкиТрека" , ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A015")));
	
	ВОЗаполнитьОсновныеПараметрыДокумента(стррОбъект, СтррПоляИзМУ);

	// Заполнение ДокументОснование
	идДокОснование = стррПоляИзМУ.идДокОснование; 
	Если ЗначениеЗаполнено(идДокОснование) Тогда 
		текСсылка = СсылкаИзДокументаПоСпискуВидов(идДокОснование, "ЗаказПокупателя, РеализацияТоваровУслуг"); 
		Если ЗначениеЗаполнено(текСсылка) Тогда
			стррОбъект.идДокументОснование = идДокОснование;
			стррОбъект.типДокументОснование = ТипЗнч(текСсылка);
		КонецЕсли;
	КонецЕсли;
	
	//(( ТАБЛИЧНАЯ ЧАСТЬ 
	тзТовары = стррОбъект.Товары;
	ИдТЧТовары = ВРег("A9C8662F-9554-4DEB-A78A-FB66DC757060");
	
	ТекстXML.Прочитать();
	Если ТекстXML.Имя = "TABLES" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		ТекстXML.Прочитать();
		Если ВРег(СокрЛП(ТекстXML.ПолучитьАтрибут("GUID"))) = ИдТЧТовары Тогда
			Пока ТекстXML.Прочитать() Цикл
				Если НЕ ТекстXML.Имя = "ITEM" Тогда
				 	Прервать;
				ИначеЕсли  ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					Продолжить;
				КонецЕсли;	
				
				идНоменклатуры   = ТекстXML.ПолучитьАтрибут("A01");
				идХарактеристики = ТекстXML.ПолучитьАтрибут("A02");
				идЕдиницыИзм	 = ТекстXML.ПолучитьАтрибут("A03");
				Количество		 = Число(ТекстXML.ПолучитьАтрибут("A04"));
				Цена			 = Число(ТекстXML.ПолучитьАтрибут("A05"));
				Сумма			 = Число(ТекстXML.ПолучитьАтрибут("A07"));
				ДоляПолки		 = Число(ТекстXML.ПолучитьАтрибут("A09"));
				КоличествоФейсов = Число(ТекстXML.ПолучитьАтрибут("A010"));
						
				стзСтрока = тзТовары.Добавить(); 
				
			    стзСтрока.Номенклатура 	   = ПолучитьИПроверитьСсылкуИзСправочника(идНоменклатуры, "Номенклатура");
				стзСтрока.Характеристика   = ПолучитьИПроверитьСсылкуИзСправочника(идХарактеристики, "ХарактеристикиНоменклатуры");
				стзСтрока.ЕдиницаИзмерения = ПолучитьИПроверитьСсылкуИзСправочника(идЕдиницыИзм, "ЕдиницыИзмерения");
				
				стзСтрока.Количество 	   = Количество;
				стзСтрока.Цена 		 	   = Цена;
				стзСтрока.Сумма		 	   = Сумма;
				стзСтрока.ДоляПолки  	   = ДоляПолки;
				стзСтрока.КоличествоФейсов = КоличествоФейсов;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	//)) ТАБЛИЧНАЯ ЧАСТЬ
	
	// Запись документа
	Результат = ВОЗаписатьДокумент(стррОбъект);
	
	ЗаписьЖурналаРегистрации(НСтр("ru='Загружен документ из мобильного устройства'"), УровеньЖурналаРегистрации.Информация, , стррОбъект.Ссылка, "Запись документа");
		
	Если Результат Тогда 							
	     стрРезультатЗагрузки = "ru='Записан документ """ + стрПредставлениеДокВМУ + """ (""Мерчендайзинг"")'";
		 ОповеститьОСобытии(стрРезультатЗагрузки, ТипыЛогов["Обмен"], , ВыбАгент, стррОбъект.Ссылка);
	КонецЕсли;
		
КонецПроцедуры 

// Выполняет запись виртуального документа в Хранилище
//
// Параметры:
// 	СтррОбъект - Структура - структура документа
//
// Возвращаемое значение:
//	Результат - Булево -
//                      Истина - документ записан
//						Ложь   - документ не записан
//
Функция ВОЗаписатьДокумент(СтррОбъект) Экспорт

	Ошибка = Неопределено;
	
	Результат = Ложь;
	
	Если СтррОбъект = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МодульВОБД = МодульВОБД();
			
	// Удаляем служебные реквизиты
	СтррОбъект.Удалить("Представление");
	
	// Проверяем и исправляем структуру документа
	ВОПроверитьИИсправитьСтруктуруДокумента(СтррОбъект);
			
	Если МодульВОБД.ЭлементСуществует(СтррОбъект.Ссылка) Тогда
		Если флОбновлятьДокументыПриЗагрузке Тогда 
			МодульВОБД.ЭлементСохранить(СтррОбъект, Ошибка);
			Результат = Истина;
		КонецЕсли;
	Иначе
		МодульВОБД.ЭлементСоздать(СтррОбъект, Ошибка);
		Результат = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ошибка) Тогда
		ОповеститьОСобытии(Ошибка, ТипыЛогов["Обработка"], СтатусСообщения.Внимание, глЗначениеПеременной("глТекущийПользователь"));
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

// sk_190628 Процедура добавлена в рамках (MOD-469)
// Выполняет заполнение системных свойств документа: Гуид, Дата, Номер, Проведен, ПометкаУдаления 
//
// Параметры:
// 	СтррОбъект 	 - Структура - структура документа
//  СтррЗначения - Структура - структура значений 
//
Процедура ВОЗаполнитьСистемныеРеквизитыДокумента(СтррОбъект, СтррЗначения)
	
	МодульВОБД = МодульВОБД();
	
	// 1. Гуид
	текГуид = СтррЗначения.ИдОбъекта;
	СтррОбъект.Гуид = текГуид;
	СтррОбъект.Ссылка.Гуид = текГуид;
	
	// 1. Номер
	текТипОбъекта = СтррОбъект.Ссылка.ТипОбъекта;
	Если СтррЗначения.ЭтоНовый Тогда
		СтррОбъект.Номер = МодульВОБД.ПолучитьНовыйНомерДокумента(текТипОбъекта, СтррЗначения.Номер);
	Иначе
		СтррОбъект.Номер = СтррЗначения.Номер;
	КонецЕсли;
	
	// 2. Дата
	СтррОбъект.Дата = Дата(СтррЗначения.Дата);
	
	// 3. Проведен
	Если флПроводитьДокументыПриЗагрузке Тогда 
		СтррОбъект.Проведен = Истина;
	Иначе
		СтррОбъект.Проведен = Ложь;
	КонецЕсли;

	// 4. Пометка удаления
	СтррОбъект.ПометкаУдаления = Ложь;	

КонецПроцедуры

// Выполняет заполнение основных реквизитов документа документа: Организация, Контрагент, ТорговаяТочка, Договор
//
// Параметры:
// 	СтррОбъект 		     - Структура - структура документа
//  СтррПоляИзМУ 		 - Структура - данные с МУ
//  СтррОбязательныеПоля - Структура - обязательные поля 
//
Процедура ВОЗаполнитьОсновныеРеквизитыДокумента(СтррОбъект, СтррПоляИзМУ, СтррОбязательныеПоля)
	
	стрПредставлениеДокВМУ = СтррОбъект.Представление; 
	
	Организация   = Справочники.Организации.ПустаяСсылка();
	Контрагент 	  = Справочники.Контрагенты.ПустаяСсылка();
	ТорговаяТочка = Справочники.Контрагенты.ПустаяСсылка();
	Договор 	  = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();

	
	ТекстОшибкиОрганизация 	 = Неопределено;
	ТекстОшибкиКонтрагент  	 = Неопределено;
	ТекстОшибкиТорговаяТочка = Неопределено;
	ТекстОшибкиДоговор 		 = Неопределено;
	
	Если СтррОбъект.Свойство("Организация") И СтррОбязательныеПоля.Свойство("Организация") Тогда
		флЗаполняемРеквизитОрганизация = Истина;
	Иначе
		флЗаполняемРеквизитОрганизация = Ложь;
	КонецЕсли;
	
	Если СтррОбъект.Свойство("Контрагент") И СтррОбязательныеПоля.Свойство("Контрагент") Тогда
		флЗаполняемРеквизитКонтрагент = Истина;
	Иначе
		флЗаполняемРеквизитКонтрагент = Ложь;
	КонецЕсли;
	
	Если СтррОбъект.Свойство("ТорговаяТочка") И СтррОбязательныеПоля.Свойство("ТорговаяТочка") Тогда
		флЗаполняемРеквизитТорговаяТочка = Истина;
	Иначе
		флЗаполняемРеквизитТорговаяТочка = Ложь;
	КонецЕсли;
		
	Если СтррОбъект.Свойство("Договор") И СтррОбязательныеПоля.Свойство("Договор") Тогда
		флЗаполняемРеквизитДоговор = Истина;
	Иначе
		флЗаполняемРеквизитДоговор = Ложь;
	КонецЕсли;
	
	// 1. Организация
	Если флЗаполняемРеквизитОрганизация Тогда 
		Если ЗначениеЗаполнено(СтррПоляИзМУ.идОрганизация) Тогда
			Организация = ПолучитьИПроверитьСсылкуИзСправочника(СтррПоляИзМУ.идОрганизация, "Организации", ТекстОшибкиОрганизация);
		Иначе
			ТекстОшибкиОрганизация = "ru=Не передан реквизит ""Организация"" с МУ"; 
		КонецЕсли;
	КонецЕсли;   
		
	// 2. Контрагент
	Если флЗаполняемРеквизитКонтрагент Тогда 
		Если ЗначениеЗаполнено(СтррПоляИзМУ.идКонтрагент) Тогда
			Контрагент = ПолучитьИПроверитьСсылкуИзСправочника(СтррПоляИзМУ.идКонтрагент, "Контрагенты", ТекстОшибкиКонтрагент);
		Иначе
			ТекстОшибкиКонтрагент = "ru=Не передан реквизит ""Контрагент"" с МУ"; 
		КонецЕсли;
	КонецЕсли;
	
	// 3. Торговая Точка
	Если флЗаполняемРеквизитТорговаяТочка Тогда
		Если ЗначениеЗаполнено(СтррПоляИзМУ.идТоргТочка) Тогда	
			//Пункты разгрузки в конфигурации УТ Алк. продукция.
			Если текНаименованиеКонфигурации = "KT2000_Alcohol_MnfcSP" Тогда 
				ТорговаяТочка = ПолучитьИПроверитьСсылкуИзСправочника(стррПоляИзМУ.идТоргТочка, "алкПунктыРазгрузки", ТекстОшибкиТорговаяТочка);								
			Иначе
				ТорговаяТочка = ПолучитьИПроверитьСсылкуИзСправочника(стррПоляИзМУ.идТоргТочка, "Контрагенты", ТекстОшибкиТорговаяТочка);
			КонецЕсли; 
		Иначе
			ТекстОшибкиТорговаяТочка = "Не передан реквизит ""ТорговаяТочка"" с МУ";
		КонецЕсли;
	КонецЕсли;
	
	// 4. Договор
	Если флЗаполняемРеквизитДоговор Тогда 
		Если ЗначениеЗаполнено(СтррПоляИзМУ.идДоговор) Тогда
			Организация = ПолучитьИПроверитьСсылкуИзСправочника(СтррПоляИзМУ.идДоговор, "ДоговорыКонтрагентов", ТекстОшибкиДоговор);
		Иначе
			ТекстОшибкиДоговор = "Не передан реквизит ""Договор"" с МУ"; 
		КонецЕсли;
	КонецЕсли;
	
	// 5.1. Если реквизит Организация не передан с МУ, то заполняем на основании Договора/Контрагента/НастроекПользователя
	Если Не ЗначениеЗаполнено(Организация) И флЗаполняемРеквизитОрганизация Тогда
		
		// Получаем организацию из договора
		Если ЗначениеЗаполнено(Договор) Тогда
			Организация = Договор.Организация;
		КонецЕсли;
		
		// Получаем организацию из справочника контрагента
		Если Не ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(Контрагент) Тогда
			Организация = ЗаполнениеДокументов.ПолучитьОрганизациюПоКонтрагенту(Контрагент);			
		КонецЕсли;
		
		// Получаем организацию из настроек пользователя
		Если Не ЗначениеЗаполнено(Организация) Тогда
			Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ВыбАгент, "ОсновнаяОрганизация");			
		КонецЕсли;
	КонецЕсли;
	
	// 5.2. Если реквизит Контрагент не передан с МУ, то заполняем на основании Договора/ТорговойТочки  
	Если Не ЗначениеЗаполнено(Контрагент) И флЗаполняемРеквизитКонтрагент Тогда
		// Получаем контрагента из договора
		Если ЗначениеЗаполнено(Договор) Тогда
			Контрагент = Договор.Владелец;
		КонецЕсли;
		
		// Получаем контрагента из торговой точки
		Если Не ЗначениеЗаполнено(Контрагент) И ЗначениеЗаполнено(ТорговаяТочка) Тогда
			 Контрагент = Контрагент.ГоловнойКонтрагент;
		КонецЕсли;
		 
		// Получаем контрагента по основному договору
		Если Не ЗначениеЗаполнено(Контрагент) И ЗначениеЗаполнено(Договор) Тогда
			Контрагент = ПолучитьКонтрагентаПоОсновномуДоговору(Договор, Организация)
		КонецЕсли;	
	КонецЕсли;
	
	// 5.3. Если реквизит Договор не передан с МУ, то заполняем на основании
	Если Не ЗначениеЗаполнено(Договор) И флЗаполняемРеквизитДоговор И ЗначениеЗаполнено(Контрагент) Тогда
		Если ЗначениеЗаполнено(Организация) Тогда
			текОрганизация = Организация;
		Иначе
			текОрганизация = Неопределено;
		КонецЕсли;
				
		Договор = ЗаполнениеДокументов.ПолучитьДоговорПоОрганизацииИКонтрагенту(текОрганизация, Контрагент);
		
		Если Не ЗначениеЗаполнено(Договор) Тогда
			Если НаименованиеКонфигурации = "УправлениеПроизводственнымПредприятием" Тогда
				//В УПП ЗаполнениеДокументов.ПолучитьДоступныеДоговорыКонтрагента не экспортная.
				ВыборкаРезультат = ПолучитьДоступныеДоговорыКонтрагента(Контрагент, Неопределено, Истина, текОрганизация, Неопределено);
			Иначе
				ВыборкаРезультат = ЗаполнениеДокументов.ПолучитьДоступныеДоговорыКонтрагента(Контрагент, Неопределено, Истина, текОрганизация, Неопределено);
			КонецЕсли;
			
			ВыборкаРезультат = ВыборкаРезультат.Выбрать();
			Пока ВыборкаРезультат.Следующий() Цикл
				Договор = ВыборкаРезультат.Договор;
				Прервать;
			КонецЦикла;	
		КонецЕсли;
		
	КонецЕсли;
	
	// 6. Заполнение структуры
	Если ЗначениеЗаполнено(Организация) Тогда
		СтррОбъект.Организация = Организация;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		СтррОбъект.Контрагент = Контрагент;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТорговаяТочка) Тогда
		СтррОбъект.ТорговаяТочка = ТорговаяТочка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Договор) Тогда
		СтррОбъект.Договор = Договор;
	КонецЕсли;
	
	// 7. Оповещание	
	Если ЗначениеЗаполнено(ТекстОшибкиОрганизация) Тогда
		ТекстОшибки = "В документе " + стрПредставлениеДокВМУ + " не заполнен реквизит ""Организация""! Причина: " + ТекстОшибкиОрганизация; 
		Если ЗначениеЗаполнено(Организация) Тогда
			ТекстОшибки = ТекстОшибки + Символы.ПС + " В документе " + стрПредставлениеДокВМУ + " организация определена как: " + Организация;
		КонецЕсли;	
		ОповеститьОСобытии("ru='" + ТекстОшибки + "'", ТипыЛогов["Обмен"], СтатусСообщения.Внимание, ВыбАгент);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибкиКонтрагент) Тогда
		ТекстОшибки = "В документе " + стрПредставлениеДокВМУ + " не заполнен реквизит ""Контрагент""! Причина: " + ТекстОшибкиКонтрагент; 
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ТекстОшибки = ТекстОшибки + Символы.ПС + " В документе " + стрПредставлениеДокВМУ + " контрагент определен как: " + Контрагент;	
		КонецЕсли;	
		ОповеститьОСобытии("ru='" + ТекстОшибки + "'", ТипыЛогов["Обмен"], СтатусСообщения.Внимание, ВыбАгент);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстошибкиТорговаяТочка) Тогда
		ТекстОшибки = "В документе " + стрПредставлениеДокВМУ + " не заполнен реквизит ""ТорговаяТочка""! Причина: " + ТекстошибкиТорговаяТочка; 
		Если ЗначениеЗаполнено(ТорговаяТочка) Тогда
			ТекстОшибки = ТекстОшибки + Символы.ПС + " В документе " + стрПредставлениеДокВМУ + " торговая точка определена как: " + ТорговаяТочка;	
		КонецЕсли;	
		ОповеститьОСобытии("ru='" + ТекстОшибки + "'", ТипыЛогов["Обмен"], СтатусСообщения.Внимание, ВыбАгент);
	КонецЕсли;

	Если ЗначениеЗаполнено(ТекстОшибкиДоговор) Тогда		
		ТекстОшибки = "В документе " + стрПредставлениеДокВМУ + " не заполнен реквизит ""Договор""! Причина: " + ТекстОшибкиДоговор; 
		Если ЗначениеЗаполнено(Договор) Тогда
			ТекстОшибки = ТекстОшибки + Символы.ПС + " В документе " + стрПредставлениеДокВМУ + " договор определен как: " + Договор;	
		КонецЕсли;
		ОповеститьОСобытии("ru='" + ТекстОшибки + "'", ТипыЛогов["Обмен"], СтатусСообщения.Внимание, ВыбАгент);
	КонецЕсли;
	
КонецПроцедуры

// sk_190628 Процедура добавлена в рамках (MOD-469)
// Выполняет заполнение основных параметров документа
//
// Параметры:
// 	СтррОбъект   - Структура - структура документа
//  СтррПоляИзМУ - Структура - данные с МУ
//
Процедура ВОЗаполнитьОсновныеПараметрыДокумента(СтррОбъект, СтррПоляИзМУ)

	// 1. Заполняем основные реквизиты документа
	Если СтррОбъект.Ссылка.ТипОбъекта = ВОТипОбъекта.Мерчендайзинг Тогда 
		стррОбязательныеПоля = Новый Структура("Организация, Контрагент");
		
		Если ИспользоватьТорговыеТочки Тогда
			стррОбязательныеПоля.Вставить("ТорговаяТочка");
		КонецЕсли;
		
		ВОЗаполнитьОсновныеРеквизитыДокумента(стррОбъект, стррПоляИзМУ, стррОбязательныеПоля); 
		
	КонецЕсли;
	
	// 2. ТипЦен
	Если СтррПоляИзМУ.Свойство("идТипЦен") И СтррОбъект.Свойство("ТипЦен") Тогда
		ТипЦен = ПолучитьИПроверитьСсылкуИзСправочника(стррПоляИзМУ.идТипЦен, "ТипыЦенНоменклатуры");
		
		// Подставим из договора, если ТипЦен не определен
		Если Не ЗначениеЗаполнено(ТипЦен) Тогда
			Если СтррОбъект.Свойство("Договор") И ЗначениеЗаполнено(СтррОбъект.Договор) Тогда
				ТипЦен = СтррОбъект.Договор.ТипЦен; 
			КонецЕсли;
		КонецЕсли;
		
		СтррОбъект.ТипЦен = ТипЦен;
	КонецЕсли;	
	
	// 3. Сумма
	Если СтррПоляИзМУ.Свойство("Сумма") И СтррОбъект.Свойство("Сумма") Тогда
		СтррОбъект.Сумма = СтррПоляИзМУ.Сумма;		
	КонецЕсли;
	
	// 4. Комментарий
	Если СтррПоляИзМУ.Свойство("Комментарий") И СтррОбъект.Свойство("Комментарий") Тогда
		 СтррОбъект.Комментарий = СтррПоляИзМУ.Комментарий;
	КонецЕсли;
	 
	// 5. Широта и Долгота
	Если СтррПоляИзМУ.Свойство("Широта") И СтррОбъект.Свойство("Широта")
		И СтррПоляИзМУ.Свойство("Долгота") И СтррОбъект.Свойство("Долгота") Тогда
		ЗаполнитьЗначенияСвойств(СтррОбъект, СтррПоляИзМУ, "Широта, Долгота"); 	
	КонецЕсли;
	
	// 6. ДатаНачала и ДатаОкончания
	Если СтррПоляИзМУ.Свойство("ДатаНачала") И СтррОбъект.Свойство("ДатаНачала")
		И СтррПоляИзМУ.Свойство("ДатаОкончания") И СтррОбъект.Свойство("ДатаОкончания") Тогда
		ЗаполнитьЗначенияСвойств(СтррОбъект, СтррПоляИзМУ, "ДатаНачала, ДатаОкончания"); 	
	КонецЕсли;
	
	// 7. ДатаТочкиТрека
	Если СтррПоляИзМУ.Свойство("ДатаТочкиТрека") И СтррОбъект.Свойство("ДатаТочкиТрека") Тогда
		СтррОбъект.ДатаТочкиТрека = СтррПоляИзМУ.ДатаТочкиТрека;	
	КонецЕсли;
	
	// 8. Агент
	Если СтррОбъект.Свойство("Агент") Тогда
		СтррОбъект.Агент = ВыбАгент;
	КонецЕсли;
		
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
//// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ВЫГРУЗКИ ДАННЫХ /////////////////////
//////////////////////////////////////////////////////////////////////////////////

Процедура ЗаписатьЭлементВДокументОбмена(XML_Текст, СтруктураПолей, ЗакрытьЭлемент = Истина)
	
	XML_Текст.ЗаписатьНачалоЭлемента(эл_Элемент);
	
	Для Каждого ТекЭлемент Из СтруктураПолей Цикл
		XML_Текст.ЗаписатьАтрибут(ТекЭлемент.Ключ, ПреобразоватьЗначениеВСтрокуДляXML(ТекЭлемент.Значение));
	КонецЦикла;
	
	Если ЗакрытьЭлемент Тогда
		XML_Текст.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
КонецПроцедуры //ЗаписатьЭлементВДокументОбмена

Функция ПолучитьСтруктуруПредопределенныхПолейСправочника(ТекЭлемент, СоздаватьИдентификатор = Ложь)
	
	СтруктураПолей = Новый Структура;
	
	Если СоздаватьИдентификатор Тогда
		СтруктураПолей.Вставить(ат_Гуид,	Новый УникальныйИдентификатор());
	Иначе
		СтруктураПолей.Вставить(ат_Гуид,	ТекЭлемент.Ссылка.УникальныйИдентификатор());
	КонецЕсли;
	
	СтруктураПолей.Вставить(ат_ПометкаУдаления, ТекЭлемент.Ссылка.ПометкаУдаления);
	СтруктураПолей.Вставить(ат_Наименование, 	 ТекЭлемент.Ссылка.Наименование);
	
	Возврат СтруктураПолей
	
КонецФункции //ПолучитьСтруктуруПредопределенныхПолейСправочника

// Процедура проверяет корректность номера документа для выгрузки. В номере документа недопустимо
// наличие пробелов в конце.
// Параметры
//  <СтруктураПолей>  - <Тип.Структура> - структура полей документа, которую добавляется реквизит номера
//
//  <НомерДокумента>  - <Тип.Строка> - номер документа который проверяется
//
//  <СсылкаДокумента> - <Тип.ДокументСсылка> - ссылка которая покажет пользователю где проблема
Процедура ВставитьНомерДокументаВСтруктуру(СтруктураПолей, Док)

	НомерДокумента = Док.Номер;
	
	НомерДляXML = НомерДокумента;
	// Проверка на пробелы в конце номера
	Если Прав(НомерДокумента, 1) = " " Или Прав(НомерДокумента, 1) = Символы.НПП Тогда
		
		НомерДляXML = СокрП(НомерДляXML);
		ТекстСообщения  = "ru='В номере документа """ + Строка(Док) + """ сокращены конечные пробелы.'";
		ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обмен"], СтатусСообщения.Внимание);		
		
	КонецЕсли;
	
	// Проверка последнего элемента номера
	СписокЦифр = "0123456789";
	ПоследнийЭлемент = Прав(НомерДляXML, 1);
	Если Найти(СписокЦифр, ПоследнийЭлемент) = 0 Тогда
		ТекстСообщения  = "ru='В номере документа '" + Строка(Док) + "' последний символ не цифра.'";
		ОповеститьОСобытии("ru='В номере документа '" + Строка(Док) + "' последний символ не цифра.", СтатусСообщения.Внимание);
	КонецЕсли;
	
	СтруктураПолей.Вставить(ат_НомерДокумента, НомерДляXML);

КонецПроцедуры // ВставитьНомерДокументаВСтруктуру

Функция ПолучитьСтруктуруПредопределенныхПолейДокумента(ТекДокумент, СоздаватьИдентификатор = Ложь, ВыгружатьНомер = Истина)
	
	СтруктураПолей = Новый Структура;
	
	Если СоздаватьИдентификатор Тогда
		СтруктураПолей.Вставить(ат_Гуид,	Новый УникальныйИдентификатор());
	Иначе
		СтруктураПолей.Вставить(ат_Гуид,	ТекДокумент.Ссылка.УникальныйИдентификатор());
	КонецЕсли;
	
	СтруктураПолей.Вставить(ат_ДатаДокумента, 	ТекДокумент.Дата);
	СтруктураПолей.Вставить(ат_ПометкаУдаления, ТекДокумент.ПометкаУдаления);
	СтруктураПолей.Вставить(ат_Проведен, 	 	ТекДокумент.Проведен); 
	
	Если ВыгружатьНомер Тогда
		ВставитьНомерДокументаВСтруктуру(СтруктураПолей, ТекДокумент);
	КонецЕсли;	
	
	Возврат СтруктураПолей
	
КонецФункции //ПолучитьСтруктуруПредопределенныхПолейДокумента
		   
Процедура ВыгрузитьПростойСправочник(XML_Текст, СоотвЗагруженныхОбъектов, ИдСправочника, Выборка)
	
	XML_Текст.ЗаписатьНачалоЭлемента(эл_Справочник);
	СтруктураРеквизитов = СоответствиеСпр[ИдСправочника];
	
		XML_Текст.ЗаписатьАтрибут(ат_Гуид, ИдСправочника);		
		
	    // Передаем команду на очистку клиентов перед загрузкой
	    Если флОчищатьСправочникиПередЗагрузкой Тогда
	    	XML_Текст.ЗаписатьАтрибут(ат_ОчиститьПередЗагрузкой, "1");                	
		КонецЕсли;               	
		
		XML_Текст.ЗаписатьАтрибут(ат_Комментарий, СтруктураРеквизитов["_Представление"]);
	
		XML_Текст.ЗаписатьНачалоЭлемента(эл_Группы);
		XML_Текст.ЗаписатьКонецЭлемента();
 
		XML_Текст.ЗаписатьНачалоЭлемента(эл_Элементы);
	
			Пока Выборка.Следующий() Цикл				
				СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(Выборка);				
				ЗаписатьЭлементВДокументОбмена(XML_Текст, СтруктураПолей);				
			КонецЦикла;
			
		XML_Текст.ЗаписатьКонецЭлемента(); //ELEMENTS
		
		ВыгрузитьПодтверждениеСправочника(XML_Текст, СоотвЗагруженныхОбъектов, ИдСправочника);	
		
	XML_Текст.ЗаписатьКонецЭлемента();     //CATALOG
	
КонецПроцедуры //ВыгрузитьПростойСправочник

Процедура ВыгрузитьПростойСправочникНастроек(XML_Текст, имяНастройки)
	
	СписокЭлементов = ПолучитьЗначениеНастройки(имяНастройки, "Соответствие");
	
	Если СписокЭлементов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	идСпр = СоответствиеСпр[имяНастройки];
	
	СтруктураРеквизитов = СоответствиеСпр[идСпр];
	СтруктураВыгрРеквизитов = ПолучитьСтруктуруВыгружаемыхРеквизитов(СтруктураРеквизитов);
		
	//XML_Текст.ЗаписатьКомментарий(СтруктураРеквизитов["ИмяСправочника"]);	
	XML_Текст.ЗаписатьНачалоЭлемента(эл_Справочник);		
		
    XML_Текст.ЗаписатьАтрибут(ат_Гуид, идСпр);	
    
   	УстановитьПризнакОчисткиСправочника(XML_Текст, идСпр);
	
	XML_Текст.ЗаписатьАтрибут(ат_Комментарий, Строка(СтруктураРеквизитов["_Представление"]));
    
    XML_Текст.ЗаписатьНачалоЭлемента(эл_Группы);
	XML_Текст.ЗаписатьКонецЭлемента();      	            	
 
    	XML_Текст.ЗаписатьНачалоЭлемента(эл_Элементы);
		
		Для Каждого текЭл Из СписокЭлементов Цикл
		
			СтруктураПолей = Новый Структура;
			СтруктураПолей.Вставить(ат_Гуид, текЭл.Значение["УникальныйИдентификатор"]);
			Для Каждого текРеквизит Из СтруктураВыгрРеквизитов Цикл
				СтруктураПолей.Вставить(текРеквизит.Значение, текЭл.Значение[текРеквизит.Ключ]);
			КонецЦикла;			
    			
   			ЗаписатьЭлементВДокументОбмена(XML_Текст, СтруктураПолей);				
			
		КонецЦикла;
 //   		
    	XML_Текст.ЗаписатьКонецЭлемента(); //ELEMENTS
    	
    XML_Текст.ЗаписатьКонецЭлемента();     //CATALOG
	
КонецПроцедуры //ВыгрузитьПростойСправочник

//Истина, если параметр - это контрагент
//Ложь, если параметр - это торговая точка
Функция ЭтоКонтрагент(Контрагент) Экспорт
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Если Контрагент.ГоловнойКонтрагент <> Контрагент.Ссылка И Контрагент.ГоловнойКонтрагент <> Справочники.Контрагенты.ПустаяСсылка() Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьТекстЗапросаКонтрагенты()

	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СкидкиНоменклатуры.Номенклатура,
	               |	СкидкиНоменклатуры.ХарактеристикаНоменклатуры,
	               |	СкидкиНоменклатуры.Качество,
	               |	СкидкиНоменклатуры.Условие,
	               |	СкидкиНоменклатуры.ЗначениеУсловия,
	               |	СкидкиНоменклатуры.ПроцентСкидкиНаценки,
	               |	СкидкиНоменклатуры.ПолучательСкидки
	               |ПОМЕСТИТЬ муСкидки
	               |ИЗ
	               |	РегистрСведений.СкидкиНаценкиНоменклатуры.СрезПоследних(
	               |			&Период,
	               |			Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	               |				И Качество В (&МассивКачество)
	               |				И Условие В (&МассивУсловий)) КАК СкидкиНоменклатуры
	               |ГДЕ
	               |	СкидкиНоменклатуры.Валюта <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	               |	И (СкидкиНоменклатуры.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	               |			ИЛИ КОНЕЦПЕРИОДА(СкидкиНоменклатуры.ДатаОкончания, ДЕНЬ) >= &Период)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Контрагенты.Ссылка КАК Ссылка,
	               |	Контрагенты.ПометкаУдаления,
	               |	Контрагенты.Родитель.Ссылка КАК Родитель,
	               |	Контрагенты.ЭтоГруппа,
	               |	Контрагенты.Код,
	               |	Контрагенты.Наименование,
	               |	Контрагенты.ОсновнойДоговорКонтрагента КАК ОсновнойДоговор,
	               |	ПОДСТРОКА(Контрагенты.Комментарий, 1, 255) КАК Комментарий
	               |ПОМЕСТИТЬ муКонтрагенты
	               |ИЗ
	               |	Справочник.Контрагенты КАК Контрагенты
	               |ГДЕ
	               |	Контрагенты.ЭтоГруппа = ЛОЖЬ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Контрагенты.Ссылка КАК Контрагент,
	               |	МАКСИМУМ(муСкидки.ПроцентСкидкиНаценки) КАК Скидка
	               |ПОМЕСТИТЬ муСкидкиКонтрагентов
	               |ИЗ
	               |	муСкидки КАК муСкидки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	               |		ПО (Контрагенты.Ссылка = муСкидки.ПолучательСкидки)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Контрагенты.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЗначенияСвойствОбъектов.Объект,
	               |	ЗначенияСвойствОбъектов.Значение
	               |ПОМЕСТИТЬ муСтатусыКонтрагентов
	               |ИЗ
	               |	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	               |ГДЕ
	               |	ЗначенияСвойствОбъектов.Свойство = &СвойствоСтатусКонтрагента
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	&ОбщаяСкидка,
	               |	муКонтрагенты.Ссылка,
	               |	муКонтрагенты.ПометкаУдаления,
	               |	муКонтрагенты.Родитель,
	               |	муКонтрагенты.ЭтоГруппа,
	               |	муКонтрагенты.Код,
	               |	муКонтрагенты.Наименование КАК Наименование,
	               |	муКонтрагенты.ОсновнойДоговор,
	               |	муСтатусыКонтрагентов.Значение КАК СтатусКонтрагента,
	               |	ВЫБОР
	               |		КОГДА муСкидкиКонтрагентов.Скидка > &ОбщаяСкидка
	               |			ТОГДА муСкидкиКонтрагентов.Скидка
	               |		ИНАЧЕ &ОбщаяСкидка
	               |	КОНЕЦ КАК Скидка,
	               |	муКонтрагенты.Комментарий
	               |ИЗ
	               |	муКонтрагенты КАК муКонтрагенты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ муСкидкиКонтрагентов КАК муСкидкиКонтрагентов
	               |		ПО муКонтрагенты.Ссылка = муСкидкиКонтрагентов.Контрагент
	               |		ЛЕВОЕ СОЕДИНЕНИЕ муСтатусыКонтрагентов КАК муСтатусыКонтрагентов
	               |		ПО муКонтрагенты.Ссылка = муСтатусыКонтрагентов.Объект
	               |ГДЕ
	               |	муКонтрагенты.Ссылка В ИЕРАРХИИ(&СписКлиентов)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Наименование";
	
	Возврат ТекстЗапроса;
	
КонецФункции //ПолучитьТекстЗапросаКонтрагенты

Функция ПолучитьТекстЗапросаВсеКонтрагенты(ИспТоргТочки = Неопределено, СписТоргТочек = Неопределено) Экспорт
	
	Если ИспользоватьТорговыеТочки Тогда	
		
		Если СписТоргТочек = Неопределено Тогда 
			Запрос = Новый Запрос(ПолучитьТекстЗапросаТорговыхТочек());
			СписТоргТочек = Запрос.Выполнить().Выгрузить();
		КонецЕсли;
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	Контрагенты.Ссылка КАК Ссылка
		               |ИЗ
		               |	Справочник.Контрагенты КАК Контрагенты
		               |ГДЕ
		               |	Контрагенты.ЭтоГруппа = ЛОЖЬ
		               |	И Контрагенты.ПометкаУдаления = ЛОЖЬ
					   |	И (Контрагенты.ГоловнойКонтрагент = Контрагенты.Ссылка
		               |	ИЛИ (Контрагенты.ГоловнойКонтрагент ЕСТЬ NULL))
					   |	И НЕ(Контрагенты.Ссылка В(&СписокТорговыеТочки))";				
	Иначе
				   
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	Контрагенты.Ссылка КАК Ссылка
		               |ИЗ
		               |	Справочник.Контрагенты КАК Контрагенты
		               |ГДЕ
		               |	Контрагенты.ЭтоГруппа = ЛОЖЬ
		               |	И Контрагенты.ПометкаУдаления = ЛОЖЬ";
	КонецЕсли;
			   
	Возврат ТекстЗапроса;	
КонецФункции //ПолучитьТекстЗапросаКонтрагенты

Функция ПолучитьТекстЗапросаТорговыхТочек(СписокКонтрагентов = Ложь) Экспорт
	
	ДопУсловие = ?(СписокКонтрагентов, "И Контрагенты.ГоловнойКонтрагент В(&СписокКонтрагентов)", "");	
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Контрагенты.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Контрагенты КАК Контрагенты
	               |ГДЕ
	               |	Контрагенты.ПометкаУдаления = ЛОЖЬ
				   |	И Контрагенты.ЭтоГруппа = ЛОЖЬ
				   |	И (Контрагенты.ГоловнойКонтрагент <> Контрагенты.Ссылка
	               |			И НЕ(Контрагенты.ГоловнойКонтрагент ЕСТЬ NULL)) " + ДопУсловие;

   Возврат ТекстЗапроса;	
КонецФункции

Функция ПолучитьТекстЗапросаАлкПунктыРазгрузки(СписокКонтрагентов = Ложь) Экспорт
	
	ДопУсловие = ?(СписокКонтрагентов, " И алкПунктыРазгрузки.Владелец В(&СписокКонтрагентов)", "");	
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	алкПунктыРазгрузки.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.алкПунктыРазгрузки КАК алкПунктыРазгрузки
	               |ГДЕ
	               |	алкПунктыРазгрузки.ПометкаУдаления = ЛОЖЬ
				   |	" + ДопУсловие;

   Возврат ТекстЗапроса;	
КонецФункции

Функция ПолучитьТекстЗапросаТипыЦен() Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ТипыЦенНоменклатуры.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ТипыЦенНоменклатуры КАК ТипыЦенНоменклатуры
	               |ГДЕ
	               |	ТипыЦенНоменклатуры.ПометкаУдаления = ЛОЖЬ";

   Возврат ТекстЗапроса;	
КонецФункции

Функция ПолучитьТекстЗапросаКассы() Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Кассы.Ссылка,
	               |	Кассы.Владелец КАК Организация
	               |ИЗ
	               |	Справочник.Кассы КАК Кассы
	               |ГДЕ
	               |	Кассы.ЭтоГруппа = ЛОЖЬ
	               |	И Кассы.ПометкаУдаления = ЛОЖЬ";

   Возврат ТекстЗапроса;	
КонецФункции

Функция ПолучитьТекстЗапросаНоменклатура() Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Номенклатура.Ссылка
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
				   |ГДЕ
	               |	Номенклатура.ПометкаУдаления = ЛОЖЬ";

   Возврат ТекстЗапроса;	
КонецФункции

Функция ПолучитьТекстЗапросаПоВыгружаемойНоменклатуре(ЗапросПоХарактеристиками = Ложь)
	
	флУчитыватьРезервы = НастройкиОбработки["УчитыватьРезервы"];
	флВыгружатьТоварыСНулевымОстатком = НастройкиОбработки["ВыгружатьТоварыСНулевымОстатком"];
	
	ТекстУсловия = "";
	Если Не флВыгружатьТоварыСНулевымОстатком Тогда	
		ТекстУсловия = "
		|ГДЕ ВЫБОР			
		|КОГДА ЗапросПрайс.Номенклатура.Услуга
		|ТОГДА 100
		|ИНАЧЕ Остатки.Остаток
		|КОНЕЦ > 0";
	КонецЕсли;  
	
	Если ЗапросПоХарактеристиками Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(ЗапросПрайс.Номенклатура, Остатки.НоменклатураОст) КАК Ссылка,
		|	ВЫБОР
		|	КОГДА ЕСТЬNULL(ЗапросПрайс.ХарактеристикаНоменклатуры, Остатки.ХарактеристикаНоменклатуры) = &ПустаяХарактеристика
		|		ТОГДА ""<Без характеристики>""
		|		ИНАЧЕ ЕСТЬNULL(ЗапросПрайс.ХарактеристикаНоменклатуры, Остатки.ХарактеристикаНоменклатуры)
		|	КОНЕЦ КАК ХарактеристикаНоменклатуры,		
		|	ЗапросПрайс.ТипЦен КАК ТипЦен,
		|	Остатки.Склад КАК Склад,
		|	ЕСТЬNULL(Остатки.Остаток, 0) КАК СвободныйОстаток,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА ЗапросПрайс.Валюта = ЗапросПрайс.ВалютаПрайса
		|					ИЛИ ЗапросПрайс.Цена = 0
		|				ТОГДА ЗапросПрайс.Цена
		|			ИНАЧЕ ЗапросПрайс.Цена * ВЫБОР
		|					КОГДА КурсыВалютСрезПоследних.Курс = 0
		|						ТОГДА 1
		|					ИНАЧЕ КурсыВалютСрезПоследних.Курс
		|				КОНЕЦ * ВЫБОР
		|					КОГДА КурсыВалютСрезПоследнихОтчет.Кратность = 0
		|						ТОГДА 1
		|					ИНАЧЕ КурсыВалютСрезПоследнихОтчет.Кратность
		|				КОНЕЦ / ВЫБОР
		|					КОГДА КурсыВалютСрезПоследнихОтчет.Курс = 0
		|						ТОГДА 1
		|					ИНАЧЕ КурсыВалютСрезПоследнихОтчет.Курс
		|				КОНЕЦ / ВЫБОР
		|					КОГДА КурсыВалютСрезПоследних.Кратность = 0
		|						ТОГДА 1
		|					ИНАЧЕ КурсыВалютСрезПоследних.Кратность
		|				КОНЕЦ
		|		КОНЕЦ, 0) КАК Цена,
		|	ВЫБОР
		|		КОГДА (НЕ КатегорииОбъектов.Категория ЕСТЬ NULL )
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Акция,
		//vd_180604
		|	ЗапросПрайс.КоэффицентЦены как ЦенаНоменклатурыКоэффицент,
		|	ЗапросПрайс.ЕдЦены как ЦенаНоменклатурыЕдЦены
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЦеныБазовые.ТипЦен КАК ТипЦен,
		|		ВЫБОР
		|			КОГДА &ВВалютеОтчета = ЛОЖЬ
		|				ТОГДА ВЫБОР
		|						КОГДА ЦеныБазовые.ТипЦен.Рассчитывается
		|							ТОГДА ЦеныБазовые.ТипЦен.ВалютаЦены
		|						ИНАЧЕ МИНИМУМ(ВЫБОР
		|									КОГДА ЦеныБазовые.ТипЦен.Рассчитывается
		|										ТОГДА ВЫБОР
		|												КОГДА ЦеныРасчетные.Валюта ЕСТЬ NULL 
		|													ТОГДА ЦеныБазовые.Валюта
		|												ИНАЧЕ ВЫБОР
		|														КОГДА ЦеныБазовые.СпособРасчетаЦены = &СпособНаценка
		|															ТОГДА ЦеныРасчетные.Валюта
		|														ИНАЧЕ ЦеныБазовые.ВалютаДиапазона
		|													КОНЕЦ
		|											КОНЕЦ
		|									ИНАЧЕ ЦеныБазовые.Валюта
		|								КОНЕЦ)
		|					КОНЕЦ
		|			ИНАЧЕ &ВалютаОтчета
		|		КОНЕЦ КАК ВалютаПрайса,
		|		ЦеныБазовые.ЦеноваяГруппа КАК ЦеноваяГруппа,
		|		ЦеныБазовые.Номенклатура КАК Номенклатура,
		|		МИНИМУМ(ВЫБОР
		|				КОГДА ЦеныБазовые.ТипЦен.Рассчитывается
		|					ТОГДА ЦеныРасчетные.ЕдиницаИзмерения
		|				ИНАЧЕ ЦеныБазовые.ЕдиницаИзмерения
		|			КОНЕЦ) КАК ЕдиницаИзмерения,
		|		МИНИМУМ(ВЫБОР
		|				КОГДА ЦеныБазовые.ТипЦен.Рассчитывается
		|					ТОГДА ВЫБОР
		|							КОГДА ЦеныРасчетные.Валюта ЕСТЬ NULL 
		|								ТОГДА ЦеныБазовые.Валюта
		|							ИНАЧЕ ВЫБОР
		|									КОГДА ЦеныБазовые.СпособРасчетаЦены = &СпособНаценка
		|										ТОГДА ЦеныРасчетные.Валюта
		|									ИНАЧЕ ЦеныБазовые.ВалютаДиапазона
		|								КОНЕЦ
		|						КОНЕЦ
		|				ИНАЧЕ ЦеныБазовые.Валюта
		|			КОНЕЦ) КАК Валюта,
		|		МИНИМУМ(ВЫБОР
		|				КОГДА ЦеныБазовые.Цена = 0
		|					ТОГДА ВЫБОР
		|							КОГДА ЦеныБазовые.ТипЦен.Рассчитывается
		|								ТОГДА ВЫБОР
		|										КОГДА ЦеныБазовые.СпособРасчетаЦены = &СпособНаценка
		|											ТОГДА ВЫБОР
		|													КОГДА ЦеныРасчетные.Цена ЕСТЬ NULL 
		|														ТОГДА 0
		|													ИНАЧЕ ЦеныРасчетные.Цена * (1 + ЦеныБазовые.ПроцентСкидкиНаценки / 100)
		|												КОНЕЦ
		|										ИНАЧЕ ЦеныБазовые.ЦенаДиапазона
		|									КОНЕЦ
		|							ИНАЧЕ ЦеныБазовые.Цена
		|						КОНЕЦ
		|				ИНАЧЕ ЦеныБазовые.Цена
		|			КОНЕЦ) КАК Цена,
		|		ЦеныБазовые.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		//vd_180604
		|			МИНИМУМ(ТабЕдиницыИзмерения.Коэффициент) КАК КоэффицентЦены,
		|			МИНИМУМ(ТабЕдиницыИзмерения.Ссылка) КАК ЕдЦены
		|	ИЗ
		|		(ВЫБРАТЬ
		|			СписокНоменклатуры.Номенклатура КАК Номенклатура,
		|			СписокНоменклатуры.Номенклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
		|			СпрТипЦен.ТипЦен КАК ТипЦен,
		|			ЦеныНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|			ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) КАК Цена,
		|			ВЫБОР
		|				КОГДА ЦеныНоменклатуры.Номенклатура ЕСТЬ NULL 
		|					ТОГДА СпрТипЦен.ПроцентСкидкиНаценки
		|				ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.ПроцентСкидкиНаценки, ЦеныНоменклатуры.ТипЦен.ПроцентСкидкиНаценки)
		|			КОНЕЦ КАК ПроцентСкидкиНаценки,
		|			ВЫБОР
		|				КОГДА ЦеныНоменклатуры.Номенклатура ЕСТЬ NULL 
		|					ТОГДА СпрТипЦен.СпособРасчетаЦены
		|				ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.СпособРасчетаЦены, ЦеныНоменклатуры.ТипЦен.СпособРасчетаЦены)
		|			КОНЕЦ КАК СпособРасчетаЦены,
		|			ЕСТЬNULL(ШкалыДиапазонов.Цена, 0) КАК ЦенаДиапазона,
		|			ЕСТЬNULL(ШкалыДиапазонов.ВерхняяГраница, 0) КАК ВерхняяГраница,
		|			ЕСТЬNULL(ЦеныНоменклатуры.Валюта, СпрТипЦен.Валюта) КАК Валюта,
		|			ШкалыДиапазонов.Валюта КАК ВалютаДиапазона,
		|			СписокНоменклатуры.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
		|		ИЗ
		|			(ВЫБРАТЬ
		|				СпрНоменклатура.Ссылка КАК Номенклатура,
		|				ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ХарактеристикаНоменклатуры
		|			ИЗ
		|				Справочник.Номенклатура КАК СпрНоменклатура
		|			ГДЕ
		|				СпрНоменклатура.Ссылка В(&Ассортимент)
		|				И (НЕ СпрНоменклатура.ЭтоГруппа)
		|				И (НЕ СпрНоменклатура.ПометкаУдаления)
		|			{ГДЕ
		|				СпрНоменклатура.Ссылка.* КАК Номенклатура,
		|				СпрНоменклатура.Ссылка.ЦеноваяГруппа.* КАК ЦеноваяГруппа}
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ
		|				СпрХарактеристики.Владелец,
		|				СпрХарактеристики.Ссылка
		|			ИЗ
		|				Справочник.ХарактеристикиНоменклатуры КАК СпрХарактеристики
		|			ГДЕ
		|				СпрХарактеристики.Владелец В ИЕРАРХИИ(&Ассортимент)
		|				И (НЕ СпрХарактеристики.ПометкаУдаления)
		|			{ГДЕ
		|				СпрХарактеристики.Владелец.* КАК Номенклатура,
		|				СпрХарактеристики.Владелец.ЦеноваяГруппа.* КАК ЦеноваяГруппа}
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ
		|				Номенклатура.Ссылка,
		|				ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|			ИЗ
		|				Справочник.Номенклатура КАК Номенклатура
		|			ГДЕ
		|				Номенклатура.Ссылка В ИЕРАРХИИ(&Ассортимент)) КАК СписокНоменклатуры
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					СправочникЦен.Ссылка КАК ТипЦен,
		|					СправочникЦен.ВалютаЦены КАК Валюта,
		|					СправочникЦен.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
		|					СправочникЦен.СпособРасчетаЦены КАК СпособРасчетаЦены
		|				ИЗ
		|					Справочник.ТипыЦенНоменклатуры КАК СправочникЦен
		|				{ГДЕ
		|					СправочникЦен.Ссылка.* КАК ТипЦен}) КАК СпрТипЦен
		|				ПО ((НЕ СписокНоменклатуры.Номенклатура.ЭтоГруппа))
		|					И ((НЕ СписокНоменклатуры.Номенклатура.Набор))
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, Номенклатура В ИЕРАРХИИ (&Ассортимент) {(Номенклатура).* КАК Номенклатура, (Номенклатура.ЦеноваяГруппа).* КАК ЦеноваяГруппа, (ТипЦен).* КАК ТипЦен}) КАК ЦеныНоменклатуры
		|				ПО (ЦеныНоменклатуры.Номенклатура = СписокНоменклатуры.Номенклатура)
		|					И (ЦеныНоменклатуры.ТипЦен = СпрТипЦен.ТипЦен)
		|					И СписокНоменклатуры.ХарактеристикаНоменклатуры = ЦеныНоменклатуры.ХарактеристикаНоменклатуры
		|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					ДиапазоныЦен.ТипЦен КАК ТипЦен,
		|					ДиапазоныЦен.ВерхняяГраница КАК ВерхняяГраница,
		|					ДиапазоныЦен.Цена КАК Цена,
		|					ДиапазоныЦен.Валюта КАК Валюта,
		|					ДиапазоныЦен.Период КАК Период
		|				ИЗ
		|					РегистрСведений.ДиапазоныЦенДляНаценки.СрезПоследних(&Дата, {(ТипЦен).* КАК ТипЦен}) КАК ДиапазоныЦен
		|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|							ДиапазоныЦенДляНаценкиСрезПоследних.ТипЦен КАК ТипЦен,
		|							МАКСИМУМ(ДиапазоныЦенДляНаценкиСрезПоследних.Период) КАК Период
		|						ИЗ
		|							РегистрСведений.ДиапазоныЦенДляНаценки.СрезПоследних(&Дата, {(ТипЦен).* КАК ТипЦен}) КАК ДиапазоныЦенДляНаценкиСрезПоследних
		|						
		|						СГРУППИРОВАТЬ ПО
		|							ДиапазоныЦенДляНаценкиСрезПоследних.ТипЦен) КАК МаксДиапазоныЦен
		|						ПО ДиапазоныЦен.ТипЦен = МаксДиапазоныЦен.ТипЦен
		|							И ДиапазоныЦен.Период = МаксДиапазоныЦен.Период) КАК ШкалыДиапазонов
		|				ПО (ШкалыДиапазонов.ТипЦен = СпрТипЦен.ТипЦен)) КАК ЦеныБазовые
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, Номенклатура В ИЕРАРХИИ (&Ассортимент) {(Номенклатура).* КАК Номенклатура, (Номенклатура.ЦеноваяГруппа).* КАК ЦеноваяГруппа}) КАК ЦеныРасчетные
		|			ПО ЦеныБазовые.ТипЦен.БазовыйТипЦен = ЦеныРасчетные.ТипЦен
		|				И ЦеныБазовые.ХарактеристикаНоменклатуры = ЦеныРасчетные.ХарактеристикаНоменклатуры
		|				И ЦеныБазовые.Номенклатура = ЦеныРасчетные.Номенклатура
		//{{vd_180614
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ТабЕдиницыИзмерения 
		|        ПО ЦеныБазовые.ЕдиницаИзмерения.Ссылка = ТабЕдиницыИзмерения.Ссылка ИЛИ ЦеныРасчетные.ЕдиницаИзмерения.Ссылка = ТабЕдиницыИзмерения.Ссылка 
		//}}
		|	ГДЕ
		|		((НЕ ЦеныБазовые.ТипЦен.Рассчитывается)
		|				ИЛИ ЦеныБазовые.СпособРасчетаЦены <> &СпособДиапазон
		|				ИЛИ ЦеныБазовые.СпособРасчетаЦены = &СпособДиапазон
		|					И (ЦеныРасчетные.Цена МЕЖДУ 0.000001 И ЦеныБазовые.ВерхняяГраница - 0.000001))
		|		И ЦеныБазовые.ТипЦен В(&СписокТиповЦен)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ЦеныБазовые.ТипЦен,
		|		ЦеныБазовые.ЦеноваяГруппа,
		|		ЦеныБазовые.Номенклатура,
		|		ЦеныБазовые.ХарактеристикаНоменклатуры,
		|		ЦеныБазовые.ТипЦен.Рассчитывается,
		|		ЦеныБазовые.ТипЦен.ВалютаЦены) КАК ЗапросПрайс
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютСрезПоследнихОтчет
		|		ПО ЗапросПрайс.ВалютаПрайса = КурсыВалютСрезПоследнихОтчет.Валюта
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			КатегорииОбъектов.Объект КАК Объект,
		|			КатегорииОбъектов.Категория КАК Категория
		|		ИЗ
		|			РегистрСведений.КатегорииОбъектов КАК КатегорииОбъектов
		|		ГДЕ
		|			КатегорииОбъектов.Категория.Наименование = ""АП_Акция"") КАК КатегорииОбъектов
		|		ПО ЗапросПрайс.Номенклатура = КатегорииОбъектов.Объект
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютСрезПоследних
		|		ПО ЗапросПрайс.Валюта = КурсыВалютСрезПоследних.Валюта
		|		{ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			НесвернутыеОстатки.Номенклатура КАК НоменклатураОст,
		|		СУММА(ВЫБОР
		|			КОГДА НесвернутыеОстатки.Остаток < 0
		|				ТОГДА 0
		|		ИНАЧЕ НесвернутыеОстатки.Остаток
		|		КОНЕЦ - " + ?(флУчитыватьРезервы, "ЕСТЬNULL(ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток, 0)", "0") + ") КАК Остаток,
		|			НесвернутыеОстатки.Склад КАК Склад,
		|			НесвернутыеОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
		|		ИЗ
		|			(ВЫБРАТЬ
		|				Ост.Номенклатура.Ссылка КАК Номенклатура,
		|				Ост.КоличествоОстаток КАК Остаток,
		|				Ост.Склад КАК Склад,
		|				Ост.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
		|			ИЗ
		|				РегистрНакопления.ТоварыНаСкладах.Остатки(
		|						&Дата,
		|						Номенклатура В ИЕРАРХИИ (&Ассортимент)
		|							И склад В (&СписокСкладов) {(Склад).* КАК Склад, (Склад.ВидСклада).* КАК ВидСклада, (Номенклатура).* КАК Номенклатура, (Номенклатура.ЦеноваяГруппа).* КАК ЦеноваяГруппа}) КАК Ост
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ
		|				НТТ.Номенклатура.Ссылка,
		|				НТТ.КоличествоОстаток,
		|				НТТ.Склад,
		|				НТТ.ХарактеристикаНоменклатуры
		|			ИЗ
		|				РегистрНакопления.ТоварыВНТТ.Остатки(
		|						&Дата,
		|						Номенклатура В ИЕРАРХИИ (&Ассортимент)
		|							И склад В (&СписокСкладов) {(Склад).* КАК Склад, (Склад.ВидСклада).* КАК ВидСклада, (Номенклатура).* КАК Номенклатура, (Номенклатура.ЦеноваяГруппа).* КАК ЦеноваяГруппа}) КАК НТТ
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ
		|				Розница.Номенклатура.Ссылка,
		|				Розница.КоличествоОстаток,
		|				Розница.Склад,
		|				Розница.ХарактеристикаНоменклатуры
		|			ИЗ
		|				РегистрНакопления.ТоварыВРознице.Остатки(
		|						&Дата,
		|						Номенклатура В ИЕРАРХИИ (&Ассортимент)
		|							И склад В (&СписокСкладов) {(Склад).* КАК Склад, (Склад.ВидСклада).* КАК ВидСклада, (Номенклатура).* КАК Номенклатура, (Номенклатура.ЦеноваяГруппа).* КАК ЦеноваяГруппа}) КАК Розница) КАК НесвернутыеОстатки
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(
		|						&Дата,
		|						Номенклатура В ИЕРАРХИИ (&Ассортимент)
		|							И Склад В (&СписокСкладов)) КАК ТоварыВРезервеНаСкладахОстатки
		|				ПО НесвернутыеОстатки.Номенклатура = ТоварыВРезервеНаСкладахОстатки.Номенклатура
		|					И НесвернутыеОстатки.Склад = ТоварыВРезервеНаСкладахОстатки.Склад
		|					И НесвернутыеОстатки.ХарактеристикаНоменклатуры = ТоварыВРезервеНаСкладахОстатки.ХарактеристикаНоменклатуры
		|		
		|		СГРУППИРОВАТЬ ПО
		|			НесвернутыеОстатки.Номенклатура,
		|			НесвернутыеОстатки.Склад,
		|			НесвернутыеОстатки.ХарактеристикаНоменклатуры) КАК Остатки
		|		ПО ЗапросПрайс.Номенклатура = Остатки.НоменклатураОст
		|			И ЗапросПрайс.ХарактеристикаНоменклатуры = Остатки.ХарактеристикаНоменклатуры}" + ТекстУсловия + "		
		|{ГДЕ
		|	(ИСТИНА) КАК СвойстваИКатегории}
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	ХарактеристикаНоменклатуры
		|ИТОГИ
		|	МИНИМУМ(СвободныйОстаток),
		|	МАКСИМУМ(Цена),
		|	МИНИМУМ(Акция),
		//vd_180614
		|	МИНИМУМ(ЦенаНоменклатурыКоэффицент),
		|	МИНИМУМ(ЦенаНоменклатурыЕдЦены)
		|ПО
		|	Ссылка,
		|	ХарактеристикаНоменклатуры,
		|	ТипЦен,
		|	Склад
		|АВТОУПОРЯДОЧИВАНИЕ";
				
	Иначе
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗапросПрайс.Номенклатура КАК Ссылка,
		|	ЗапросПрайс.ТипЦен КАК ТипЦен,
		|	Остатки.Склад КАК Склад,
		|	ЕСТЬNULL(Остатки.Остаток, 0) КАК СвободныйОстаток,
		|	ВЫБОР
		|		КОГДА ЗапросПрайс.Валюта = ЗапросПрайс.ВалютаПрайса
		|				ИЛИ ЗапросПрайс.Цена = 0
		|			ТОГДА ЗапросПрайс.Цена
		|		ИНАЧЕ ЗапросПрайс.Цена * ВЫБОР
		|				КОГДА КурсыВалютСрезПоследних.Курс = 0
		|					ТОГДА 1
		|				ИНАЧЕ КурсыВалютСрезПоследних.Курс
		|			КОНЕЦ * ВЫБОР
		|				КОГДА КурсыВалютСрезПоследнихОтчет.Кратность = 0
		|					ТОГДА 1
		|				ИНАЧЕ КурсыВалютСрезПоследнихОтчет.Кратность
		|			КОНЕЦ / ВЫБОР
		|				КОГДА КурсыВалютСрезПоследнихОтчет.Курс = 0
		|					ТОГДА 1
		|				ИНАЧЕ КурсыВалютСрезПоследнихОтчет.Курс
		|			КОНЕЦ / ВЫБОР
		|				КОГДА КурсыВалютСрезПоследних.Кратность = 0
		|					ТОГДА 1
		|				ИНАЧЕ КурсыВалютСрезПоследних.Кратность
		|			КОНЕЦ
		|	КОНЕЦ КАК Цена,
		|	ВЫБОР
		|		КОГДА (НЕ КатегорииОбъектов.Категория ЕСТЬ NULL )
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Акция,
		//vd_180604
		|	ЗапросПрайс.КоэффицентЦены как ЦенаНоменклатурыКоэффицент,
		|	ЗапросПрайс.ЕдЦены как ЦенаНоменклатурыЕдЦены
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЦеныБазовые.ТипЦен КАК ТипЦен,
		|		ВЫБОР
		|			КОГДА &ВВалютеОтчета = ЛОЖЬ
		|				ТОГДА ВЫБОР
		|						КОГДА ЦеныБазовые.ТипЦен.Рассчитывается
		|							ТОГДА ЦеныБазовые.ТипЦен.ВалютаЦены
		|						ИНАЧЕ МИНИМУМ(ВЫБОР
		|									КОГДА ЦеныБазовые.ТипЦен.Рассчитывается
		|										ТОГДА ВЫБОР
		|												КОГДА ЦеныРасчетные.Валюта ЕСТЬ NULL 
		|													ТОГДА ЦеныБазовые.Валюта
		|												ИНАЧЕ ВЫБОР
		|														КОГДА ЦеныБазовые.СпособРасчетаЦены = &СпособНаценка
		|															ТОГДА ЦеныРасчетные.Валюта
		|														ИНАЧЕ ЦеныБазовые.ВалютаДиапазона
		|													КОНЕЦ
		|											КОНЕЦ
		|									ИНАЧЕ ЦеныБазовые.Валюта
		|								КОНЕЦ)
		|					КОНЕЦ
		|			ИНАЧЕ &ВалютаОтчета
		|		КОНЕЦ КАК ВалютаПрайса,
		|		ЦеныБазовые.ЦеноваяГруппа КАК ЦеноваяГруппа,
		|		ЦеныБазовые.Номенклатура КАК Номенклатура,
		|		МИНИМУМ(ВЫБОР
		|				КОГДА ЦеныБазовые.ТипЦен.Рассчитывается
		|					ТОГДА ЦеныРасчетные.ЕдиницаИзмерения
		|				ИНАЧЕ ЦеныБазовые.ЕдиницаИзмерения
		|			КОНЕЦ) КАК ЕдиницаИзмерения,
		|		МИНИМУМ(ВЫБОР
		|				КОГДА ЦеныБазовые.ТипЦен.Рассчитывается
		|					ТОГДА ВЫБОР
		|							КОГДА ЦеныРасчетные.Валюта ЕСТЬ NULL 
		|								ТОГДА ЦеныБазовые.Валюта
		|							ИНАЧЕ ВЫБОР
		|									КОГДА ЦеныБазовые.СпособРасчетаЦены = &СпособНаценка
		|										ТОГДА ЦеныРасчетные.Валюта
		|									ИНАЧЕ ЦеныБазовые.ВалютаДиапазона
		|								КОНЕЦ
		|						КОНЕЦ
		|				ИНАЧЕ ЦеныБазовые.Валюта
		|			КОНЕЦ) КАК Валюта,
		|		МИНИМУМ(ВЫБОР
		|				КОГДА ЦеныБазовые.Цена = 0
		|					ТОГДА ВЫБОР
		|							КОГДА ЦеныБазовые.ТипЦен.Рассчитывается
		|								ТОГДА ВЫБОР
		|										КОГДА ЦеныБазовые.СпособРасчетаЦены = &СпособНаценка
		|											ТОГДА ВЫБОР
		|													КОГДА ЦеныРасчетные.Цена ЕСТЬ NULL 
		|														ТОГДА 0
		|													ИНАЧЕ ЦеныРасчетные.Цена * (1 + ЦеныБазовые.ПроцентСкидкиНаценки / 100)
		|												КОНЕЦ
		|										ИНАЧЕ ЦеныБазовые.ЦенаДиапазона
		|									КОНЕЦ
		|							ИНАЧЕ ЦеныБазовые.Цена
		|						КОНЕЦ
		|				ИНАЧЕ ЦеныБазовые.Цена
		|			КОНЕЦ) КАК Цена,
				//vd_180604
		|			МИНИМУМ(ТабЕдиницыИзмерения.Коэффициент) КАК КоэффицентЦены,
		|			МИНИМУМ(ТабЕдиницыИзмерения.Ссылка) КАК ЕдЦены
		|	ИЗ
		|		(ВЫБРАТЬ
		|			СписокНоменклатуры.Номенклатура КАК Номенклатура,
		|			СписокНоменклатуры.Номенклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
		|			СпрТипЦен.ТипЦен КАК ТипЦен,
		|			ЦеныНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|			ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) КАК Цена,
		|			ВЫБОР
		|				КОГДА ЦеныНоменклатуры.Номенклатура ЕСТЬ NULL 
		|					ТОГДА СпрТипЦен.ПроцентСкидкиНаценки
		|				ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.ПроцентСкидкиНаценки, ЦеныНоменклатуры.ТипЦен.ПроцентСкидкиНаценки)
		|			КОНЕЦ КАК ПроцентСкидкиНаценки,
		|			ВЫБОР
		|				КОГДА ЦеныНоменклатуры.Номенклатура ЕСТЬ NULL 
		|					ТОГДА СпрТипЦен.СпособРасчетаЦены
		|				ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.СпособРасчетаЦены, ЦеныНоменклатуры.ТипЦен.СпособРасчетаЦены)
		|			КОНЕЦ КАК СпособРасчетаЦены,
		|			ЕСТЬNULL(ШкалыДиапазонов.Цена, 0) КАК ЦенаДиапазона,
		|			ЕСТЬNULL(ШкалыДиапазонов.ВерхняяГраница, 0) КАК ВерхняяГраница,
		|			ЕСТЬNULL(ЦеныНоменклатуры.Валюта, СпрТипЦен.Валюта) КАК Валюта,
		|			ШкалыДиапазонов.Валюта КАК ВалютаДиапазона
		|		ИЗ
		|			(ВЫБРАТЬ
		|				СпрНоменклатура.Ссылка КАК Номенклатура
		|			ИЗ
		|				Справочник.Номенклатура КАК СпрНоменклатура
		|			ГДЕ
		|				СпрНоменклатура.Ссылка В ИЕРАРХИИ(&Ассортимент)
		|				И (НЕ СпрНоменклатура.ПометкаУдаления)
		|				И (НЕ СпрНоменклатура.ЭтоГруппа)
		|			{ГДЕ
		|				СпрНоменклатура.Ссылка.* КАК Номенклатура,
		|				СпрНоменклатура.Ссылка.ЦеноваяГруппа.* КАК ЦеноваяГруппа}) КАК СписокНоменклатуры
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					СправочникЦен.Ссылка КАК ТипЦен,
		|					СправочникЦен.ВалютаЦены КАК Валюта,
		|					СправочникЦен.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
		|					СправочникЦен.СпособРасчетаЦены КАК СпособРасчетаЦены
		|				ИЗ
		|					Справочник.ТипыЦенНоменклатуры КАК СправочникЦен
		|				{ГДЕ
		|					СправочникЦен.Ссылка.* КАК ТипЦен}) КАК СпрТипЦен
		|				ПО ((НЕ СписокНоменклатуры.Номенклатура.ЭтоГруппа))
		|					И ((НЕ СписокНоменклатуры.Номенклатура.Набор))
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|						&Дата,
		|						Номенклатура В ИЕРАРХИИ (&Ассортимент)
		|							И ХарактеристикаНоменклатуры = &ПустаяХарактеристика {(Номенклатура).* КАК Номенклатура, (Номенклатура.ЦеноваяГруппа).* КАК ЦеноваяГруппа, (ТипЦен).* КАК ТипЦен}) КАК ЦеныНоменклатуры
		|				ПО (ЦеныНоменклатуры.Номенклатура = СписокНоменклатуры.Номенклатура)
		|					И (ЦеныНоменклатуры.ТипЦен = СпрТипЦен.ТипЦен)
		|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					ДиапазоныЦен.ТипЦен КАК ТипЦен,
		|					ДиапазоныЦен.ВерхняяГраница КАК ВерхняяГраница,
		|					ДиапазоныЦен.Цена КАК Цена,
		|					ДиапазоныЦен.Валюта КАК Валюта,
		|					ДиапазоныЦен.Период КАК Период
		|				ИЗ
		|					РегистрСведений.ДиапазоныЦенДляНаценки.СрезПоследних(&Дата, {(ТипЦен).* КАК ТипЦен}) КАК ДиапазоныЦен
		|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|							ДиапазоныЦенДляНаценкиСрезПоследних.ТипЦен КАК ТипЦен,
		|							МАКСИМУМ(ДиапазоныЦенДляНаценкиСрезПоследних.Период) КАК Период
		|						ИЗ
		|							РегистрСведений.ДиапазоныЦенДляНаценки.СрезПоследних(&Дата, {(ТипЦен).* КАК ТипЦен}) КАК ДиапазоныЦенДляНаценкиСрезПоследних
		|						
		|						СГРУППИРОВАТЬ ПО
		|							ДиапазоныЦенДляНаценкиСрезПоследних.ТипЦен) КАК МаксДиапазоныЦен
		|						ПО ДиапазоныЦен.ТипЦен = МаксДиапазоныЦен.ТипЦен
		|							И ДиапазоныЦен.Период = МаксДиапазоныЦен.Период) КАК ШкалыДиапазонов
		|				ПО (ШкалыДиапазонов.ТипЦен = СпрТипЦен.ТипЦен)) КАК ЦеныБазовые
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, Номенклатура В ИЕРАРХИИ (&Ассортимент) {(Номенклатура).* КАК Номенклатура, (Номенклатура.ЦеноваяГруппа).* КАК ЦеноваяГруппа}) КАК ЦеныРасчетные
		|			ПО ЦеныБазовые.Номенклатура = ЦеныРасчетные.Номенклатура
		|				И ЦеныБазовые.ТипЦен.БазовыйТипЦен = ЦеныРасчетные.ТипЦен
		//{{vd_180614
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ТабЕдиницыИзмерения 
		|        ПО ЦеныБазовые.ЕдиницаИзмерения.Ссылка = ТабЕдиницыИзмерения.Ссылка ИЛИ ЦеныРасчетные.ЕдиницаИзмерения.Ссылка = ТабЕдиницыИзмерения.Ссылка 
		//}}
		|	ГДЕ
		|		((НЕ ЦеныБазовые.ТипЦен.Рассчитывается)
		|				ИЛИ ЦеныБазовые.СпособРасчетаЦены <> &СпособДиапазон
		|				ИЛИ ЦеныБазовые.СпособРасчетаЦены = &СпособДиапазон
		|					И (ЦеныРасчетные.Цена МЕЖДУ 0.000001 И ЦеныБазовые.ВерхняяГраница - 0.000001))
		|		И ЦеныБазовые.ТипЦен В(&СписокТиповЦен)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ЦеныБазовые.ТипЦен,
		|		ЦеныБазовые.ЦеноваяГруппа,
		|		ЦеныБазовые.Номенклатура,
		|		ЦеныБазовые.ТипЦен.Рассчитывается,
		|		ЦеныБазовые.ТипЦен.ВалютаЦены) КАК ЗапросПрайс
		|		{ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			НесвернутыеОстатки.Номенклатура КАК НоменклатураОст,		
		|		СУММА(ВЫБОР
		|			КОГДА НесвернутыеОстатки.Остаток < 0
		|				ТОГДА 0
		|		ИНАЧЕ НесвернутыеОстатки.Остаток
		|		КОНЕЦ - " + ?(флУчитыватьРезервы, "ЕСТЬNULL(ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток, 0)", "0") + ") КАК Остаток,		
		|			НесвернутыеОстатки.Склад КАК Склад
		|		ИЗ
		|			(ВЫБРАТЬ
		|				Ост.Номенклатура.Ссылка КАК Номенклатура,
		|				Ост.КоличествоОстаток КАК Остаток,
		|				Ост.Склад КАК Склад
		|			ИЗ
		|				РегистрНакопления.ТоварыНаСкладах.Остатки(
		|						&Дата,
		|						Номенклатура В ИЕРАРХИИ (&Ассортимент)
		|							И склад В (&СписокСкладов) {(Склад).* КАК Склад, (Склад.ВидСклада).* КАК ВидСклада, (Номенклатура).* КАК Номенклатура, (Номенклатура.ЦеноваяГруппа).* КАК ЦеноваяГруппа}) КАК Ост
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ
		|				НТТ.Номенклатура.Ссылка,
		|				НТТ.КоличествоОстаток,
		|				НТТ.Склад
		|			ИЗ
		|				РегистрНакопления.ТоварыВНТТ.Остатки(
		|						&Дата,
		|						Номенклатура В ИЕРАРХИИ (&Ассортимент)
		|							И склад В (&СписокСкладов) {(Склад).* КАК Склад, (Склад.ВидСклада).* КАК ВидСклада, (Номенклатура).* КАК Номенклатура, (Номенклатура.ЦеноваяГруппа).* КАК ЦеноваяГруппа}) КАК НТТ
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ
		|				Розница.Номенклатура.Ссылка,
		|				Розница.КоличествоОстаток,
		|				Розница.Склад
		|			ИЗ
		|				РегистрНакопления.ТоварыВРознице.Остатки(
		|						&Дата,
		|						Номенклатура В ИЕРАРХИИ (&Ассортимент)
		|							И склад В (&СписокСкладов) {(Склад).* КАК Склад, (Склад.ВидСклада).* КАК ВидСклада, (Номенклатура).* КАК Номенклатура, (Номенклатура.ЦеноваяГруппа).* КАК ЦеноваяГруппа}) КАК Розница) КАК НесвернутыеОстатки
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(
		|						&Дата,
		|						Номенклатура В ИЕРАРХИИ (&Ассортимент)
		|							И Склад В (&СписокСкладов)) КАК ТоварыВРезервеНаСкладахОстатки
		|				ПО НесвернутыеОстатки.Номенклатура = ТоварыВРезервеНаСкладахОстатки.Номенклатура
		|					И НесвернутыеОстатки.Склад = ТоварыВРезервеНаСкладахОстатки.Склад
		|		
		|		СГРУППИРОВАТЬ ПО
		|			НесвернутыеОстатки.Номенклатура,
		|			НесвернутыеОстатки.Склад) КАК Остатки
		|		ПО ЗапросПрайс.Номенклатура = Остатки.НоменклатураОст}
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютСрезПоследних
		|		ПО ЗапросПрайс.Валюта = КурсыВалютСрезПоследних.Валюта
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютСрезПоследнихОтчет
		|		ПО ЗапросПрайс.ВалютаПрайса = КурсыВалютСрезПоследнихОтчет.Валюта
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			КатегорииОбъектов.Объект КАК Объект,
		|			КатегорииОбъектов.Категория КАК Категория
		|		ИЗ
		|			РегистрСведений.КатегорииОбъектов КАК КатегорииОбъектов
		|		ГДЕ
		|			КатегорииОбъектов.Категория.Наименование = ""АП_Акция"") КАК КатегорииОбъектов
		|		ПО ЗапросПрайс.Номенклатура = КатегорииОбъектов.Объект " + ТекстУсловия + "
		|{ГДЕ
		|	(ИСТИНА) КАК СвойстваИКатегории}
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка
		|ИТОГИ
		|	МИНИМУМ(СвободныйОстаток),
		|	МИНИМУМ(Цена),
		|	МИНИМУМ(Акция),
		//vd_180614
		|	МИНИМУМ(ЦенаНоменклатурыКоэффицент),
		|	МИНИМУМ(ЦенаНоменклатурыЕдЦены)
		|ПО
		|	Ссылка,
		|	ТипЦен,
		|	Склад
		|АВТОУПОРЯДОЧИВАНИЕ"
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции //ПолучитьТекстЗапросаПоНоменклатуре

Функция ПолучитьТекстЗапросаСклады() Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Склады.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Склады КАК Склады
				   |ГДЕ
	               |	Склады.ПометкаУдаления = ЛОЖЬ
				   |	И Склады.ЭтоГруппа = ЛОЖЬ";

   Возврат ТекстЗапроса;	
КонецФункции

Функция ПолучитьТекстЗапросаТочкиМаршрутов(ЕстьАгент = Ложь) Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Событие.Ссылка
	               |ИЗ
	               |	Документ.Событие КАК Событие
	               |ГДЕ
	               |	Событие.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания 
				   | "  + ?(ЕстьАгент, "И Событие.Ответственный = &Агент", "") + "
	               |	И Событие.ГруппаСобытия = &ГруппаСобытия";				 	
				   
	Возврат ТекстЗапроса;	
КонецФункции

Функция ПолучитьТекстЗапросаМаршруты(ИзНастроек = Ложь, ЕстьАгент = Ложь, ЕстьДата = Ложь) Экспорт
	Перем ТекстЗапроса;
	
	Если ИзНастроек Тогда		
		ТекстЗапроса = "ВЫБРАТЬ *
			   |ПОМЕСТИТЬ ВТДанные
               |ИЗ
               | &Источник КАК Таб
			   |;
			   |//////////////////////////////////////
			   |ВЫБРАТЬ *
			   |ИЗ ВТДанные
               | " + ?(ЕстьДата Или ЕстьАгент, "ГДЕ", "")  
               + ?(ЕстьДата, " ВТДанные.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания ", "")
               + ?(ЕстьАгент, ?(ЕстьДата, " И ", "") + " ВТДанные.Агент = &Агент ", "");
	Иначе		
		ТекстЗапроса = "ВЫБРАТЬ
		               |	События.Дата,
		               |	События.Ответственный КАК Агент,
					   |	МАКСИМУМ(ПометкаУдаления) КАК ПометкаУдаления
		               |ИЗ
		               |	Документ.Событие КАК События
		               |ГДЕ
					   |	События.ГруппаСобытия = &ГруппаСобытия
		               |	" + ?(ЕстьДата, " И События.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания ", "") + "
		               |   	" + ?(ЕстьАгент, " И События.Ответственный = &Агент ", "") + "
		               |СГРУППИРОВАТЬ ПО
		               |	События.Дата,
		               |	События.Ответственный
					   |УПОРЯДОЧИТЬ ПО Дата";
	КонецЕсли;
					
	Возврат ТекстЗапроса;				
КонецФункции

Функция ПолучитьПоследнийНомерПланированияДляАгентов(таблЗначПланирование) Экспорт
	
	максНомер = 0;
	
	Если таблЗначПланирование <> Неопределено Тогда				
		Для Каждого текЭл Из таблЗначПланирование Цикл
			текНомер = текЭл["Номер"];
			Если текНомер <> Неопределено Тогда
				Если текНомер > максНомер Тогда
					максНомер = текНомер;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;			
	КонецЕсли;
	
	Возврат максНомер;
КонецФункции

Функция ПолучитьЗаписьРегистраЗначениеСвойстваОбъекта(_Свойство, _Объект)
	
	ЗаписьРег = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
	ЗаписьРег.Объект 		    = _Объект;
	ЗаписьРег.Свойство    	    = _Свойство;
	ЗаписьРег.Прочитать();
	
	Если Не ЗаписьРег.Выбран() Тогда
		ЗаписьРег.Объект 		    = _Объект;
		ЗаписьРег.Свойство    	    = _Свойство;
	КонецЕсли;
	
	Возврат ЗаписьРег;	
КонецФункции

Функция ПолучитьЗаписьРегистраКатегорииОбъектов(_Категория, _Объект)
	
	ЗаписьРег = РегистрыСведений.КатегорииОбъектов.СоздатьМенеджерЗаписи();
	ЗаписьРег.Объект 		    = _Объект;
	ЗаписьРег.Категория    	    = _Категория;
	ЗаписьРег.Прочитать();
	
	Если Не ЗаписьРег.Выбран() Тогда
		ЗаписьРег.Объект 		    = _Объект;
		ЗаписьРег.Категория    	    = _Категория;
	КонецЕсли;
	
	Возврат ЗаписьРег;	
КонецФункции

Функция ПолучитьБазовуюЕдиницу(Номенклатура)
	
	ТекБазоваяЕдиница = Номенклатура.ЕдиницаХраненияОстатков;
	
	СписокЕдиниц = Справочники.ЕдиницыИзмерения.Выбрать( , Номенклатура);
	Пока СписокЕдиниц.Следующий() Цикл
		Если СписокЕдиниц.ЕдиницаПоКлассификатору = Номенклатура.БазоваяЕдиницаИзмерения Тогда
			ТекБазоваяЕдиница = СписокЕдиниц.Ссылка;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТекБазоваяЕдиница;			
КонецФункции //ПолучитьБазовуюЕдиницу

// sk_190116 Функция не используется
// ПолучитьТаблицуТорговыхАгентов()
// 
Функция ПолучитьТаблицуТорговыхАгентов_OLD() Экспорт
	
	ТаблицаАгентов = ТабАгентыМУ;
	
	Возврат ТаблицаАгентов;
	
КонецФункции // ПолучитьТаблицуТорговыхАгентов_OLD()

//////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДЛЯ ВЫГРУЗКИ ДАННЫХ ДЛЯ ПРИЛОЖЕНИЯ МОБИЛЬНАЯ ТОРГОВЛЯ ///////////////
//////////////////////////////////////////////////////////////////////////////////
// sk_190325 Процедура изменена
//
Процедура ВыгрузитьВидыКонтактнойИнформации(XML_Текст, СоотвЗагруженныхОбъектов)
	
	имяСправочника = "ВидыКонтактнойИнформации";
	
	//(( sk_190325 Исправлена выгрузка справочника "ВидыКонтактнойИнформации" на конфигурации "Комплексная автоматизация" в рамках (MOD-387)
	//ТаблицаВидов = Новый СписокЗначений;
	//ТаблицаВидов.Добавить(Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты);
	//ТаблицаВидов.Добавить(Перечисления.ВидыОбъектовКонтактнойИнформации.КонтактныеЛица);
	//ТаблицаВидов.Добавить(Перечисления.ВидыОбъектовКонтактнойИнформации.КонтактныеЛицаКонтрагентов);
	//
	//Запрос = Новый Запрос("ВЫБРАТЬ
	//|	ВидыКонтактнойИнформации.Ссылка,
	//|	ВидыКонтактнойИнформации.Код,
	//|	ВидыКонтактнойИнформации.Наименование,
	//|	ВидыКонтактнойИнформации.Тип.Ссылка КАК ТипКИ,
	//|	ВидыКонтактнойИнформации.ВидОбъектаКонтактнойИнформации.Порядок КАК ВидКИ,
	//|	ВидыКонтактнойИнформации.ПометкаУдаления
	//|ИЗ
	//|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	//|ГДЕ
	//|	ВидыКонтактнойИнформации.ВидОбъектаКонтактнойИнформации В(&ВидОбъектаКонтактнойИнформации)");
	//
	//Запрос.УстановитьПараметр("ВидОбъектаКонтактнойИнформации", ТаблицаВидов);
	//
	//СписокЭлементов = Запрос.Выполнить().Выбрать();	
	//
	//СтруктураРеквизитов = СоответствиеСпр[СоответствиеСпр[имяСправочника]];
	//
	////XML_Текст.ЗаписатьКомментарий(СтруктураРеквизитов["ИмяСправочника"]);		
	//XML_Текст.ЗаписатьНачалоЭлемента(эл_Справочник);
	//
	//	XML_Текст.ЗаписатьАтрибут(ат_Гуид, СоответствиеСпр[имяСправочника]);		
	//
	// 	// Передаем команду на очистку видов КИ
	//	Если флОчищатьСправочникиПередЗагрузкой Тогда
	//		XML_Текст.ЗаписатьАтрибут(ат_ОчиститьПередЗагрузкой, "1");                	
	//	КонецЕсли;	 
	//	
	//	XML_Текст.ЗаписатьАтрибут(ат_Комментарий, СтруктураРеквизитов["_Представление"]);	
	// 
	//	XML_Текст.ЗаписатьНачалоЭлемента(эл_Элементы);
	//	
	//		Пока СписокЭлементов.Следующий() Цикл  				
	//			СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(СписокЭлементов);
	//			СтруктураПолей.Вставить(СтруктураРеквизитов["Тип"], СписокЭлементов.ТипКИ);
	//			СтруктураПолей.Вставить(СтруктураРеквизитов["ТипОбъекта"], ?(СписокЭлементов.ВидКИ = 1, "Контрагенты", "КонтактныеЛица"));
	//			ЗаписатьЭлементВДокументОбмена(XML_Текст, СтруктураПолей);				
	//		КонецЦикла;
	//	
	//	XML_Текст.ЗаписатьКонецЭлемента(); //ELEMENTS
	//	
	//ВыгрузитьПодтверждениеСправочника(XML_Текст, СоотвЗагруженныхОбъектов, имяСправочника);	
	//	
	//XML_Текст.ЗаписатьКонецЭлемента(); //CATALOG
	
	сзВидыОбъектовКИ = Новый СписокЗначений;
	сзВидыОбъектовКИ.Добавить(Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты);
	сзВидыОбъектовКИ.Добавить(Перечисления.ВидыОбъектовКонтактнойИнформации.КонтактныеЛица);
	сзВидыОбъектовКИ.Добавить(Перечисления.ВидыОбъектовКонтактнойИнформации.КонтактныеЛицаКонтрагентов);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка,
	|	ВидыКонтактнойИнформации.Код,
	|	ВидыКонтактнойИнформации.Наименование,
	|	ТипыКонтактнойИнформации.Ссылка КАК ТипКИ,
	|	ВЫБОР
	|		КОГДА ВидыКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовКонтактнойИнформации.Контрагенты)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВидКИКонтрагенты,
	|	ВидыКонтактнойИнформации.ПометкаУдаления
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Перечисление.ТипыКонтактнойИнформации КАК ТипыКонтактнойИнформации
	|		ПО ВидыКонтактнойИнформации.Тип = ТипыКонтактнойИнформации.Ссылка
	|ГДЕ
	|	ВидыКонтактнойИнформации.ВидОбъектаКонтактнойИнформации В(&ВидОбъектаКонтактнойИнформации)");
	
	Запрос.УстановитьПараметр("ВидОбъектаКонтактнойИнформации", сзВидыОбъектовКИ);
	
	ВидыКонтактнойИнформации = Запрос.Выполнить().Выбрать();	
	
	стррРеквизиты = СоответствиеСпр[СоответствиеСпр[имяСправочника]];
	
	XML_Текст.ЗаписатьНачалоЭлемента(эл_Справочник);
	
	XML_Текст.ЗаписатьАтрибут(ат_Гуид, СоответствиеСпр[имяСправочника]);		
	
	// Передаем команду на очистку видов КИ
	Если флОчищатьСправочникиПередЗагрузкой Тогда
		XML_Текст.ЗаписатьАтрибут(ат_ОчиститьПередЗагрузкой, "1");                	
	КонецЕсли;	 
	
	XML_Текст.ЗаписатьАтрибут(ат_Комментарий, стррРеквизиты["_Представление"]);	
	
	XML_Текст.ЗаписатьНачалоЭлемента(эл_Элементы);
	
	Пока ВидыКонтактнойИнформации.Следующий() Цикл  				
		стррПоля = ПолучитьСтруктуруПредопределенныхПолейСправочника(ВидыКонтактнойИнформации);
		стррПоля.Вставить(стррРеквизиты["Тип"], ВидыКонтактнойИнформации.ТипКИ);
		стррПоля.Вставить(стррРеквизиты["ТипОбъекта"], ?(ВидыКонтактнойИнформации.ВидКИКонтрагенты = Истина, "Контрагенты", "КонтактныеЛица"));
		ЗаписатьЭлементВДокументОбмена(XML_Текст, стррПоля);				
	КонецЦикла;
	
	XML_Текст.ЗаписатьКонецЭлемента(); //ELEMENTS
	
	ВыгрузитьПодтверждениеСправочника(XML_Текст, СоотвЗагруженныхОбъектов, имяСправочника);	
	
	XML_Текст.ЗаписатьКонецЭлемента(); //CATALOG
	//)) sk_190325
	
КонецПроцедуры // ВыгрузитьВидыКонтактнойИнформации()

Процедура ВыгрузитьДоговорыКонтагентов(XML_Текст, СоотвЗагруженныхОбъектов, ДанныеАгента, сзКлиентыАгента, ТзКатегорииЦен, сзНеНайденныхТиповЦен)
	
	имяСправочника = "ДоговорыКонтрагентов";
	идСпр = СоответствиеСпр[имяСправочника];
	
	РежимВыгрузкиКонтрагентов = НастройкиОбработки.Получить("РежимВыгрузкиКонтрагентов");	
	сзНеНайденныхТиповЦен = Новый СписокЗначений();
	
	//%
	МассивКачество = Новый Массив;
	МассивКачество.Добавить(Справочники.Качество.Новый);
	
	МассивУсловий = Новый Массив;
	МассивУсловий.Добавить(Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара);
	МассивУсловий.Добавить(Перечисления.УсловияСкидкиНаценки.ПоСуммеДокумента);
	МассивУсловий.Добавить(Перечисления.УсловияСкидкиНаценки.БезУсловий);
	МассивУсловий.Добавить(Перечисления.УсловияСкидкиНаценки.ПустаяСсылка());
	
	// Справочник "ДоговорыКонтрагентов" 
	//
	// Дата
	// В УТ И КА наименование реквизита "Дата"
	// В УТ для Казахстана (2.2.18.5)/УТП для Казахстана (2.0.16.1) наименование реквизита "ДатаДоговора"
	//
	// Срок действия
	// В УТ И КА наименование реквизита "СрокДействия"
	// В УТ для Казахстана (2.2.18.5)/УТП для Казахстана (2.0.16.1) наименование реквизита "ДатаОкончанияДействияДоговора"
	//
	// Номер
	// В УТ И КА наименование реквизита "СрокДействия"
	// В УТ для Казахстана (2.2.18.5)/УТП для Казахстана (2.0.16.1) наименование реквизита "НомерДоговора"
	
	//(( sk_190604 В рамках (MOD-576) 
	Если НаименованиеКонфигурации = "УправлениеТорговымПредприятиемДляКазахстана" Тогда
		стрДата 		= "ДоговорыКонтрагентов.ДатаДоговора";
		стрСрокДействия = "ДоговорыКонтрагентов.ДатаОкончанияДействияДоговора";
		стрНомер		= "ДоговорыКонтрагентов.НомерДоговора";
	Иначе
		стрДата 		= "ДоговорыКонтрагентов.Дата";
		стрСрокДействия = "ДоговорыКонтрагентов.СрокДействия";
		стрНомер		= "ДоговорыКонтрагентов.Номер";
	КонецЕсли;
	//)) sk_190604
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СкидкиНоменклатуры.Номенклатура,
		|	СкидкиНоменклатуры.ХарактеристикаНоменклатуры,
		|	СкидкиНоменклатуры.Качество,
		|	СкидкиНоменклатуры.Условие,
		|	СкидкиНоменклатуры.ЗначениеУсловия,
		|	МАКСИМУМ(СкидкиНоменклатуры.ПроцентСкидкиНаценки) КАК ПроцентСкидкиНаценки,
		//(( sk_190604 Запрос изменен в рамках (MOD-576)
		//|	СкидкиНоменклатуры.ПолучательСкидки КАК ПолучательСкидки
		|	ВЫРАЗИТЬ(СкидкиНоменклатуры.ПолучательСкидки КАК Справочник.ДоговорыКонтрагентов) КАК ПолучательСкидки
		//)) sk_190604
		|ПОМЕСТИТЬ кпкСкидки
		|ИЗ
		|	РегистрСведений.СкидкиНаценкиНоменклатуры.СрезПоследних(
		|			&Период,
		|			Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|				И Качество В (&МассивКачество)
		|				И Условие В (&МассивУсловий)) КАК СкидкиНоменклатуры
		|ГДЕ
		|	СкидкиНоменклатуры.Валюта <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
		|	И (СкидкиНоменклатуры.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
		|			ИЛИ КОНЕЦПЕРИОДА(СкидкиНоменклатуры.ДатаОкончания, ДЕНЬ) >= &Период)
		|
		|СГРУППИРОВАТЬ ПО
		|	СкидкиНоменклатуры.ПолучательСкидки,
		|	СкидкиНоменклатуры.Номенклатура,
		|	СкидкиНоменклатуры.ХарактеристикаНоменклатуры,
		|	СкидкиНоменклатуры.Качество,
		|	СкидкиНоменклатуры.Условие,
		|	СкидкиНоменклатуры.ЗначениеУсловия
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПолучательСкидки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДоговорыКонтрагентов.Ссылка,
		|	ДоговорыКонтрагентов.Код,
		|	ДоговорыКонтрагентов.Наименование,
		|	ДоговорыКонтрагентов.Владелец КАК Контрагент,
		//(( sk_190604 Запрос изменен в рамках (MOD-576)
		//|	ДоговорыКонтрагентов.Дата,
		//|	ДоговорыКонтрагентов.СрокДействия,
		//|	ДоговорыКонтрагентов.Номер,
		|	[Дата] КАК Дата,
		|	[СрокДействия] КАК СрокДействия,
		|	[Номер] КАК Номер,
		//)) sk_190604
		|	ДоговорыКонтрагентов.Организация КАК Организация,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА ВЫРАЗИТЬ(ДоговорыКонтрагентов.ТипЦен КАК Справочник.ТипыЦенНоменклатурыКонтрагентов) ЕСТЬ NULL 
		|				ТОГДА ДоговорыКонтрагентов.ТипЦен
		|			ИНАЧЕ ДоговорыКонтрагентов.ТипЦен.ТипЦеныНоменклатуры
		|		КОНЕЦ, ЗНАЧЕНИЕ(Справочник.ТипыЦенНоменклатуры.ПустаяСсылка)) КАК ТипЦен,
		|	ДоговорыКонтрагентов.ПометкаУдаления,
		|	кпкСкидки.ПроцентСкидкиНаценки КАК СкидкаНаценка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|		ЛЕВОЕ СОЕДИНЕНИЕ кпкСкидки КАК кпкСкидки
		|		ПО (кпкСкидки.ПолучательСкидки = ДоговорыКонтрагентов.Ссылка)
		|ГДЕ
		|	(НЕ ДоговорыКонтрагентов.ПометкаУдаления)
		|	И (НЕ ДоговорыКонтрагентов.ЭтоГруппа)
		|	И ДоговорыКонтрагентов.Владелец В(&СписокКлиентов)
		|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора");
						  
	
	Запрос.УстановитьПараметр("СписокКлиентов",  сзКлиентыАгента);
	Запрос.УстановитьПараметр("ВидДоговора", 	 Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	Запрос.УстановитьПараметр("МассивКачество",  МассивКачество);
	Запрос.УстановитьПараметр("МассивУсловий",   МассивУсловий);
	Запрос.УстановитьПараметр("Период",   		 ТекущаяДата());
	
	//(( sk_190604 В рамках (MOD-576) 
	стррЛитералы = Новый Структура;
	стррЛитералы.Вставить("Дата", 		  стрДата);
	стррЛитералы.Вставить("СрокДействия", стрСрокДействия);
	стррЛитералы.Вставить("Номер", 		  стрНомер);
	
	ЗаменитьЛитералы(Запрос.Текст, стррЛитералы);
  	//)) sk_190604
	
	СписокЭлементов = Запрос.Выполнить().Выбрать();
	
		СтруктураРеквизитов = СоответствиеСпр[СоответствиеСпр[имяСправочника]];
	
		//XML_Текст.ЗаписатьКомментарий(СтруктураРеквизитов["ИмяСправочника"]);	
		XML_Текст.ЗаписатьНачалоЭлемента(эл_Справочник);
	
		XML_Текст.ЗаписатьАтрибут(ат_Гуид, идСпр);		
		
		УстановитьПризнакОчисткиСправочника(XML_Текст, идСпр);
		
		XML_Текст.ЗаписатьАтрибут(ат_Комментарий, СтруктураРеквизитов["_Представление"]);	
		
		XML_Текст.ЗаписатьНачалоЭлемента(эл_Группы);
		XML_Текст.ЗаписатьКонецЭлемента();
		
		XML_Текст.ЗаписатьНачалоЭлемента(эл_Элементы);
		
			Пока СписокЭлементов.Следующий() Цикл
			
				#Если Клиент Тогда
					ОбработкаПрерыванияПользователя();
				#КонецЕсли
				
				КодТипаЦены = ПолучитьКодТипаЦены(ДанныеАгента, СписокЭлементов.ТипЦен, СписокЭлементов.Ссылка, ТзКатегорииЦен, сзНеНайденныхТиповЦен);

				СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(СписокЭлементов);				
				СтруктураПолей.Вставить(СтруктураРеквизитов["Контрагент"], СписокЭлементов.Контрагент);
				СтруктураПолей.Вставить(СтруктураРеквизитов["Дата"], СписокЭлементов.Дата);
				СтруктураПолей.Вставить(СтруктураРеквизитов["СрокДействия"], СписокЭлементов.СрокДействия);
				СтруктураПолей.Вставить(СтруктураРеквизитов["Организация"], СписокЭлементов.Организация);
				Если Не ПустаяСтрока(КодТипаЦены) Тогда
					СтруктураПолей.Вставить(СтруктураРеквизитов["ТипЦен"], СписокЭлементов.ТипЦен);
				КонецЕсли;
				ЗаписатьЭлементВДокументОбмена(XML_Текст, СтруктураПолей);
				
			КонецЦикла;
		
		XML_Текст.ЗаписатьКонецЭлемента(); // ELEMENTS
		
	ВыгрузитьПодтверждениеСправочника(XML_Текст, СоотвЗагруженныхОбъектов, имяСправочника);	
		
	XML_Текст.ЗаписатьКонецЭлемента();     // CATALOG
										
КонецПроцедуры // ВыгрузитьДоговорыКонтагентов

Процедура ВыгрузитьКонтактныеЛица(XML_Текст, СоотвЗагруженныхОбъектов, сзКлиентыАгента, сзТорговыеТочки)

	имяСправочника = "КонтактныеЛицаКонтрагентов";
	идСпр = СоответствиеСпр[имяСправочника];
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КонтактныеЛицаКонтрагентов.Ссылка КАК Ссылка,
	|	КонтактныеЛицаКонтрагентов.ПометкаУдаления КАК ПометкаУдаления,
	|	КонтактныеЛицаКонтрагентов.Владелец КАК Контрагент,
	|	NULL КАК ТорговаяТочка,
	|	КонтактныеЛицаКонтрагентов.Код,
	|	КонтактныеЛицаКонтрагентов.Наименование,
	|	КонтактныеЛицаКонтрагентов.КонтактноеЛицо.ДатаРождения КАК ДатаРождения,
	|	КонтактныеЛицаКонтрагентов.Комментарий
	|ИЗ
	|	Справочник.КонтактныеЛицаКонтрагентов КАК КонтактныеЛицаКонтрагентов
	|ГДЕ
	|	КонтактныеЛицаКонтрагентов.Владелец В(&СписокКонтрагентов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КонтактныеЛицаКонтрагентов.Ссылка КАК Ссылка,
	|	КонтактныеЛицаКонтрагентов.ПометкаУдаления КАК ПометкаУдаления,
	|	NULL КАК Контрагент,
	|	КонтактныеЛицаКонтрагентов.Владелец,
	|	КонтактныеЛицаКонтрагентов.Код,
	|	КонтактныеЛицаКонтрагентов.Наименование,
	|	КонтактныеЛицаКонтрагентов.КонтактноеЛицо.ДатаРождения КАК ДатаРождения,
	|	КонтактныеЛицаКонтрагентов.Комментарий
	|ИЗ
	|	Справочник.КонтактныеЛицаКонтрагентов КАК КонтактныеЛицаКонтрагентов
	|ГДЕ
	|	КонтактныеЛицаКонтрагентов.Владелец В(&СписокТорговыхТочек)");
	
	Запрос.УстановитьПараметр("СписокКонтрагентов", сзКлиентыАгента);
	Запрос.УстановитьПараметр("СписокТорговыхТочек", сзТорговыеТочки);
	
	СписокЭлементов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	сзКонтактныеЛица = Новый СписокЗначений;	
	
	СтруктураРеквизитов = СоответствиеСпр[идСпр];
	
	//XML_Текст.ЗаписатьКомментарий(СтруктураРеквизитов["ИмяСправочника"]);	
	XML_Текст.ЗаписатьНачалоЭлемента(эл_Справочник);
	
		XML_Текст.ЗаписатьАтрибут(ат_Гуид, идСпр);		
		
		УстановитьПризнакОчисткиСправочника(XML_Текст, идСпр);	
		
		XML_Текст.ЗаписатьАтрибут(ат_Комментарий, СтруктураРеквизитов["_Представление"]);	
		
		XML_Текст.ЗаписатьНачалоЭлемента(эл_Группы);
		XML_Текст.ЗаписатьКонецЭлемента();
 
		XML_Текст.ЗаписатьНачалоЭлемента(эл_Элементы);
		
			СписокКЛ = Новый СписокЗначений;
			
			Пока СписокЭлементов.Следующий() Цикл
				
				#Если Клиент Тогда
					ОбработкаПрерыванияПользователя();
				#КонецЕсли

				СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(СписокЭлементов);
					
				СтруктураПолей.Вставить(СтруктураРеквизитов["ДатаРождения"], 		 СписокЭлементов.ДатаРождения);
				Если СписокКЛ.НайтиПоЗначению(СписокЭлементов.Ссылка) <> Неопределено И 
										ЗначениеЗаполнено(СписокЭлементов.ТорговаяТочка) Тогда
					СтруктураПолей.Вставить(СтруктураРеквизитов["Контрагент"],  	 СписокЭлементов.ТорговаяТочка.ГоловнойКонтрагент);
				Иначе
					СтруктураПолей.Вставить(СтруктураРеквизитов["Контрагент"],  	 СписокЭлементов.Контрагент);					
				КонецЕсли;   
				
				СтруктураПолей.Вставить(СтруктураРеквизитов["ТорговаяТочка"], 		 СписокЭлементов.ТорговаяТочка);
				СтруктураПолей.Вставить(СтруктураРеквизитов["Комментарий"], 		 СписокЭлементов.Комментарий);
				
				ЗаписатьЭлементВДокументОбмена(XML_Текст, СтруктураПолей);
				
				СписокКЛ.Добавить(СписокЭлементов.Ссылка);
				
			КонецЦикла;
	
		XML_Текст.ЗаписатьКонецЭлемента(); //ELEMENTS		
				
	ВыгрузитьПодтверждениеСправочника(XML_Текст, СоотвЗагруженныхОбъектов, имяСправочника);	
		
	XML_Текст.ЗаписатьКонецЭлемента(); //CATALOG
	
КонецПроцедуры //ВыгрузитьКонтактныеЛица

Процедура ВыгрузитьКлиентов(XML_Текст, СоотвЗагруженныхОбъектов, Агент, сзКлиентыАгента)
	
	имяСправочника = "Контрагенты";
	идСпр = СоответствиеСпр[имяСправочника];
	СтруктураРеквизитов = СоответствиеСпр[идСпр];
	
	ОбщаяСкидкаДляКонтрагентов = ПолучитьОбщуюСкидку();
		
	МассивКачество = Новый Массив;
	МассивКачество.Добавить(Справочники.Качество.Новый);
	
	МассивУсловий = Новый Массив;
	МассивУсловий.Добавить(Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара);
	МассивУсловий.Добавить(Перечисления.УсловияСкидкиНаценки.ПустаяСсылка());	
	
	ссылкаСвойствоАгентПлюс = ПолучитьСсылкуСвойствоОбъектаАгентПлюс("СтатусКонтрагента");
	
	Запрос = Новый Запрос(ПолучитьТекстЗапросаКонтрагенты());
	
	Запрос.УстановитьПараметр("Период"		  ,  ТекущаяДата());
	Запрос.УстановитьПараметр("МассивКачество",  МассивКачество);
	Запрос.УстановитьПараметр("МассивУсловий",   МассивУсловий);
	Запрос.УстановитьПараметр("ОбщаяСкидка"   ,  ОбщаяСкидкаДляКонтрагентов);
	Запрос.УстановитьПараметр("СписКлиентов",    сзКлиентыАгента);
	Запрос.УстановитьПараметр("СвойствоСтатусКонтрагента", ссылкаСвойствоАгентПлюс);	
	
	парСписокГрупп = Новый СписокЗначений;
	
	Для Каждого ЭлСписка Из сзКлиентыАгента Цикл
		Если ЗначениеЗаполнено(ЭлСписка.Значение.Родитель) Тогда
			парСписокГрупп.Добавить(ЭлСписка.Значение.Родитель);
		КонецЕсли;
	КонецЦикла;
	
	КонтрагентыДляВыгрузки = Запрос.Выполнить().Выбрать();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Контрагенты.Ссылка КАК Ссылка,
	|	Контрагенты.ПометкаУдаления,
	|	Контрагенты.Наименование КАК Наименование,
	|	Контрагенты.Родитель.Ссылка КАК Родитель
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ЭтоГруппа
	|	И Контрагенты.Ссылка В(&СписокГрупп)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование
	|ИТОГИ ПО
	|	Ссылка ИЕРАРХИЯ");
	
	Запрос.УстановитьПараметр("СписокГрупп", парСписокГрупп);
	
	СписокГрупп = Запрос.Выполнить().Выбрать();	
	
	//XML_Текст.ЗаписатьКомментарий(СтруктураРеквизитов["ИмяСправочника"]);	
	XML_Текст.ЗаписатьНачалоЭлемента(эл_Справочник);
		
	XML_Текст.ЗаписатьАтрибут(ат_Гуид, идСпр);	
	
	//ИдСпр = СоответствиеСпр["Клиенты"];
	
	УстановитьПризнакОчисткиСправочника(XML_Текст, ИдСпр);	
	
	XML_Текст.ЗаписатьАтрибут(ат_Комментарий, СтруктураРеквизитов["_Представление"]);
		
	// Выгрузка групп контрагентов	
	XML_Текст.ЗаписатьНачалоЭлемента(эл_Группы);
	
		XML_Текст.ЗаписатьНачалоЭлемента(эл_Группа);
		
			XML_Текст.ЗаписатьАтрибут(ат_Гуид, СоответствиеСпр["ГрГруппы_Контрагенты"]);
			
			XML_Текст.ЗаписатьНачалоЭлемента(эл_Элементы);	
			
				СпВГ = Новый СписокЗначений;
				
				Пока СписокГрупп.Следующий() Цикл							
					Если СпВГ.НайтиПоЗначению(СписокГрупп.Ссылка) = Неопределено Тогда												
						СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(СписокГрупп);						
						//Если ЗначениеЗаполнено(СписокГрупп.Родитель) Тогда							
							СтруктураПолей.Вставить(ат_ГруппаРодитель, СписокГрупп.Родитель);
							ЗаписатьЭлементВДокументОбмена(XML_Текст, СтруктураПолей);							
							СпВГ.Добавить(СписокГрупп.Ссылка);   				
						//КонецЕсли;
					КонецЕсли;   						
				КонецЦикла;  				
			
			XML_Текст.ЗаписатьКонецЭлемента(); //ELEMENTS
		
		XML_Текст.ЗаписатьКонецЭлемента();     //GROUP
	
	XML_Текст.ЗаписатьКонецЭлемента(); 		   //GROUPS
		
		// Выгрузка элементов справочника
		XML_Текст.ЗаписатьНачалоЭлемента(эл_Элементы);
		
		СчЭлементов = 0;
		
		ВсегоЭлементов = КонтрагентыДляВыгрузки.Количество();
		
		Пока КонтрагентыДляВыгрузки.Следующий() Цикл	
			
			СчЭлементов = СчЭлементов + 1;
			
			ПроцентВыгрузки = Окр(СчЭлементов/ВсегоЭлементов*100, 0);		
			
			#Если Клиент Тогда
				Состояние("Выгрузка контрагентов: " + ПроцентВыгрузки + "%");			
				ОбработкаПрерыванияПользователя();
			#КонецЕсли   			
			
			СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(КонтрагентыДляВыгрузки);						
			СтруктураПолей.Вставить(СтруктураРеквизитов["Родитель"], 	 	 КонтрагентыДляВыгрузки.Родитель);
			СтруктураПолей.Вставить(СтруктураРеквизитов["Скидка"], 		 	 КонтрагентыДляВыгрузки.Скидка);
			СтруктураПолей.Вставить(СтруктураРеквизитов["СтатусКонтрагента"],КонтрагентыДляВыгрузки.СтатусКонтрагента);
			СтруктураПолей.Вставить(СтруктураРеквизитов["ОсновнойДоговор"],  КонтрагентыДляВыгрузки.ОсновнойДоговор);
			Если ЗначениеЗаполнено(КонтрагентыДляВыгрузки.ОсновнойДоговор) Тогда
				СтруктураПолей.Вставить(СтруктураРеквизитов["ТипЦены"], КонтрагентыДляВыгрузки.ОсновнойДоговор.ТипЦен);
			КонецЕсли;	
			//%
			СтруктураПолей.Вставить(СтруктураРеквизитов["Комментарий"], КонтрагентыДляВыгрузки.Комментарий);
			СтруктураПолей.Вставить("GrpId0", 	 КонтрагентыДляВыгрузки.Родитель);
			ЗаписатьЭлементВДокументОбмена(XML_Текст, СтруктураПолей);
			
		КонецЦикла;
		
		XML_Текст.ЗаписатьКонецЭлемента(); //ELEMENTS
		
	ВыгрузитьПодтверждениеСправочника(XML_Текст, СоотвЗагруженныхОбъектов, имяСправочника);	
		
	XML_Текст.ЗаписатьКонецЭлемента();     //CATALOG
	
КонецПроцедуры //ВыгрузкаКлиентов()
 
Процедура ВыгрузитьТорговыеТочки(XML_Текст, СоотвЗагруженныхОбъектов, сзКлиентыАгента, сзТоргТочкиАгента)
	
	имяСправочника = "ТорговыеТочки";
	
	РежимВыгрузкиКонтрагентов = НастройкиОбработки["РежимВыгрузкиКонтрагентов"];
	
	//++Ratmir 2018-01-11
	Если текНаименованиеКонфигурации = "KT2000_Alcohol_MnfcSP" Тогда
		Запрос = Новый Запрос(ПолучитьТекстЗапросаАлкПунктыРазгрузки(Истина));
	Иначе
    	Запрос = Новый Запрос(ПолучитьТекстЗапросаТорговыхТочек(Истина));
	КонецЕсли;
	//--Ratmir 2018-01-11
	
	
	Запрос.УстановитьПараметр("СписокКонтрагентов", сзКлиентыАгента);
	
	СписокЭлементов = Запрос.Выполнить().Выбрать();
	
	ИдСпр = СоответствиеСпр[имяСправочника];
	
	СтруктураРеквизитов = СоответствиеСпр[ИдСпр];
	
	//XML_Текст.ЗаписатьКомментарий(СтруктураРеквизитов["ИмяСправочника"]);		
	XML_Текст.ЗаписатьНачалоЭлемента(эл_Справочник);
	
		XML_Текст.ЗаписатьАтрибут(ат_Гуид, ИдСпр);
		
		УстановитьПризнакОчисткиСправочника(XML_Текст, ИдСпр);
		
		XML_Текст.ЗаписатьАтрибут(ат_Комментарий, СтруктураРеквизитов["_Представление"]);	
		
		XML_Текст.ЗаписатьНачалоЭлемента(эл_Группы);
		
		XML_Текст.ЗаписатьКонецЭлемента();

		XML_Текст.ЗаписатьНачалоЭлемента(эл_Элементы);
	
			Пока СписокЭлементов.Следующий() Цикл
				
				// Если выгрузка контрагентов по плану посещений или из настроек отбора выгружаемых данных для агента
				// то нужно проверять согласно списку выгружаемых торговых точек, чтобы в выгрузку
				// не попадали лишние торговые точки
				Если (РежимВыгрузкиКонтрагентов = 0) Или (РежимВыгрузкиКонтрагентов = 1) Тогда 
					Если сзТоргТочкиАгента.НайтиПоЗначению(СписокЭлементов.Ссылка) = Неопределено Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				#Если Клиент Тогда
					ОбработкаПрерыванияПользователя();
				#КонецЕсли   
			
				СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(СписокЭлементов);
				
				//Вынести за цикл
				//++Ratmir 2017-01-10
				Если текНаименованиеКонфигурации = "KT2000_Alcohol_MnfcSP" Тогда 
					алкОсновнойПунктРазгрузки = СписокЭлементов.Ссылка;
					СтруктураПолей.Вставить(СтруктураРеквизитов["Контрагент"], алкОсновнойПунктРазгрузки.Владелец.Ссылка);
	
						Запрос = Новый Запрос;
						Запрос.Текст = 
						"ВЫБРАТЬ
						|	ДоговорыКонтрагентов.Ссылка Как Ссылка
						|ИЗ
						|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
						|ГДЕ
						|	ДоговорыКонтрагентов.алкОсновнойПунктРазгрузки = &алкОсновнойПунктРазгрузки";
	
						Запрос.УстановитьПараметр("алкОсновнойПунктРазгрузки", алкОсновнойПунктРазгрузки);
	
					тзДоговворыПР = Запрос.Выполнить().Выгрузить();
					Если тзДоговворыПР.Количество()>0 Тогда
						СтруктураПолей.Вставить(СтруктураРеквизитов["ТипЦены"], тзДоговворыПР[0].Ссылка.ТипЦен);
					КонецЕсли;
					СтруктураПолей.Вставить(СтруктураРеквизитов["Комментарий"], СписокЭлементов.Ссылка);
					ЗаписатьЭлементВДокументОбмена(XML_Текст, СтруктураПолей);	
				Иначе
				//--Ratmir 2017-01-10					
					СтруктураПолей.Вставить(СтруктураРеквизитов["Контрагент"], СписокЭлементов.Ссылка.ГоловнойКонтрагент.Ссылка);
					Если ЗначениеЗаполнено(СписокЭлементов.Ссылка.ОсновнойДоговорКонтрагента) Тогда
						СтруктураПолей.Вставить(СтруктураРеквизитов["ТипЦены"], СписокЭлементов.Ссылка.ОсновнойДоговорКонтрагента.ТипЦен);
					КонецЕсли;
					СтруктураПолей.Вставить(СтруктураРеквизитов["Комментарий"], СписокЭлементов.Ссылка);
					ЗаписатьЭлементВДокументОбмена(XML_Текст, СтруктураПолей);	
				КонецЕсли;
				
			КонецЦикла;
	
		XML_Текст.ЗаписатьКонецЭлемента();  //ELEMENTS
		
	ВыгрузитьПодтверждениеСправочника(XML_Текст, СоотвЗагруженныхОбъектов, имяСправочника);	
		
	XML_Текст.ЗаписатьКонецЭлемента();      //CATALOG
	
КонецПроцедуры //ВыгрузитьТорговыеТочки

Процедура ВыгрузитьНоменклатуру(XML_Текст, СоотвЗагруженныхОбъектов, ДанныеАгента, ДопНастройкиАгента, ТзКатегорииЦен, ТзСклады, СзАссортимент, СзГруппыАссортимент)	
	
	МинимальныйТипЦены = ДанныеАгента["МинимальныйТипЦены"];
	
	имяСправочника = "Номенклатура";
	
	отбор = ДопНастройкиАгента["Отбор"];
		
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка,
	|	Номенклатура.ПометкаУдаления,
	|	Номенклатура.Наименование,
	|	Номенклатура.Родитель.Ссылка КАК Родитель
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В ИЕРАРХИИ (&СписокГрупп)
	|	И Номенклатура.ЭтоГруппа 
	|УПОРЯДОЧИТЬ ПО
	|	Наименование
	|ИТОГИ ПО
	|	Ссылка ИЕРАРХИЯ"); 
	
	Запрос.УстановитьПараметр("СписокГрупп", СзГруппыАссортимент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СписокГрупп = РезультатЗапроса.Выбрать();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Категории.Ссылка КАК Ссылка,
	|	Категории.ПометкаУдаления,
	|	Категории.Код,
	|	Категории.Наименование КАК Наименование,
	|	Категории.Родитель.Ссылка КАК Родитель
	|ИЗ
	|	Справочник.НоменклатурныеГруппы КАК Категории
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование
	|АВТОУПОРЯДОЧИВАНИЕ");
	
	СписокКатегорий = Запрос.Выполнить().Выбрать();
	
	СтруктураРеквизитов = СоответствиеСпр[СоответствиеСпр["Номенклатура"]];
	идТчЦены = СоответствиеСпр["ТчЦены_Номенклатура"];
	структураТчЦены = СоответствиеСпр[идТчЦены];
	идТчОстатки = СоответствиеСпр["ТчОстатки_Номенклатура"];
	структураТчОстатки = СоответствиеСпр[идТчОстатки];
	
	//XML_Текст.ЗаписатьКомментарий(СтруктураРеквизитов["ИмяСправочника"]);	
	XML_Текст.ЗаписатьНачалоЭлемента(эл_Справочник);
	
	ИдСпр = СоответствиеСпр["Номенклатура"];
		
	XML_Текст.ЗаписатьАтрибут(ат_Гуид, ИдСпр);	             		
	
	УстановитьПризнакОчисткиСправочника(XML_Текст, ИдСпр);
	
	XML_Текст.ЗаписатьАтрибут(ат_Комментарий, СтруктураРеквизитов["_Представление"]);	

		// Выгрузка группировок справочника номенклатура
		XML_Текст.ЗаписатьНачалоЭлемента(эл_Группы);
		
			// Объявление группировки по иерархии
			XML_Текст.ЗаписатьНачалоЭлемента(эл_Группа);
			
			XML_Текст.ЗаписатьАтрибут(ат_Гуид, СоответствиеСпр["ГрРодитель_Номенклатура"]);
			
				// Элементы группировки иерархии
				XML_Текст.ЗаписатьНачалоЭлемента(эл_Элементы);	
			
					СпВГ = Новый СписокЗначений;
			 	
					Пока СписокГрупп.Следующий() Цикл	
						
						Если СпВГ.НайтиПоЗначению(СписокГрупп.Ссылка) = Неопределено Тогда
							СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(СписокГрупп);
							//Если ЗначениеЗаполнено(СписокГрупп.Родитель) Тогда
								СтруктураПолей.Вставить(ат_ГруппаРодитель, СписокГрупп.Родитель);							
								ЗаписатьЭлементВДокументОбмена(XML_Текст, СтруктураПолей);	
								СпВГ.Добавить(СписокГрупп.Ссылка);
							//КонецЕсли;                        							
						КонецЕсли;                   					
						
					КонецЦикла;
									
				XML_Текст.ЗаписатьКонецЭлемента();  //ELEMENTS
						
			XML_Текст.ЗаписатьКонецЭлемента();      //GROUP
			
			// Объявление группировки по категориям номенклатуры
			XML_Текст.ЗаписатьНачалоЭлемента(эл_Группа);
			
			XML_Текст.ЗаписатьАтрибут(ат_Гуид, СоответствиеСпр["ГрКатегория_Номенклатура"]);
			
			//ДобавитьПоле("Comment", "Элементы группировки по категориям");
			
			// Элементы группировки по категориям
			XML_Текст.ЗаписатьНачалоЭлемента(эл_Элементы);	
			
				Пока СписокКатегорий.Следующий() Цикл
					
					СтруктураПолей = Новый Структура;
					СтруктураПолей.Вставить(ат_Гуид, СписокКатегорий.Ссылка.УникальныйИдентификатор());						
					СтруктураПолей.Вставить(ат_ПометкаУдаления, СписокКатегорий.ПометкаУдаления);
					//Если ЗначениеЗаполнено(СписокКатегорий.Родитель) Тогда
						СтруктураПолей.Вставить(ат_ГруппаРодитель, СписокКатегорий.Родитель);
					//КонецЕсли;
					СтруктураПолей.Вставить(ат_Наименование, СписокКатегорий.Наименование);
					ЗаписатьЭлементВДокументОбмена(XML_Текст, СтруктураПолей);
					
				КонецЦикла;
				
			XML_Текст.ЗаписатьКонецЭлемента();  	//ELEMENTS
				
			XML_Текст.ЗаписатьКонецЭлемента();      //GROUP
			
		XML_Текст.ЗаписатьКонецЭлемента();        	//GROUPS		
			
	// Ниже идет код, касающийся выгрузки непосредственно элементов справочника	
	отборСклады = отбор.Получить("Склады");
	ТзСклады = Новый ТаблицаЗначений;

	РезультатЗапроса = Неопределено;
	Если отборСклады <> Неопределено Тогда	
		Если отборСклады["Использование"] Тогда
				
			ПостроительОтчета = Новый ПостроительОтчета;
			ПостроительОтчета.Текст = ПолучитьТекстЗапросаСклады();
			ПостроительОтчета.ЗаполнитьНастройки();
			ПостроительОтчета.Отбор.Добавить("Ссылка");
			УстановитьПоляОтбораПостроителяОтчета("Ссылка", отборСклады, ПостроительОтчета);
			
			ПостроительОтчета.Выполнить();			
			РезультатЗапроса = ПостроительОтчета.Результат;			

		КонецЕсли;
	КонецЕсли;	
	
	Если РезультатЗапроса = Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = ПолучитьТекстЗапросаСклады();
		РезультатЗапроса = Запрос.Выполнить();
	КонецЕсли;
	
	ТзСклады = РезультатЗапроса.Выгрузить();
	
	СписокВыгруженныхГрупп = Новый СписокЗначений;  		
	
	Запрос = Новый Запрос(ПолучитьТекстЗапросаПоВыгружаемойНоменклатуре());
	
	Запрос.УстановитьПараметр("Дата", 	 				ТекущаяДата());
	Запрос.УстановитьПараметр("Ассортимент", 			СзАссортимент);
	Запрос.УстановитьПараметр("СписокСкладов",			ТзСклады.ВыгрузитьКолонку("Ссылка")); 		
	Запрос.УстановитьПараметр("СписокТиповЦен",		 	ТзКатегорииЦен.ВыгрузитьКолонку("ТипЦены"));		
	Запрос.УстановитьПараметр("ВалютаОтчета", 			мВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("ВВалютеОтчета", 			Истина);
	Запрос.УстановитьПараметр("ПустаяХарактеристика", 	Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	Запрос.УстановитьПараметр("СпособДиапазон", 		Перечисления.СпособыРасчетаЦены.ПоВхождениюБазовойЦеныВДиапазон);
	Запрос.УстановитьПараметр("СпособНаценка", 			Перечисления.СпособыРасчетаЦены.ПоПроцентнойНаценкеНаБазовыйТип);
	
	#Если Клиент Тогда
		Состояние(НСтр("ru='Выполнение запроса по номенклатуре ...'"));
	#КонецЕсли 
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ВсегоТиповЦен = ТзКатегорииЦен.Количество();	
	ВсегоСкладов  = ТзСклады.Количество();
	
	// Выгрузка элементов справочника
	XML_Текст.ЗаписатьНачалоЭлемента(эл_Элементы);
	
	//ДобавитьПоле("Comment", "Элементы справочника 'Номенклатура'");
	
	ВсегоЭлементов = Выборка.Количество();
	
	СчЭлементов = 0;
	ОтображатьАртикулы = ДанныеАгента["ОтображатьАртикулы"];
	
	Пока Выборка.Следующий() Цикл
		
		СчЭлементов = СчЭлементов + 1;
		
		ПроцентВыгрузки = Окр(СчЭлементов/ВсегоЭлементов*100, 0);		
		
		#Если Клиент Тогда
			Состояние(НСтр("ru='Выгрузка номенклатуры: " + ПроцентВыгрузки + "%'"));			
			ОбработкаПрерыванияПользователя();
		#КонецЕсли

		ТекНоменклатура = Выборка.Ссылка;
		
		СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(Выборка);						
		
		СтрКод = "";	
		Если ОтображатьАртикулы <> Неопределено Тогда
			Если ОтображатьАртикулы Тогда					
				СтрКод = ТекНоменклатура.Ссылка.Артикул;
			Иначе
				СтрКод = ТекНоменклатура.Ссылка.Код;				
			КонецЕсли;
		КонецЕсли;
		
		ЕдЦены = ПолучитьБазовуюЕдиницу(ТекНоменклатура);
		
		ЭтоУслуга = (ТекНоменклатура.ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга);
		
		// Формируем таблицу остатков по складам
		// Чтобы заранее расчитать общий остаток
		ВыборкаОстатки = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Склад");		
		
		ТабОстатков = Новый ТаблицаЗначений;
		ТабОстатков.Колонки.Добавить("Склад");
		ТабОстатков.Колонки.Добавить("Остаток");		
		
		ОбщийОстаток = 0;
		Для Каждого ЭлСклада Из ТзСклады Цикл			
			ТекСклад = ЭлСклада["Ссылка"];
			СтрОст = ТабОстатков.Добавить();
			СтрОст.Склад   = ТекСклад;
			ОстатокСклада = 0;
			Если ВыборкаОстатки.НайтиСледующий(Новый Структура("Ссылка, Склад", ТекНоменклатура, ТекСклад)) Тогда
				ОстатокСклада = ВыборкаОстатки.СвободныйОстаток;
			КонецЕсли;			
			СтрОст.Остаток = ОстатокСклада;			
			ОбщийОстаток = ОбщийОстаток + ОстатокСклада;
			ВыборкаОстатки.Сбросить();
		КонецЦикла;

		СтруктураПолей.Вставить(СтруктураРеквизитов["Код"], СтрКод);
		//СтруктураПолей.Вставить("A02",  ТекНоменклатура.Родитель.Ссылка);	
		Если НаименованиеКонфигурации = "УправлениеТорговымПредприятиемДляКазахстана" Тогда 
			СтруктураПолей.Вставить(СтруктураРеквизитов["СтавкаНДС"], Вычислить("УчетНДСИАкциза.ПолучитьСтавкуНДС(ТекНоменклатура.СтавкаНДС)"));
		Иначе
			СтруктураПолей.Вставить(СтруктураРеквизитов["СтавкаНДС"], Вычислить("УчетНДС.ПолучитьСтавкуНДС(ТекНоменклатура.СтавкаНДС)"));
		КонецЕсли;
		СтруктураПолей.Вставить(СтруктураРеквизитов["БазоваяЕдиница"], ЕдЦены);
		СтруктураПолей.Вставить(СтруктураРеквизитов["ВестиУчетПоХарактеристикам"], ТекНоменклатура.ВестиУчетПоХарактеристикам);
		СтруктураПолей.Вставить(СтруктураРеквизитов["СвободныйОстаток"], ОбщийОстаток);
		//++Ratmir 2018-04-24
		//СтруктураПолей.Вставить(СтруктураРеквизитов["ЕдиницаХраненияОстатков"], ТекНоменклатура.ЕдиницаХраненияОстатков);
		ЕдХраненияОстатков = ТекНоменклатура.ЕдиницаХраненияОстатков;
		Если НЕ ЗначениеЗаполнено(ЕдХраненияОстатков) Тогда
			ЕдХраненияОстатков = ЕдЦены;	
		КонецЕсли;
		СтруктураПолей.Вставить(СтруктураРеквизитов["ЕдиницаХраненияОстатков"], ЕдХраненияОстатков);
		
		БазоваяЕдиницаНеСовпадаетсЕдиницейЦены = Ложь;
		//--Ratmir 2018-04-24
		
		СтруктураПолей.Вставить(СтруктураРеквизитов["Весовой"], ТекНоменклатура.Весовой);
		СтруктураПолей.Вставить(СтруктураРеквизитов["Услуга"], ЭтоУслуга);
		СтруктураПолей.Вставить(СтруктураРеквизитов["НаименованиеПолное"], ТекНоменклатура.НаименованиеПолное);
        ЕстьОстатки = (Выборка.СвободныйОстаток > 0);
		СтруктураПолей.Вставить(СтруктураРеквизитов["ЕстьОстатки"], ЕстьОстатки);
		СтруктураПолей.Вставить(СтруктураРеквизитов["ДополнительноеОписаниеНоменклатуры"], ТекНоменклатура.ДополнительноеОписаниеНоменклатуры);
		СтруктураПолей.Вставить(СтруктураРеквизитов["ОсновноеИзображение"], ТекНоменклатура.ОсновноеИзображение);
		СтруктураПолей.Вставить(СтруктураРеквизитов["ПорядокВФайлеВыгрузки"], СчЭлементов);		
		
		 // Выгружаем цены в разрезе типов цен
		КолВыгрТиповЦен = 0;   		
				
		ВыборкаТипЦены = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ТипЦен");
		
		Если ЗначениеЗаполнено(МинимальныйТипЦены) Тогда
			Если ВыборкаТипЦены.НайтиСледующий(Новый Структура("Ссылка, ТипЦен", ТекНоменклатура, МинимальныйТипЦены)) Тогда
				//МинЦена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(ВыборкаТипЦены.Цена, ВыборкаТипЦены.Валюта, мВалютаРегламентированногоУчета,,,ТекущаяДата());
				МинЦена = Окр(ВыборкаТипЦены.Цена, 2);
				СтруктураПолей.Вставить(СтруктураРеквизитов["МинимальнаяЦена"], МинЦена);
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого СтрокаТабЦен Из ТзКатегорииЦен Цикл 
			
			ВыборкаТипЦены.Сбросить();
			
			Если КолВыгрТиповЦен = 10 Тогда
				Прервать;
			КонецЕсли;
			
			ТекТипЦены = СтрокаТабЦен.ТипЦены;
			ТекЦена = 0;
			Если ВыборкаТипЦены.НайтиСледующий(Новый Структура("Ссылка, ТипЦен", ТекНоменклатура, ТекТипЦены)) Тогда				
				////++Ratmir 2018-04-20
				////ТекЦена = Окр(ВыборкаТипЦены.Цена, 2);
				//Если ТекНоменклатура.БазоваяЕдиницаИзмерения = ЕдХраненияОстатков.ЕдиницаПоКлассификатору Тогда
				//	ТекЦена = Окр(ВыборкаТипЦены.Цена, 2);
				//Иначе
				//	БазоваяЕдиницаНеСовпадаетсЕдиницейЦены = Истина;
				//	ТекКоэффициентХраненияОстатков = ЕдХраненияОстатков.Коэффициент;
				//	Если ТекКоэффициентХраненияОстатков = 0 Тогда
				//		ТекКоэффициентХраненияОстатков = 1;
				//	КонецЕсли;
				//	ТекЦена = Окр(ВыборкаТипЦены.Цена/ТекКоэффициентХраненияОстатков, 2);
				//КонецЕсли;
				////--Ratmir 2018-04-20
				
				//{{vd_180614
				Если ТекНоменклатура.БазоваяЕдиницаИзмерения = ВыборкаТипЦены.ЦенаНоменклатурыЕдЦены Тогда
					ТекЦена = Окр(ВыборкаТипЦены.Цена, 2);
				Иначе
					БазоваяЕдиницаНеСовпадаетсЕдиницейЦены = Истина;
					
					ТекКоэффициент = ВыборкаТипЦены.ЦенаНоменклатурыКоэффицент;
					Если НЕ ЗначениеЗаполнено(ТекКоэффициент) ИЛИ ТекКоэффициент = 0 Тогда
						ТекКоэффициент = 1;
					КонецЕсли;
					ТекЦена = Окр(ВыборкаТипЦены.Цена/ТекКоэффициент, 2);
				КонецЕсли;
				//}}
			КонецЕсли;	
			
			СтруктураПолей.Вставить("A02" + Строка(КолВыгрТиповЦен), ТекЦена);							
			КолВыгрТиповЦен = КолВыгрТиповЦен + 1;			
		КонецЦикла; 
		
		//++Ratmir 2018-04-24
		//Выгружаем единицу цены
		Если БазоваяЕдиницаНеСовпадаетсЕдиницейЦены Тогда
			СтруктураПолей.Вставить(СтруктураРеквизитов["ЕдиницаЦены"], ЕдХраненияОстатков);
		КонецЕсли;
		//--Ratmir 2018-04-24
		
		//++ОСТАТКИ по складам				
		КолВыгрСкладов = 0;
		Для Каждого СтрокаОст Из ТабОстатков Цикл   
			Если КолВыгрСкладов = 5 Тогда
				Прервать;
			КонецЕсли;			
			СтруктураПолей.Вставить("A03" + Строка(КолВыгрСкладов), СтрокаОст.Остаток);							
			КолВыгрСкладов = КолВыгрСкладов + 1;
		КонецЦикла;
		//--ОСТАТКИ по складам
		
		//++ОСТАКИ мобильного склада vd_180809
		Если ВыбНастройкиАгента.ТорговляСКолес Тогда
			ОстаткиМобильногоСклада = 0;
			Для Каждого Элемент Из ТабОстатков Цикл
				Если ВыбНастройкиАгента.ТорговляСКолес И Элемент.Склад = ВыбНастройкиАгента.МобильныйСклад Тогда
					ОстаткиМобильногоСклада = Элемент.Остаток;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			СтруктураПолей.Вставить("A041", ОстаткиМобильногоСклада);
			СтруктураПолей.Вставить("A052", ?(ОстаткиМобильногоСклада <= 0, 2, 0));
		КонецЕсли;
		//--ОСТАКИ мобильного склада vd_180809


		///////////////////////////
		
		Если ТекНоменклатура.Родитель <> Справочники.Контрагенты.ПустаяСсылка() И ТекНоменклатура.Родитель <> Null Тогда
			СтруктураПолей.Вставить("GrpId0", ТекНоменклатура.Родитель);
		КонецЕсли;
		
		Если ТекНоменклатура.НоменклатурнаяГруппа <> Справочники.НоменклатурныеГруппы.ПустаяСсылка() 
			И ТекНоменклатура.НоменклатурнаяГруппа <> Null Тогда
			СтруктураПолей.Вставить("GrpId1", ТекНоменклатура.НоменклатурнаяГруппа);
		КонецЕсли;

		// Во втором параметре передается Ложь - это означает,
		// что не закрывает тег "Item", его закрытие производится ниже
		//ЗаписатьЭлементВДокументОбмена(СтруктураПолей);
		ЗаписатьЭлементВДокументОбмена(XML_Текст, СтруктураПолей, Ложь);
		
		КолТиповЦен = ВсегоТиповЦен - КолВыгрТиповЦен;
		КолСкладов  = ВсегоСкладов  - КолВыгрСкладов;
		
		ОбщееУсловие = КолТиповЦен > 0 или КолСкладов > 0; 
		
		Если ОбщееУсловие Тогда	   						
				
			//Заполняем табличные части справочника
			XML_Текст.ЗаписатьНачалоЭлемента(эл_ТабличныеЧасти);
			
			Если КолСкладов > 0 Тогда
				
				//Заполняем табличную часть остатков		
				XML_Текст.ЗаписатьНачалоЭлемента(эл_ТабличнаяЧасть);
				
				XML_Текст.ЗаписатьАтрибут(ат_Гуид, идТчОстатки);	
				
				Цел10 = Цел(КолСкладов/5) + 1;
				
				Для СчЦел = 1 По Цел10 Цикл
					
					ОстСкладовТЧ = Мин(КолСкладов, 5);
					
					Если ОстСкладовТЧ <= 0 Тогда Продолжить; КонецЕсли;
					
					СтруктураПолей = Новый Структура;
					СтруктураПолей.Вставить(ат_Гуид,   Новый УникальныйИдентификатор());
					//СтруктураПолей.Вставить(ат_ТчСправочникРодитель, ТекНоменклатура);
					СтруктураПолей.Вставить(структураТчОстатки["Идентификатор"],    СчЦел);			
			       				
					Для СчТЧ = 1 По ОстСкладовТЧ Цикл
						НомерСтроки = КолВыгрСкладов + СчТЧ - 1;
						Если НомерСтроки > ТзСклады.Количество() - 1 Тогда
							Прервать;
						КонецЕсли;
						СтрокаСклада = ТзСклады.Получить(НомерСтроки);						
						ТекОстаток = 0;
						Если ВыборкаОстатки.НайтиСледующий(Новый Структура("Ссылка, Склад", ТекНоменклатура, СтрокаСклада.Ссылка)) Тогда
							ТекОстаток = ВыборкаОстатки.СвободныйОстаток;
						КонецЕсли;
						ВыборкаОстатки.Сбросить();
						СтруктураПолей.Вставить("A0" + Строка(СчТЧ), ТекОстаток);							
					КонецЦикла;
 					
					ЗаписатьЭлементВДокументОбмена(XML_Текст, СтруктураПолей);	
					
					КолВыгрСкладов = КолВыгрСкладов + СчТЧ - 1;
						
					КолСкладов = КолСкладов - ОстСкладовТЧ;
					
				КонецЦикла;			
				
				XML_Текст.ЗаписатьКонецЭлемента(); //TABLE
				
			КонецЕсли;	
			
			Если КолТиповЦен > 0 Тогда
				
				// Заполняем табличную часть ценами
				XML_Текст.ЗаписатьНачалоЭлемента(эл_ТабличнаяЧасть);
			
					XML_Текст.ЗаписатьАтрибут(ат_Гуид, идТчЦены);
					
					//ДобавитьПоле("Comment", "Табличная часть 'Цены'");
				
					Цел10 = Цел(КолТиповЦен/10) + 1;
					
					Для СчЦел = 1 По Цел10 Цикл
						
						ОстТиповЦенТЧ = Мин(КолТиповЦен, 10);
						
						Если ОстТиповЦенТЧ <= 0 Тогда Продолжить; КонецЕсли;
						
						СтруктураПолей = Новый Структура;
						СтруктураПолей.Вставить(ат_Гуид,   Новый УникальныйИдентификатор());
						//СтруктураПолей.Вставить(ат_ТчСправочникРодитель, ТекНоменклатура);
						СтруктураПолей.Вставить(структураТчЦены["Идентификатор"],   СчЦел);

						Для СчТЧ = 1 По ОстТиповЦенТЧ Цикл 							
							НомерСтроки = КолВыгрТиповЦен + СчТЧ - 1;
							Если НомерСтроки > ТзКатегорииЦен.Количество()-1 Тогда
								Прервать;
							КонецЕсли;
							СтрокаТабЦен = ТзКатегорииЦен.Получить(КолВыгрТиповЦен + СчТЧ - 1);
							Если Не СтрокаТабЦен = Неопределено Тогда
								ТекТипЦены = СтрокаТабЦен.ТипЦены;    			
								ТекЦена = 0;
								Если ВыборкаТипЦены.НайтиСледующий(Новый Структура("Ссылка, ТипЦен", ТекНоменклатура, ТекТипЦены)) Тогда
									ТекЦена = ВыборкаТипЦены.Цена;
								КонецЕсли;
								ВыборкаТипЦены.Сбросить();								
								//ТекЦена = Ценообразование.ПолучитьЦенуНоменклатуры(ТекНоменклатура, , ТекТипЦены, ТекущаяДата(),
								//												   ЕдЦены, мВалютаРегламентированногоУчета);			
								СтруктураПолей.Вставить("A0" + Строка(СчТЧ), ТекЦена);							
							КонецЕсли;							
						КонецЦикла;     
						
						ЗаписатьЭлементВДокументОбмена(XML_Текст, СтруктураПолей);	
						
						КолВыгрТиповЦен = КолВыгрТиповЦен + СчТЧ - 1;
						
						КолТиповЦен = КолТиповЦен - ОстТиповЦенТЧ;
						
					КонецЦикла;
							
				XML_Текст.ЗаписатьКонецЭлемента(); //TABLE			
			
			КонецЕсли;
		
			XML_Текст.ЗаписатьКонецЭлемента();     //TABLES
		
		КонецЕсли;

		// Закрываем тег ITEM, который был открыт при вызове
		// процедуры "ЗаписатьЭлементВДокументОбмена"
		XML_Текст.ЗаписатьКонецЭлемента();     //ITEM
                                            
	КонецЦикла;
	
	XML_Текст.ЗаписатьКонецЭлемента();          //ELEMENTS
	
	ВыгрузитьПодтверждениеСправочника(XML_Текст, СоотвЗагруженныхОбъектов, имяСправочника);	
	
	XML_Текст.ЗаписатьКонецЭлемента();          // CATALOG
	
	ВыгружатьХарактеристики = НастройкиОбработки["ВыгружатьХарактеристики"];
	//		
	//// В разрезе серий Тогда
	//Если РежимВыгрузкиНоменклатуры = 2 Тогда
	//	ТекстСообщения = "ru='Выгрузка остатков в разрезе серий не поддерживается в приложении ""Мобильная торговля""!" + Символы.ПС
	//						+ "Будет произведена выгрузка без учета разреза!'";
	//	ОповеститьОСобытии(ТекстСообщения, ТипыЛогов["Обмен"], СтатусСообщения.Внимание);		
	//КонецЕсли;
	
	// Выгружаем сопутствующие данные
	Если Константы.ИспользоватьХарактеристикиНоменклатуры.Получить() И ВыгружатьХарактеристики  Тогда		
		#Если Клиент Тогда
			Состояние(НСтр("ru='Выгрузка характеристик номенклатуры ...'"));	
			ОбработкаПрерыванияПользователя();
		#КонецЕсли      
		ВыгрузитьХарактеристикиНоменклатуры(XML_Текст, СоотвЗагруженныхОбъектов, ДанныеАгента, СзАссортимент, ТзСклады, ТзКатегорииЦен);
	Иначе
		// Если не выгружаются характеристики, нужно передавать команду
		// на их очистку, если они были раньше выгружены
		имяСправочника = "ХарактеристикиНоменклатуры";
		идСпр = СоответствиеСпр[имяСправочника];
		СтруктураРеквизитов = СоответствиеСпр[идСпр];
		XML_Текст.ЗаписатьНачалоЭлемента(эл_Справочник);		
			XML_Текст.ЗаписатьАтрибут(ат_Гуид, идСпр);									
			XML_Текст.ЗаписатьАтрибут(ат_ОчиститьПередЗагрузкой, "1");                	                    			
			XML_Текст.ЗаписатьАтрибут(ат_Комментарий, СтруктураРеквизитов["_Представление"]);
			
			XML_Текст.ЗаписатьНачалоЭлемента(эл_Группы);
			XML_Текст.ЗаписатьКонецЭлемента();
			
			XML_Текст.ЗаписатьНачалоЭлемента(эл_Элементы);
			XML_Текст.ЗаписатьКонецЭлемента();
			
		XML_Текст.ЗаписатьКонецЭлемента();	
	КонецЕсли;
	
	#Если Клиент Тогда
		Состояние(НСтр("ru='Выгрузка единиц измерения ...'"));			
		ОбработкаПрерыванияПользователя();
	#КонецЕсли
		
	ВыгрузитьЕдиницыИзмерения(XML_Текст, СзАссортимент);		
	
КонецПроцедуры // ВыгрузитьНоменклатуру()
	
Процедура ВыгрузитьХарактеристикиНоменклатуры(XML_Текст, СоотвЗагруженныхОбъектов, ДанныеАгента, СзАссортимент, ТзСклады, ТзКатегорииЦен)
	
	имяСправочника = "ХарактеристикиНоменклатуры";	
	
	ИдСпр = СоответствиеСпр[имяСправочника];
	идТчОстатки = СоответствиеСпр["ТчОстатки_ХарактеристикиНоменклатуры"];
	идТчЦены = СоответствиеСпр["ТчЦены_ХарактеристикиНоменклатуры"];
	
	СтруктураРеквизитов = СоответствиеСпр[ИдСпр];	
	
	XML_Текст.ЗаписатьНачалоЭлемента(эл_Справочник);
	
	XML_Текст.ЗаписатьАтрибут(ат_Гуид, ИдСпр);	
	
	УстановитьПризнакОчисткиСправочника(XML_Текст, ИдСпр);	
	
	XML_Текст.ЗаписатьАтрибут(ат_Комментарий, СтруктураРеквизитов["_Представление"]);
	
	XML_Текст.ЗаписатьНачалоЭлемента(эл_Группы);
	
	XML_Текст.ЗаписатьКонецЭлемента();
	
	//РежимВыгрузкиНоменклатуры = НастройкиОбработки["РежимВыгрузкиНоменклатуры"];
	
	Запрос = Новый Запрос(ПолучитьТекстЗапросаПоВыгружаемойНоменклатуре(Истина));
	
	Запрос.УстановитьПараметр("Дата", 	 				ТекущаяДата());
	Запрос.УстановитьПараметр("Ассортимент", 			СзАссортимент);
	Запрос.УстановитьПараметр("СписокСкладов",			ТзСклады.ВыгрузитьКолонку("Ссылка")); 		
	Запрос.УстановитьПараметр("СписокТиповЦен",		 	ТзКатегорииЦен.ВыгрузитьКолонку("ТипЦены"));		
	Запрос.УстановитьПараметр("ВалютаОтчета", 			мВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("ВВалютеОтчета", 			Истина);
	Запрос.УстановитьПараметр("ПустаяХарактеристика", 	Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	Запрос.УстановитьПараметр("СпособДиапазон", 		Перечисления.СпособыРасчетаЦены.ПоВхождениюБазовойЦеныВДиапазон);
	Запрос.УстановитьПараметр("СпособНаценка", 			Перечисления.СпособыРасчетаЦены.ПоПроцентнойНаценкеНаБазовыйТип);
	
	#Если Клиент Тогда
		Состояние(НСтр("ru='Выполнение запроса по характеристикам номенклатуры ...'"));
	#КонецЕсли
	
	Результат = Запрос.Выполнить();	
	
	ВыборкаНоменклатура = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ВсегоТиповЦен = ТзКатегорииЦен.Количество();	
	ВсегоСкладов  = ТзСклады.Количество();
	
	XML_Текст.ЗаписатьНачалоЭлемента(эл_Элементы);
	
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
		ТекНоменклатура = ВыборкаНоменклатура.Ссылка;
		
		ВыборкаХарактеристика = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаХарактеристика.Следующий() Цикл
			
			ТекХарактеристика = ВыборкаХарактеристика.ХарактеристикаНоменклатуры;
			
			НаимХарактеристики = Строка(ТекХарактеристика);
			
			Если ТипЗнч(ТекХарактеристика) = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") Тогда
				Владелец = ТекХарактеристика;				
			Иначе
				Владелец = ТекНоменклатура;								
			КонецЕсли;    	

            // Формируем таблицу остатков по складам
			// Чтобы заранее расчитать общий остаток
			ВыборкаОстатки = ВыборкаХарактеристика.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Склад");
			
			ТабОстатков = Новый ТаблицаЗначений;
			ТабОстатков.Колонки.Добавить("Склад");
			ТабОстатков.Колонки.Добавить("Остаток");
			
			ОбщийОстаток = 0;
			Для Каждого ЭлСклада Из ТзСклады Цикл			
				ТекСклад = ЭлСклада.Ссылка;
				СтрОст = ТабОстатков.Добавить();
				СтрОст.Склад   = ТекСклад;
				ОстатокСклада = 0;
				Если ВыборкаОстатки.НайтиСледующий(Новый Структура("ХарактеристикаНоменклатуры, Склад", ТекХарактеристика, ТекСклад)) Тогда
					ОстатокСклада = ВыборкаОстатки.СвободныйОстаток;
				КонецЕсли;
				СтрОст.Остаток = ОстатокСклада;
				ОбщийОстаток = ОбщийОстаток + ОстатокСклада;
				ВыборкаОстатки.Сбросить();
			КонецЦикла;

			СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(Владелец);		
			СтруктураПолей.Вставить(ат_Наименование, НаимХарактеристики);
			СтруктураПолей.Вставить(СтруктураРеквизитов["Владелец"],  ТекНоменклатура);
			СтруктураПолей.Вставить(СтруктураРеквизитов["СвободныйОстаток"], ОбщийОстаток);
			ЕстьОстатки = (ОбщийОстаток > 0);
			СтруктураПолей.Вставить(СтруктураРеквизитов["ЕстьОстатки"], ЕстьОстатки);			
			СтруктураПолей.Вставить(СтруктураРеквизитов["Акция"], ВыборкаХарактеристика.Акция);
			
			КолВыгрТиповЦен = 0; 	
			
			ВыборкаТипЦены = ВыборкаХарактеристика.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ТипЦен");		
			
			//{{vd_180614
		     
			Для Каждого СтрокаТабЦен Из ТзКатегорииЦен Цикл 
				
				ВыборкаТипЦены.Сбросить();
				
				Если КолВыгрТиповЦен = 10 Тогда
					Прервать;
				КонецЕсли;
				
				ТекТипЦены = СтрокаТабЦен.ТипЦены; 
				ТекЦена = 0;
				 Если ВыборкаТипЦены.НайтиСледующий(Новый Структура("ХарактеристикаНоменклатуры, ТипЦен", ТекХарактеристика, ТекТипЦены)) Тогда				
					 
					 Если ТекНоменклатура.БазоваяЕдиницаИзмерения = ВыборкаТипЦены.ЦенаНоменклатурыЕдЦены Тогда
						ТекЦена = Окр(ВыборкаТипЦены.Цена, 2);
					 Иначе
		
						ТекКоэффициент = ВыборкаТипЦены.ЦенаНоменклатурыКоэффицент;
						Если НЕ ЗначениеЗаполнено(ТекКоэффициент) ИЛИ ТекКоэффициент = 0 Тогда
							ТекКоэффициент = 1;
						КонецЕсли;
						ТекЦена = Окр(ВыборкаТипЦены.Цена/ТекКоэффициент, 2);
					 КонецЕсли;
				КонецЕсли;	
				
				СтруктураПолей.Вставить("A02" + Строка(КолВыгрТиповЦен), ТекЦена);							
				КолВыгрТиповЦен = КолВыгрТиповЦен + 1;			
			КонецЦикла;
			
			//Было:
			////// Получаем минимальную цену
			////Если ЗначениеЗаполнено(МинимальныйТипЦены) Тогда
			////	Если ВыборкаТипЦены.НайтиСледующий(Новый Структура("ХарактеристикаНоменклатуры, ТипЦен", ТекХарактеристика, МинимальныйТипЦены)) Тогда				
			////		МинЦена = Окр(ВыборкаТипЦены.Цена, 2);
			////		СтруктураПолей.Вставить("A040", МинЦена);
			////	КонецЕсли;
			////КонецЕсли;
			//
			//// Выгружаем цены в разрезе типов цен
			//Для Каждого СтрокаТабЦен Из ТзКатегорииЦен Цикл 			
			//	ВыборкаТипЦены.Сбросить();                  			
			//	Если КолВыгрТиповЦен = 10 Тогда
			//		Прервать;
			//	КонецЕсли;                                  			
			//	ТекТипЦены = СтрокаТабЦен.ТипЦены;
			//	ТекЦена = 0;
			//	Если ВыборкаТипЦены.НайтиСледующий(Новый Структура("ХарактеристикаНоменклатуры, ТипЦен", ТекХарактеристика, ТекТипЦены)) Тогда				
			//		ТекЦена = Окр(ВыборкаТипЦены.Цена, 2);
			//	КонецЕсли;				
			//	СтруктураПолей.Вставить("A02" + Строка(КолВыгрТиповЦен), ТекЦена);							
			//	КолВыгрТиповЦен = КолВыгрТиповЦен + 1;					
			//КонецЦикла; 
			
			//}}vd_180614

			
			// Выгружаем остатки по складам
			КолВыгрСкладов = 0;  		
			Для Каждого СтрокаОст Из ТабОстатков Цикл   
				Если КолВыгрСкладов = 5 Тогда
					Прервать;
				КонецЕсли;			
				СтруктураПолей.Вставить("A03" + Строка(КолВыгрСкладов), СтрокаОст.Остаток);							
				КолВыгрСкладов = КолВыгрСкладов + 1;			
			КонецЦикла;
			
			// Во втором параметре передается Ложь - это означает,
			// что не закрывает тег "Item", его закрытие производится ниже		
			ЗаписатьЭлементВДокументОбмена(XML_Текст, СтруктураПолей, Ложь);
			 			
			КолТиповЦен = ВсегоТиповЦен - КолВыгрТиповЦен;
			КолСкладов  = ВсегоСкладов  - КолВыгрСкладов;
			
			ОбщееУсловие = КолТиповЦен > 0 или КолСкладов > 0; 			
			
			Если ОбщееУсловие Тогда	   			
				
				//Заполняем табличные части справочника
				XML_Текст.ЗаписатьНачалоЭлемента(эл_ТабличныеЧасти);
				
				Если КолСкладов > 0 Тогда
				
					//Заполняем табличную часть остатков		
					XML_Текст.ЗаписатьНачалоЭлемента(эл_ТабличнаяЧасть);
					
					XML_Текст.ЗаписатьАтрибут(ат_Гуид, идТчОстатки);
					
					//ДобавитьПоле("Comment", "Табличная часть 'Остатки'");
						
					Цел5 = Цел(КолСкладов/5) + 1;

                   	Для СчЦел = 1 По Цел5 Цикл   					
					
						ОстСкладовТЧ = Мин(КолСкладов, 5);  					
						Если ОстСкладовТЧ <= 0 Тогда Продолжить; КонецЕсли;
						
						СтруктураПолей = Новый Структура;
						СтруктураПолей.Вставить(ат_Гуид,   Новый УникальныйИдентификатор());
						//СтруктураПолей.Вставить(ат_ТчСправочникРодитель, Владелец);
						СтруктураПолей.Вставить("A06",    СчЦел);
						
						Для СчТЧ = 1 По ОстСкладовТЧ Цикл
							НомерСтроки = КолВыгрСкладов + СчТЧ - 1;
							Если НомерСтроки > (ТзСклады.Количество() - 1) Тогда
								Прервать;
							КонецЕсли;
							СтрокаСклада = ТзСклады.Получить(НомерСтроки);						
							ТекОстаток = 0;
							Если ВыборкаОстатки.НайтиСледующий(Новый Структура("ХарактеристикаНоменклатуры, Склад", ТекХарактеристика, СтрокаСклада["Ссылка"])) Тогда
								ТекОстаток = ВыборкаОстатки.СвободныйОстаток;
							КонецЕсли;
							ВыборкаОстатки.Сбросить();
							СтруктураПолей.Вставить("A0" + Строка(СчТЧ), ТекОстаток);							
						КонецЦикла;
									
						ЗаписатьЭлементВДокументОбмена(XML_Текст, СтруктураПолей);	
						
						КолВыгрСкладов = КолВыгрСкладов + СчТЧ - 1;
							
						КолСкладов = КолСкладов - ОстСкладовТЧ;
						
					КонецЦикла;			
				
				XML_Текст.ЗаписатьКонецЭлемента(); //TABLE
				
			КонецЕсли;	
			
			Если КолТиповЦен > 0 Тогда
				
				// Заполняем табличную часть ценами
				XML_Текст.ЗаписатьНачалоЭлемента(эл_ТабличнаяЧасть);
			
					XML_Текст.ЗаписатьАтрибут(ат_Гуид, идТчЦены);	
					
					//ДобавитьПоле("Comment", "Табличная часть 'Цены'");
				
					Цел10 = Цел(КолТиповЦен/10) + 1;
					
					Для СчЦел = 1 По Цел10 Цикл
						
						ОстТиповЦенТЧ = Мин(КолТиповЦен, 10);
						
						Если ОстТиповЦенТЧ <= 0 Тогда Продолжить; КонецЕсли;
						
						СтруктураПолей = Новый Структура;
						СтруктураПолей.Вставить(ат_Гуид,   Новый УникальныйИдентификатор());
						//СтруктураПолей.Вставить("CtlgId", Владелец);
						СтруктураПолей.Вставить("A011",   СчЦел);
						
						Для СчТЧ = 1 По ОстТиповЦенТЧ Цикл 							
							НомерСтроки = КолВыгрТиповЦен + СчТЧ - 1;
							Если НомерСтроки > ТзКатегорииЦен.Количество()-1 Тогда
								Прервать;
							КонецЕсли;
							СтрокаТабЦен = ТзКатегорииЦен.Получить(КолВыгрТиповЦен + СчТЧ - 1);
							Если Не СтрокаТабЦен = Неопределено Тогда
								ТекТипЦены = СтрокаТабЦен.ТипЦены;    			
								ТекЦена = 0;
								Если ВыборкаТипЦены.НайтиСледующий(Новый Структура("ХарактеристикаНоменклатуры, ТипЦен", ТекХарактеристика, ТекТипЦены)) Тогда
									ТекЦена = ВыборкаТипЦены.Цена;
								КонецЕсли;
								ВыборкаТипЦены.Сбросить();																
								СтруктураПолей.Вставить("A0" + Строка(СчТЧ), ТекЦена);							
							КонецЕсли;							
						КонецЦикла;  
							
						ЗаписатьЭлементВДокументОбмена(XML_Текст, СтруктураПолей);									
						
						КолВыгрТиповЦен = КолВыгрТиповЦен + СчТЧ - 1;
						
						КолТиповЦен = КолТиповЦен - ОстТиповЦенТЧ;
						
					КонецЦикла;  
							
				XML_Текст.ЗаписатьКонецЭлемента(); //TABLE			
				
				КонецЕсли;
				
				XML_Текст.ЗаписатьКонецЭлемента();     //TABLES			
				
			КонецЕсли;			
			
			// Закрыаем тег ITEM, который был открыт при вызове
			// процедуры "ЗаписатьЭлементВДокументОбмена"
			XML_Текст.ЗаписатьКонецЭлемента();     //ITEM
			
		КонецЦикла;
		
	КонецЦикла;

	XML_Текст.ЗаписатьКонецЭлемента();         //ELEMENTS
	
	ВыгрузитьПодтверждениеСправочника(XML_Текст, СоотвЗагруженныхОбъектов, имяСправочника);	
	
	XML_Текст.ЗаписатьКонецЭлемента();         //CATALOG
	
КонецПроцедуры //ВыгрузитьХарактеристикиНоменклатуры

Процедура ВыгрузитьЕдиницыИзмерения(XML_Текст, СзАссортимент)
	
	имяСпр = "ЕдиницыИзмерения";
	идСпр = СоответствиеСпр[имяСпр];
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕдиницыИзмерения.Ссылка,
	|	ЕдиницыИзмерения.Наименование,
	|	ЕдиницыИзмерения.ПометкаУдаления,
	|	ЕдиницыИзмерения.Владелец.Ссылка КАК Номенклатура,
	|	ЕдиницыИзмерения.Коэффициент,
	|	ЕдиницыИзмерения.Вес
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	(ЕдиницыИзмерения.Владелец.Ссылка В ИЕРАРХИИ (&Ассортимент))");
	
	Запрос.УстановитьПараметр("Ассортимент", СзАссортимент);
	
	СписокЭлементов = Запрос.Выполнить().Выбрать();	
	
	СтруктураРеквизитов = СоответствиеСпр[идСпр];
	
	//XML_Текст.ЗаписатьКомментарий(СтруктураРеквизитов["ИмяСправочника"]);	
	XML_Текст.ЗаписатьНачалоЭлемента(эл_Справочник);
		
		XML_Текст.ЗаписатьАтрибут(ат_Гуид, идСпр);		
		
		УстановитьПризнакОчисткиСправочника(XML_Текст, идСпр);
		
		XML_Текст.ЗаписатьАтрибут(ат_Комментарий, СтруктураРеквизитов["_Представление"]);		
 
		XML_Текст.ЗаписатьНачалоЭлемента(эл_Элементы);
		
			Пока СписокЭлементов.Следующий() Цикл
			
				#Если Клиент Тогда
					ОбработкаПрерыванияПользователя();
				#КонецЕсли

				СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(СписокЭлементов);	
				СтруктураПолей.Вставить(СтруктураРеквизитов["Владелец"], 		 СписокЭлементов.Номенклатура);
				СтруктураПолей.Вставить(СтруктураРеквизитов["Коэффициент"],		 СписокЭлементов.Коэффициент);
				СтруктураПолей.Вставить(СтруктураРеквизитов["Вес"],		 		 СписокЭлементов.Вес);
				ЗаписатьЭлементВДокументОбмена(XML_Текст, СтруктураПолей);		
			КонецЦикла;
			
		XML_Текст.ЗаписатьКонецЭлемента(); //ELEMENTS
	
	XML_Текст.ЗаписатьКонецЭлемента(); //CATALOG

КонецПроцедуры //ВыгрузитьЕдиницыИзмерения

Процедура ВыгрузитьКонтактнуюИнформацию(XML_Текст, СоотвЗагруженныхОбъектов, сзКлиентыАгента, сзТоргТочкиАгента)
	
	имяСправочника = "КонтактнаяИнформация";
	
	// Производим выгрузку контактной информации в один справочник
	// по всем объектам: контрагентам, торговым точкам и контактным лицам
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Объект КАК Ссылка,
	|	КонтактнаяИнформация.Тип КАК Тип,
	|	КонтактнаяИнформация.Вид КАК Вид,
	|	КонтактнаяИнформация.Представление КАК Представление,
	|	ЛОЖЬ КАК ЭтоТорговаяТочка
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	(КонтактнаяИнформация.Объект В (&сзКлиенты)
	|			ИЛИ КонтактнаяИнформация.Объект.Владелец В (&сзКлиенты))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КонтактнаяИнформация.Объект КАК Ссылка,
	|	КонтактнаяИнформация.Тип КАК Тип,
	|	КонтактнаяИнформация.Вид КАК Вид,
	|	КонтактнаяИнформация.Представление КАК Представление,
	|	ИСТИНА КАК ЭтоТорговаяТочка
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	(КонтактнаяИнформация.Объект В (&сзТорговыеТочки)
	|			ИЛИ КонтактнаяИнформация.Объект.Владелец В (&сзТорговыеТочки))");
	
	Запрос.УстановитьПараметр("сзКлиенты", 	      сзКлиентыАгента);
	Запрос.УстановитьПараметр("сзТорговыеТочки",  сзТоргТочкиАгента);		
	СписокЭлементов = Запрос.Выполнить().Выбрать();
	
	СтруктураРеквизитов = СоответствиеСпр[СоответствиеСпр[имяСправочника]];
	СтруктураТиповКонтактнойИнформации = СоответствиеПеречислений["ТипыКонтактнойИнформации"];
	
	//XML_Текст.ЗаписатьКомментарий(СтруктураРеквизитов["ИмяСправочника"]);		
	XML_Текст.ЗаписатьНачалоЭлемента(эл_Справочник);		
		
		XML_Текст.ЗаписатьАтрибут(ат_Гуид, СоответствиеСпр[имяСправочника]);		
	
		// Передаем команду на удаление всех элементов перед загрузкой
		// всегда, иначе элементы будут всегда дозаписываться
		XML_Текст.ЗаписатьАтрибут(ат_ОчиститьПередЗагрузкой, "1");			
		
		XML_Текст.ЗаписатьАтрибут(ат_Комментарий, СтруктураРеквизитов["_Представление"]);
		
		XML_Текст.ЗаписатьНачалоЭлемента(эл_Группы);
		XML_Текст.ЗаписатьКонецЭлемента();
		
		XML_Текст.ЗаписатьНачалоЭлемента(эл_Элементы);
		
			Пока СписокЭлементов.Следующий() Цикл
			
				#Если Клиент Тогда
					ОбработкаПрерыванияПользователя();
				#КонецЕсли  
				
				ТекОбъект = СписокЭлементов.Ссылка;
				
				СтруктураПолей = Новый Структура;
				СтруктураПолей.Вставить(ат_Гуид, 	 Новый УникальныйИдентификатор());				
				СтруктураПолей.Вставить(ат_ПометкаУдаления, Ложь);
				
				Если СписокЭлементов.ЭтоТорговаяТочка Тогда
					
					СтруктураПолей.Вставить(СтруктураРеквизитов["ТорговаяТочка"], СписокЭлементов.Ссылка);			 
										
				Иначе	
					
					Если ТипЗнч(ТекОбъект) = Тип("СправочникСсылка.Контрагенты") Тогда
						СтруктураПолей.Вставить(СтруктураРеквизитов["Контрагент"], СписокЭлементов.Ссылка);
					ИначеЕсли ТипЗнч(ТекОбъект) = Тип("СправочникСсылка.КонтактныеЛицаКонтрагентов") Тогда
						СтруктураПолей.Вставить(СтруктураРеквизитов["КонтактноеЛицоКонтрагента"], СписокЭлементов.Ссылка);					
					КонецЕсли;				 
					
				КонецЕсли;		

				СтруктураПолей.Вставить(СтруктураРеквизитов["Тип"], СтруктураТиповКонтактнойИнформации[СписокЭлементов.Тип]);
				СтруктураПолей.Вставить(СтруктураРеквизитов["Вид"], СписокЭлементов.Вид);
				СтруктураПолей.Вставить(СтруктураРеквизитов["Значение"], СписокЭлементов.Представление);
				
				ЗаписатьЭлементВДокументОбмена(XML_Текст, СтруктураПолей);
				
			КонецЦикла;
	
		XML_Текст.ЗаписатьКонецЭлемента();  //ELEMENTS 
		
		ВыгрузитьПодтверждениеСправочника(XML_Текст, СоотвЗагруженныхОбъектов, имяСправочника);	
		
	XML_Текст.ЗаписатьКонецЭлемента();      //CATALOG
	
КонецПроцедуры

Процедура ВыгрузитьДокументВзаиморасчетов(XML_Текст, Док, СтруктураДолга)
	
	стррРеквизиты = СоответствиеДок[СоответствиеДок["Долг"]]; //СтруктураРеквизитов = СоответствиеДок[СоответствиеДок["Долг"]]; sk_190610 Изменено название переменной	
	
	ВыделятьПросроченныеДолги	= НастройкиОбработки["ВыделятьЦветомПросроченныеДолги"];
	ВыгружатьТолькоПросроченные = НастройкиОбработки["ВыгружатьТолькоПросроченныеДолги"];
	СпособРасчета 				= НастройкиОбработки["СпособРасчетаПросроченныхДолгов"];
	Просрочка	  				= НастройкиОбработки["ИнтервалПросроченныхДолгов"];	
	испТорговыеТочки 			= НастройкиОбработки["ИспользоватьТорговыеТочки"];
	
	//(( sk_190610 Объявляем типы документов ЗаказКлиента/РеализацияТоваровУслуг в рамках (MOD-547)
	ТипДокументЗаказ 	  = Тип("ДокументСсылка.ЗаказПокупателя"); 
	ТипДокументРеализация = Тип("ДокументСсылка.РеализацияТоваровУслуг");
	//)) sk_190610
	
	ВыделятьДокументВМУ = Ложь;	
	НомерДок 	 		= ""; 
	ТекДата      		= НачалоДня(ТекущаяДата());					
	СуммаДолга   		= СтруктураДолга.Долг;  
	Организация  		= СтруктураДолга.Организация;
	Контрагент   		= СтруктураДолга.Контрагент;
	Договор      		= СтруктураДолга.Договор;
	ТоргТочка    		= Справочники.Контрагенты.ПустаяСсылка();	
	
	Если испТорговыеТочки Тогда   						
		Если НЕ Контрагент.Пустая() И Не ЭтоКонтрагент(Контрагент) Тогда
			ТоргТочка = Контрагент;
		КонецЕсли;						
	КонецЕсли;	
	
	Категория	 = СтруктураДолга.Категория;
	Комментарий  = "";
	ДатаВремяДок = ТекДата;											
					
	Если ТипЗнч(Док) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		Комментарий      = "Долг по договору: " + Док.Наименование;
		ПредставлениеДок = Договор.Наименование;
		СрокОплаты 	  	 = ТекДата;   			
	Иначе       		
		НомерДок       	 = СокрЛП(Док.Номер);
		ДатаВремяДок  	 = Док.Дата;
		Комментарий   	 = УбратьНечитаемыеСимволы(Док.Комментарий);		
		ПредставлениеДок = Док.Метаданные().Представление();		
		ДатаОплаты 		 = Док.Метаданные().Реквизиты.Найти("ДатаОплаты");
		
		Если ДатаОплаты = Неопределено Тогда
			Если ЗначениеЗаполнено(Договор) Тогда 						
				СрокОплаты = Док.Дата + (Договор.ДопустимоеЧислоДнейЗадолженности * 86400);
			Иначе
				СрокОплаты = НачалоДня(Док.Дата);
			КонецЕсли;					 	
		Иначе
			СрокОплаты = НачалоДня(Док.ДатаОплаты);
		КонецЕсли;
		
		МетаданныеСумма = Док.Метаданные().Реквизиты.Найти("СуммаДокумента");
		ОкончаниеСтроки = "";
		Если МетаданныеСумма <> Неопределено Тогда
			ОкончаниеСтроки = Строка(Док.СуммаДокумента);
		КонецЕсли;
		
		ПредставлениеДок = ПредставлениеДок + " №" + Док.Номер + " от " + Формат(Док.Дата, "ДФ=dd.MM.yyyy") + " ∑: " + ОкончаниеСтроки;		
		
	КонецЕсли;
	
	ДатаПросрочки = СрокОплаты;
	
	Если ЗначениеЗаполнено(Договор.ДопустимоеЧислоДнейЗадолженности) Тогда 
		Если СпособРасчета = "ПоДоговору" Тогда
			ДатаПросрочки = СрокОплаты + (Договор.ДопустимоеЧислоДнейЗадолженности * 86400);
		Иначе
			ДатаПросрочки = СрокОплаты + (Просрочка * 86400);
		КонецЕсли;
	Иначе
		ДатаПросрочки = СрокОплаты + (Просрочка * 86400);
	КонецЕсли;
	
	Если ВыгружатьТолькоПросроченные Тогда
		Если ТекущаяДата() < ДатаПросрочки Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ДатаПросрочки < ТекущаяДата() И ВыделятьПросроченныеДолги Тогда
		ВыделятьДокументВМУ = Истина;
	КонецЕсли;
	
	//(( sk_190610 В рамках (MOD-547)
	//ТекДокумент = Новый Структура("Дата, ПометкаУдаления, Проведен", ДатаВремяДок, Ложь, Истина);
	ТекДокумент = Новый Структура("Ссылка, Дата, ПометкаУдаления, Проведен", Док, ДатаВремяДок, Ложь, Истина);
	//)) sk_190610
	
	//(( sk_190610 Если тип документа ЗаказКлиента/РеализацияТоваровУслуг, 
	//	 то в поле GUID выгружаем уникальный идентификатор документа 
	//   иначе создаем новый уникальный идентификатор в рамках (MOD-547)
	
	// СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейДокумента(ТекДокумент, Истина, Ложь);
	Если ТипЗнч(Док) = ТипДокументЗаказ ИЛИ ТипЗнч(Док) = ТипДокументРеализация Тогда
		стррПоля = ПолучитьСтруктуруПредопределенныхПолейДокумента(ТекДокумент, Ложь, Ложь);
	Иначе
		стррПоля = ПолучитьСтруктуруПредопределенныхПолейДокумента(ТекДокумент, Истина, Ложь);
	КонецЕсли;
	//)) sk_190610
	
	стррПоля.Вставить("DocNumber", 						  НомерДок);
	стррПоля.Вставить(стррРеквизиты["Категория"],	 	  Категория);
	стррПоля.Вставить(стррРеквизиты["Организация"],	 	  Организация);
	стррПоля.Вставить(стррРеквизиты["Контрагент"],	      Контрагент);
	стррПоля.Вставить(стррРеквизиты["ТорговаяТочка"],	  ТоргТочка);
	стррПоля.Вставить(стррРеквизиты["Договор"],	 		  Договор);
	стррПоля.Вставить(стррРеквизиты["ДатаОплаты"],	 	  СрокОплаты);
	стррПоля.Вставить(стррРеквизиты["Сумма"],	 		  СуммаДолга);
	стррПоля.Вставить(стррРеквизиты["Комментарий"],		  Комментарий);
	стррПоля.Вставить(стррРеквизиты["ДокументОснование"], Док);
	стррПоля.Вставить(стррРеквизиты["Выделять"], 	 	  ВыделятьДокументВМУ);				
	стррПоля.Вставить(стррРеквизиты["Представление"], 	  ПредставлениеДок);		
	
	ЗаписатьЭлементВДокументОбмена(XML_Текст, стррПоля);  	
	
КонецПроцедуры //ВыгрузитьДокументВзаиморасчетов

// sk_190116 Процедура не используется
//
//vd 2017-11-22
Процедура ВыгрузитьВзаиморасчеты_OLD(XML_Текст, сзКлиентыАгента)
	
	ссылкаСвойствоОбъектаКатегория = ПолучитьСсылкуСвойствоОбъектаАгентПлюс("Категория");
	ТекстУсловия = " И Контрагент В ИЕРАРХИИ (&СписокКлиентов)";
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Взаиморасчеты.Организация КАК Организация,
	|	Взаиморасчеты.Контрагент КАК Контрагент,
	|	Взаиморасчеты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Взаиморасчеты.Сделка КАК Сделка,
	|	Взаиморасчеты.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом,
	|	Взаиморасчеты.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Взаиморасчеты.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетовОстаток,
	|	ЗначенияСвойствОбъектов.Значение КАК Категория
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВзаиморасчетыБезГруппировки.Организация КАК Организация,
	|		ВзаиморасчетыБезГруппировки.Контрагент КАК Контрагент,
	|		ВзаиморасчетыБезГруппировки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|		ВзаиморасчетыБезГруппировки.Сделка КАК Сделка,
	|		ВзаиморасчетыБезГруппировки.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом,
	|		ВзаиморасчетыБезГруппировки.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|		СУММА(ВзаиморасчетыБезГруппировки.СуммаВзаиморасчетовОстаток) КАК СуммаВзаиморасчетовОстаток
	|	{ВЫБРАТЬ
	|		Организация.* КАК Организация,
	|		Контрагент.* КАК Контрагент,
	|		ДоговорКонтрагента.* КАК ДоговорКонтрагента,
	|		Контрагент.* КАК Контрагент,
	|		Сделка.* КАК Сделка,
	|		ДокументРасчетовСКонтрагентом.* КАК ДокументРасчетовСКонтрагентом,
	|		ВалютаВзаиморасчетов.* КАК ВалютаВзаиморасчетов}
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.Организация КАК Организация,
	|			ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.Контрагент КАК Контрагент,
	|			ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|			ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.Сделка КАК Сделка,
	|			ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом,
	|			ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|			ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетовОстаток
	|		{ВЫБРАТЬ
	|			Организация.* КАК Организация,
	|			Контрагент.* КАК Контрагент,
	|			ДоговорКонтрагента.* КАК ДоговорКонтрагента,
	|			Контрагент.* КАК Контрагент,
	|			Сделка.* КАК Сделка,
	|			ДокументРасчетовСКонтрагентом.* КАК ДокументРасчетовСКонтрагентом,
	|			ВалютаВзаиморасчетов.* КАК ВалютаВзаиморасчетов}
	|		ИЗ
	|			РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Остатки(&ДатаКон, УпрУчет = ИСТИНА" + ТекстУсловия + ") КАК ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ВзаиморасчетыСКонтрагентамиОстатки.Организация,
	|			ВзаиморасчетыСКонтрагентамиОстатки.Контрагент,
	|			ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента,
	|			ВзаиморасчетыСКонтрагентамиОстатки.Сделка,
	|			НЕОПРЕДЕЛЕНО,
	|			ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов,
	|			ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток
	|		{ВЫБРАТЬ
	|			Организация.* КАК Организация,
	|			Контрагент.* КАК Контрагент,
	|			ДоговорКонтрагента.* КАК ДоговорКонтрагента,
	|			Контрагент.* КАК Контрагент,
	|			Сделка.* КАК Сделка,
	|			ДокументРасчетовСКонтрагентом.* КАК ДокументРасчетовСКонтрагентом,
	|			ВалютаВзаиморасчетов.* КАК ВалютаВзаиморасчетов}
	|		ИЗ
	|			РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ДатаКон, ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом = ИСТИНА" + ТекстУсловия + ") КАК ВзаиморасчетыСКонтрагентамиОстатки
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ВзаиморасчетыСКонтрагентамиОстатки.Организация,
	|			ВзаиморасчетыСКонтрагентамиОстатки.Контрагент,
	|			ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента,
	|			ВзаиморасчетыСКонтрагентамиОстатки.Сделка,
	|			НЕОПРЕДЕЛЕНО,
	|			ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов,
	|			ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток
	|		{ВЫБРАТЬ
	|			Организация.* КАК Организация,
	|			Контрагент.* КАК Контрагент,
	|			ДоговорКонтрагента.* КАК ДоговорКонтрагента,
	|			Контрагент.* КАК Контрагент,
	|			Сделка.* КАК Сделка,
	|			ДокументРасчетовСКонтрагентом.* КАК ДокументРасчетовСКонтрагентом,
	|			ВалютаВзаиморасчетов.* КАК ВалютаВзаиморасчетов}
	|		ИЗ
	|			РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ДатаКон, ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом = ЛОЖЬ" + ТекстУсловия + ") КАК ВзаиморасчетыСКонтрагентамиОстатки) КАК ВзаиморасчетыБезГруппировки
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВзаиморасчетыБезГруппировки.Организация,
	|		ВзаиморасчетыБезГруппировки.Контрагент,
	|		ВзаиморасчетыБезГруппировки.ДоговорКонтрагента,
	|		ВзаиморасчетыБезГруппировки.Сделка,
	|		ВзаиморасчетыБезГруппировки.ДокументРасчетовСКонтрагентом,
	|		ВзаиморасчетыБезГруппировки.ДоговорКонтрагента.ВалютаВзаиморасчетов) КАК Взаиморасчеты
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		(ВЫБРАТЬ 
	|			РегЗначСвойстваОбъектов.Значение,
	|			РегЗначСвойстваОбъектов.Объект
	|		ИЗ РегистрСведений.ЗначенияСвойствОбъектов КАК РегЗначСвойстваОбъектов
	|			)КАК ЗначенияСвойствОбъектов
	|		ПО Взаиморасчеты.Сделка = ЗначенияСвойствОбъектов.Объект
	|ГДЕ
	|	Взаиморасчеты.СуммаВзаиморасчетовОстаток > 0
	|	И Взаиморасчеты.Организация = &Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Взаиморасчеты.Контрагент.Наименование
	|ИТОГИ
	|	СУММА(СуммаВзаиморасчетовОстаток)
	|ПО	
	|	Организация,
	|	Контрагент,
	|	ДоговорКонтрагента,
	|	ДокументРасчетовСКонтрагентом";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДатаКон",     	 		ТекущаяДата());	
	Запрос.УстановитьПараметр("СписокКлиентов",  		сзКлиентыАгента);
	Запрос.УстановитьПараметр("АгентПлюсКатегория",  	ссылкаСвойствоОбъектаКатегория);
	Запрос.УстановитьПараметр("АгентПлюсКатегория",  	ссылкаСвойствоОбъектаКатегория);
	Запрос.УстановитьПараметр("Организация",  			Справочники.Организации.НайтиПоКоду("000000003"));
	
	Результат = Запрос.Выполнить();
	
	ВыборкаОрганизация = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СтруктураРеквизитов = СоответствиеДок[СоответствиеДок["Долг"]];	
	
	СтруктураДолга = Новый Структура("Организация, Контрагент, Договор, Долг, Док, Категория");
	
	XML_Текст.ЗаписатьНачалоЭлемента(эл_Документ);		
	
		XML_Текст.ЗаписатьАтрибут(ат_Гуид, СоответствиеДок["Долг"]);
		
		XML_Текст.ЗаписатьАтрибут(ат_Комментарий, СтруктураРеквизитов["_Представление"]);	
		
		// Удаляем все документы перед загрузкой
		XML_Текст.ЗаписатьАтрибут(ат_ОчиститьПередЗагрузкой, "1");
		
		XML_Текст.ЗаписатьНачалоЭлемента(эл_Элементы);
		
		Пока ВыборкаОрганизация.Следующий() Цикл
			
			Организация = ВыборкаОрганизация.Организация;
			
			СтруктураДолга.Организация = Организация;
			СтруктураДолга.Категория = ВыборкаОрганизация.Категория;
					
			ВыборкаКонтрагент = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаКонтрагент.Следующий() Цикл
				
				#Если Клиент Тогда
					ОбработкаПрерыванияПользователя();
				#КонецЕсли
				
				Контрагент = ВыборкаКонтрагент.Контрагент;			
				
				СтруктураДолга.Контрагент = Контрагент;
				
				ВыборкаДоговор = ВыборкаКонтрагент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				ВыгруженныеДоговора = Новый Массив;
				
				Пока ВыборкаДоговор.Следующий() Цикл
					
					Договор = ВыборкаДоговор.ДоговорКонтрагента;
					
					СтруктураДолга.Договор = Договор;
					
					ВыборкаДок = ВыборкаДоговор.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
										
					Пока ВыборкаДок.Следующий() Цикл
						
						ДокРасчетов = ВыборкаДок.ДокументРасчетовСКонтрагентом;
						
						СтруктураДолга.Долг = ВыборкаДок.СуммаВзаиморасчетовОстаток;
						
						Если ДокРасчетов = Неопределено Тогда // Взаиморасчеты не ведутся по документам расчетов или в регистре нет записи о документ расчетов
							Если ВыгруженныеДоговора.Найти(Договор) <> Неопределено Тогда
								Продолжить;
							КонецЕсли;
							ВыгруженныеДоговора.Добавить(Договор);
							СтруктураДолга.Договор = Договор; 
							Если Договор.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
								ВыгрузитьДокументВзаиморасчетов(XML_Текст, Договор, СтруктураДолга);                                                            								
								//++Ratmir 2017-10-28
								ВыборкаСделка = ВыборкаДок.Выбрать();
								Пока ВыборкаСделка.Следующий() Цикл
									ВыборкаДокРасчета = ВыборкаСделка.Выбрать();
									Пока ВыборкаДокРасчета.Следующий() Цикл
										СтруктураДолга.Долг = ВыборкаДокРасчета.СуммаВзаиморасчетовОстаток;
										ДокРасчета = ВыборкаДокРасчета.ДокументРасчетовСКонтрагентом;
										Если ЗначениеЗаполнено(ДокРасчета) Тогда
											ВыгрузитьДокументВзаиморасчетов(XML_Текст, ДокРасчета, СтруктураДолга);
										Иначе
											ВыгрузитьДокументВзаиморасчетов(XML_Текст, Договор, СтруктураДолга);
										КонецЕсли;
									КонецЦикла;
								КонецЦикла;
								//--Ratmir 2017-10-28
							Иначе // Взаиморасчеты ведутся по сделкам, тогда в качестве кредитных документов выгружаем сделки
								ВыборкаСделка = ВыборкаДок.Выбрать();
								Пока ВыборкаСделка.Следующий() Цикл
									СтруктураДолга.Долг = ВыборкаСделка.СуммаВзаиморасчетовОстаток;
									Сделка = ВыборкаСделка.Сделка;
									Если ЗначениеЗаполнено(Сделка) Тогда
										ВыгрузитьДокументВзаиморасчетов(XML_Текст, Сделка, СтруктураДолга);
									Иначе
										ВыгрузитьДокументВзаиморасчетов(XML_Текст, Договор, СтруктураДолга);
									КонецЕсли;
								КонецЦикла;			
							КонецЕсли;							
						Иначе//Если Договор.ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда         							
							Если ВыгруженныеДоговора.Найти(Договор) <> Неопределено Тогда
								Продолжить;
							КонецЕсли;
							ВыгрузитьДокументВзаиморасчетов(XML_Текст, ДокРасчетов, СтруктураДолга); 	
						КонецЕсли;
 							
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЦикла;  
			
		КонецЦикла;
		
		XML_Текст.ЗаписатьКонецЭлемента();  //ELEMENTS 
	
	XML_Текст.ЗаписатьКонецЭлемента();      //DOCUMENT

КонецПроцедуры //ВыгрузитьВзаиморасчеты_OLD()

Процедура ВыгрузитьВзаиморасчеты(XML_Текст, сзКлиентыАгента)
	
	ссылкаСвойствоОбъектаКатегория = ПолучитьСсылкуСвойствоОбъектаАгентПлюс("Категория");
	ТекстУсловия = " И Контрагент В (&СписокКлиентов)";
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Взаиморасчеты.Организация КАК Организация,
	|	Взаиморасчеты.Контрагент КАК Контрагент,
	|	Взаиморасчеты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Взаиморасчеты.Сделка КАК Сделка,
	|	Взаиморасчеты.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом,
	|	Взаиморасчеты.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Взаиморасчеты.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетовОстаток,
	|	ЗначенияСвойствОбъектов.Значение КАК Категория
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВзаиморасчетыБезГруппировки.Организация КАК Организация,
	|		ВзаиморасчетыБезГруппировки.Контрагент КАК Контрагент,
	|		ВзаиморасчетыБезГруппировки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|		ВзаиморасчетыБезГруппировки.Сделка КАК Сделка,
	|		ВзаиморасчетыБезГруппировки.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом,
	|		ВзаиморасчетыБезГруппировки.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|		СУММА(ВзаиморасчетыБезГруппировки.СуммаВзаиморасчетовОстаток) КАК СуммаВзаиморасчетовОстаток
	|	{ВЫБРАТЬ
	|		Организация.* КАК Организация,
	|		Контрагент.* КАК Контрагент,
	|		ДоговорКонтрагента.* КАК ДоговорКонтрагента,
	|		Контрагент.* КАК Контрагент,
	|		Сделка.* КАК Сделка,
	|		ДокументРасчетовСКонтрагентом.* КАК ДокументРасчетовСКонтрагентом,
	|		ВалютаВзаиморасчетов.* КАК ВалютаВзаиморасчетов}
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.Организация КАК Организация,
	|			ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.Контрагент КАК Контрагент,
	|			ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|			ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.Сделка КАК Сделка,
	|			ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом,
	|			ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|			ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетовОстаток
	|		{ВЫБРАТЬ
	|			Организация.* КАК Организация,
	|			Контрагент.* КАК Контрагент,
	|			ДоговорКонтрагента.* КАК ДоговорКонтрагента,
	|			Контрагент.* КАК Контрагент,
	|			Сделка.* КАК Сделка,
	|			ДокументРасчетовСКонтрагентом.* КАК ДокументРасчетовСКонтрагентом,
	|			ВалютаВзаиморасчетов.* КАК ВалютаВзаиморасчетов}
	|		ИЗ
	|			РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Остатки(&ДатаКон, УпрУчет = ИСТИНА" + ТекстУсловия + ") КАК ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ВзаиморасчетыСКонтрагентамиОстатки.Организация,
	|			ВзаиморасчетыСКонтрагентамиОстатки.Контрагент,
	|			ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента,
	|			ВзаиморасчетыСКонтрагентамиОстатки.Сделка,
	|			НЕОПРЕДЕЛЕНО,
	|			ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов,
	|			ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток
	|		{ВЫБРАТЬ
	|			Организация.* КАК Организация,
	|			Контрагент.* КАК Контрагент,
	|			ДоговорКонтрагента.* КАК ДоговорКонтрагента,
	|			Контрагент.* КАК Контрагент,
	|			Сделка.* КАК Сделка,
	|			ДокументРасчетовСКонтрагентом.* КАК ДокументРасчетовСКонтрагентом,
	|			ВалютаВзаиморасчетов.* КАК ВалютаВзаиморасчетов}
	|		ИЗ
	|			РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ДатаКон, ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом = ИСТИНА" + ТекстУсловия + ") КАК ВзаиморасчетыСКонтрагентамиОстатки
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ВзаиморасчетыСКонтрагентамиОстатки.Организация,
	|			ВзаиморасчетыСКонтрагентамиОстатки.Контрагент,
	|			ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента,
	|			ВзаиморасчетыСКонтрагентамиОстатки.Сделка,
	|			НЕОПРЕДЕЛЕНО,
	|			ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов,
	|			ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток
	|		{ВЫБРАТЬ
	|			Организация.* КАК Организация,
	|			Контрагент.* КАК Контрагент,
	|			ДоговорКонтрагента.* КАК ДоговорКонтрагента,
	|			Контрагент.* КАК Контрагент,
	|			Сделка.* КАК Сделка,
	|			ДокументРасчетовСКонтрагентом.* КАК ДокументРасчетовСКонтрагентом,
	|			ВалютаВзаиморасчетов.* КАК ВалютаВзаиморасчетов}
	|		ИЗ
	|			РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ДатаКон, ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом = ЛОЖЬ" + ТекстУсловия + ") КАК ВзаиморасчетыСКонтрагентамиОстатки) КАК ВзаиморасчетыБезГруппировки
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВзаиморасчетыБезГруппировки.Организация,
	|		ВзаиморасчетыБезГруппировки.Контрагент,
	|		ВзаиморасчетыБезГруппировки.ДоговорКонтрагента,
	|		ВзаиморасчетыБезГруппировки.Сделка,
	|		ВзаиморасчетыБезГруппировки.ДокументРасчетовСКонтрагентом,
	|		ВзаиморасчетыБезГруппировки.ДоговорКонтрагента.ВалютаВзаиморасчетов) КАК Взаиморасчеты
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		(ВЫБРАТЬ 
	|			РегЗначСвойстваОбъектов.Значение,
	|			РегЗначСвойстваОбъектов.Объект
	|		ИЗ РегистрСведений.ЗначенияСвойствОбъектов КАК РегЗначСвойстваОбъектов
	|		ГДЕ РегЗначСвойстваОбъектов.Свойство = &АгентПлюсКатегория) КАК ЗначенияСвойствОбъектов
	|		ПО Взаиморасчеты.Сделка = ЗначенияСвойствОбъектов.Объект
	|ГДЕ
	|	Взаиморасчеты.СуммаВзаиморасчетовОстаток > 0
//	|	И Взаиморасчеты.Организация = &Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Взаиморасчеты.Контрагент.Наименование
	|ИТОГИ
	|	СУММА(СуммаВзаиморасчетовОстаток)
	|ПО	
	|	Организация,
	|	Контрагент,
	|	ДоговорКонтрагента,
	|	ДокументРасчетовСКонтрагентом";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДатаКон",     	 		ТекущаяДата());	
	Запрос.УстановитьПараметр("СписокКлиентов",  		сзКлиентыАгента);
	Запрос.УстановитьПараметр("АгентПлюсКатегория",  	ссылкаСвойствоОбъектаКатегория);
	//Ratmir 2017-12-19 В случае если надо считать по одной организации
	//	Запрос.УстановитьПараметр("Организация",  			Справочники.Организации.НайтиПоКоду("000000003"));
	
	Результат = Запрос.Выполнить();
	
	// ТестРезультат = Запрос.Выполнить().Выгрузить(); // sk_190610
	
	ВыборкаОрганизация = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СтруктураРеквизитов = СоответствиеДок[СоответствиеДок["Долг"]];	
	
	СтруктураДолга = Новый Структура("Организация, Контрагент, Договор, Долг, Док, Категория, ЕстьПодчиненные");
	
	XML_Текст.ЗаписатьНачалоЭлемента(эл_Документ);		
	
		XML_Текст.ЗаписатьАтрибут(ат_Гуид, СоответствиеДок["Долг"]);
		
		XML_Текст.ЗаписатьАтрибут(ат_Комментарий, СтруктураРеквизитов["_Представление"]);	
		
		// Удаляем все документы перед загрузкой
		XML_Текст.ЗаписатьАтрибут(ат_ОчиститьПередЗагрузкой, "1");
		
		XML_Текст.ЗаписатьНачалоЭлемента(эл_Элементы);
		
		Пока ВыборкаОрганизация.Следующий() Цикл
			
			Организация = ВыборкаОрганизация.Организация;
			
			СтруктураДолга.Организация = Организация;
			СтруктураДолга.Категория = ВыборкаОрганизация.Категория;
					
			ВыборкаКонтрагент = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаКонтрагент.Следующий() Цикл
				
				#Если Клиент Тогда
					ОбработкаПрерыванияПользователя();
				#КонецЕсли
				
				Контрагент = ВыборкаКонтрагент.Контрагент;			
				
				СтруктураДолга.Контрагент = Контрагент;
				
				ВыборкаДоговор = ВыборкаКонтрагент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				//{{ vd_171109 ВестиПоДокументамРасчетовСКонтрагентом  
				
				ВыгруженныеДоговора = Новый Массив; //УДАЛИТЬ
				
				Пока ВыборкаДоговор.Следующий() Цикл
					Договор = ВыборкаДоговор.ДоговорКонтрагента;
					СтруктураДолга.Договор = Договор;
										
					//Выгружаем Документы Долг по договору
					Если Договор.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом 
					   И Договор.ВестиПоДокументамРасчетовСКонтрагентом = Истина 
					Тогда
						СтруктураДолга.Долг = ВыборкаДоговор.СуммаВзаиморасчетовОстаток;
						СтруктураДолга.ЕстьПодчиненные = 1;
						//Ratmir 2017-12-19 //Отключаем выгрузку договоровов в случае если ведется Вз по документам расчетов
						//ВыгрузитьДокументВзаиморасчетов(XML_Текст, Договор, СтруктураДолга);		
						//Ratmir 2017-12-19
					ИначеЕсли Договор.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
						СтруктураДолга.Долг = ВыборкаДоговор.СуммаВзаиморасчетовОстаток;
						СтруктураДолга.ЕстьПодчиненные = 0;
						ВыгрузитьДокументВзаиморасчетов(XML_Текст, Договор, СтруктураДолга);		
						Продолжить;
					КонецЕсли;
					
					СтруктураДолга.ЕстьПодчиненные = 0;
					
					ВыборкаДок = ВыборкаДоговор.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					
					Пока ВыборкаДок.Следующий() Цикл
						
						ВыборкаСделка = ВыборкаДок.Выбрать();
						
						Пока ВыборкаСделка.Следующий() Цикл
							СтруктураДолга.Долг = ВыборкаСделка.СуммаВзаиморасчетовОстаток;
							Сделка = ВыборкаСделка.Сделка;
							Если Сделка = Неопределено Тогда  //продажа была без сделки, по документу
								Сделка = ВыборкаСделка.ДокументРасчетовСКонтрагентом;
								Если Сделка = Неопределено Тогда
									Продолжить;
								КонецЕсли;
							КонецЕсли;								
							ВыгрузитьДокументВзаиморасчетов(XML_Текст, Сделка, СтруктураДолга);
						КонецЦикла;
						
					КонецЦикла;
					
				КонецЦикла;
				
				//Замена
				//ВыгруженныеДоговора = Новый Массив;
				//
				//Пока ВыборкаДоговор.Следующий() Цикл
				//	
				//	Договор = ВыборкаДоговор.ДоговорКонтрагента;
				//	
				//	СтруктураДолга.Договор = Договор;
				//	
				//	ВыборкаДок = ВыборкаДоговор.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				//						
				//	Пока ВыборкаДок.Следующий() Цикл
				//		
				//		ДокРасчетов = ВыборкаДок.ДокументРасчетовСКонтрагентом;
				//		
				//		СтруктураДолга.Долг = ВыборкаДок.СуммаВзаиморасчетовОстаток;
				//		
				//		Если ДокРасчетов = Неопределено Тогда // Взаиморасчеты не ведутся по документам расчетов или в регистре нет записи о документ расчетов
				//			
				//			Если ВыгруженныеДоговора.Найти(Договор) <> Неопределено Тогда
				//				Продолжить;
				//			КонецЕсли;
				//			ВыгруженныеДоговора.Добавить(Договор);
				//			СтруктураДолга.Договор = Договор; 
				//			Если Договор.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
				//				ВыгрузитьДокументВзаиморасчетов(XML_Текст, Договор, СтруктураДолга);                                                            								
				//			Иначе // Взаиморасчеты ведутся по сделкам, тогда в качестве кредитных документов выгружаем сделки
				//				ВыборкаСделка = ВыборкаДок.Выбрать();
				//				Пока ВыборкаСделка.Следующий() Цикл
				//					СтруктураДолга.Долг = ВыборкаСделка.СуммаВзаиморасчетовОстаток;
				//					Сделка = ВыборкаСделка.Сделка;
				//					Если ЗначениеЗаполнено(Сделка) Тогда
				//						ВыгрузитьДокументВзаиморасчетов(XML_Текст, Сделка, СтруктураДолга);
				//					Иначе
				//						ВыгрузитьДокументВзаиморасчетов(XML_Текст, Договор, СтруктураДолга);
				//					КонецЕсли;
				//				КонецЦикла;			
				//			КонецЕсли;
				//			
				//		Иначе//Если Договор.ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда         							
				//			Если ВыгруженныеДоговора.Найти(Договор) <> Неопределено Тогда
				//				Продолжить;
				//			КонецЕсли;
				//			ВыгрузитьДокументВзаиморасчетов(XML_Текст, ДокРасчетов, СтруктураДолга); 	
				//		КонецЕсли;
				//		
				//	КонецЦикла;
				//	
				//КонецЦикла;
				//}} vd_171109
				
			КонецЦикла;  
			
		КонецЦикла;
		
		XML_Текст.ЗаписатьКонецЭлемента();  //ELEMENTS 
	
	XML_Текст.ЗаписатьКонецЭлемента();      //DOCUMENT

КонецПроцедуры //ВыгрузкаВзаиморасчетов()
//vd 2017-11-22

Процедура ВыгрузитьЗаказыПокупателей(XML_Текст, ДанныеАгента, ТзКатегорииЦен, СписНеНайденныхТиповЦен);
	
	Агент = ДанныеАгента["Пользователь"];
	текДата = ТекущаяДата();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Заказ.Ссылка КАК Док,
	|	ЗначенияСвойствОбъектов.Значение КАК Категория
	|ИЗ
	|	Документ.ЗаказПокупателя КАК Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			(ВЫБРАТЬ 
	|				Регистр.Значение,
	|				Регистр.Объект
	|			ИЗ РегистрСведений.ЗначенияСвойствОбъектов КАК Регистр
	//|			ГДЕ Регистр.Свойство = &АгентПлюсКатегория
	|) КАК ЗначенияСвойствОбъектов
	|		ПО Заказ.Ссылка = ЗначенияСвойствОбъектов.Объект
	|ГДЕ
	|	Заказ.ПометкаУдаления=ЛОЖЬ
	|	И Заказ.Дата МЕЖДУ &НачПериода И &КонПериода
	|	И Заказ.Ответственный = &Агент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Заказ.МоментВремени";	
	
	ИнтервалВыгрузкиЗаказов = НастройкиОбработки["ИнтервалВыгрузкиЗаказов"];
	ИнтервалВыгрузкиЗаказов = ?(ИнтервалВыгрузкиЗаказов = Неопределено, НастройкиОбработки["ИнтервалВыгрузкиЗаказов"], ИнтервалВыгрузкиЗаказов);
	
	Запрос = Новый Запрос(ТекстЗапроса);
		
	Запрос.УстановитьПараметр("НачПериода", текДата - (86400 * ИнтервалВыгрузкиЗаказов));
	Запрос.УстановитьПараметр("КонПериода", текДата);
	Запрос.УстановитьПараметр("Агент", 	    Агент);
	Запрос.УстановитьПараметр("АгентПлюсКатегория", ПолучитьСсылкуСвойствоОбъектаАгентПлюс("Категория"));
	
	ВыборкаДок = Запрос.Выполнить().Выбрать();
	
	стррРеквизиты = СоответствиеДок[СоответствиеДок["ЗаказПокупателя"]]; // СтруктураРеквизитов = СоответствиеДок[СоответствиеДок["ЗаказПокупателя"]]; sk_190516 Изменено название переменной  
	стррТЧ = стррРеквизиты[стррРеквизиты["ТчТовары"]]; // структураТЧ = стррРеквизиты[стррРеквизиты["ТчТовары"] sk_190516 Изменено название переменной
	
	//XML_Текст.ЗаписатьКомментарий(СтруктураРеквизитов["ИмяСправочника"]);		
	XML_Текст.ЗаписатьНачалоЭлемента(эл_Документ);		
		
		XML_Текст.ЗаписатьАтрибут(ат_Гуид, СоответствиеДок["ЗаказПокупателя"]);
		
		Если флОчищатьДокументыПередЗагрузкой И СписокОчищаемыхДокументов.НайтиПоЗначению("Заказ") <> Неопределено И
				ВидОчисткиДокументов = 1 Тогда  		// очищать все документы
			XML_Текст.ЗаписатьАтрибут(ат_ОчиститьПередЗагрузкой, "1");
		КонецЕсли;
		
		XML_Текст.ЗаписатьАтрибут(ат_Комментарий, стррРеквизиты["_Представление"]);	
		
		XML_Текст.ЗаписатьНачалоЭлемента(эл_Элементы);
		
			Пока ВыборкаДок.Следующий() Цикл  
				
				#Если Клиент Тогда
					ОбработкаПрерыванияПользователя();
				#КонецЕсли
				
				Док = ВыборкаДок.Док;
				
				КодТипаЦены = ПолучитьКодТипаЦены(ДанныеАгента, Док.ТипЦен, Док, ТзКатегорииЦен, СписНеНайденныхТиповЦен);
				
				стррПоля = ПолучитьСтруктуруПредопределенныхПолейДокумента(Док); // СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейДокумента(Док); sk_190516 Изменено название переменной 
				
				ОбщийВес = 0;
				Для Каждого СтрокаТаб Из Док.Товары Цикл 
					ОбщийВес = ОбщийВес + СтрокаТаб.ЕдиницаИзмерения.Вес*СтрокаТаб.Количество;
				КонецЦикла;
				
				стррПоля.Вставить(стррРеквизиты["Организация"],  	 	  		  Док.Организация);
				
				Если ИспользоватьТорговыеТочки Тогда
					Если ЭтоКонтрагент(Док.Контрагент) Тогда
						 стррПоля.Вставить(стррРеквизиты["Контрагент"],  	 	  Док.Контрагент);
					Иначе
						 стррПоля.Вставить(стррРеквизиты["Контрагент"],  	 	  Док.Контрагент.ГоловнойКонтрагент);
						 стррПоля.Вставить(стррРеквизиты["ТорговаяТочка"],   	  Док.Контрагент);
					 КонецЕсли;
				Иначе
					 стррПоля.Вставить(стррРеквизиты["Контрагент"],  	 		  Док.Контрагент);
				КонецЕсли;
				
				стррПоля.Вставить(стррРеквизиты["ДоговорКонтрагента"],   		  Док.ДоговорКонтрагента);
				Если Не ПустаяСтрока(КодТипаЦены) Тогда
					стррПоля.Вставить(стррРеквизиты["ТипЦен"],  	 			  Док.ТипЦен);
				КонецЕсли;
				стррПоля.Вставить(стррРеквизиты["СуммаДокумента"],  			  Док.СуммаДокумента);
				стррПоля.Вставить(стррРеквизиты["ОбщийВес"],  	 				  ОбщийВес);
				стррПоля.Вставить(стррРеквизиты["ДатаОтгрузки"],  				  Док.ДатаОтгрузки);
				стррПоля.Вставить(стррРеквизиты["Комментарий"],  				  Док.Комментарий);
				стррПоля.Вставить(стррРеквизиты["Категория"],  	 				  ВыборкаДок.Категория);
				ЗаписьРег = ПолучитьЗаписьРегистраЗначениеСвойстваОбъекта(ПолучитьСсылкуСвойствоОбъектаАгентПлюс("GPS"), Док);
				Если ЗаписьРег.Выбран() Тогда
					координатыGPS = ИзСтрокиВМассив(ЗаписьРег.Значение, Имена["СимволРазделительGPS"]);	
					Если координатыGPS <> Неопределено Тогда						
						//%
						Если координатыGPS.Количество() >= 2 Тогда
							стррПоля.Вставить(стррРеквизиты["Широта"],  	 	   координатыGPS[0]);
							стррПоля.Вставить(стррРеквизиты["Долгота"],  	 	   координатыGPS[1]);
							Если координатыGPS.Количество() = 3 Тогда
								стррПоля.Вставить(стррРеквизиты["ДатаТочкиТрека"], координатыGPS[2]);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
								
				Если Док.Товары.Количество() + Док.Услуги.Количество() > 0 Тогда 
				
					// Во втором параметре передается Ложь - это означает,
					// что не закрывает тег "Item", его закрытие производится ниже		
					ЗаписатьЭлементВДокументОбмена(XML_Текст, стррПоля, Ложь);
					
					XML_Текст.ЗаписатьНачалоЭлемента(эл_ТабличныеЧасти);					
						
						XML_Текст.ЗаписатьНачалоЭлемента(эл_ТабличнаяЧасть);
					
						XML_Текст.ЗаписатьАтрибут(ат_Гуид, стррРеквизиты["ТчТовары"]);
						
						Для Каждого СтрокаТаб Из Док.Товары	Цикл				
							стррСтрокаТЧ = Новый Структура;
							стррСтрокаТЧ.Вставить(ат_Гуид, 	 							Новый УникальныйИдентификатор());
							стррСтрокаТЧ.Вставить(ат_ИдетификаторДокумента, 			Док);
							стррСтрокаТЧ.Вставить(стррТЧ["Номенклатура"],   			СтрокаТаб.Номенклатура);
							стррСтрокаТЧ.Вставить(стррТЧ["ХарактеристикаНоменклатуры"], СтрокаТаб.ХарактеристикаНоменклатуры);
							стррСтрокаТЧ.Вставить(стррТЧ["ЕдиницаИзмерения"],   		СтрокаТаб.ЕдиницаИзмерения);
							стррСтрокаТЧ.Вставить(стррТЧ["Количество"],   				СтрокаТаб.Количество);
							стррСтрокаТЧ.Вставить(стррТЧ["Цена"],   					СтрокаТаб.Цена*СтрокаТаб.ЕдиницаИзмерения.Коэффициент);
							стррСтрокаТЧ.Вставить(стррТЧ["Сумма"],   					СтрокаТаб.Сумма);
							стррСтрокаТЧ.Вставить(стррТЧ["СуммаНДС"],   				СтрокаТаб.СуммаНДС);
							стррСтрокаТЧ.Вставить(стррТЧ["Вес"],   						СтрокаТаб.ЕдиницаИзмерения.Вес*СтрокаТаб.Количество);
							//++Ratmir 2017-11-18
							Попытка
								стррСтрокаТЧ.Вставить(стррТЧ["ПроцентСкидкиНаценки"],   СтрокаТаб.ПроцентСкидкиНаценки + СтрокаТаб.ПроцентАвтоматическихСкидок);
							Исключение
								стррСтрокаТЧ.Вставить(стррТЧ["ПроцентСкидкиНаценки"],   СтрокаТаб.ПроцентСкидкиНаценки);
							КонецПопытки;
							//--Ratmir 2017-11-18
							
							Если НаименованиеКонфигурации = "УправлениеТорговымПредприятиемДляКазахстана" Тогда 
								стррСтрокаТЧ.Вставить(стррТЧ["СтавкаНДС"], 				Вычислить("УчетНДСИАкциза.ПолучитьСтавкуНДС(СтрокаТаб.СтавкаНДС)"));
							Иначе
								стррСтрокаТЧ.Вставить(стррТЧ["СтавкаНДС"], 				Вычислить("УчетНДС.ПолучитьСтавкуНДС(СтрокаТаб.СтавкаНДС)"));
							КонецЕсли;
														
							//(( sk_190516 В рамках (MOD-520)
							стррСтрокаТЧ.Вставить(стррТЧ["СуммаСкидки"],  			    (СтрокаТаб.Количество*СтрокаТаб.Цена) - СтрокаТаб.Сумма);
							//)) sk_190516
							
							Если ТипЗнч(СтрокаТаб.Размещение) = Тип("СправочникСсылка.Склады") Тогда
								стррСтрокаТЧ.Вставить(стррТЧ["Размещение"],  			СтрокаТаб.Размещение);
							КонецЕсли;    
							ЗаписатьЭлементВДокументОбмена(XML_Текст, стррСтрокаТЧ);
						КонецЦикла;
						
						Для Каждого СтрокаТаб Из Док.Услуги	Цикл				
							стррСтрокаТЧ = Новый Структура;
							стррСтрокаТЧ.Вставить(ат_Гуид,  						    Новый УникальныйИдентификатор());
							стррСтрокаТЧ.Вставить(ат_ИдетификаторДокумента, 		    Док);
							стррСтрокаТЧ.Вставить(стррТЧ["Номенклатура"],   		    СтрокаТаб.Номенклатура);														
							стррСтрокаТЧ.Вставить(стррТЧ["Количество"],  		 	    СтрокаТаб.Количество);
							стррСтрокаТЧ.Вставить(стррТЧ["Цена"],   				    СтрокаТаб.Цена);
							стррСтрокаТЧ.Вставить(стррТЧ["Сумма"],   				    СтрокаТаб.Сумма);
							стррСтрокаТЧ.Вставить(стррТЧ["СуммаНДС"],   			    СтрокаТаб.СуммаНДС);							
							//++Ratmir 2017-11-18
							Попытка
								стррСтрокаТЧ.Вставить(стррТЧ["ПроцентСкидкиНаценки"],   СтрокаТаб.ПроцентСкидкиНаценки + СтрокаТаб.ПроцентАвтоматическихСкидок);
							Исключение
								стррСтрокаТЧ.Вставить(стррТЧ["ПроцентСкидкиНаценки"],   СтрокаТаб.ПроцентСкидкиНаценки);
							КонецПопытки;
																					
							//(( sk_190516 В рамках (MOD-520)
							стррСтрокаТЧ.Вставить(стррТЧ["СуммаСкидки"],  			    (СтрокаТаб.Количество*СтрокаТаб.Цена) - СтрокаТаб.Сумма);
							//)) sk_190516

							//--Ratmir 2017-11-18
							//СтруктураПолей.Вставить(структураТЧ["СтавкаНДС"],  УчетНДС.ПолучитьСтавкуНДС(СтрокаТаб.СтавкаНДС));							
							
							Если НаименованиеКонфигурации = "УправлениеТорговымПредприятиемДляКазахстана" Тогда 
								стррСтрокаТЧ.Вставить(стррТЧ["СтавкаНДС"], 			    Вычислить("УчетНДСИАкциза.ПолучитьСтавкуНДС(СтрокаТаб.СтавкаНДС)"));
							Иначе
								стррСтрокаТЧ.Вставить(стррТЧ["СтавкаНДС"], 			    Вычислить("УчетНДС.ПолучитьСтавкуНДС(СтрокаТаб.СтавкаНДС)"));
							КонецЕсли;

							
							ЗаписатьЭлементВДокументОбмена(XML_Текст, стррСтрокаТЧ);			
						КонецЦикла;
						
						XML_Текст.ЗаписатьКонецЭлемента();  //TABLE
									
					XML_Текст.ЗаписатьКонецЭлемента();  //TABLES
				
					// Закрыаем тег ITEM, который был открыт при вызове
					// процедуры "ЗаписатьЭлементВДокументОбмена"
					XML_Текст.ЗаписатьКонецЭлемента();  //ITEM
					
				Иначе
					
					ЗаписатьЭлементВДокументОбмена(XML_Текст, стррПоля);
					
				КонецЕсли;
			
			КонецЦикла;
			
		XML_Текст.ЗаписатьКонецЭлемента();  // ELEMENTS
		
		Если флОчищатьДокументыПередЗагрузкой И СписокОчищаемыхДокументов.НайтиПоЗначению("Заказ") <> Неопределено И
				ВидОчисткиДокументов = 2 Тогда  		// Не удалять документы за последние ... дней	
				
			XML_Текст.ЗаписатьНачалоЭлемента(эл_Удалить);  // KILLEDS
				
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	Заказ.Ссылка
			|ИЗ
			|	Документ.ЗаказПокупателя КАК Заказ
			|ГДЕ
			|	Заказ.Дата МЕЖДУ &НачПериода И &КонПериода
			|	И Заказ.Ответственный = &Агент
			|";
			
	        начПериода = НачалоДня(текДата - (86400 * МаксИнтервалОчищаемыхДокументов));
			конПериода = КонецДня(начПериода + 86400 * (МаксИнтервалОчищаемыхДокументов - ИнтервалСохранностиДокументов));
			
			Запрос.УстановитьПараметр("НачПериода", начПериода);
			Запрос.УстановитьПараметр("КонПериода", конПериода);
			Запрос.УстановитьПараметр("Агент", 	    Агент);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				XML_Текст.ЗаписатьНачалоЭлемента(эл_Элемент);	//ITEM
				XML_Текст.ЗаписатьАтрибут(ат_Гуид, ПреобразоватьЗначениеВСтрокуДляXML(Выборка.Ссылка));				
				XML_Текст.ЗаписатьКонецЭлемента(); 				//ITEM
			КонецЦикла;
			
			XML_Текст.ЗаписатьКонецЭлемента();  // KILLEDS
					
		КонецЕсли;
		
	XML_Текст.ЗаписатьКонецЭлемента();      // DOCUMENT
	
КонецПроцедуры //ВыгрузитьЗаказыПокупателей

// sk_190306 Процедура изменена в рамках (MOD-280)
// Выполняет выгрузку маршрутов агента
//
Процедура ВыгрузитьМаршрутыАгента(XML_Текст, Агент, ДанныеАгента, ПланПосещений) Экспорт
	
	//(( sk_190306
	//ВидИспользуемыхМаршрутов = НастройкиОбработки["ВидИспользуемыхМаршрутов"];
	//Если ВидИспользуемыхМаршрутов=1 Тогда
	//	группаСобытия = ПолучитьГруппуСобытия("ЦиклическийМаршрут");
	//Иначе
	//	группаСобытия = ПолучитьГруппуСобытия("Маршрут");
	//КонецЕсли;
	
	группаСобытия = ПолучитьГруппуСобытияПоВидуМаршрута();
	//)) sk_190306
	
	СтруктураРеквизитов = СоответствиеДок[СоответствиеДок["Маршрут"]];
	
	структураТЧ = СтруктураРеквизитов[СтруктураРеквизитов["ТчТочкиМаршрута"]];
	
	//XML_Текст.ЗаписатьКомментарий(СтруктураРеквизитов["ИмяСправочника"]);		
	XML_Текст.ЗаписатьНачалоЭлемента(эл_Документ);		
		
	XML_Текст.ЗаписатьАтрибут(ат_Гуид, СоответствиеДок["Маршрут"]);						
			
	// Очищаем все маршруты перед загрузкой их в БД МУ
	XML_Текст.ЗаписатьАтрибут(ат_ОчиститьПередЗагрузкой, "1");	
	XML_Текст.ЗаписатьАтрибут(ат_Комментарий, СтруктураРеквизитов["_Представление"]);	
	
	XML_Текст.ЗаписатьНачалоЭлемента(эл_Элементы);
	
	РаботаСМаршрутами = ?(ДанныеАгента["РаботаСМаршрутами"] = Неопределено, Ложь, ДанныеАгента["РаботаСМаршрутами"]);		
	
	Если Не РаботаСМаршрутами Тогда
		XML_Текст.ЗаписатьКонецЭлемента();  //ELEMENTS 	
		XML_Текст.ЗаписатьКонецЭлемента();  //CATALOG
		Возврат;
	КонецЕсли;
	
	//(( sk_190306
	//Если Не ПланПосещений = Неопределено Тогда	
	//	СписокДокументовИзНастроек = ПолучитьЗначениеНастройки("ПланированиеАгентов", "ТаблицаЗначений");
	//	списокСтрок = СписокДокументовИзНастроек.НайтиСтроки(Новый Структура("Дата, Агент", ПланПосещений.Дата, ПланПосещений.Ответственный));
	//	
	//	Если списокСтрок.Количество() > 0 Тогда
	//		допНастройкиПосещения = списокСтрок[0];
	//		ИнтервалПланирования = допНастройкиПосещения["ИнтервалПланирования"];
	//	Иначе
	//		ИнтервалПланирования = -1;
	//	КонецЕсли;
	//	
	//	//ИнтервалПланирования = НастройкиОбработки["ИнтервалПланирования"];
	//	//ИнтервалПланирования = ?(ИнтервалПланирования = Неопределено, НастройкиОбработкиПоУмолчанию["ИнтервалПланирования"], ИнтервалПланирования);
	//	ДатаНачала = НачалоДня(ПланПосещений.Дата);
	//	Если ИнтервалПланирования = -1 Тогда   //месяц
	//		ДатаОкончания = КонецДня(ДобавитьМесяц(ДатаНачала, 1));
	//	Иначе
	//		ДатаОкончания = КонецДня(ДатаНачала + (ИнтервалПланирования - 1)*86400);
	//	КонецЕсли;
	//	
	//	//для циклических маршрутов план выгружаем на ближайшие 7 дней
	//	////ИнтервалВыгрузкиЦиклическогоПлана = 7;
	//	////Если ВидИспользуемыхМаршрутов=1 Тогда
	//	////	ДатаОкончания = КонецДня(ДатаОкончания) + ИнтервалВыгрузкиЦиклическогоПлана*86400;	
	//	////КонецЕсли;
	//Иначе
	//	ДатаНачала    = НачалоМесяца(ТекущаяДата());
	//	ДатаОкончания = КонецМесяца(ТекущаяДата());
	//КонецЕсли;
	//
	//ТекДата = КонецДня(ДатаНачала);
	//СтруктураОтбора = Новый Структура;
	//СтруктураОтбора.Вставить("Ответственный", Агент);
	//СтруктураОтбора.Вставить("ГруппаСобытия", группаСобытия);
	//
	//ДоступностьПорядок = (Документы.Событие.ПустаяСсылка().Метаданные().Реквизиты.Найти("УдалитьИнтервалНапоминания") <> Неопределено);
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	Событие.НачалоСобытия КАК ДатаМаршрута,				   
	//			   |	ГОД(Событие.НачалоСобытия) КАК Год,
	//			   |	МЕСЯЦ(Событие.НачалоСобытия) КАК Месяц,
	//			   |	ДЕНЬ(Событие.НачалоСобытия) КАК День,
	//			   |	ЧАС(Событие.НачалоСобытия) КАК Час,
	//			   |	МИНУТА(Событие.НачалоСобытия) КАК Минута,
	//			   |	СЕКУНДА(Событие.НачалоСобытия) КАК Секунда,
	//               |	Событие.Комментарий,
	//               |	Событие.Дата,
	//               |	Событие.Контрагент,
	//			   |	" + ?(ДоступностьПорядок, "Событие.УдалитьИнтервалНапоминания КАК Порядок,", "") + "
	//               |	Событие.Ссылка
	//               |ИЗ
	//               |	Документ.Событие КАК Событие
	//               |ГДЕ
	//               |	Событие.Ответственный = &Ответственный
	//               |	И Событие.ГруппаСобытия = &ГруппаСобытия
	//               |	И Событие.ПометкаУдаления = ЛОЖЬ
	//               |
	//               |УПОРЯДОЧИТЬ ПО
	//               |	Год, Месяц, День, " + ?(ДоступностьПорядок, "Порядок", "Час, Минута, Секунда");
	//			   
	//Запрос.УстановитьПараметр("Ответственный", Агент);
	//Запрос.УстановитьПараметр("ГруппаСобытия", группаСобытия);
	//Выборка = Запрос.Выполнить().Выбрать();
	//
	////для циклических маршрутов
	//Смещение = 0;
	//Если ВидИспользуемыхМаршрутов = 1 Тогда
	//	Если ИнтервалПланирования = -1 Тогда //месяц
	//		РазмерИнтервалаПланаПосещений = КонецМесяца(ПланПосещений.Дата)-КонецДня(ПланПосещений.Дата)/86400;
	//	Иначе
	//		РазмерИнтервалаПланаПосещений = ИнтервалПланирования;
	//	КонецЕсли;
	//	
	//	КоличествоИнтерваловМеждуДатами = Цел((КонецДня(ТекущаяДата())-ТекДата)/86400/РазмерИнтервалаПланаПосещений);
	//	
	//	СмещениеДней = КоличествоИнтерваловМеждуДатами*РазмерИнтервалаПланаПосещений;
	//КонецЕсли;	
	//
	//Если Выборка.Следующий() Тогда
	//	
	//	Пока ТекДата <= ДатаОкончания Цикл			
	//		
	//		#Если Клиент Тогда
	//			ОбработкаПрерыванияПользователя();
	//		#КонецЕсли 			
	//		
	//		Если Выборка.ДатаМаршрута > ТекДата Тогда
	//			ТекДата = ТекДата + 86400;
	//			Продолжить;
	//		КонецЕсли;			
	//		
	//		Если ВидИспользуемыхМаршрутов=1 Тогда
	//			ТекМаршрут = Новый Структура("Ссылка, Дата, ПометкаУдаления, Проведен", Выборка.Ссылка, НачалоДня(ТекДата)+СмещениеДней*86400, Ложь, Истина);
	//		Иначе
	//			ТекМаршрут = Новый Структура("Ссылка, Дата, ПометкаУдаления, Проведен", Выборка.Ссылка, НачалоДня(ТекДата), Ложь, Истина);
	//		КонецЕсли;
	//		СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейДокумента(ТекМаршрут, Ложь, Ложь);
	//		идДокМаршрута = Выборка.Ссылка.УникальныйИдентификатор();
	//			
	//		ЗаписатьЭлементВДокументОбмена(XML_Текст, СтруктураПолей, Ложь);
	//		// Заполняем табличные части справочника
	//		XML_Текст.ЗаписатьНачалоЭлемента(эл_ТабличныеЧасти);
	//		
	//		// Заполняем табличную часть контрагентов маршрута		
	//		XML_Текст.ЗаписатьНачалоЭлемента(эл_ТабличнаяЧасть);
	//		
	//		XML_Текст.ЗаписатьАтрибут(ат_Гуид, СтруктураРеквизитов["ТчТочкиМаршрута"]);	
	//		
	//		~Маршрут:							
	//				
	//			СтруктураПолей = Новый Структура;
	//			СтруктураПолей.Вставить(ат_Гуид,   Новый УникальныйИдентификатор());
	//			СтруктураПолей.Вставить(ат_ТчДокументРодитель, идДокМаршрута);
	//			
	//			Если ИспользоватьТорговыеТочки Тогда					
	//				Если ЭтоКонтрагент(Выборка.Контрагент) Тогда
	//					СтруктураПолей.Вставить(структураТЧ["Контрагент"], 	  Выборка.Контрагент);
	//				Иначе
	//		        	СтруктураПолей.Вставить(структураТЧ["ТорговаяТочка"],   Выборка.Контрагент);						
	//				КонецЕсли;
	//			Иначе
	//				СтруктураПолей.Вставить(структураТЧ["Контрагент"], 	  Выборка.Контрагент);
	//			КонецЕсли;
	//			
	//			СтруктураПолей.Вставить(структураТЧ["Время"], Формат(Выборка.ДатаМаршрута, "ДФ=HH:mm"));
	//			
	//			СтруктураПолей.Вставить(структураТЧ["Комментарий"], 	  Выборка.Комментарий);
	//			ЗаписатьЭлементВДокументОбмена(XML_Текст, СтруктураПолей);
	//						
	//			Если Выборка.Следующий() Тогда
	//				Если Выборка.ДатаМаршрута <= ТекДата Тогда
	//					Перейти ~Маршрут;
	//				Иначе
	//					XML_Текст.ЗаписатьКонецЭлемента(); //TABLE
	//					XML_Текст.ЗаписатьКонецЭлемента(); //TABLES
	//					XML_Текст.ЗаписатьКонецЭлемента(); //ITEM
	//				КонецЕсли;
	//			Иначе
	//					XML_Текст.ЗаписатьКонецЭлемента(); //TABLE
	//					XML_Текст.ЗаписатьКонецЭлемента(); //TABLES
	//					XML_Текст.ЗаписатьКонецЭлемента(); //ITEM
	//				Прервать;
	//			КонецЕсли;
	//			
	//		ТекДата = ТекДата + 86400;
	//		
	//	КонецЦикла;
	//	
	//КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПорядокТТВХранилище.Документ КАК Документ,
	|	ПорядокТТВХранилище.Порядок КАК Порядок
	|ПОМЕСТИТЬ ВТ_ПорядокТТВХранилище
	|ИЗ
	|	&ПорядокТТВХранилище КАК ПорядокТТВХранилище
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(Событие.НачалоСобытия, ДЕНЬ) КАК ДатаМаршрута,
	|	Событие.Контрагент КАК Контрагент,
	|	МАКСИМУМ(Событие.НачалоСобытия) КАК Дата,
	|	МАКСИМУМ(ЧАС(Событие.НачалоСобытия)) КАК Час,
	|	МАКСИМУМ(МИНУТА(Событие.НачалоСобытия)) КАК Минута,
	|	МАКСИМУМ(ВЫРАЗИТЬ(Событие.Комментарий КАК СТРОКА(150))) КАК Комментарий,
	|	МАКСИМУМ(ЕСТЬNULL(ВТ_ПорядокТТВХранилище.Порядок, 0)) КАК Порядок
	|ИЗ
	|	Документ.Событие КАК Событие
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПорядокТТВХранилище КАК ВТ_ПорядокТТВХранилище
	|		ПО (ВТ_ПорядокТТВХранилище.Документ = Событие.Ссылка)
	|ГДЕ
	|	Событие.Ответственный = &Ответственный
	|	И Событие.ГруппаСобытия = &ГруппаСобытия
	|	И Событие.ПометкаУдаления = ЛОЖЬ
	|	И Событие.НачалоСобытия МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(Событие.НачалоСобытия, ДЕНЬ),
	|	Событие.Контрагент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаМаршрута,
	|	Порядок,
	|	Час,
	|	Минута,
	|	Комментарий
	|ИТОГИ ПО
	|	ДатаМаршрута";
	
	начПериода = НачалоДня(ТекущаяДата());
	конПериода = КонецДня(ТекущаяДата()) + 86400 * 30; // Период выгрузки = 31 день от текущей даты (включительно)	
	Запрос.УстановитьПараметр("ПорядокТТВХранилище", ПолучитьПорядокТТИзХранилища());
	Запрос.УстановитьПараметр("Ответственный", 		 Агент);
	Запрос.УстановитьПараметр("ГруппаСобытия", 		 группаСобытия);
	Запрос.УстановитьПараметр("НачалоПериода", 		 начПериода);
	Запрос.УстановитьПараметр("КонецПериода", 		 конПериода);
	
	ВыборкаПоДатеМаршрута = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ДатаМаршрута");
	
	Пока ВыборкаПоДатеМаршрута.Следующий() Цикл
		идДокМаршрута = Новый УникальныйИдентификатор();
		Выборка = ВыборкаПоДатеМаршрута.Выбрать();
		
		// Заполняем табличную часть контрагентов маршрута	
		стррПоля = Новый Структура;
		стррПоля.Вставить(ат_Гуид,			  идДокМаршрута);	
		стррПоля.Вставить(ат_ДатаДокумента,   ВыборкаПоДатеМаршрута.ДатаМаршрута);
		стррПоля.Вставить(ат_ПометкаУдаления, "0");
		стррПоля.Вставить(ат_Проведен, 		  "1"); 
		
		ЗаписатьЭлементВДокументОбмена(XML_Текст, стррПоля, Ложь); //ITEM
		
		// Заполняем табличные части справочника
		XML_Текст.ЗаписатьНачалоЭлемента(эл_ТабличныеЧасти); //TABLES
		// Заполняем табличную часть контрагентов маршрута	
		XML_Текст.ЗаписатьНачалоЭлемента(эл_ТабличнаяЧасть); //TABLE
		// Заполняем идентификатор 		
		XML_Текст.ЗаписатьАтрибут(ат_Гуид, СтруктураРеквизитов["ТчТочкиМаршрута"]);
		
		Пока Выборка.Следующий() Цикл
			
			стррПоля = Новый Структура;
			стррПоля.Вставить(ат_Гуид,   			 Новый УникальныйИдентификатор());
			стррПоля.Вставить(ат_ТчДокументРодитель, идДокМаршрута);
			
			Если ИспользоватьТорговыеТочки Тогда					
				Если ЭтоКонтрагент(Выборка.Контрагент) Тогда
					стррПоля.Вставить(структураТЧ["Контрагент"], 	Выборка.Контрагент);
				Иначе
					стррПоля.Вставить(структураТЧ["Контрагент"], 	Выборка.Контрагент.ГоловнойКонтрагент);
					стррПоля.Вставить(структураТЧ["ТорговаяТочка"], Выборка.Контрагент);						
				КонецЕсли;
			Иначе
				стррПоля.Вставить(структураТЧ["Контрагент"], 	  	Выборка.Контрагент);
			КонецЕсли;
			
			стррПоля.Вставить(структураТЧ["Время"],		  Формат(Выборка.Дата, "ДФ=HH:mm"));
			стррПоля.Вставить(структураТЧ["Комментарий"], Выборка.Комментарий);
			
			Если Выборка.Порядок > 0 Тогда 
				стррПоля.Вставить(структураТЧ["Порядок"], Выборка.Порядок);
			КонецЕсли;
			
			// Заполняем элемент табличной части
			ЗаписатьЭлементВДокументОбмена(XML_Текст, стррПоля);	
		КонецЦикла;
		XML_Текст.ЗаписатьКонецЭлемента(); //TABLE
		XML_Текст.ЗаписатьКонецЭлемента(); //TABLES
		XML_Текст.ЗаписатьКонецЭлемента(); //ITEM
	КонецЦикла;
	//)) sk_190306
	
	XML_Текст.ЗаписатьКонецЭлемента();  //ELEMENTS 
	XML_Текст.ЗаписатьКонецЭлемента();  //CATALOG
	
КонецПроцедуры

Процедура ВыгрузитьПодтвержденияЗаказовПокупателей(XML_Текст, Агент)
	
	ИнтервалПодтверждений = НастройкиОбработки["ИнтервалПодтверждений"];
	ИнтервалПодтверждений = ?(ИнтервалПодтверждений = Неопределено, НастройкиОбработки["ИнтервалПодтверждений"], ИнтервалПодтверждений);
		
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Заказ.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказПокупателя КАК Заказ
	|ГДЕ
	|	Заказ.Дата МЕЖДУ &НачПериода И &КонПериода
	|	И Заказ.Ответственный = &Агент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Заказ.МоментВремени";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("НачПериода", НачалоДня(ТекущаяДата() - (86400 * ИнтервалПодтверждений)));
	Запрос.УстановитьПараметр("КонПериода", КонецДня(ТекущаяДата()));	
	Запрос.УстановитьПараметр("Агент",      Агент);
	
	Результат = Запрос.Выполнить();
	
	СписокЭлементов = Результат.Выбрать();
	
	XML_Текст.ЗаписатьНачалоЭлемента(эл_Документ);
	
		XML_Текст.ЗаписатьАтрибут(ат_Гуид, СоответствиеДок["ЗаказПокупателя"]);
		
		//ДобавитьПоле("Comment", "Подтверждения документа 'ЗаказПокупателя'");

		XML_Текст.ЗаписатьНачалоЭлемента(эл_Подтвердить);
		
		Пока СписокЭлементов.Следующий() Цикл
			
			#Если Клиент Тогда
				ОбработкаПрерыванияПользователя();
			#КонецЕсли
			
			ЗаписатьЭлементВДокументОбмена(XML_Текст, Новый Структура(ат_Гуид, СписокЭлементов.Ссылка));
						
		КонецЦикла;
		
		XML_Текст.ЗаписатьКонецЭлемента(); //CONFIRMATIONS
		
	XML_Текст.ЗаписатьКонецЭлемента();     //DOCUMENT
			
КонецПроцедуры //ВыгрузитьПодтвержденияЗаказовПокупателей

//Альфия 18.05.2017
Процедура  ВыгрузитьПодтвержденияПосещений (XML_Текст, Агент)
	
	// sk_181016 Перем ФайлИстория;	
	
	путьПапкаПосещений = НастройкиОбработки["ПапкаТреки"] + "Vizits" + "\";
	ПапкаПосещений = Новый Файл(путьПапкаПосещений);
	Если Не ПапкаПосещений.Существует() тогда
		СоздатьКаталог(путьПапкаПосещений); 	
	КонецЕсли;
	
	//Создание папки агента
	путьПапкаАгента = путьПапкаПосещений + Строка(Агент.УникальныйИдентификатор()) + "\";
	ПапкаАгента = Новый Файл(путьПапкаАгента);
	Если Не ПапкаАгента.Существует() Тогда
		СоздатьКаталог(путьПапкаАгента); 	
	КонецЕсли;	
	
	//(( sk_181016 Получаем массив файлов посещений за период подтверждения
	
	// Исключаем использование файла "История.txt"
	//ФайлыИстория = НайтиФайлы(путьПапкаАгента,"История.txt");
	//Для каждого Файл из ФайлыИстория Цикл
	//	ФайлИстория = Файл;
	//	Прервать;
	//КонецЦикла;
	
	ИнтервалПодтверждений = НастройкиОбработки["ИнтервалПодтверждений"];
	
	НачалоПериода = НачалоДня(ТекущаяДата() - ИнтервалПодтверждений * 86400);
	КонецПериода  = КонецДня(ТекущаяДата());
	
	стрМаска = ПолучитьМаскуФайлов(НачалоПериода, КонецПериода);
	мСписокФайлов = НайтиФайлы(путьПапкаАгента, стрМаска);
	
	мСписокФайловПосещений = Новый Массив;
	
	Для Каждого Файл Из мСписокФайлов Цикл
		Попытка
			ИмяФайлаБезРасширения = Дата(Файл.ИмяБезРасширения);
		Исключение
			Продолжить;
		КонецПопытки;
		Если ИмяФайлаБезРасширения >= НачалоПериода и ИмяФайлаБезРасширения <= КонецПериода тогда
			мСписокФайловПосещений.Добавить(Файл);	
		КонецЕсли;
	КонецЦикла;	
	//)) sk_181016
	
	//(( sk_181016 Выполняем заполнение XML из загруженных файлов посещений за период подтверждения
	
	//Если ФайлыИстория.Количество() <> 0 тогда
	//	История = ЗначениеИзФайла(ФайлИстория.ПолноеИмя);
	//	XML_Текст.ЗаписатьНачалоЭлемента(эл_Документ);	
	//	XML_Текст.ЗаписатьАтрибут("GUID", СоответствиеДок["Посещение"]);
	//	XML_Текст.ЗаписатьНачалоЭлемента(эл_Подтвердить); //CONFIRMATIONS
	//	Для к=0 по История.Количество() - 1 Цикл
	//		XML_Текст.ЗаписатьНачалоЭлемента(эл_Элемент);	//ITEM
	//		XML_Текст.ЗаписатьАтрибут(ат_Гуид, История[к].ИдДокумента);				
	//		XML_Текст.ЗаписатьКонецЭлемента(); 				//ITEM		
	//	КонецЦикла;
	//	XML_Текст.ЗаписатьКонецЭлемента(); //CONFIRMATIONS
	//	XML_Текст.ЗаписатьКонецЭлемента();     //DOCUMENT			
	//КонецЕсли;
	
	Если мСписокФайловПосещений.Количество() <> 0 Тогда
		XML_Текст.ЗаписатьНачалоЭлемента(эл_Документ);	
		XML_Текст.ЗаписатьАтрибут("GUID", СоответствиеДок["Посещение"]);
		XML_Текст.ЗаписатьНачалоЭлемента(эл_Подтвердить); //CONFIRMATIONS
		Для Каждого Файл Из мСписокФайловПосещений Цикл
			Посещения = ЗначениеИзФайла(Файл.ПолноеИмя);
			Для Каждого Документ Из Посещения Цикл	
				XML_Текст.ЗаписатьНачалоЭлемента(эл_Элемент);	//ITEM
				XML_Текст.ЗаписатьАтрибут(ат_Гуид, Документ.ИдДокумента);
				XML_Текст.ЗаписатьКонецЭлемента(); 				//ITEM		
			КонецЦикла;
		КонецЦикла;
		XML_Текст.ЗаписатьКонецЭлемента(); //CONFIRMATIONS
		XML_Текст.ЗаписатьКонецЭлемента();     //DOCUMENT			
	КонецЕсли;
	//)) sk_181016
	
КонецПроцедуры
//Альфия 18.05.2017

Процедура ВыгрузитьПодтвержденияДокумента(XML_Текст, ИмяДокумент, ВидДокумент, Агент)
	
	текДата = ТекущаяДата();
	
	ИнтервалПодтверждений = НастройкиОбработки["ИнтервалПодтверждений"];
	ИнтервалПодтверждений = ?(ИнтервалПодтверждений = Неопределено, НастройкиОбработки["ИнтервалПодтверждений"], ИнтервалПодтверждений);
	
	ТекстЗапроса = "ВЫБРАТЬ
					|	Док.Ссылка КАК Ссылка
					|ИЗ
					|	Документ." + ИмяДокумент + " КАК Док
					|ГДЕ
					|	Док.Дата МЕЖДУ &НачПериода И &КонПериода
					|	И Док.Ответственный = &Агент";
	
	Запрос = Новый Запрос(ТекстЗапроса);	
	
	СтруктураРеквизитов = СоответствиеДок[СоответствиеДок[ИмяДокумент]];
		
	XML_Текст.ЗаписатьНачалоЭлемента(эл_Документ);
	
		XML_Текст.ЗаписатьАтрибут(ат_Гуид, СоответствиеДок[ИмяДокумент]);		
		
		//ДобавитьПоле("Comment", "Подтверждения документа 'Касса'");						
		
		// очищать все документы
		//vd_180817 Не нужно очищать, это подтверждение.
		//Если флОчищатьДокументыПередЗагрузкой И СписокОчищаемыхДокументов.НайтиПоЗначению(ВидДокумент) <> Неопределено И ВидОчисткиДокументов = 1 Тогда  		
		//	XML_Текст.ЗаписатьАтрибут(ат_ОчиститьПередЗагрузкой, "1");
		//КонецЕсли;
		
		XML_Текст.ЗаписатьАтрибут(ат_Комментарий, СтруктураРеквизитов["_Представление"]);
		
		Если флОчищатьДокументыПередЗагрузкой И НЕ СписокОчищаемыхДокументов.НайтиПоЗначению(ВидДокумент) = Неопределено И ВидОчисткиДокументов = 2 Тогда  			// Не удалять документы за последние ... дней	
				
			XML_Текст.ЗаписатьНачалоЭлемента(эл_Удалить);	// KILLEDS
							
	        начПериода = НачалоДня(текДата - (86400 * МаксИнтервалОчищаемыхДокументов));
			конПериода = КонецДня(начПериода + 86400 * (МаксИнтервалОчищаемыхДокументов - ИнтервалСохранностиДокументов));
			Запрос.УстановитьПараметр("НачПериода", начПериода);
			Запрос.УстановитьПараметр("КонПериода", конПериода);
			Запрос.УстановитьПараметр("Агент", 	    Агент);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				XML_Текст.ЗаписатьНачалоЭлемента(эл_Элемент);	//ITEM
				XML_Текст.ЗаписатьАтрибут(ат_Гуид, ПреобразоватьЗначениеВСтрокуДляXML(Выборка.Ссылка));				
				XML_Текст.ЗаписатьКонецЭлемента(); 				//ITEM
			КонецЦикла;
			
			XML_Текст.ЗаписатьКонецЭлемента();  // KILLEDS
					
		КонецЕсли;
		
		Запрос.УстановитьПараметр("НачПериода", НачалоДня(текДата - (86400 * ИнтервалПодтверждений)));
		Запрос.УстановитьПараметр("КонПериода", КонецДня(текДата));	
		Запрос.УстановитьПараметр("Агент",      Агент);
		
		СписокЭлементов = Запрос.Выполнить().Выбрать();

		XML_Текст.ЗаписатьНачалоЭлемента(эл_Подтвердить);
		
		Пока СписокЭлементов.Следующий() Цикл
			
			#Если Клиент Тогда
				ОбработкаПрерыванияПользователя();
			#КонецЕсли
			
			XML_Текст.ЗаписатьНачалоЭлемента(эл_Элемент);	//ITEM
			XML_Текст.ЗаписатьАтрибут(ат_Гуид, ПреобразоватьЗначениеВСтрокуДляXML(СписокЭлементов.Ссылка));				
			XML_Текст.ЗаписатьКонецЭлемента(); 				//ITEM
		
		КонецЦикла;
		
		XML_Текст.ЗаписатьКонецЭлемента(); //CONFIRMATIONS
		
	XML_Текст.ЗаписатьКонецЭлемента();     //DOCUMENT
		
КонецПроцедуры 

// sk_190628 Процедура добавлена в рамках (MOD-470)
// Выполняет выгрузку подтверждений виртуальных документов 
//
// Параметры:
//	XML_Текст    - ЗаписьXML - xml
//	ВидДокумента - УникальныйИдентификатор - вид документа
//  Агент		 - СправочникСсылка.Пользователи - агент
//
Процедура ВОВыгрузитьПодтвержденияДокумента(XML_Текст, ВидДокумента, Агент)

	МодульВОБД = МодульВОБД();	
		
	стрИдВидДокумента = Строка(ВидДокумента);
	стрПредставление  = МодульВОБД.ИмяТипаОбъекта(ВидДокумента);
		
	текДата = ТекущаяДата();
	
	текИнтервалПодтверждений = НастройкиОбработки["ИнтервалПодтверждений"];
	текИнтервалПодтверждений = ?(текИнтервалПодтверждений = Неопределено, НастройкиОбработкиПоУмолчанию["ИнтервалПодтверждений"], текИнтервалПодтверждений);	

	текНачПериода = НачалоДня(текДата - (86400 * текИнтервалПодтверждений));
	текКонПериода = КонецДня(текДата);

	стрУсловие 	  = "Дата Между &пНачПериода И &пКонПериода И Агент = &пАгент";
	стррПараметры = Новый Структура("пНачПериода, пКонПериода, пАгент", текНачПериода, текКонПериода, Агент);
		
	ТекстОшибки = Неопределено;
	
	тзСписокДокументов = МодульВОБД.ПолучитьВыборку(ВидДокумента, 
							"Гуид", 
							стрУсловие, 
							стррПараметры, 
							ТекстОшибки);  
	
	Если ЗначениеЗаполнено(тзСписокДокументов) Тогда
		XML_Текст.ЗаписатьНачалоЭлемента(эл_Документ);
		
			XML_Текст.ЗаписатьАтрибут(ат_Гуид, стрИдВидДокумента);
				
			XML_Текст.ЗаписатьАтрибут(ат_Комментарий, стрПредставление);
			
			XML_Текст.ЗаписатьНачалоЭлемента(эл_Подтвердить);
		
			Для Каждого стзДокумент Из тзСписокДокументов Цикл
				ЗаписатьЭлементВДокументОбмена(XML_Текст, Новый Структура(ат_Гуид, стзДокумент.Гуид));
			КонецЦикла;
				
		XML_Текст.ЗаписатьКонецЭлемента(); //CONFIRMATIONS
		
		XML_Текст.ЗаписатьКонецЭлемента(); //DOCUMENT
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ОповеститьОСобытии("ru = 'Ошибка при выгрузке подтверждения документа: """ +  стрПредставление + """!'", ТипыЛогов["Обмен"], СтатусСообщения.Внимание);		
		ОповеститьОСобытии(ТекстОшибки, ТипыЛогов["Обмен"], СтатусСообщения.Внимание);				
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьИсториюПродаж(XML_Текст, сзКлиентыАгента, СзАссортимент)
	Перем Дата01, Дата02;   	
	
	имяСправочника = "ИсторияПродаж";
	
	ИспИсториюПродаж = НастройкиОбработки["ИспользоватьИсториюПродаж"];
	ИспИсториюПродаж = ?(ИспИсториюПродаж = Неопределено, НастройкиОбработкиПоУмолчанию["ИспользоватьИсториюПродаж"], ИспИсториюПродаж);	
	
	СтруктураРеквизитов = СоответствиеСпр[СоответствиеСпр[имяСправочника]];
	
	//XML_Текст.ЗаписатьКомментарий(СтруктураРеквизитов["_ИмяДокумента"]);		
	XML_Текст.ЗаписатьНачалоЭлемента(эл_Справочник);		
		
		XML_Текст.ЗаписатьАтрибут(ат_Гуид, СоответствиеСпр[имяСправочника]);						
			
		// Очищаем всегда историю продаж перед загрузкой её в БД МУ
		XML_Текст.ЗаписатьАтрибут(ат_ОчиститьПередЗагрузкой, "1");
		XML_Текст.ЗаписатьАтрибут(ат_Комментарий, СтруктураРеквизитов["_Представление"]);	
		
		XML_Текст.ЗаписатьНачалоЭлемента(эл_Элементы);
		
		Если Не ИспИсториюПродаж Тогда
				XML_Текст.ЗаписатьКонецЭлемента();  //ELEMENTS 	
				XML_Текст.ЗаписатьКонецЭлемента();  //CATALOG
			Возврат;
		КонецЕсли;

	Глубина = НастройкиОбработки["ГлубинаИсторииПродаж"];
	Глубина = ?(Глубина = Неопределено, НастройкиОбработкиПоУмолчанию["ГлубинаИсторииПродаж"], Глубина);
	КолИнтервалов = НастройкиОбработки["КоличествоИнтерваловИстории"];
	КолИнтервалов = ?(КолИнтервалов = Неопределено, НастройкиОбработкиПоУмолчанию["КоличествоИнтерваловИстории"], КолИнтервалов);
 	
	ДлинаИнтервала = Окр(Глубина / ?(КолИнтервалов = 0, 1, КолИнтервалов));	
	
	Дата02 = ТекущаяДата();
	Дата01 = Дата02 - (Глубина * 86400);
	Дата01 = НачалоДня(Дата01);
	
	Дата1 = Дата01;
	Дата2 = Дата02;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПродажиОбороты.Контрагент КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ПродажиОбороты.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ПродажиОбороты.Номенклатура
	|		ИНАЧЕ ПродажиОбороты.ХарактеристикаНоменклатуры
	|	КОНЕЦ КАК Номенклатура,
	|	СУММА(ПродажиОбороты.КоличествоОборот) КАК ОборотКоличество,
	|	СУММА(ПродажиОбороты.СтоимостьОборот) КАК ОборотСумма
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Продажи.Обороты(
	|				&ДатаНач,
	|				&ДатаКон,
	|				,
	|				ДоговорКонтрагента.Владелец В (&ПарКлиенты)
	|					И ДоговорКонтрагента.ВидДоговора = &ВидДоговора) КАК ПродажиОбороты
	|		ПО (ПродажиОбороты.Номенклатура = СпрНоменклатура.Ссылка)
	|ГДЕ
	|	ПродажиОбороты.Номенклатура В ИЕРАРХИИ (&Ассортимент)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ПродажиОбороты.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ПродажиОбороты.Номенклатура
	|		ИНАЧЕ ПродажиОбороты.ХарактеристикаНоменклатуры
	|	КОНЕЦ,
	|	ПродажиОбороты.Контрагент";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("парКлиенты",     сзКлиентыАгента);
	Запрос.УстановитьПараметр("Ассортимент",    СзАссортимент);
	Запрос.УстановитьПараметр("ВидДоговора",    Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	
	СписокИсторий = Новый ТаблицаЗначений;
	СписокИсторий.Колонки.Добавить("Контрагент");
	СписокИсторий.Колонки.Добавить("Номенклатура");
	Для Инт = 1 По КолИнтервалов Цикл
		СписокИсторий.Колонки.Добавить("ОборотКоличество" + Строка(Инт));
		СписокИсторий.Колонки.Добавить("ОборотСумма" + Строка(Инт));
	КонецЦикла;
	
	Для Инт = 1 По КолИнтервалов Цикл   
		
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
		Дата02 = Дата01 + ((ДлинаИнтервала) * 86400);
		Дата02 = ?(КонецДня(Дата02) > ТекущаяДата(), ТекущаяДата(), КонецДня(Дата02));
		Запрос.УстановитьПараметр("ДатаНач", Дата01);
		Запрос.УстановитьПараметр("ДатаКон", Дата02);
		ПродДокументы = Запрос.Выполнить().Выбрать();
		Пока ПродДокументы.Следующий() Цикл
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Контрагент",    	ПродДокументы.Контрагент);
			СтруктураПоиска.Вставить("Номенклатура",   	ПродДокументы.Номенклатура);
			СтрокиПоиска = СписокИсторий.НайтиСтроки(СтруктураПоиска);
			Если СтрокиПоиска.Количество() = 0 Тогда
				НоваяСтрока = СписокИсторий.Добавить();
				НоваяСтрока.Контрагент = ПродДокументы.Контрагент;
				НоваяСтрока.Номенклатура = ПродДокументы.Номенклатура;
				НоваяСтрока["ОборотКоличество" + Строка(Инт)] = Строка(ПродДокументы.ОборотКоличество);
				НоваяСтрока["ОборотСумма" + Строка(Инт)] 	  = Строка(ПродДокументы.ОборотСумма);
			Иначе
				СтрокиПоиска[0]["ОборотКоличество" + Строка(Инт)] = Строка(ПродДокументы.ОборотКоличество);
				СтрокиПоиска[0]["ОборотСумма" + Строка(Инт)] 	  = Строка(ПродДокументы.ОборотСумма);
			КонецЕсли;
			
		КонецЦикла;
		Дата01 = Дата01 + ((ДлинаИнтервала + 1) * 86400);
	КонецЦикла;
			
			Для Каждого ТекСтрока Из СписокИсторий Цикл		
				ИсторияКоличество = "";
				ИсторияСумма 	  = "";
				Для Инт = 1 По КолИнтервалов Цикл
					ЗначениеКоличества = ТекСтрока["ОборотКоличество" + Строка(Инт)];
					ИсторияКоличество = ИсторияКоличество + ?(ЗначениеЗаполнено(ЗначениеКоличества), Строка(ЗначениеКоличества), "0") + " ";
					
					ЗначениеСумма = ТекСтрока["ОборотСумма" + Строка(Инт)];
					ИсторияСумма = ИсторияСумма + ?(ЗначениеЗаполнено(ЗначениеСумма), Строка(ЗначениеСумма), "0") + " ";
				КонецЦикла;
				СтруктураПолей = Новый Структура;				
				
				СтруктураПолей.Вставить(ат_Гуид, Новый УникальныйИдентификатор());
				СтруктураПолей.Вставить(ат_ПометкаУдаления, "0");
				СтруктураПолей.Вставить(СтруктураРеквизитов["Контрагент"], ВРег(Строка(ТекСтрока.Контрагент.УникальныйИдентификатор())));
				СтруктураПолей.Вставить(СтруктураРеквизитов["Номенклатура"], ТекСтрока.Номенклатура);
				СтруктураПолей.Вставить(СтруктураРеквизитов["Количество"], СокрЛП(ИсторияКоличество));
				СтруктураПолей.Вставить(СтруктураРеквизитов["Сумма"], СокрЛП(ИсторияСумма));
				ЗаписатьЭлементВДокументОбмена(XML_Текст, СтруктураПолей);		
			КонецЦикла;
		
		XML_Текст.ЗаписатьКонецЭлемента();   //ELEMENTS
		
	XML_Текст.ЗаписатьКонецЭлемента();       //CATALOG
	
КонецПроцедуры //ВыгрузитьИсториюПродаж

// Процедура выгрузки документов Реализация товаров и услуг в МУ
//
Процедура ВыгрузитьПродажи(XML_Текст, ДанныеАгента, ТзКатегорииЦен, СписНеНайденныхТиповЦен)
	
	текДата = ТекущаяДата();
	
	Агент = ДанныеАгента["Пользователь"];

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Реализация.Ссылка КАК Ссылка,
	|	Реализация.Ответственный КАК Агент,
	|	ЗначенияСвойствОбъектов.Значение КАК Категория
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК Реализация
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			(ВЫБРАТЬ 
	|				Регистр.Значение,
	|				Регистр.Объект
	|			ИЗ РегистрСведений.ЗначенияСвойствОбъектов КАК Регистр
	|			ГДЕ Регистр.Свойство = &АгентПлюсКатегория) КАК ЗначенияСвойствОбъектов
	|		ПО Реализация.Ссылка = ЗначенияСвойствОбъектов.Объект
	|ГДЕ
	|	Реализация.ПометкаУдаления=ЛОЖЬ
	|	И Реализация.Дата МЕЖДУ &НачПериода И &КонПериода
	|	И Реализация.Ответственный = &Агент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Реализация.МоментВремени";
	
	ИнтервалВыгрузкиЗаказов = НастройкиОбработки["ИнтервалВыгрузкиЗаказов"];
	ИнтервалВыгрузкиЗаказов = ?(ИнтервалВыгрузкиЗаказов = Неопределено, НастройкиОбработки["ИнтервалВыгрузкиЗаказов"], ИнтервалВыгрузкиЗаказов);
	
	Запрос = Новый Запрос(ТекстЗапроса);
		
	Запрос.УстановитьПараметр("НачПериода", НачалоДня(текДата - (86400 * ИнтервалВыгрузкиЗаказов)));
	Запрос.УстановитьПараметр("КонПериода", КонецДня(текДата));
	Запрос.УстановитьПараметр("Агент", 	    Агент);
	Запрос.УстановитьПараметр("АгентПлюсКатегория", ПолучитьСсылкуСвойствоОбъектаАгентПлюс("Категория"));
	
	ВыборкаДок = Запрос.Выполнить().Выбрать();
	
	стррРеквизиты = СоответствиеДок[СоответствиеДок["РеализацияТоваровУслуг"]]; // СтруктураРеквизитов = СоответствиеДок[СоответствиеДок["РеализацияТоваровУслуг"]]; sk_190516 Изменено название переменной  
	стррТЧ = стррРеквизиты[стррРеквизиты["ТчТовары"]]; // структураТЧ = стррРеквизиты[стррРеквизиты["ТчТовары"]]; sk_190516 Изменено название переменной
	
	XML_Текст.ЗаписатьНачалоЭлемента(эл_Документ);		
	
		XML_Текст.ЗаписатьАтрибут(ат_Гуид, СоответствиеДок["РеализацияТоваровУслуг"]);
		
		Если флОчищатьДокументыПередЗагрузкой И СписокОчищаемыхДокументов.НайтиПоЗначению("Реализация") <> Неопределено И
				ВидОчисткиДокументов = 1 Тогда  		// очищать все документы
			XML_Текст.ЗаписатьАтрибут(ат_ОчиститьПередЗагрузкой, "1");
		КонецЕсли;
		
		XML_Текст.ЗаписатьАтрибут(ат_Комментарий, стррРеквизиты["_Представление"]);	
		
		XML_Текст.ЗаписатьНачалоЭлемента(эл_Элементы);
		
			Пока ВыборкаДок.Следующий() Цикл  
				
				#Если Клиент Тогда
					ОбработкаПрерыванияПользователя();
				#КонецЕсли
				
				Док = ВыборкаДок.Ссылка;
				
				КодТипаЦены = ПолучитьКодТипаЦены(ДанныеАгента, Док.ТипЦен, Док, ТзКатегорииЦен, СписНеНайденныхТиповЦен);		
				
				стррПоля = ПолучитьСтруктуруПредопределенныхПолейДокумента(Док); // СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейДокумента(Док); sk_190516 Изменено название переменной  
				
				ОбщийВес = 0;
				Для Каждого СтрокаТаб Из Док.Товары Цикл 
					ОбщийВес = ОбщийВес + СтрокаТаб.ЕдиницаИзмерения.Вес * СтрокаТаб.Количество;
				КонецЦикла;
				
				стррПоля.Вставить(стррРеквизиты["Организация"], 		  Док.Организация);
				
				Если ИспользоватьТорговыеТочки Тогда					
					Если ЭтоКонтрагент(Док.Контрагент) Тогда
						стррПоля.Вставить(стррРеквизиты["Контрагент"], 	  Док.Контрагент);
						стррПоля.Вставить(стррРеквизиты["ТорговаяТочка"], "");
					Иначе
			        	стррПоля.Вставить(стррРеквизиты["ТорговаяТочка"], Док.Контрагент);						
						стррПоля.Вставить(стррРеквизиты["Контрагент"],	  Док.Контрагент.ГоловнойКонтрагент);						
					КонецЕсли;
				Иначе
					стррПоля.Вставить(стррРеквизиты["Контрагент"], 	  	  Док.Контрагент);
					стррПоля.Вставить(стррРеквизиты["ТорговаяТочка"],     "");
				КонецЕсли;				
				
				стррПоля.Вставить(стррРеквизиты["ДоговорКонтрагента"], 	  Док.ДоговорКонтрагента);
				Если Не ПустаяСтрока(КодТипаЦены) Тогда
					стррПоля.Вставить(стррРеквизиты["ТипЦен"], 			  Док.ТипЦен);
				КонецЕсли;
				стррПоля.Вставить(стррРеквизиты["СуммаДокумента"], 		  Док.СуммаДокумента);
				стррПоля.Вставить(стррРеквизиты["ОбщийВес"], 			  ОбщийВес);
				стррПоля.Вставить(стррРеквизиты["Комментарий"], 		  Док.Комментарий);
				стррПоля.Вставить(стррРеквизиты["Категория"], 			  ВыборкаДок.Категория);
				Если ЗначениеЗаполнено(Док.Сделка) И ТипЗнч(Док.Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
					стррПоля.Вставить(стррРеквизиты["Сделка"], 			  Док.Сделка);
				КонецЕсли;
								
				Если Док.Товары.Количество() + Док.Услуги.Количество() > 0 Тогда 
				
					// Во втором параметре передается Ложь - это означает,
					// что не закрывает тег "Item", его закрытие производится ниже		
					ЗаписатьЭлементВДокументОбмена(XML_Текст, стррПоля, Ложь);
					
					XML_Текст.ЗаписатьНачалоЭлемента(эл_ТабличныеЧасти);
						
						XML_Текст.ЗаписатьНачалоЭлемента(эл_ТабличнаяЧасть);
					
						XML_Текст.ЗаписатьАтрибут(ат_Гуид, стррРеквизиты["ТчТовары"]);
						
						Для Каждого СтрокаТаб Из Док.Товары	Цикл							
							стррСтрокаТЧ = Новый Структура;
							стррСтрокаТЧ.Вставить(ат_Гуид,  							Новый УникальныйИдентификатор());
							стррСтрокаТЧ.Вставить(ат_ТчДокументРодитель, 				Док.Ссылка);
							стррСтрокаТЧ.Вставить(стррТЧ["Номенклатура"],   			СтрокаТаб.Номенклатура);
							стррСтрокаТЧ.Вставить(стррТЧ["ХарактеристикаНоменклатуры"], СтрокаТаб.ХарактеристикаНоменклатуры);
							стррСтрокаТЧ.Вставить(стррТЧ["ЕдиницаИзмерения"],  		 	СтрокаТаб.ЕдиницаИзмерения);
							стррСтрокаТЧ.Вставить(стррТЧ["Количество"],   				СтрокаТаб.Количество);							
							стррСтрокаТЧ.Вставить(стррТЧ["Цена"],   					СтрокаТаб.Цена);
							стррСтрокаТЧ.Вставить(стррТЧ["Сумма"],   					СтрокаТаб.Сумма);
							стррСтрокаТЧ.Вставить(стррТЧ["СуммаНДС"],					СтрокаТаб.СуммаНДС);

							//(( sk_190516 В рамках (MOD-520)
							// СтруктураПолей.Вставить(структураТЧ["ПроцентСкидкиНаценки"], 		СтрокаТаб.ПроцентСкидкиНаценки);
							Попытка
								стррСтрокаТЧ.Вставить(стррТЧ["ПроцентСкидкиНаценки"],   СтрокаТаб.ПроцентСкидкиНаценки + СтрокаТаб.ПроцентАвтоматическихСкидок);
							Исключение
								стррСтрокаТЧ.Вставить(стррТЧ["ПроцентСкидкиНаценки"],   СтрокаТаб.ПроцентСкидкиНаценки);
							КонецПопытки;
							//)) sk_190516
							стррСтрокаТЧ.Вставить(стррТЧ["СуммаСкидки"],  				(СтрокаТаб.Количество*СтрокаТаб.Цена) - СтрокаТаб.Сумма);
							стррСтрокаТЧ.Вставить(стррТЧ["Вес"],   					    СтрокаТаб.ЕдиницаИзмерения.Вес*СтрокаТаб.Количество);
							//СтруктураПолей.Вставить(структураТЧ["СтавкаНДС"],					УчетНДС.ПолучитьСтавкуНДС(СтрокаТаб.СтавкаНДС));
							
							Если НаименованиеКонфигурации = "УправлениеТорговымПредприятиемДляКазахстана" Тогда 
								стррСтрокаТЧ.Вставить(стррТЧ["СтавкаНДС"], 			 	Вычислить("УчетНДСИАкциза.ПолучитьСтавкуНДС(СтрокаТаб.СтавкаНДС)"));
							Иначе
								стррСтрокаТЧ.Вставить(стррТЧ["СтавкаНДС"], 			 	Вычислить("УчетНДС.ПолучитьСтавкуНДС(СтрокаТаб.СтавкаНДС)"));
							КонецЕсли;
							
							Если ТипЗнч(СтрокаТаб.Склад) = Тип("СправочникСсылка.Склады") Тогда
								стррСтрокаТЧ.Вставить(стррТЧ["Склад"],  				СтрокаТаб.Склад);
							Иначе
								стррСтрокаТЧ.Вставить(стррТЧ["Склад"], 				 	"");
							КонецЕсли;    
							ЗаписатьЭлементВДокументОбмена(XML_Текст, стррСтрокаТЧ);
						КонецЦикла;
						
						Для Каждого СтрокаТаб Из Док.Услуги	Цикл				
							стррСтрокаТЧ = Новый Структура;
							стррСтрокаТЧ.Вставить(ат_Гуид,  						    Новый УникальныйИдентификатор());
							стррСтрокаТЧ.Вставить(ат_ТчДокументРодитель,			    Док);
							стррСтрокаТЧ.Вставить(стррТЧ["Номенклатура"],		   		СтрокаТаб.Номенклатура);														
							стррСтрокаТЧ.Вставить(стррТЧ["Количество"],  		   		СтрокаТаб.Количество);
							стррСтрокаТЧ.Вставить(стррТЧ["Цена"],				   		СтрокаТаб.Цена);
							стррСтрокаТЧ.Вставить(стррТЧ["Сумма"],				   		СтрокаТаб.Сумма);
							стррСтрокаТЧ.Вставить(стррТЧ["СуммаНДС"],			   		СтрокаТаб.СуммаНДС);
							//(( sk_190516 В рамках (MOD-520)
							//стррСтрокаТЧ.Вставить(стррТЧ["ПроцентСкидкиНаценки"],  		СтрокаТаб.ПроцентСкидкиНаценки);
							Попытка
								стррСтрокаТЧ.Вставить(стррТЧ["ПроцентСкидкиНаценки"],   СтрокаТаб.ПроцентСкидкиНаценки + СтрокаТаб.ПроцентАвтоматическихСкидок);
							Исключение
								стррСтрокаТЧ.Вставить(стррТЧ["ПроцентСкидкиНаценки"],   СтрокаТаб.ПроцентСкидкиНаценки);
							КонецПопытки;
							//)) sk_190516	
							стррСтрокаТЧ.Вставить(стррТЧ["СуммаСкидки"],  		   		(СтрокаТаб.Количество*СтрокаТаб.Цена) - СтрокаТаб.Сумма);	
							
							Если НаименованиеКонфигурации = "УправлениеТорговымПредприятиемДляКазахстана" Тогда 
								стррСтрокаТЧ.Вставить(стррТЧ["СтавкаНДС"], 	   			Вычислить("УчетНДСИАкциза.ПолучитьСтавкуНДС(СтрокаТаб.СтавкаНДС)"));
							Иначе
								стррСтрокаТЧ.Вставить(стррТЧ["СтавкаНДС"], 	   			Вычислить("УчетНДС.ПолучитьСтавкуНДС(СтрокаТаб.СтавкаНДС)"));
							КонецЕсли;
							ЗаписатьЭлементВДокументОбмена(XML_Текст, стррСтрокаТЧ);			
						КонецЦикла;
						
						XML_Текст.ЗаписатьКонецЭлемента();  //TABLE
									
					XML_Текст.ЗаписатьКонецЭлемента();  //TABLES
				
					// Закрыаем тег ITEM, который был открыт при вызове
					// процедуры "ЗаписатьЭлементВДокументОбмена"
					XML_Текст.ЗаписатьКонецЭлемента();  //ITEM
					
				Иначе
					
					ЗаписатьЭлементВДокументОбмена(XML_Текст, стррПоля);
					
				КонецЕсли;
			
			КонецЦикла;
			
		XML_Текст.ЗаписатьКонецЭлемента();  // ELEMENTS
		
		Если флОчищатьДокументыПередЗагрузкой И СписокОчищаемыхДокументов.НайтиПоЗначению("Реализация") <> Неопределено И
				ВидОчисткиДокументов = 2 Тогда  		// Не удалять документы за последние ... дней	
				
			XML_Текст.ЗаписатьНачалоЭлемента(эл_Удалить);  // KILLEDS
				
			Запрос = Новый Запрос;
			Запрос.Текст = "
				|ВЫБРАТЬ
				|	Реализация.Ссылка КАК Ссылка
				|ИЗ
				|	Документ.РеализацияТоваровУслуг КАК Реализация
				|ГДЕ
				|	Реализация.Дата МЕЖДУ &НачПериода И &КонПериода
				|	И Реализация.Ответственный = &Агент
				|";
			
	        начПериода = НачалоДня(текДата - (86400 * МаксИнтервалОчищаемыхДокументов));
			конПериода = КонецДня(начПериода + 86400 * (МаксИнтервалОчищаемыхДокументов - ИнтервалСохранностиДокументов));
			
			Запрос.УстановитьПараметр("НачПериода", начПериода);
			Запрос.УстановитьПараметр("КонПериода", конПериода);
			Запрос.УстановитьПараметр("Агент", 	    Агент);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				XML_Текст.ЗаписатьНачалоЭлемента(эл_Элемент);	//ITEM
				XML_Текст.ЗаписатьАтрибут(ат_Гуид, ПреобразоватьЗначениеВСтрокуДляXML(Выборка.Ссылка));				
				XML_Текст.ЗаписатьКонецЭлемента(); 				//ITEM
			КонецЦикла;
			
			XML_Текст.ЗаписатьКонецЭлемента();  // KILLEDS
					
		КонецЕсли;
		
	XML_Текст.ЗаписатьКонецЭлемента();      // DOCUMENT

КонецПроцедуры // ВыгрузитьПродажи()

// Выгрузка дополнительной информации
// В данной процедуре выгружаются следующие справочники:
// 		1. Типы цен
//      2. Склады
//      3. Категории документов
//      4. Категории номенклатуры
//      5. Статусы контрагентов
//      6. Категории контрагентов
//      6. Типы торговых точек
//
Процедура ВыгрузитьДополнительнуюИнформацию(XML_Текст, СоотвЗагруженныхОбъектов, ТзКатегорииЦен, ТзСклады, СзАссортимент)
	
	имяСправочника = "ТипыЦен";
	
	// Выгрузка типов цен
	ИдСпр = СоответствиеСпр[имяСправочника];
	
	СтруктураРеквизитов = СоответствиеСпр[ИдСпр];
	
	//XML_Текст.ЗаписатьКомментарий(СтруктураРеквизитов["ИмяСправочника"]);	
	XML_Текст.ЗаписатьНачалоЭлемента(эл_Справочник);
		
	XML_Текст.ЗаписатьАтрибут(ат_Гуид, ИдСпр);		
		
		УстановитьПризнакОчисткиСправочника(XML_Текст, ИдСпр);
		
		XML_Текст.ЗаписатьАтрибут(ат_Комментарий, СтруктураРеквизитов["_Представление"]);	
		
		XML_Текст.ЗаписатьНачалоЭлемента(эл_Группы);
		XML_Текст.ЗаписатьКонецЭлемента();

		XML_Текст.ЗаписатьНачалоЭлемента(эл_Элементы);
		
			Сч = 0;
			Для Каждого СтрокаТаб Из ТзКатегорииЦен Цикл
				ТипЦены = СтрокаТаб.ТипЦены;
				СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(ТипЦены);		
				СтруктураПолей.Вставить(ат_Код, Сч);
				СтруктураПолей.Вставить(СтруктураРеквизитов["ЦенаВключаетНДС"],  ТипЦены.ЦенаВключаетНДС);
				ЗаписатьЭлементВДокументОбмена(XML_Текст, СтруктураПолей);		
				Сч = Сч + 1;
			КонецЦикла;
			
		XML_Текст.ЗаписатьКонецЭлемента(); //ELEMENTS
		
		ВыгрузитьПодтверждениеСправочника(XML_Текст, СоотвЗагруженныхОбъектов, имяСправочника);	
		
	XML_Текст.ЗаписатьКонецЭлемента(); //CATALOG
	//////////////////////////////////////////////////	
	// Выгрузка складов	
	
	имяСправочника = "Склады";
	
	ИдСпр = СоответствиеСпр[имяСправочника];	
	СтруктураРеквизитов = СоответствиеСпр[ИдСпр];
	
	XML_Текст.ЗаписатьНачалоЭлемента(эл_Справочник);	
	XML_Текст.ЗаписатьАтрибут(ат_Гуид, ИдСпр);
	
	УстановитьПризнакОчисткиСправочника(XML_Текст, ИдСпр);
	
	XML_Текст.ЗаписатьАтрибут(ат_Комментарий, СтруктураРеквизитов["_Представление"]);
	
	XML_Текст.ЗаписатьНачалоЭлемента(эл_Группы);	
	XML_Текст.ЗаписатьКонецЭлемента();
	
		XML_Текст.ЗаписатьНачалоЭлемента(эл_Элементы);
		
		Сч = 0;
		Для Каждого ЭлСписка Из ТзСклады Цикл
			Склад = ЭлСписка;
			СтруктураПолей = ПолучитьСтруктуруПредопределенныхПолейСправочника(Склад);			
			СтруктураПолей.Вставить(ат_Код, Сч);			
			ЗаписатьЭлементВДокументОбмена(XML_Текст, СтруктураПолей);		
			Сч = Сч + 1;
		КонецЦикла;
		
		XML_Текст.ЗаписатьКонецЭлемента(); //ELEMENTS
		
	    ВыгрузитьПодтверждениеСправочника(XML_Текст, СоотвЗагруженныхОбъектов, имяСправочника);	
		
	XML_Текст.ЗаписатьКонецЭлемента();     //CATALOG
	
	//////////////////////////////////////////////////	
	// Выгрузка категорий документов	
	
	имяСправочника = "КатегорииДокументов";
	
	СписокЭлементов = ПолучитьЗначениеНастройки(имяСправочника, "Соответствие");
		
	СтруктураРеквизитов = СоответствиеСпр[СоответствиеСпр[имяСправочника]];
	
	//XML_Текст.ЗаписатьКомментарий(СтруктураРеквизитов["ИмяСправочника"]);	
	XML_Текст.ЗаписатьНачалоЭлемента(эл_Справочник);		
		
    XML_Текст.ЗаписатьАтрибут(ат_Гуид, СоответствиеСпр[имяСправочника]);	
    
    // Передаем команду на очистку клиентов перед загрузкой
    Если флОчищатьСправочникиПередЗагрузкой Тогда
    	XML_Текст.ЗаписатьАтрибут(ат_ОчиститьПередЗагрузкой, "1");                	
	КонецЕсли;	
	XML_Текст.ЗаписатьАтрибут(ат_Комментарий, СтруктураРеквизитов["_Представление"]);
    
    XML_Текст.ЗаписатьНачалоЭлемента(эл_Группы);
	XML_Текст.ЗаписатьКонецЭлемента();      	            	
 
    	XML_Текст.ЗаписатьНачалоЭлемента(эл_Элементы);
		
		Если СписокЭлементов <> Неопределено Тогда
			
			Для Каждого текЭл Из СписокЭлементов Цикл
			
				СтруктураПолей = Новый Структура;
				СтруктураПолей.Вставить(ат_Гуид, текЭл.Значение["УникальныйИдентификатор"]);			
				СтруктураПолей.Вставить(СтруктураРеквизитов["Наименование"], текЭл.Значение["Наименование"]);				
				СтруктураПолей.Вставить(СтруктураРеквизитов["Цвет"], ПреобразоватьЦветИзRGBВШестнадцатиричнуюСистему(текЭл.Значение["Цвет"].Получить(), Истина));			
				СтруктураПолей.Вставить(СтруктураРеквизитов["ВидыДокументов"], текЭл.Значение["ВидыДокументов"]);
	    			
	   			ЗаписатьЭлементВДокументОбмена(XML_Текст, СтруктураПолей);				
				
			КонецЦикла;
		
		КонецЕсли;
    		
    	XML_Текст.ЗаписатьКонецЭлемента(); //ELEMENTS
		
		ВыгрузитьПодтверждениеСправочника(XML_Текст, СоотвЗагруженныхОбъектов, имяСправочника);	
    	
    XML_Текст.ЗаписатьКонецЭлемента();     //CATALOG

	//////////////////////////////////////////////////
    // Выгрузка категорий номенклатуры	
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НоменклатурныеГруппы.Ссылка,
	|	НоменклатурныеГруппы.ПометкаУдаления,
	|	НоменклатурныеГруппы.Код,
	|	НоменклатурныеГруппы.Наименование
	|ИЗ
	|	Справочник.НоменклатурныеГруппы КАК НоменклатурныеГруппы
	|ГДЕ
	|	НоменклатурныеГруппы.ПометкаУдаления = ЛОЖЬ");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ВыгрузитьПростойСправочник(XML_Текст, СоотвЗагруженныхОбъектов, СоответствиеСпр["НоменклатурныеГруппы"], Выборка);
	
	//////////////////////////////////////////////////
	
	имяСправочника = "СтатусыКонтрагентов";
	
	СписокЭлементов = ПолучитьСписокЗначенийСвойствОбъекта("СтатусКонтрагента", имяСправочника, Неопределено, Ложь);
		
	СтруктураРеквизитов = СоответствиеСпр[СоответствиеСпр[имяСправочника]];
	
	//XML_Текст.ЗаписатьКомментарий(СтруктураРеквизитов["ИмяСправочника"]);	
	XML_Текст.ЗаписатьНачалоЭлемента(эл_Справочник);		
		
    XML_Текст.ЗаписатьАтрибут(ат_Гуид, СоответствиеСпр[имяСправочника]);	
    
    // Передаем команду на очистку клиентов перед загрузкой
    Если флОчищатьСправочникиПередЗагрузкой Тогда
    	XML_Текст.ЗаписатьАтрибут(ат_ОчиститьПередЗагрузкой, "1");                	
	КонецЕсли;	
	XML_Текст.ЗаписатьАтрибут(ат_Комментарий, СтруктураРеквизитов["_Представление"]);
    
    XML_Текст.ЗаписатьНачалоЭлемента(эл_Группы);
	XML_Текст.ЗаписатьКонецЭлемента();      	            	
 
    	XML_Текст.ЗаписатьНачалоЭлемента(эл_Элементы);
		
		Если СписокЭлементов <> Неопределено Тогда
			
			Для Каждого текЭл Из СписокЭлементов Цикл
				
				Если текЭл.Значение["ПометкаУдаления"] Тогда
					Продолжить;
				КонецЕсли;
				
				СтруктураПолей = Новый Структура;
				СтруктураПолей.Вставить(ат_Гуид, текЭл.Значение["УникальныйИдентификатор"]);			
				СтруктураПолей.Вставить(СтруктураРеквизитов["Наименование"], текЭл.Значение["Наименование"]);
				СтруктураПолей.Вставить(СтруктураРеквизитов["Предупреждение"], текЭл.Значение["Предупреждение"]);
				СтруктураПолей.Вставить(СтруктураРеквизитов["Цвет"], ПреобразоватьЦветИзRGBВШестнадцатиричнуюСистему(текЭл.Значение["Цвет"].Получить(), Истина));			
	    			
	   			ЗаписатьЭлементВДокументОбмена(XML_Текст, СтруктураПолей);				
				
			КонецЦикла;
		
		КонецЕсли;
    		
    	XML_Текст.ЗаписатьКонецЭлемента(); //ELEMENTS
		
		ВыгрузитьПодтверждениеСправочника(XML_Текст, СоотвЗагруженныхОбъектов, имяСправочника);	
    	
    XML_Текст.ЗаписатьКонецЭлемента();     //CATALOG	

	//////////////////////////////////////////////////
	// Выгрузка запросов
	
	имяСправочника = "Запросы";
	
	ВыгрузитьПростойСправочникНастроек(XML_Текст, "Запросы");
	
	//////////////////////////////////////////////////	
	// Выгрузка штрихкодов	
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Штрихкоды.Штрихкод,
	|	Штрихкоды.Владелец,
	|	Штрихкоды.ХарактеристикаНоменклатуры,
	|	Штрихкоды.ЕдиницаИзмерения
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Владелец В ИЕРАРХИИ(&Ассортимент)");
	
	Запрос.УстановитьПараметр("Ассортимент", СзАссортимент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	имяСправочника = "Штрихкоды";
	
	ИдСпр = СоответствиеСпр[имяСправочника];
	
	СтруктураРеквизитов = СоответствиеСпр[ИдСпр];
	
	XML_Текст.ЗаписатьНачалоЭлемента(эл_Справочник);
	
	XML_Текст.ЗаписатьАтрибут(ат_Гуид, ИдСпр);
	
	// Передаем всегда команду на очистку перед загрузкой

	УстановитьПризнакОчисткиСправочника(XML_Текст, ИдСпр);
		
	XML_Текст.ЗаписатьАтрибут(ат_Комментарий, СтруктураРеквизитов["_Представление"]);
	
	XML_Текст.ЗаписатьНачалоЭлемента(эл_Группы);
	XML_Текст.ЗаписатьКонецЭлемента();	
		 
		XML_Текст.ЗаписатьНачалоЭлемента(эл_Элементы);
		
		Пока Выборка.Следующий() Цикл		
			СтруктураПолей = Новый Структура;
			СтруктураПолей.Вставить(ат_Гуид, Новый УникальныйИдентификатор());
			СтруктураПолей.Вставить(ат_ПометкаУдаления, "0");
			СтруктураПолей.Вставить(СтруктураРеквизитов["Штрихкод"], Выборка.Штрихкод);
			СтруктураПолей.Вставить(СтруктураРеквизитов["Владелец"], ?(ЗначениеЗаполнено(Выборка.ХарактеристикаНоменклатуры), Выборка.ХарактеристикаНоменклатуры, Выборка.Владелец));
			СтруктураПолей.Вставить(СтруктураРеквизитов["ЕдиницаИзмерения"], Выборка.ЕдиницаИзмерения);
			ЗаписатьЭлементВДокументОбмена(XML_Текст, СтруктураПолей);		
		КонецЦикла;
		
		XML_Текст.ЗаписатьКонецЭлемента(); //ELEMENTS
		
	XML_Текст.ЗаписатьКонецЭлемента();     //CATALOG
    //////////////////////////////////////////////////
	
КонецПроцедуры //ВыгрузитьДополнительнуюИнформацию

Процедура ВыгрузитьФотоСправочников(XML_Текст, СоотвЗагруженныхОбъектов, СзАссортимент, сзКлиентыАгента, сзТоргТочкиАгента, сзФотоСпр)
	
	имяСправочника = "ФотоСправочников";
	идСпр = СоответствиеСпр[имяСправочника];
	СтруктураРеквизитов = СоответствиеСпр[идСпр];
	
	сзФотоСпр.Очистить();
	
	#Если Клиент Тогда
		Состояние(НСтр("ru='Выгрузка фотографий справочников ...'"));
	#КонецЕсли  
	
	//XML_Текст.ЗаписатьКомментарий(СтруктураРеквизитов["ИмяСправочника"]);	
	XML_Текст.ЗаписатьНачалоЭлемента(эл_Справочник);
	XML_Текст.ЗаписатьАтрибут(ат_Гуид, идСпр);
	
	Если флВыгружатьКартинки Тогда						
		
		УстановитьПризнакОчисткиСправочника(XML_Текст, идСпр);		
		
		XML_Текст.ЗаписатьНачалоЭлемента(эл_Элементы);
		
		Запрос = Новый Запрос;
		ТекстЗапроса = "ВЫБРАТЬ
		               |	ХранилищеДополнительнойИнформации.Ссылка,
					   |	ХранилищеДополнительнойИнформации.Наименование,
					   |	ХранилищеДополнительнойИнформации.Объект
		               |ИЗ
		               |	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
		               |ГДЕ
		               |	ХранилищеДополнительнойИнформации.Объект В(&СписокЭлементов)
		               |	И ХранилищеДополнительнойИнформации.ПометкаУдаления = ЛОЖЬ
					   |	И ХранилищеДополнительнойИнформации.ВидДанных= ЗНАЧЕНИЕ(Перечисление.ВидыДополнительнойИнформацииОбъектов.Изображение)";
					   
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("СписокЭлементов", СзАссортимент);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий()  Цикл			
			
			сзФотоСпр.Добавить(Выборка.Ссылка);
			
			ИдФото = Выборка.Ссылка.УникальныйИдентификатор(); 
			СтруктураПолей = Новый Структура;
			СтруктураПолей.Вставить(ат_Гуид, ИдФото);
			СтруктураПолей.Вставить(ат_ПометкаУдаления, Ложь);
			СтруктураПолей.Вставить(ат_Наименование, Выборка.Наименование);
			СтруктураПолей.Вставить(СтруктураРеквизитов["Фото"], ИдФото);
			СтруктураПолей.Вставить(СтруктураРеквизитов["Номенклатура"], Выборка.Объект.УникальныйИдентификатор());
			ЗаписатьЭлементВДокументОбмена(XML_Текст, СтруктураПолей);
								
		КонецЦикла;
		
		//Запрос = Новый Запрос;
		//Запрос.Текст = ТекстЗапроса;
		//		   
		//Запрос.УстановитьПараметр("СписокЭлементов", сзКлиентыАгента);
		//Выборка = Запрос.Выполнить().Выбрать();
		//
		//Пока Выборка.Следующий() Цикл			
		//	
		//	сзФотоСпр.Добавить(Выборка.Ссылка);
		//				
		//	СтруктураПолей = Новый Структура;
		//	СтруктураПолей.Вставить(ат_Гуид, Выборка.Ссылка.УникальныйИдентификатор());
		//	СтруктураПолей.Вставить(ат_ПометкаУдаления, Ложь);
		//	СтруктураПолей.Вставить(ат_Наименование, Выборка.Наименование);
		//	СтруктураПолей.Вставить(СтруктураРеквизитов["Контрагент"]	 , Выборка.Объект.УникальныйИдентификатор());
		//	ЗаписатьЭлементВДокументОбмена(XML_Текст, СтруктураПолей);
		//						
		//КонецЦикла;
		//
		//Если ИспользоватьТорговыеТочки Тогда			
		//	
		//	Запрос = Новый Запрос;
		//	Запрос.Текст = ТекстЗапроса;
		//	
		//	Запрос.УстановитьПараметр("СписокЭлементов", сзТоргТочкиАгента);
		//	Выборка = Запрос.Выполнить().Выбрать();
		//	
		//	Пока Выборка.Следующий()  Цикл			
		//		
		//		сзФотоСпр.Добавить(Выборка.Ссылка);
		//					
		//		СтруктураПолей = Новый Структура;
		//		СтруктураПолей.Вставить(ат_Гуид, Выборка.Ссылка.УникальныйИдентификатор());
		//		СтруктураПолей.Вставить(ат_ПометкаУдаления, Ложь);
		//		СтруктураПолей.Вставить(ат_Наименование, Выборка.Наименование);
		//		СтруктураПолей.Вставить(СтруктураРеквизитов["ТорговаяТочка"]	 , Выборка.Объект.УникальныйИдентификатор());
		//		ЗаписатьЭлементВДокументОбмена(XML_Текст, СтруктураПолей);
		//							
		//	КонецЦикла;
		//КонецЕсли;
		
		XML_Текст.ЗаписатьКонецЭлемента(); //ELEMENTS
		
	Иначе
		XML_Текст.ЗаписатьАтрибут(ат_Комментарий, СтруктураРеквизитов["_Представление"]);		
	КонецЕсли;
	
	ВыгрузитьПодтверждениеСправочника(XML_Текст, СоотвЗагруженныхОбъектов, имяСправочника);	
	XML_Текст.ЗаписатьКонецЭлемента(); //CATALOG
	
КонецПроцедуры

//Альфия 26.05.2017
Процедура ВыгрузитьВидыДоставки(XML_Текст, СоотвЗагруженныхОбъектов, ВидыДоставки)
	XML_Текст.ЗаписатьНачалоЭлемента(эл_Справочник); //CATALOG	
	ИдСпр = СоответствиеСпр["ВидыДоставки"];
	СтруктураРеквизитов = СоответствиеСпр[ИдСпр];	
	XML_Текст.ЗаписатьАтрибут("GUID", ИдСпр);
	XML_Текст.ЗаписатьАтрибут(ат_Комментарий, СтруктураРеквизитов["_Представление"]);
	XML_Текст.ЗаписатьНачалоЭлемента(эл_Элементы); //Elements
	
	Соответствие = СоответствиеСпр["Значения_ВидыДоставки"];
	
	XML_Текст.ЗаписатьНачалоЭлемента(эл_Элемент);	//ITEM
	XML_Текст.ЗаписатьАтрибут(СтруктураРеквизитов["Наименование"],Соответствие["d48fabce-eee2-4d05-a39b-11c01a00b51e"]);	
	XML_Текст.ЗаписатьАтрибут(СтруктураРеквизитов["GUID"],Соответствие["Самовывоз"]);
	XML_Текст.ЗаписатьКонецЭлемента(); 				//ITEM	
	
	XML_Текст.ЗаписатьНачалоЭлемента(эл_Элемент);	//ITEM
	XML_Текст.ЗаписатьАтрибут(СтруктураРеквизитов["Наименование"],Соответствие["5e2ac82f-cf7b-4545-a631-fa2715b9332b"]);	
	XML_Текст.ЗаписатьАтрибут(СтруктураРеквизитов["GUID"],Соответствие["До клиента"]);	
	XML_Текст.ЗаписатьКонецЭлемента(); 
	
	XML_Текст.ЗаписатьКонецЭлемента(); //Elements
	XML_Текст.ЗаписатьКонецЭлемента(); //CATALOG

КонецПроцедуры
//Альфия 26.05.2017

// sk_190116 Процедура не используется
//
Процедура ВыгрузитьИзображенияOLD(XML_Текст, Агент, СоотвЗагруженныхОбъектов, сзФотоСпр, КолФотоМТ)
	
	Если Не флВыгружатьКартинки Тогда		
		ВыгрузитьПодтвержденияФотографий(XML_Текст, СоотвЗагруженныхОбъектов, Истина);
		Возврат;
    КонецЕсли;
	
	ИмяКаталога = РабочаяПапка + "PhotosFrom1C\";
	
	ПроверитьСуществованиеКаталога(ИмяКаталога, Ложь);
	
	НайденныеФайлы = НайтиФайлы(ИмяКаталога, "*.PNG");
	
	Если НайденныеФайлы.Количество() > 0 Тогда 
		АП_УдалитьФайлы(ТипыЛогов["Обмен"], Агент,  ИмяКаталога, "*.PNG");
	КонецЕсли;
		
	XML_Текст.ЗаписатьНачалоЭлемента(эл_Элементы);
	
	СтрДляАрхива = "";	
	
	Для Каждого текЭл Из сзФотоСпр Цикл
		
		Ссылка = текЭл.Значение;
		ИдФото 	   	   = Ссылка.УникальныйИдентификатор();
		ИмяФайлаФото   = ВРег(Строка(ИдФото));
		ПолноеИмяФайла = ИмяКаталога + ИмяФайлаФото;
		
		СтруктураПолей = Новый Структура;
		СтруктураПолей.Вставить(ат_Гуид	 	 , ИдФото);
		СтруктураПолей.Вставить(ат_ИмяФайла	 , ИмяФайлаФото);
		СтруктураПолей.Вставить(ат_Формат	 , "PNG");
		СтруктураПолей.Вставить(ат_Описание, Ссылка.Наименование);
		ЗаписатьЭлементВДокументОбмена(XML_Текст, СтруктураПолей);
				
		Картинка 	   = Ссылка.Хранилище.Получить();   
		КартинкаPNG    = Картинка.Преобразовать(ФорматКартинки.PNG);
		КартинкаPNG.Записать(ПолноеИмяФайла);
		КолФотоМТ = КолФотоМТ + 1;
		
		СтрДляАрхива = СтрДляАрхива + ИмяФайлаФото + Т_ + ПолноеИмяФайла + Т_;	
	КонецЦикла;
	
	XML_Текст.ЗаписатьКонецЭлемента(); //ELEMENTS
	
	ВыгрузитьПодтвержденияФотографий(XML_Текст, СоотвЗагруженныхОбъектов, Ложь);		
	
	Если ЗначениеЗаполнено(СтрДляАрхива) Тогда
		// Убираем последний табулятор
		СтрДляАрхива = Лев(СтрДляАрхива, СтрДлина(СтрДляАрхива)-1);	
		#Если Не Клиент Тогда
			МУОбъектZip.Pack(ИмяКаталога + Имена["АрхивВыгрузкиКартинки"] + Имена["РасширениеZIP"], СтрДляАрхива);									
		#Иначе
			Попытка   //Альфия 15.05.2017
				МУОбъект.АрхУпаковать(ИмяКаталога + Имена["АрхивВыгрузкиКартинки"] + Имена["РасширениеZIP"], СтрДляАрхива);	
			Исключение //Альфия 15.05.2017
				Предупреждение("Ошибка использования архиватора");	
			КонецПопытки;  //Альфия 15.05.2017
		#КонецЕсли
	КонецЕсли;

КонецПроцедуры

Процедура ВыгрузитьИзображения(XML_Текст, Агент, СоотвЗагруженныхОбъектов, сзФотоСпр, КолФотоМТ)
	
	Если Не флВыгружатьКартинки Тогда		
		ВыгрузитьПодтвержденияФотографий(XML_Текст, СоотвЗагруженныхОбъектов, Истина);
		Возврат;
	КонецЕсли;
	
	//(( sk_190130 Преобразование картинки в формат PNG будем выполнять, если формат не соответствует допустимому (MOD-238)
	//ИмяКаталога = РабочаяПапка + "PhotosFrom1C\";
	//
	//ПроверитьСуществованиеКаталога(ИмяКаталога, Ложь);
	//
	//НайденныеФайлы = НайтиФайлы(ИмяКаталога, "*.PNG");
	//
	//Если НайденныеФайлы.Количество() > 0 Тогда 
	//	АП_УдалитьФайлы(ТипыЛогов["Обмен"], Агент,  ИмяКаталога, "*.PNG");
	//КонецЕсли;
	//	
	//XML_Текст.ЗаписатьНачалоЭлемента(эл_Элементы);
	//
	//СтрДляАрхива = "";	
	//ИмяФайлаАрхива = ИмяКаталога + Имена["АрхивВыгрузкиКартинки"] + Имена["РасширениеZIP"];
	//ФайлАрхиваКартинок = Новый ЗаписьZipФайла(ИмяФайлаАрхива, , , , УровеньСжатияZIP.Максимальный); 

	//Для Каждого текЭл Из сзФотоСпр Цикл
	//	
	//	Ссылка = текЭл.Значение;
	//	ИдФото 	   	   = Ссылка.УникальныйИдентификатор();
	//	ИмяФайлаФото   = ВРег(Строка(ИдФото));
	//	ПолноеИмяФайла = ИмяКаталога + ИмяФайлаФото;
	//	
	//	СтруктураПолей = Новый Структура;
	//	СтруктураПолей.Вставить(ат_Гуид	 	 , ИдФото);
	//	СтруктураПолей.Вставить(ат_ИмяФайла	 , ИмяФайлаФото);
	//	СтруктураПолей.Вставить(ат_Формат	 , "PNG");
	//	СтруктураПолей.Вставить(ат_Описание, Ссылка.Наименование);
	//	ЗаписатьЭлементВДокументОбмена(XML_Текст, СтруктураПолей);
	//			
	//	Картинка 	   = Ссылка.Хранилище.Получить();   
	//	КартинкаPNG    = Картинка.Преобразовать(ФорматКартинки.PNG);
	//	КартинкаPNG.Записать(ПолноеИмяФайла);
	//	КолФотоМТ = КолФотоМТ + 1;
	//	//++Ratmir 2018-07-20
	//	Если КартинкаPNG <> Неопределено Тогда 
	//		ФайлАрхиваКартинок.Добавить(ПолноеИмяФайла);
	//	КонецЕсли;
	//	//--Ratmir 2018-07-20
	//	СтрДляАрхива = СтрДляАрхива + ИмяФайлаФото + Т_ + ПолноеИмяФайла + Т_;
	//КонецЦикла;
	//
	//XML_Текст.ЗаписатьКонецЭлемента(); //ELEMENTS
	//
	//ВыгрузитьПодтвержденияФотографий(XML_Текст, СоотвЗагруженныхОбъектов, Ложь);		
	//
	//
	//		
	//ФайлКартинкиНаДиске = Новый Файл(ПолноеИмяФайла);
	//
	//
	////++Ratmir 2018-07-20
	//Попытка
	//	ФайлАрхиваКартинок.Записать();
	//Исключение
	//	Предупреждение("Ошибка использования архиватора");	
	//КонецПопытки;
	
	стрИмяКаталога = РабочаяПапка + "PhotosFrom1C\";
	
	ПроверитьСуществованиеКаталога(стрИмяКаталога, Ложь);
	
	мНайденныеФайлы = НайтиФайлы(стрИмяКаталога, "*.*");
	
	Если мНайденныеФайлы.Количество() > 0 Тогда 
		АП_УдалитьФайлы(ТипыЛогов["Обмен"], Агент, стрИмяКаталога, "*.*");
	КонецЕсли;
	
	XML_Текст.ЗаписатьНачалоЭлемента(эл_Элементы);
	
	стрИмяФайлаАрхива = стрИмяКаталога + Имена["АрхивВыгрузкиКартинки"] + Имена["РасширениеZIP"];
	ФайлАрхиваКартинок = Новый ЗаписьZipФайла(стрИмяФайлаАрхива, , , , УровеньСжатияZIP.Максимальный); 
	
	мДопустимыеФорматыКартинок = ПолучитьМассивДопустимыхФорматовКартинок(); // Получаем массив допустимых форматов картинок
	
	Для Каждого текЭл Из сзФотоСпр Цикл
		
		Ссылка = текЭл.Значение;
		ИдФото = Ссылка.УникальныйИдентификатор();
		
		Картинка = Ссылка.Хранилище.Получить();   
		
		Если ТипЗнч(Картинка) = Тип("ДвоичныеДанные") Тогда
			Картинка = Новый Картинка(Картинка);
		КонецЕсли;
		
		Если Картинка = Неопределено Тогда
			Продолжить;
		КонецЕсли;		
		
		Если Не мДопустимыеФорматыКартинок.Найти(Строка(Картинка.Формат())) = Неопределено Тогда
			КартинкаВКПК 	= Картинка;
			стрИмяФайлаФото = Строка(ИдФото) + "." + НРег(Картинка.Формат());
		Иначе
			Попытка
				КартинкаВКПК 	= Картинка.Преобразовать(ФорматКартинки.PNG);
				стрИмяФайлаФото = Строка(ИдФото) + ".png";
			Исключение				
				ОповеститьОСобытии("Ошибка преобразования картинки в формат PNG: """ + Строка(Ссылка) + """", СтатусСообщения.Внимание, Истина, Ссылка);
				Продолжить;
			КонецПопытки;
		КонецЕсли;
		
		стрПолноеИмяФайла = стрИмяКаталога + стрИмяФайлаФото;
		
		стррПоля = Новый Структура;
		стррПоля.Вставить(ат_Гуид, 	   ИдФото);
		стррПоля.Вставить(ат_ИмяФайла, стрИмяФайлаФото);
		стррПоля.Вставить(ат_Формат,   РаботаСФайлами.ПолучитьРасширениеФайла(стрИмяФайлаФото));
		стррПоля.Вставить(ат_Описание, Ссылка.Наименование);
		
		ЗаписатьЭлементВДокументОбмена(XML_Текст, стррПоля);
		
		ФайлКартинкиНаДиске = Новый Файл(стрПолноеИмяФайла);
		
		Если ФайлКартинкиНаДиске.Существует() Тогда		
			Продолжить;
		КонецЕсли;
		
		Если КартинкаВКПК <> Неопределено Тогда
			КартинкаВКПК.Записать(стрПолноеИмяФайла);
			КолФотоМТ = КолФотоМТ + 1;
			ФайлАрхиваКартинок.Добавить(стрПолноеИмяФайла);
		КонецЕсли;
		
	КонецЦикла;
	
	XML_Текст.ЗаписатьКонецЭлемента(); //ELEMENTS
	
	ВыгрузитьПодтвержденияФотографий(XML_Текст, СоотвЗагруженныхОбъектов, Ложь);		
	
	Попытка
		ФайлАрхиваКартинок.Записать();
	Исключение
		ОповеститьОСобытии("ru='Не удалось записать zip-архив по причине: " + СтрЗаменить(ОписаниеОшибки(), "'", """") + "'", ТипыЛогов["Обмен"], СтатусСообщения.Важное, Агент);
	КонецПопытки;
	//)) sk_190130
	
	//Если ЗначениеЗаполнено(СтрДляАрхива) Тогда
	//	// Убираем последний табулятор
	//	СтрДляАрхива = Лев(СтрДляАрхива, СтрДлина(СтрДляАрхива)-1);	
	//	#Если Не Клиент Тогда
	//		МУОбъектZip.Pack(ИмяКаталога + Имена["АрхивВыгрузкиКартинки"] + Имена["РасширениеZIP"], СтрДляАрхива);									
	//	#Иначе
	//		Попытка   //Альфия 15.05.2017
	//			МУОбъект.АрхУпаковать(ИмяКаталога + Имена["АрхивВыгрузкиКартинки"] + Имена["РасширениеZIP"], СтрДляАрхива);	
	//		Исключение //Альфия 15.05.2017
	//			Предупреждение("Ошибка использования архиватора");	
	//		КонецПопытки;  //Альфия 15.05.2017
	//	#КонецЕсли
	//КонецЕсли;
	//--Ratmir 2018-07-20

КонецПроцедуры // ВыгрузитьКартинкиНоменклатуры()

Процедура ВыгрузитьПодтвержденияДокументов(XML_Текст, Агент)
	
	XML_Текст.ЗаписатьНачалоЭлемента(эл_Документы);
	
	//ДобавитьПоле("Comment", "Подтверждения документов");
	
	   	ВыгрузитьПодтвержденияЗаказовПокупателей(XML_Текст, Агент);				
		
		ВыгрузитьПодтвержденияДокумента(XML_Текст, "ПеремещениеТоваров", "Перемещение", Агент);      //vd_180824
		ВыгрузитьПодтвержденияДокумента(XML_Текст, "РеализацияТоваровУслуг", "Реализация", Агент);   //vd_180817
		ВыгрузитьПодтвержденияДокумента(XML_Текст, "ПриходныйКассовыйОрдер", "ПКО", Агент);
		ВыгрузитьПодтвержденияДокумента(XML_Текст, "РасходныйКассовыйОрдер", "ПКО", Агент);
		ВыгрузитьПодтвержденияДокумента(XML_Текст, "ВозвратТоваровОтПокупателя", "Поступление", Агент);
		ВыгрузитьПодтвержденияДокумента(XML_Текст, "ПоступлениеТоваровУслуг", "Поступление", Агент); //vd_180824
		ВыгрузитьПодтвержденияПосещений(XML_Текст, Агент);  // sk_181016 Выполняем выгрузку подтверждения "Посещений" при выгрузке ответных данных
		ВОВыгрузитьПодтвержденияДокумента(XML_Текст, ВОТипОбъекта.Мерчендайзинг, Агент);

	XML_Текст.ЗаписатьКонецЭлемента(); //DOCUMENTS
	
КонецПроцедуры //ВыгрузитьПодтвержденияДокументов

Процедура ВыгрузитьПодтверждениеСправочника(XML_Текст, СоотвЗагруженныхОбъектов, имяСправочника)
	
	Если СоотвЗагруженныхОбъектов <> Неопределено Тогда			
		СписокЭлементов = СоотвЗагруженныхОбъектов[СоответствиеСпр[имяСправочника]];			
		Если СписокЭлементов <> Неопределено Тогда					
			XML_Текст.ЗаписатьНачалоЭлемента(эл_Подтвердить);					
			Для Каждого текЭл Из СписокЭлементов Цикл					
				//ДобавитьПоле("Comment", "Подтверждения справочника '" + ТекВидСпр + "'");			
	        	ЗаписатьЭлементВДокументОбмена(XML_Текст, Новый Структура(ат_Гуид, текЭл));					
			КонецЦикла;				
			XML_Текст.ЗаписатьКонецЭлемента();						//CONFIRMATIONS
		КонецЕсли;			
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьПодтвержденияСправочников(XML_Текст, СоотвЗагруженныхОбъектов)
	
	XML_Текст.ЗаписатьНачалоЭлемента(эл_Справочники);
	
	Если СоотвЗагруженныхОбъектов <> Неопределено Тогда		
		Если СоотвЗагруженныхОбъектов[эл_Справочники] <> Неопределено Тогда		   
			
			СоотвЗагруженныхСпр = СоотвЗагруженныхОбъектов[эл_Справочники]; 
			//ДобавитьПоле("Comment", "Подтверждения справочников");		 
			
			Для Каждого списокЭлСпр Из СоотвЗагруженныхСпр Цикл 
				 		
				#Если Клиент Тогда
					ОбработкаПрерыванияПользователя();
				#КонецЕсли   
				
				ИдСпр = списокЭлСпр.Ключ;
				СписокЭлементов = списокЭлСпр.Значение;
				
				XML_Текст.ЗаписатьНачалоЭлемента(эл_Справочник);
							
				XML_Текст.ЗаписатьАтрибут(ат_Гуид, ИдСпр);
				
				XML_Текст.ЗаписатьНачалоЭлемента(эл_Подтвердить);	
				
				Для Каждого текЭл Из СписокЭлементов Цикл
					
					//ДобавитьПоле("Comment", "Подтверждения справочника '" + ТекВидСпр + "'");			
		        	ЗаписатьЭлементВДокументОбмена(XML_Текст, Новый Структура(ат_Гуид, текЭл));
					
				КонецЦикла;
				
				XML_Текст.ЗаписатьКонецЭлемента(); //CONFIRMATIONS			
				XML_Текст.ЗаписатьКонецЭлемента(); //CATALOG 
				
			КонецЦикла;	
			
			
		КонецЕсли;							
	КонецЕсли;
		
	XML_Текст.ЗаписатьКонецЭлемента(); //CATALOGS    	
	
КонецПроцедуры //ВыгрузитьПодтвержденияСправочников

Процедура ВыгрузитьПодтвержденияФотографий(XML_Текст, СоотвЗагруженныхОбъектов, ЗакрыватьТег = Ложь)
	
	Если СоотвЗагруженныхОбъектов = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если ЗакрыватьТег Тогда	
		XML_Текст.ЗаписатьНачалоЭлемента(эл_Картинки);
	КонецЕсли;
	
	XML_Текст.ЗаписатьНачалоЭлемента(эл_Подтвердить);
	
		
	//ДобавитьПоле("Comment", "Подтверждения фотографий");	
	сзЗагруженныхФото = СоотвЗагруженныхОбъектов[эл_Картинки];			
	
	Если сзЗагруженныхФото <> Неопределено Тогда			
			
			Для Каждого элСписка Из сзЗагруженныхФото Цикл 
				
				#Если Клиент Тогда
					ОбработкаПрерыванияПользователя();
				#КонецЕсли   	
			
				ЗаписатьЭлементВДокументОбмена(XML_Текст, Новый Структура(ат_Гуид, элСписка.СсылкаФото.УникальныйИдентификатор()));
			
			КонецЦикла;
						
	КонецЕсли;	
	
	XML_Текст.ЗаписатьКонецЭлемента(); //CONFIRMATIONS  		
	
	Если ЗакрыватьТег Тогда
		XML_Текст.ЗаписатьКонецЭлемента(); //PICTURES   	
	КонецЕсли;
	
КонецПроцедуры //ВыгрузитьПодтвержденияФотографий

Процедура ВыгрузитьПодтвержденияНумераторов(XML_Текст, СоотвЗагруженныхОбъектов);
	
	XML_Текст.ЗаписатьНачалоЭлемента(эл_Нумераторы);
	
	Если СоотвЗагруженныхОбъектов <> Неопределено Тогда		
		Если СоотвЗагруженныхОбъектов[эл_Нумераторы] <> Неопределено Тогда		   
			
			СоотвЗагруженныхНумер = СоотвЗагруженныхОбъектов[эл_Нумераторы]; 
			//ДобавитьПоле("Comment", "Подтверждения справочников");		 
											
			XML_Текст.ЗаписатьНачалоЭлемента(эл_Подтвердить);	
			
			Для Каждого текЭл Из СоотвЗагруженныхНумер Цикл
				
				//ДобавитьПоле("Comment", "Подтверждения справочника '" + ТекВидСпр + "'");			
	        	ЗаписатьЭлементВДокументОбмена(XML_Текст, Новый Структура(ат_Гуид, текЭл.Ключ));
				
			КонецЦикла;
			
			XML_Текст.ЗаписатьКонецЭлемента(); //CONFIRMATIONS			
			
		КонецЕсли;							
	КонецЕсли;
		
	XML_Текст.ЗаписатьКонецЭлемента(); //NUMERATORS
	
КонецПроцедуры //ВыгрузитьПодтвержденияНумераторов

Процедура ВыгрузитьПодтверждения(XML_Текст, Агент, СоотвЗагруженныхОбъектов = Неопределено) Экспорт
				
	ВыгрузитьПодтвержденияСправочников(XML_Текст, СоотвЗагруженныхОбъектов);
	
	ВыгрузитьПодтвержденияДокументов(XML_Текст, Агент); 		
	
	ВыгрузитьПодтвержденияФотографий(XML_Текст, СоотвЗагруженныхОбъектов, Истина);
	
	ВыгрузитьПодтвержденияНумераторов(XML_Текст, СоотвЗагруженныхОбъектов);			
	
КонецПроцедуры //ВыгрузитьПодтверждения

Процедура ПроверитьОсновнойДоговорКонтрагента(Контрагент)

	Если ЗначениеЗаполнено(Контрагент.ОсновнойДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;

	ВыборкаДоговоров = Справочники.ДоговорыКонтрагентов.Выбрать(, Контрагент);
	Если ВыборкаДоговоров.Следующий() Тогда
		ОсновнойДоговорКонтрагента = ВыборкаДоговоров.Ссылка;
	Иначе
		НайденныйДоговорОбъект              = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		НайденныйДоговорОбъект.Наименование = "Основной договор";

		НайденныйДоговорОбъект.ВалютаВзаиморасчетов = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяВалютаВзаиморасчетов");
		Если НЕ ЗначениеЗаполнено(НайденныйДоговорОбъект.ВалютаВзаиморасчетов) Тогда
			НайденныйДоговорОбъект.ВалютаВзаиморасчетов = глЗначениеПеременной("ВалютаУправленческогоУчета");
		КонецЕсли;

		НайденныйДоговорОбъект.Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
		Если НЕ ЗначениеЗаполнено(НайденныйДоговорОбъект.Организация) Тогда
			Запрос = Новый Запрос();
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	Организации.Ссылка
			               |ИЗ
			               |	Справочник.Организации КАК Организации";
			Результат = Запрос.Выполнить();
			Если НЕ Результат.Пустой() Тогда
				Выборка = Результат.Выбрать();
				Выборка.Следующий();
				НайденныйДоговорОбъект.Организация = Выборка.Ссылка;
			Иначе
				Сообщить("Не удалось записать основной договор контрагента (не найдена организация).");
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;

		НайденныйДоговорОбъект.Владелец           = Контрагент;
		НайденныйДоговорОбъект.ВидУсловийДоговора = Перечисления.ВидыУсловийДоговоровВзаиморасчетов.БезДополнительныхУсловий;

		Если Контрагент.Покупатель Тогда
			НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
			НайденныйДоговорОбъект.ТипЦен      = Справочники.ТипыЦенНоменклатуры.ПустаяСсылка();
		ИначеЕсли Контрагент.Поставщик Тогда
			НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
			НайденныйДоговорОбъект.ТипЦен      = Справочники.ТипыЦенНоменклатурыКонтрагентов.ПустаяСсылка();
		Иначе
			НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
		КонецЕсли;

		Если НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
			НайденныйДоговорОбъект.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
		Иначе
			НайденныйДоговорОбъект.ВедениеВзаиморасчетов = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновноеВедениеВзаиморасчетовПоДоговорам");
			Если НЕ ЗначениеЗаполнено(НайденныйДоговорОбъект.ВедениеВзаиморасчетов) Тогда
				НайденныйДоговорОбъект.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам;
			КонецЕсли;
			НайденныйДоговорОбъект.ВестиПоДокументамРасчетовСКонтрагентом = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновныеРасчетыПоДокументамСКонтрагентами");
		КонецЕсли;

		Если (НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком
		 ИЛИ  НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем)
		   И НайденныйДоговорОбъект.ВалютаВзаиморасчетов <> глЗначениеПеременной("ВалютаРегламентированногоУчета") Тогда
			НайденныйДоговорОбъект.РасчетыВУсловныхЕдиницах = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновныеРасчетыПоДоговоруВУсловныхЕдиницах");
		КонецЕсли;

		Если Контрагент.НеЯвляетсяРезидентом И НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
			НайденныйДоговорОбъект.РеализацияНаЭкспорт = Истина;
		КонецЕсли;

		Если НайденныйДоговорОбъект.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом
		 ИЛИ НайденныйДоговорОбъект.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
			НайденныйДоговорОбъект.ОбособленныйУчетТоваровПоЗаказамПокупателей = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОбособленныйУчетТоваровПоЗаказамПокупателей");
		КонецЕсли;

		Если НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
			НайденныйДоговорОбъект.ПроцентПредоплаты = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойРазмерПредоплатыПоЗаказуПокупателя");
		КонецЕсли;

		Попытка
			НайденныйДоговорОбъект.Записать();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, "Не удалось записать основной договор контрагента.");
			Отказ = Истина;
			Возврат;
		КонецПопытки;

		ОсновнойДоговорКонтрагента = НайденныйДоговорОбъект.Ссылка;
		
		КонтрагентОбъект = Контрагент.ПолучитьОбъект();
		КонтрагентОбъект.ОсновнойДоговорКонтрагента = ОсновнойДоговорКонтрагента;
		КонтрагентОбъект.Записать();

	КонецЕсли;

КонецПроцедуры //ПроверитьОсновнойДоговорКонтрагента
       
Процедура УстановитьПризнакОчисткиСправочника(XML_Текст, ИдСпр)
	
	Если флОчищатьСправочникиПередЗагрузкой Тогда
		НайдЭлемент = СписокУдаляемыхСпр.НайтиПоЗначению(ИдСпр);
		Если НайдЭлемент <> Неопределено Тогда
			XML_Текст.ЗаписатьАтрибут(ат_ОчиститьПередЗагрузкой, Строка(Число(НайдЭлемент.Пометка)));			
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры //УстановитьПризнакОчисткиСправочника  

 //////////////////////////////////////////////////////////////////////////////////
 // ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ МОДУЛЯ ТЕХПОДДЕРЖКИ
 //////////////////////////////////////////////////////////////////////////////////
 
#Если Клиент Тогда
 
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ СОЗДАНИЯ ЭЛЕКТРОННОГО ПИСЬМА В СЛУЖБУ ТЕХПОДДЕРЖКИ

// Функция корректно обрезает имя файла если оно  больше 100 символов, 
// чтобы осталось расширение. (рфОбрезатьИмяФайла("ОченьДлинноеИмяФайла.txt",20) -> ОченьДлинноеИмяФ.txt)
//
// Параметры
//  ИмяФайла 		   – Строка, содержащая имя файла, неважно с именем каталога или без.
//  КоличествоСимволов – Число, кол-во символов, до которого необходимо урезать имя файла.
//  ВыводитьСообщение  – Булево, признак необходимости вывести сообщение что имя файла обрезано.
//
// Возвращаемое значение:
//  Строка   – обрезанное имя файла.
//
Функция ОбрезатьИмяФайла(Знач ИмяФайла, КоличествоСимволов, ВыводитьСообщение = Ложь) Экспорт
	
	Если СтрДлина(ИмяФайла) > КоличествоСимволов Тогда
		Если ВыводитьСообщение Тогда
			Сообщить("Имя файла """+ИмяФайла+""" обрезано, так как его длина больше "+КоличествоСимволов+" символов", СтатусСообщения.Информация);
		КонецЕсли; 
		РасширениеФайла = РаботаСФайлами.ПолучитьРасширениеФайла(ИмяФайла);
		СамоИмяФайла = Лев(ИмяФайла, СтрДлина(ИмяФайла)-СтрДлина(РасширениеФайла)-1);
		СамоИмяФайла = Лев(СамоИмяФайла, КоличествоСимволов-СтрДлина(РасширениеФайла)-1);
		ИмяФайла = СамоИмяФайла + "." + РасширениеФайла;
	КонецЕсли;
	
	Возврат ИмяФайла;
	
КонецФункции // рфОбрезатьИмяФайла()

// Добавляет переданные файлы во вложение
// Параметры
//  ТаблицаВложенныхФайлов         - ТаблицаЗначений - таблица значений документа "Электронное письмо".
//  ИмяФайла                       - Строка - полное имя файла-вложения, существующего на диске. 
//  НаименованиеФайла              - Строка - описание файла-вложения
//  УдалятьФайлПослеДобавления     - Булево - признак нужно ли удалить переданный файл после добавления в письмо
//                                   Внимание!! Файл будет удален независимо от того, удалась отправка письма или нет
//  ЗадаватьВопросДляБольшогоФайла - Булево - признак, нужно ли задавать вопрос на добавление файла больше 25 мб
//
Процедура ДобавитьВложениеВПисьмо(ТаблицаВложенныхФайлов, ИмяФайла, НаименованиеФайла = "", УдалятьФайлыПослеДобавления = Ложь) Экспорт
	
	Файл = Новый Файл(ИмяФайла);
	ИмяФайла = РаботаСФайлами.ПолучитьИмяФайлаИзПолногоПути(ИмяФайла);
	
	Если Файл.Размер() > МаксимальныйРазмерФайлаВложения Тогда
		#Если Клиент Тогда 
		Ответ = Вопрос("Размер добавляемого файла """ + ИмяФайла + """
					   |превышает максимальный. Добавить ?", РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет,"Внимание!");
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли; 
		#КонецЕсли
	КонецЕсли; 
	НоваяСтрока = ТаблицаВложенныхФайлов.Добавить();
	НоваяСтрока.ИмяФайла = ОбрезатьИмяФайла(ИмяФайла, 100, Истина);
	НоваяСтрока.Наименование = НаименованиеФайла;
	#Если Клиент Тогда 
	Состояние("Добавляется файл: " + НоваяСтрока.ИмяФайла);
	#КонецЕсли
	НоваяСтрока.Данные = Новый ХранилищеЗначения(Новый ДвоичныеДанные(Файл.ПолноеИмя), Новый СжатиеДанных());
	
	Если УдалятьФайлыПослеДобавления Тогда
		Попытка
			УдалитьФайлы(ИмяФайла);
		Исключение
			Сообщить("Не удалось удалить файл: " +	ИмяФайла);
		КонецПопытки
	КонецЕсли;	

КонецПроцедуры // эпДобавитьВложенияВПисьмо()

// Процедура формирует электронное письмо в службу техподдержки. Расставляет необходимые комментарии,
// получает информацию о системе, о текущем объекте, о системе защиты и т.д. 
//
// Параметры
//  ЭтаФорма - "Форма" - если формирование письма вызвано из меню "Действия", то
//  					 эта переменная содержит текущую форму.
//
//  Ссылка - "ЛюбаяСсылка" - если формирование письма вызвано в форме списка, то данная
//							 переменная содержит ссылку на текщий объект.
//
// Возвращаемое значение:
//   НЕТ
// 
Процедура НаписатьПисьмоВСлужбуТехПоддержки(ЭтаФорма=Неопределено, Ссылка=Неопределено) Экспорт 
	
	НовоеПисьмо = Документы.ЭлектронноеПисьмо.СоздатьДокумент();
	СписокУчетныхЗаписей = НовоеПисьмо.мСтруктураДоступа.Запись.Скопировать();
	Если СписокУчетныхЗаписей.Количество() > 0 Тогда
		НовоеПисьмо.УчетнаяЗапись = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ОсновнаяУчетнаяЗапись");
		Если НЕ ЗначениеЗаполнено(НовоеПисьмо.УчетнаяЗапись) Тогда
			УчетнаяЗапись = СписокУчетныхЗаписей[0].Значение;
		КонецЕсли;
	Иначе
		Предупреждение("У вас нет прав создавать и отправлять письма ни с одной учетной записи.");
		Возврат
	КонецЕсли;	

	СтрокаПолучателя = НовоеПисьмо.КомуТЧ.Добавить();
	СтрокаПолучателя.Представление = "Служба техподдержки ""Агент Плюс""";
	
	СтрокаПолучателя.АдресЭлектроннойПочты = АдресТехПоддержки;
	НовоеПисьмо.Кому = АдресТехПоддержки;
	
	НовоеПисьмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.Текст;
	
	Текст = "/ЗДЕСЬ НЕОБХОДИМО ПОДРОБНО ОПИСАТЬ СУТЬ ПРОБЛЕМЫ ИЛИ ПРЕДЛОЖЕНИЯ/";	
	
	// Оставляем место для текста пользователя
	Для Сч=0 По 5 Цикл
		Текст = Текст + Символы.ПС;	
	КонецЦикла;
	
	ФормаНовогоПисьма = НовоеПисьмо.ПолучитьФорму();
	
	Ответ = Вопрос("Добавить в письмо информацию о системе?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Текст = Текст + "/БЛОК ИНФОРМАЦИИ О СИСТЕМЕ, СОБРАННОЙ АВТОМАТИЧЕСКИ.
		|УБЕДИТЕЛЬНО ПРОСИМ НЕ УДАЛЯТЬ СОБРАННЫЕ СИСТЕМОЙ СВЕДЕНИЯ, ЗА ИСКЛЮЧЕНИЕМ ТЕХ,
		|КОТОРЫЕ ВЫ СОЧТЕТЕ СЕКРЕТНЫМИ
		|КОМПАНИЯ РАЗРАБОТЧИК ОБЯЗУЕТСЯ СОХРАНЯТЬ КОНФИДЕНЦИАЛЬНОСТЬ ВСЕЙ ПОЛУЧЕННОЙ ИНФОРМАЦИИ/";
		
		// Получаем информацию о программе стандартными методами 1С
		Текст = Текст + Символы.ПС;
		Текст = Текст + Символы.ПС;	
		Текст = Текст + "ИНФОРМАЦИЯ О ПРОГРАММЕ:";
		Текст = Текст + Символы.ПС;	
		Текст = Текст + ПолучитьИнформациюОПрограмме();
		//      		
				
		// 5. Теперь журнал регистрации за сутки выгрузим.
		Состояние("Выгрузка журнала регистрации ...");
		ИмяФайла = ВыгрузитьЖурналРегистрацииВПисьмо();
		Если ИмяФайла<>"" Тогда
			ДобавитьВложениеВПисьмо(ФормаНовогоПисьма.ВложенияПисьмаТЗ, ИмяФайла, "Выгрузка из журнала регистрации за ближайшие сутки",Истина); // Прикрепляем файл к письму и удаляем его.	
		КонецЕсли;
		
	КонецЕсли;	
	
	НовоеПисьмо.ТекстПисьма = Текст;
	НовоеПисьмо.Тема 		= "Обращение в техническую поддержку компании ""Агент Плюс""";
	ФормаНовогоПисьма.Открыть();  		
	
КонецПроцедуры // элНаписатьПисьмоВСлужбуТехПоддержки()
                
// Функция получает необходимую информацию о программе.
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   Строка - информация о программе.
//
Функция ПолучитьИнформациюОПрограмме()
	Текст = "";
	Текст = Текст + "Конфигурация: " + текНаименованиеКонфигурации  + " (" + Метаданные.Синоним + ")";	
	Текст = Текст + Символы.ПС;	
	Текст = Текст + "Поставщик: " + Метаданные.Поставщик;
	Текст = Текст + Символы.ПС;	
	Текст = Текст + "Версия: " + гВерсияКонфигурации;	
	Текст = Текст + Символы.ПС;
	
	Текст = Текст + "Версия модуля обмена данными: " + ВерсияМодуля;	
	Текст = Текст + Символы.ПС;
	
	Текст = Текст + "Пользователь: " + ИмяПользователя();	 	
	Текст = Текст + Символы.ПС;	
	Текст = Текст + "Полное имя пользователя: " + ПолноеИмяПользователя();
	Текст = Текст + Символы.ПС;	
	Текст = Текст + "Имя компьютера: " + ИмяКомпьютера();
	Текст = Текст + Символы.ПС;	
	Текст = Текст + "Каталог программы: " + КаталогПрограммы();
	Текст = Текст + Символы.ПС;	
	Текст = Текст + "Каталог временных файлов: " + КаталогВременныхФайлов();    
	Текст = Текст + Символы.ПС;	
	Текст = Текст + "Код локализации: " + КодЛокализации();
	Текст = Текст + Символы.ПС;	
	Текст = Текст + "Строка соединения ИБ: " + СтрокаСоединенияИнформационнойБазы(); 
	
	Возврат Текст;
КонецФункции // элПолучитьИнформациюОПрограмме()

Функция ВыгрузитьЖурналРегистрацииВПисьмо(Параметры=Неопределено)
	
	ИмяВыходногоФайла = КаталогВременныхФайлов() + "ЖурналРегистрации.xml";
	
	Фильтр = Новый Структура;
	
	// Попробуем получить фильтр
	Если ТипЗнч(Параметры) = Тип("Структура") Тогда	
		Если Параметры.Свойство("Фильтр") Тогда
			Фильтр = Параметры.Фильтр;
		КонецЕсли;      		
	КонецЕсли;
	
	// Теперь установим некоторые условия фильтра принудительно, если они не были заданы.
	Если Не Фильтр.Свойство("ДатаНачала") Тогда
		Фильтр.Вставить("ДатаНачала", НачалоДня(ТекущаяДата()));
	КонецЕсли;
	
	Если Не Фильтр.Свойство("ДатаОкончания") Тогда
		Фильтр.Вставить("ДатаОкончания", ТекущаяДата());			
	КонецЕсли;
	
	Если Не Фильтр.Свойство("Уровень") Тогда
		мсвУровней = Новый Массив;
		мсвУровней.Добавить(УровеньЖурналаРегистрации.Ошибка);
		мсвУровней.Добавить(УровеньЖурналаРегистрации.Предупреждение);
		Фильтр.Вставить("Уровень", мсвУровней);			
	КонецЕсли;
	
	Если Не Фильтр.Свойство("Пользователь") Тогда
		Фильтр.Вставить("Пользователь", ПользователиИнформационнойБазы.ТекущийПользователь());			
	КонецЕсли;   	
	
	Попытка
		ВыгрузитьЖурналРегистрации(ИмяВыходногоФайла, Фильтр);
		Возврат ИмяВыходногоФайла;
	Исключение
		Сообщить("Ошибка при выгрузке журнала регистрации: " + ОписаниеОшибки());
		Возврат "";
	КонецПопытки;
	
КонецФункции // ВыгрузитьЖурналРегистрацииВПисьмо()

// sk_190116 Функция не используется
// Транслит()
//
Функция Транслит_OLD(Знач Текст) Экспорт
    Текст = СтрЗаменить(Текст, "а","a");
    Текст = СтрЗаменить(Текст, "б","b");
    Текст = СтрЗаменить(Текст, "в","v");
    Текст = СтрЗаменить(Текст, "г","g");
    Текст = СтрЗаменить(Текст, "д","d");
    Текст = СтрЗаменить(Текст, "е","e");
    Текст = СтрЗаменить(Текст, "ё","e");
    Текст = СтрЗаменить(Текст, "ж","zh");
    Текст = СтрЗаменить(Текст, "з","z");
    Текст = СтрЗаменить(Текст, "и","i");
    Текст = СтрЗаменить(Текст, "к","k");
    Текст = СтрЗаменить(Текст, "л","l");
    Текст = СтрЗаменить(Текст, "м","m");
    Текст = СтрЗаменить(Текст, "н","n");
    Текст = СтрЗаменить(Текст, "о","o");
    Текст = СтрЗаменить(Текст, "п","p");
    Текст = СтрЗаменить(Текст, "р","r");
    Текст = СтрЗаменить(Текст, "с","s");
    Текст = СтрЗаменить(Текст, "т","t");
    Текст = СтрЗаменить(Текст, "у","u");
    Текст = СтрЗаменить(Текст, "ф","f");
    Текст = СтрЗаменить(Текст, "х","h");
    Текст = СтрЗаменить(Текст, "ч","ch");
    Текст = СтрЗаменить(Текст, "ш","sh");
    Текст = СтрЗаменить(Текст, "щ","sch");
    Текст = СтрЗаменить(Текст, "ъ","");
    Текст = СтрЗаменить(Текст, "ь","'");
    Текст = СтрЗаменить(Текст, "э","e");
    Текст = СтрЗаменить(Текст, "ю","yu");
    Текст = СтрЗаменить(Текст, "й","i");
    Текст = СтрЗаменить(Текст, "ц","c");
    Текст = СтрЗаменить(Текст, "я","ya");
    Текст = СтрЗаменить(Текст, "ы","i");
    Текст = СтрЗаменить(Текст, "А","A");
    Текст = СтрЗаменить(Текст, "Б","B");
    Текст = СтрЗаменить(Текст, "В","V");
    Текст = СтрЗаменить(Текст, "Г","G");
    Текст = СтрЗаменить(Текст, "Д","D");
    Текст = СтрЗаменить(Текст, "Е","E");
    Текст = СтрЗаменить(Текст, "Ё","E");
    Текст = СтрЗаменить(Текст, "Ж","Zh");
    Текст = СтрЗаменить(Текст, "З","Z");
    Текст = СтрЗаменить(Текст, "И","I");
    Текст = СтрЗаменить(Текст, "К","K");
    Текст = СтрЗаменить(Текст, "Л","L");
    Текст = СтрЗаменить(Текст, "М","M");
    Текст = СтрЗаменить(Текст, "Н","N");
    Текст = СтрЗаменить(Текст, "О","O");
    Текст = СтрЗаменить(Текст, "П","P");
    Текст = СтрЗаменить(Текст, "Р","R");
    Текст = СтрЗаменить(Текст, "С","S");
    Текст = СтрЗаменить(Текст, "Т","T");
    Текст = СтрЗаменить(Текст, "У","U");
    Текст = СтрЗаменить(Текст, "Ф","F");
    Текст = СтрЗаменить(Текст, "Х","H");
    Текст = СтрЗаменить(Текст, "Ч","Ch");
    Текст = СтрЗаменить(Текст, "Ш","Sh");
    Текст = СтрЗаменить(Текст, "Щ","Sch");
    Текст = СтрЗаменить(Текст, "Ъ","");
    Текст = СтрЗаменить(Текст, "Ь","");
    Текст = СтрЗаменить(Текст, "Ы","I");
    Текст = СтрЗаменить(Текст, "Ц","C");
    Текст = СтрЗаменить(Текст, "Э","E");
    Текст = СтрЗаменить(Текст, "Ю","Yu");
    Текст = СтрЗаменить(Текст, "Я","Ya");
    Текст = СтрЗаменить(Текст, "Й","I"); 
    Возврат Текст;
КонецФункции

//Альфия 15.06.2017
Функция ИнформацияИз2IP () Экспорт
	//Создаем HTTP-подключение
	ssl = Новый ЗащищенноеСоединениеOpenSSL;
	ЗапросHTTP = Новый HTTPСоединение("2ip.ru",,,,,,ssl);
	// Создаем временный файл для записи HTML-текста веб-страницы
	ВременныйФайл = ПолучитьИмяВременногоФайла();
	// Выполняем запрос и записываем текст страницы во временный файл
	ЗапросHTTP.Получить("/",ВременныйФайл);
	// Считываем содержимое временного файла
	ТекДок = Новый ТекстовыйДокумент;
	ТекДок.Прочитать(ВременныйФайл,КодировкаТекста.UTF8);
	Для Сч=1 По ТекДок.КоличествоСтрок() Цикл
		Стр=ТекДок.ПолучитьСтроку(Сч);
		
		// Находим строку с IP-адресом
		СтрПоиска1 =  "<big id=""d_clip_button"">";
		СтрПоиска2 =  "</big>";
		Поз1 = Найти(Стр,СтрПоиска1); 
		Если Поз1 <> 0 Тогда
			Поз1 = Поз1 + СтрДлина(СтрПоиска1);
			Поз2 = Найти(Стр,СтрПоиска2);
			IP = Сред(Стр,Поз1,Поз2-Поз1);
		КонецЕсли;
		
		// Находим строку с Местоположением
		СтрПоиска1 = "href=""/geoip/""/>";
		СтрПоиска2 = "</a>";
		Поз1 = Найти(Стр,СтрПоиска1);
		Если Поз1 <> 0 Тогда
			Поз1 = Поз1 + СтрДлина(СтрПоиска1);
			Поз2 = Найти(Стр,СтрПоиска2);
			СтранаАдрес = Сред(Стр,Поз1,Поз2-Поз1);
			УдалитьФайлы(ВременныйФайл);
			Возврат СтранаАдрес;
			//Страна = Лев(СтранаАдрес,Найти(СтранаАдрес,",")-1);
			//Город = Прав(СтранаАдрес,СтрДлина(СтранаАдрес)-Найти(СтранаАдрес," "))
		КонецЕсли;
		
	КонецЦикла;
	// Удаляем временный файл
	УдалитьФайлы(ВременныйФайл);
	Возврат "";
КонецФункции

// sk_190610 Процедура исключена в рамках (MOD-586)
// СозданиеНастроекСтатистикаОбратнаяСвязь()
//
Процедура СозданиеНастроекСтатистикаОбратнаяСвязь_OLD(Орг,ФИО,Номер,Флаг=Ложь,ДатаВыгрузки,Почта,Статус)
	Данные = Новый Соответствие;
	Данные.Вставить("Организация",Орг);
	Данные.Вставить("ФИО",ФИО);
	Данные.Вставить("Телефон",Номер);	
	Данные.Вставить("БольшеНеПоказывать",Флаг);
	Данные.Вставить("Почта",Почта);
	Данные.Вставить("ДатаВыгрузки",ДатаВыгрузки);
	Данные.Вставить("ФлагОтправлятьСтатистику",Статус);
	ХранилищеСистемныхНастроек.Сохранить("Статистика","Данные",Данные,,Неопределено);	
КонецПроцедуры

// sk_190610 Процедура исключена в рамках (MOD-586)
// ПроверкаСозданияНастройкиСтатистикаОбратнаяСвязь()
//
Функция ПроверкаСозданияНастройкиСтатистикаОбратнаяСвязь_OLD() Экспорт
	СтатистикаД = ХранилищеСистемныхНастроек.Загрузить("Статистика","Данные",,Неопределено);			
	Если СтатистикаД = Неопределено тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
КонецФункции
// sk_190610 Процедура исключена в рамках (MOD-586)
// ПолучитьНастройкиСтатистикаОбратнаяСвязь()
//
Функция ПолучитьНастройкиСтатистикаОбратнаяСвязь_OLD() Экспорт
	Возврат ХранилищеСистемныхНастроек.Загрузить("Статистика","Данные",,Неопределено);	
КонецФункции

// sk_190610 Процедура исключена в рамках (MOD-586)
// ЗаписатьНастройкиСтатистикаОбратнаяСвязь()
//
Функция ЗаписатьНастройкиСтатистикаОбратнаяСвязь_OLD(Организация, ФИО, Номер, Флаг, Дата,Почта,Статус) Экспорт
	Попытка
		Данные = Новый Соответствие;
		Данные.Вставить("Организация",Организация);
		Данные.Вставить("ФИО",ФИО);
		Данные.Вставить("Телефон",Номер);	
		Данные.Вставить("БольшеНеПоказывать",Флаг);
		Данные.Вставить("Почта",Почта);	
		Данные.Вставить("ДатаВыгрузки",Дата);
		Данные.Вставить("ФлагОтправлятьСтатистику",Статус);
		ХранилищеСистемныхНастроек.Сохранить("Статистика","Данные",Данные,,Неопределено);
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
КонецФункции

// sk_190116 Процедура не используется
// ОтправитьСтатистическуюИнформациюНаСервер()
//
Процедура ОтправитьСтатистическуюИнформациюНаСервер_OLD() Экспорт
	//СертификатКлиентаWindows = Новый СертификатКлиентаWindows(СпособВыбораСертификатаWindows.Выбирать);
	//СертификатыУдостоверяющихЦентровWindows = Новый СертификатыУдостоверяющихЦентровWindows();
	//ssl = Новый ЗащищенноеСоединениеOpenSSL(СертификатКлиентаWindows, СертификатыУдостоверяющихЦентровWindows);
	СтатистикаД = ПолучитьНастройкиСтатистикаОбратнаяСвязь_OLD();
	ДатаВ =   СтатистикаД.Получить("ДатаВыгрузки");
	Если ДатаВ <> Формат(ТекущаяДата(),"ДФ = дд.ММ.гггг") или ДатаВ = Дата('00010101') тогда
		
		Компания = СтатистикаД.Получить("Организация");
		ИмяСотрудника = СтатистикаД.Получить("ФИО");
		Телефон = СтатистикаД.Получить("Телефон");
		Флаг = СтатистикаД.Получить("БольшеНеПоказывать");
		Почта = СтатистикаД.Получить("Почта");
		ssl = Новый ЗащищенноеСоединениеOpenSSL;
		Адрес = "vnedrenium.com";
		Попытка
			Соединение = Новый HTTPСоединение(Адрес,,,,,,ssl);
		Исключение
			Возврат;
		КонецПопытки;
		
		СтранаГород = ИнформацияИз2IP();
		
		//Выполняется файл write.php
		ФлагОтправлятьСтатистику = СтатистикаД.Получить("ФлагОтправлятьСтатистику");
		Если ФлагОтправлятьСтатистику тогда
			РесурсНаСервере = "write.php?base=" + НаименованиеКонфигурации + "&ip=" + СтранаГород + "&name="+ ИмяСотрудника + "&company=" + Компания + "&phone=" + Телефон;			
		Иначе
			РесурсНаСервере = "write.php?base=" + НаименованиеКонфигурации + "&ip=" + СтранаГород + "&name="+ "" + "&company=" + "" + "&phone=" + "";		
		КонецЕсли;
		
		HTTPЗапрос = Новый HTTPЗапрос(РесурсНаСервере);
		HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
		
		//HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
		Попытка 
			РезультатЗапроса = Соединение.Получить(HTTPЗапрос);// Вставить содержимое обработчика.
			Ответ = РезультатЗапроса.ПолучитьТелоКакСтроку();
		Исключение	
		КонецПопытки;
		СозданиеНастроекСтатистикаОбратнаяСвязь_OLD(Компания,ИмяСотрудника,Телефон,Флаг,Формат(ТекущаяДата(),"ДФ = дд.ММ.гггг"),Почта,ФлагОтправлятьСтатистику);
	КонецЕсли;

КонецПроцедуры

//Альфия 16.06.2017

#КонецЕсли

//////////////////////////////////////////////////////////
////////////////////////////////////////////////////////// 
//При изменении править также и синоним обработки!

//ВерсияМодуля = "2.0.2.3";		//от 2018_04_16 
//ВерсияМодуля = "2.0.4.4";		//от 2018_04_17 //Для конфигурации комплексной автоматизации добавлено заполнение реквизитов налоговый учет и бух учет при загрузке Заказа
//ВерсияМодуля = "2.0.4.5";		//от 2018_04_20 //Пересчет цены единицы измерения указанной в УТ в цену для базовой единицы (делим на коэффициент цены), Выгрузка константы ОтображатьЕдИзмОстатков
//ВерсияМодуля = "2.0.4.6";		//от 2018_04_24 //Выгрузка константы "ИзменятьРежимПодбора", Изменение режима выгрузки ЕдиницыХранения остатков номенклатуры, Выгрузка Реквизита "А050" для номенклатуры
//ВерсияМодуля = "2.0.4.7";		//от 2018_05_03 //Для КА - обработка исключения установки валюты в документе ПКО - не тестировалось
//ВерсияМодуля = "2.0.4.8";		//от 2018_07_20 //Выгрузка изображений
//ВерсияМодуля = "2.0.5.0";		//vd_180823 Торговля с колес 
//ВерсияМодуля = "2.0.5.1";		//vd_180827 Торговля с колес 
//ВерсияМодуля = "2.0.5.2";		//vd_180828 Торговля с колес
//ВерсияМодуля = "2.0.5.3";		//vd_180829 Торговля с колес
//ВерсияМодуля = "2.0.5.4";		//vd_180829 ОшибкаЧтенияITEM
//ВерсияМодуля = "2.0.5.5";		//vd_180903 Исправление загрузки ТЧ Реализации для Евроснек
//ВерсияМодуля = "2.0.5.6";		//vd_180904 Исправление чтения ТЧ для всех док и исправление загрузок для КА евроснека 
//ВерсияМодуля = "2.0.5.7";		//vd_180904 Авто заполнения рекизитов для проведения всех типов документов для КА евроснека 
//ВерсияМодуля = "2.0.5.8";		//vd_180913 Заполнение реквизитов ТЧ ПКО И РКО РасшифровкаПлатежа.Сделка, РасшифровкаПлатежа.ДокументРасчетовСКонтрагентом и РасшифровкаПлатежа.ПризнакСпособаРасчета
//ВерсияМодуля = "2.0.5.9";		//vd_180914 Исправлена логика загрузки данных, связанная с заполнением полей Агент, устройство, ситуация когда заполнено только одно поле устройства, ситуация когда не заполнены оба поля.
//ВерсияМодуля = "2.0.5.10";	//vd_180917 При выгрузке всех агентов данные берутся не из ТабАгентыМУ а из ТабМобильныеУстройства.
//ВерсияМодуля = "2.0.5.11";	//vd_180917 При загрузке всех агентов данные берутся не из ТабАгентыМУ а из ТабМобильныеУстройства.
//ВерсияМодуля = "2.0.5.12";	//vd_180918 Запуск и тестирование на УТ 10. Добавлено заполнение реквизитов ТЧ Товары: КлючСтроки КлючСвязи ЗаказПокупателя при загрузке для всех типов документов Для УС КА и УТ
//ВерсияМодуля = "2.0.5.13";	// sk_181012 Исправлена ошибка при загрузке документа "Заказ" через автообмен (MOD-60). Исправлено ошибочно добавление строк в ТЧ в уже загруженный документ "Заказ" при повторной загрузке (MOD-66). При формировании документа "Реализация товаров и услуг" на основании "Заказ покупателя" при загрузке данных с установленным значением в настройке модуля обмена "Создавать на основании заявки реализацию (метод "Ввод на основании")" исключено использование стандартного метода "Заполнить", вместо этого используется типовая процедура заполнения всех полей документа на основании "Заказ покупателя" (MOD-67). Исправлена ошибка при выполнении команды "Сформировать" в отчете "Выполнение плана агентами" (MOD-69). Исправлена ошибка при при загрузке документа "Поступление" (MOD-63). Исправлена ошибка при загрузке документа "Перемещение" (MOD-62). Исправлена ошибка при загрузке документа "РеализацияТоваровУслуг" (MOD-64).  Исправлена ошибка при загрузке документа "ПКО" (MOD-65). Исправлена ошибка при открытии отчета "Сведения о загруженых документах" (MOD-68). 
//ВерсияМодуля = "2.0.5.14";    // sk_181016 Исправление выгрузки подтверждений загруженных документов "Посещений" (MOD-104) 
//ВерсияМодуля = "2.0.5.15";    // sk_181114 Исправлена ошибка при запуске внешней обработки в УТ 10.3.34.2. Изменена логика заполнения ПризнакСпособаРасчета, а также исправлены выявленные ошибки (MOD-145) 
//ВерсияМодуля = "2.0.5.16";    // sk_181120 Выполнено включение внетиражного отчета "Контроль передвижений агентов" (MOD-109) 
//ВерсияМодуля = "2.0.5.17";    // sk_190125 Исключено использование внешней компоненты APPlus.dll (MOD-224). Предусмотрена обработка трека при фоновой передаче (MOD-207). В отчете "Контроль передвижений агентов" добавлена возможность отображения документов на карте.
//ВерсияМодуля = "2.0.5.18";	// sk_190131 Отменена конвертация выгружаемых из ЦБД изображений в PNG, если формат является допустимым для МУ (MOD-238). Исправлена загрузка документов на конфигурации КА для организаций применяющих УСН (MOD-251)  
//ВерсияМодуля = "2.0.5.19";    // sk_190215 Исправлена ошибка при загрузке документов на версии УТ 10.3.35.2 (MOD-259). Исправлена ошибка при запуске обработки на версии УТ Казахстан 2.2.18.5. Исправлены выявленные ошибки при загрузке документов на на версии УТ Казахстан 2.2.18.5.
//ВерсияМодуля = "2.0.5.20";    // sk_190306 Исправлены выявленные ошибки при работе с документом "План посещений" и выгрузке документа "Маршрут" (MOD-252).
//ВерсияМодуля = "2.0.5.21";    // sk_190313 Исправлена ошибка при превышении таймаута выполнения FTP операций (MOD-336).
//ВерсияМодуля = "2.0.5.23";    // sk_190516 Добавлена настройка "Режим загрузки заказов" (MOD-520).
//ВерсияМодуля = "2.0.5.24";    // sk_190604 Выполнена доработка модуля под типовую конфигурацию УТП для Казахстана 2.0 (MOD-544).
//ВерсияМодуля = "2.0.5.25";    // sk_190611 Добавлена справка (онлайн) (MOD-585). Исправлена выгрузка документа "Долг" (MOD-547).
//ВерсияМодуля = "2.0.6.1";		// sk_190628 Добавлен новый тип виртуальных документов "Мерчендайзинг", реализована загрузка и выгрузка подтверждений (MOD-466). Добавлен модуль для работы с виртуальными объектами.
ВерсияМодуля = "2.0.6.2";       // sk_190704 Исправлена ошибка при запуске обработки на платформе 8.2.* (MOD-642) 

// Модуль поддерживает работу с Агент Плюс: МТ версий не старше 1.0.11

ТипыЛогов = Новый Структура;
ТипыЛогов.Вставить("Обмен", 1);
ТипыЛогов.Вставить("Обработка", 2);

ОчиститьСообщения();

ИнициализироватьПеременные();

#Если Клиент Тогда
	ПользовательСеанса = ПараметрыСеанса.ТекущийПользователь;	
#ИначеЕсли Сервер Тогда
	ПользовательСеанса = НастройкиОбработки["ПользовательФоновогоРежима"];	
#КонецЕсли

КомпонентаЗагружена = Ложь;

КоличествоПопыток   = 1; //vd_180904 КоличествоПопыток = 5;   
ПаузаМеждуПопытками = 10; 

МассивСсылок = Новый Массив;
Для Каждого ТекСправочник Из Метаданные.Справочники Цикл
	МассивСсылок.Добавить(Тип("СправочникСсылка." + ТекСправочник.Имя));
КонецЦикла;

Для Каждого ТекДокумент Из Метаданные.Документы Цикл
	МассивСсылок.Добавить(Тип("ДокументСсылка." + ТекДокумент.Имя));
КонецЦикла;

КСТ = Новый КвалификаторыСтроки(50);
КДД = Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя);
КСС = Новый КвалификаторыСтроки(0);
КСП = Новый ОписаниеТипов("СправочникСсылка.Пользователи");
КСА = Новый ОписаниеТипов("СправочникСсылка.Пользователи");
КМС = Новый ОписаниеТипов(МассивСсылок);

ДатаЛога = НачалоДня(ТекущаяДата());
стрДатаЛога = Формат(ДатаЛога, "ДФ=yyyy.MM.dd");

//инициализация лога обработки
ЗаписьРег = РегистрыСведений.СохраненныеНастройки.СоздатьМенеджерЗаписи();
ЗаписьРег.Пользователь 		    = ПользовательСеанса;
ЗаписьРег.ИмяОбъекта  		    = Имена["Обработка"] + ": " + Имена["ЛогОбработки"];
ЗаписьРег.НаименованиеНастройки = стрДатаЛога;
ЗаписьРег.Прочитать();

Если ЗаписьРег.Выбран() Тогда
	ТабЛогОбработки = ЗаписьРег.СохраненнаяНастройка.Получить();
Иначе 			
	ТабЛогОбработки = Новый ТаблицаЗначений;
	ТабЛогОбработки.Колонки.Добавить("ТипСобытия", Новый ОписаниеТипов("Строка", , , , КСТ, ), "Тип события");
	ТабЛогОбработки.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата", , , КДД, , ));
	ТабЛогОбработки.Колонки.Добавить("Событие", Новый ОписаниеТипов("Строка", , , , КСС, ));
	ТабЛогОбработки.Колонки.Добавить("Пользователь", Новый ОписаниеТипов(КСП, , , , , ));
	ТабЛогОбработки.Колонки.Добавить("СсылкаНаОбъект", Новый ОписаниеТипов(КМС, , , , , ), "Ссылка на объект");
КонецЕсли;  

//инициализация лога обмена
ЗаписьРег = РегистрыСведений.СохраненныеНастройки.СоздатьМенеджерЗаписи();
ЗаписьРег.Пользователь 		    = ПользовательСеанса;
ЗаписьРег.ИмяОбъекта  		    = Имена["Обработка"] + ": " + Имена["ЛогОбмена"];
ЗаписьРег.НаименованиеНастройки = стрДатаЛога;
ЗаписьРег.Прочитать();

Если ЗаписьРег.Выбран() Тогда
	ТабЛогОбмена = ЗаписьРег.СохраненнаяНастройка.Получить();
Иначе 	
	МассивСсылок = Новый Массив;
	Для Каждого ТекСправочник Из Метаданные.Справочники Цикл
		МассивСсылок.Добавить(Тип("СправочникСсылка." + ТекСправочник.Имя));
	КонецЦикла;
	
	Для Каждого ТекДокумент Из Метаданные.Документы Цикл
		МассивСсылок.Добавить(Тип("ДокументСсылка." + ТекДокумент.Имя));
	КонецЦикла;
		
	ТабЛогОбмена = Новый ТаблицаЗначений;
	ТабЛогОбмена.Колонки.Добавить("ТипСобытия", Новый ОписаниеТипов("Строка", , , , КСТ, ), "Тип события");
	ТабЛогОбмена.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата", , , КДД, , ));
	ТабЛогОбмена.Колонки.Добавить("Событие", Новый ОписаниеТипов("Строка", , , , КСС, ));
	ТабЛогОбмена.Колонки.Добавить("Пользователь", Новый ОписаниеТипов(КСП, , , , , ));
	ТабЛогОбмена.Колонки.Добавить("Агент", Новый ОписаниеТипов(КСА, , , , , ));
	ТабЛогОбмена.Колонки.Добавить("СсылкаНаОбъект", Новый ОписаниеТипов(КМС, , , , , ), "Ссылка на объект");
КонецЕсли;

ОповеститьОСобытии("ru='Запуск обработки'", ТипыЛогов["Обмен"], СтатусСообщения.Обычное, ПараметрыСеанса.ТекущийПользователь);

// ЗагрузитьКомпонентуAPPlus_OLD(); sk_190116 Исключено использование внешней компоненты APPlus.dll (MOD-224)  
ПрочитатьНастройкиОбработки();
ПрочитатьНастройкиПользователей();

ПолучитьСписокКатегорииДокументов();
ПолучитьСписокСтатусыКонтрагентов();
ПолучитьСписокДокументовМаршрутов(Истина);

ПолучитьСсылкуСвойствоОбъектаАгентПлюс("GPS");
ВыполнитьПлановыеОперации();

МаксимальныйРазмерФайлаВложения = 4194304;
АдресТехПоддержки = "support@agentplus.ru";
текНаименованиеКонфигурации = Метаданные.Имя;
гВерсияКонфигурации = Метаданные.Версия; // sk_181010 Получаем версию конфигурации

//(( sk_190604 Изменено условие в рамках (MOD-575)
//Если текНаименованиеКонфигурации = "УправлениеПроизводственнымПредприятием" 
//	ИЛИ текНаименованиеКонфигурации = "КомплекснаяАвтоматизация" 
//	ИЛИ текНаименованиеКонфигурации = "KT2000_Alcohol_MnfcSP" Тогда
//	НаименованиеКонфигурации = "УправлениеПроизводственнымПредприятием";
//ИначеЕсли текНаименованиеКонфигурации = "УправлениеТорговымПредприятиемДляКазахстана" Тогда
//	НаименованиеКонфигурации = "УправлениеТорговымПредприятиемДляКазахстана";
//ИначеЕсли текНаименованиеКонфигурации = "УправлениеТорговлейДляКазахстана" Тогда
//	НаименованиеКонфигурации = "УправлениеТорговымПредприятиемДляКазахстана";
//Иначе
//	НаименованиеКонфигурации = текНаименованиеКонфигурации;
//КонецЕсли;

Если текНаименованиеКонфигурации = "УправлениеПроизводственнымПредприятием" 
	ИЛИ текНаименованиеКонфигурации = "КомплекснаяАвтоматизация" 
	ИЛИ текНаименованиеКонфигурации = "KT2000_Alcohol_MnfcSP" Тогда
	НаименованиеКонфигурации = "УправлениеПроизводственнымПредприятием";
ИначеЕсли текНаименованиеКонфигурации = "УправлениеТорговымПредприятиемДляКазахстана" ИЛИ текНаименованиеКонфигурации = "УправлениеТорговлейДляКазахстана" Тогда
	НаименованиеКонфигурации = "УправлениеТорговымПредприятиемДляКазахстана";
Иначе
	НаименованиеКонфигурации = текНаименованиеКонфигурации;
КонецЕсли;
//)) sk_190604

	